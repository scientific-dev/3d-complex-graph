
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign$1(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign$1($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text$2(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text$2(' ');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }
    class HtmlTag {
        constructor() {
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                this.e = element(target.nodeName);
                this.t = target;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.3' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    function _extends$1() {
      _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };
      return _extends$1.apply(this, arguments);
    }

    var DEFAULT_CONFIG = {
      // minimum relative difference between two compared values,
      // used by all comparison functions
      epsilon: 1e-12,
      // type of default matrix output. Choose 'matrix' (default) or 'array'
      matrix: 'Matrix',
      // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
      number: 'number',
      // number of significant digits in BigNumbers
      precision: 64,
      // predictable output type of functions. When true, output type depends only
      // on the input types. When false (default), output type can vary depending
      // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
      // predictable is false, and returns `NaN` when true.
      predictable: false,
      // random seed for seeded pseudo random number generation
      // null = randomly seed
      randomSeed: null
    };

    // type checks for all known types
    //
    // note that:
    //
    // - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
    //   instanceof cannot be used because that would not allow to pass data from
    //   one instance of math.js to another since each has it's own instance of Unit.
    // - check the `isUnit` property via the constructor, so there will be no
    //   matches for "fake" instances like plain objects with a property `isUnit`.
    //   That is important for security reasons.
    // - It must not be possible to override the type checks used internally,
    //   for security reasons, so these functions are not exposed in the expression
    //   parser.
    function isNumber(x) {
      return typeof x === 'number';
    }
    function isBigNumber(x) {
      if (!x || typeof x !== 'object' || typeof x.constructor !== 'function') {
        return false;
      }

      if (x.isBigNumber === true && typeof x.constructor.prototype === 'object' && x.constructor.prototype.isBigNumber === true) {
        return true;
      }

      if (typeof x.constructor.isDecimal === 'function' && x.constructor.isDecimal(x) === true) {
        return true;
      }

      return false;
    }
    function isComplex(x) {
      return x && typeof x === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
    }
    function isFraction(x) {
      return x && typeof x === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
    }
    function isUnit(x) {
      return x && x.constructor.prototype.isUnit === true || false;
    }
    function isString(x) {
      return typeof x === 'string';
    }
    var isArray = Array.isArray;
    function isMatrix(x) {
      return x && x.constructor.prototype.isMatrix === true || false;
    }
    /**
     * Test whether a value is a collection: an Array or Matrix
     * @param {*} x
     * @returns {boolean} isCollection
     */

    function isCollection(x) {
      return Array.isArray(x) || isMatrix(x);
    }
    function isDenseMatrix(x) {
      return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
    }
    function isSparseMatrix(x) {
      return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
    }
    function isRange(x) {
      return x && x.constructor.prototype.isRange === true || false;
    }
    function isIndex(x) {
      return x && x.constructor.prototype.isIndex === true || false;
    }
    function isBoolean(x) {
      return typeof x === 'boolean';
    }
    function isResultSet(x) {
      return x && x.constructor.prototype.isResultSet === true || false;
    }
    function isHelp(x) {
      return x && x.constructor.prototype.isHelp === true || false;
    }
    function isFunction(x) {
      return typeof x === 'function';
    }
    function isDate(x) {
      return x instanceof Date;
    }
    function isRegExp(x) {
      return x instanceof RegExp;
    }
    function isObject(x) {
      return !!(x && typeof x === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
    }
    function isNull(x) {
      return x === null;
    }
    function isUndefined(x) {
      return x === undefined;
    }
    function isAccessorNode(x) {
      return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isArrayNode(x) {
      return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isAssignmentNode(x) {
      return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isBlockNode(x) {
      return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isConditionalNode(x) {
      return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isConstantNode(x) {
      return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isFunctionAssignmentNode(x) {
      return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isFunctionNode(x) {
      return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isIndexNode(x) {
      return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isNode(x) {
      return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isObjectNode(x) {
      return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isOperatorNode(x) {
      return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isParenthesisNode(x) {
      return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isRangeNode(x) {
      return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isSymbolNode(x) {
      return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isChain(x) {
      return x && x.constructor.prototype.isChain === true || false;
    }
    function typeOf$1(x) {
      var t = typeof x;

      if (t === 'object') {
        // JavaScript types
        if (x === null) return 'null';
        if (Array.isArray(x)) return 'Array';
        if (x instanceof Date) return 'Date';
        if (x instanceof RegExp) return 'RegExp'; // math.js types

        if (isBigNumber(x)) return 'BigNumber';
        if (isComplex(x)) return 'Complex';
        if (isFraction(x)) return 'Fraction';
        if (isMatrix(x)) return 'Matrix';
        if (isUnit(x)) return 'Unit';
        if (isIndex(x)) return 'Index';
        if (isRange(x)) return 'Range';
        if (isResultSet(x)) return 'ResultSet';
        if (isNode(x)) return x.type;
        if (isChain(x)) return 'Chain';
        if (isHelp(x)) return 'Help';
        return 'Object';
      }

      if (t === 'function') return 'Function';
      return t; // can be 'string', 'number', 'boolean', ...
    }

    /**
     * Clone an object
     *
     *     clone(x)
     *
     * Can clone any primitive type, array, and object.
     * If x has a function clone, this function will be invoked to clone the object.
     *
     * @param {*} x
     * @return {*} clone
     */

    function clone$1(x) {
      var type = typeof x; // immutable primitive types

      if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
        return x;
      } // use clone function of the object when available


      if (typeof x.clone === 'function') {
        return x.clone();
      } // array


      if (Array.isArray(x)) {
        return x.map(function (value) {
          return clone$1(value);
        });
      }

      if (x instanceof Date) return new Date(x.valueOf());
      if (isBigNumber(x)) return x; // bignumbers are immutable

      if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp
      // object

      return mapObject(x, clone$1);
    }
    /**
     * Apply map to all properties of an object
     * @param {Object} object
     * @param {function} callback
     * @return {Object} Returns a copy of the object with mapped properties
     */

    function mapObject(object, callback) {
      var clone = {};

      for (var key in object) {
        if (hasOwnProperty$1(object, key)) {
          clone[key] = callback(object[key]);
        }
      }

      return clone;
    }
    /**
     * Extend object a with the properties of object b
     * @param {Object} a
     * @param {Object} b
     * @return {Object} a
     */

    function extend(a, b) {
      for (var prop in b) {
        if (hasOwnProperty$1(b, prop)) {
          a[prop] = b[prop];
        }
      }

      return a;
    }
    /**
     * Deep test equality of all fields in two pairs of arrays or objects.
     * Compares values and functions strictly (ie. 2 is not the same as '2').
     * @param {Array | Object} a
     * @param {Array | Object} b
     * @returns {boolean}
     */

    function deepStrictEqual(a, b) {
      var prop, i, len;

      if (Array.isArray(a)) {
        if (!Array.isArray(b)) {
          return false;
        }

        if (a.length !== b.length) {
          return false;
        }

        for (i = 0, len = a.length; i < len; i++) {
          if (!deepStrictEqual(a[i], b[i])) {
            return false;
          }
        }

        return true;
      } else if (typeof a === 'function') {
        return a === b;
      } else if (a instanceof Object) {
        if (Array.isArray(b) || !(b instanceof Object)) {
          return false;
        }

        for (prop in a) {
          // noinspection JSUnfilteredForInLoop
          if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {
            return false;
          }
        }

        for (prop in b) {
          // noinspection JSUnfilteredForInLoop
          if (!(prop in a)) {
            return false;
          }
        }

        return true;
      } else {
        return a === b;
      }
    }
    /**
     * Attach a lazy loading property to a constant.
     * The given function `fn` is called once when the property is first requested.
     *
     * @param {Object} object         Object where to add the property
     * @param {string} prop           Property name
     * @param {Function} valueResolver Function returning the property value. Called
     *                                without arguments.
     */

    function lazy(object, prop, valueResolver) {
      var _uninitialized = true;

      var _value;

      Object.defineProperty(object, prop, {
        get: function get() {
          if (_uninitialized) {
            _value = valueResolver();
            _uninitialized = false;
          }

          return _value;
        },
        set: function set(value) {
          _value = value;
          _uninitialized = false;
        },
        configurable: true,
        enumerable: true
      });
    }
    /**
     * A safe hasOwnProperty
     * @param {Object} object
     * @param {string} property
     */

    function hasOwnProperty$1(object, property) {
      return object && Object.hasOwnProperty.call(object, property);
    }
    /**
     * Shallow version of pick, creating an object composed of the picked object properties
     * but not for nested properties
     * @param {Object} object
     * @param {string[]} properties
     * @return {Object}
     */

    function pickShallow(object, properties) {
      var copy = {};

      for (var i = 0; i < properties.length; i++) {
        var key = properties[i];
        var value = object[key];

        if (value !== undefined) {
          copy[key] = value;
        }
      }

      return copy;
    }

    var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix

    var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number

    var config = function config(options) {
      if (options) {
        throw new Error('The global config is readonly. \n' + 'Please create a mathjs instance if you want to change the default configuration. \n' + 'Example:\n' + '\n' + '  import { create, all } from \'mathjs\';\n' + '  const mathjs = create(all);\n' + '  mathjs.config({ number: \'BigNumber\' });\n');
      }

      return Object.freeze(DEFAULT_CONFIG);
    };

    _extends$1(config, DEFAULT_CONFIG, {
      MATRIX_OPTIONS,
      NUMBER_OPTIONS
    });

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    /**
     * typed-function
     *
     * Type checking for JavaScript functions
     *
     * https://github.com/josdejong/typed-function
     */

    var typedFunction = createCommonjsModule(function (module, exports) {

    (function (root, factory) {
      {
        // OldNode. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like OldNode.
        module.exports = factory();
      }
    }(commonjsGlobal, function () {

      function ok () {
        return true;
      }

      function notOk () {
        return false;
      }

      function undef () {
        return undefined;
      }

      /**
       * @typedef {{
       *   params: Param[],
       *   fn: function
       * }} Signature
       *
       * @typedef {{
       *   types: Type[],
       *   restParam: boolean
       * }} Param
       *
       * @typedef {{
       *   name: string,
       *   typeIndex: number,
       *   test: function,
       *   conversion?: ConversionDef,
       *   conversionIndex: number,
       * }} Type
       *
       * @typedef {{
       *   from: string,
       *   to: string,
       *   convert: function (*) : *
       * }} ConversionDef
       *
       * @typedef {{
       *   name: string,
       *   test: function(*) : boolean
       * }} TypeDef
       */

      // create a new instance of typed-function
      function create () {
        // data type tests
        var _types = [
          { name: 'number',    test: function (x) { return typeof x === 'number' } },
          { name: 'string',    test: function (x) { return typeof x === 'string' } },
          { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },
          { name: 'Function',  test: function (x) { return typeof x === 'function'} },
          { name: 'Array',     test: Array.isArray },
          { name: 'Date',      test: function (x) { return x instanceof Date } },
          { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },
          { name: 'Object',    test: function (x) {
            return typeof x === 'object' && x !== null && x.constructor === Object
          }},
          { name: 'null',      test: function (x) { return x === null } },
          { name: 'undefined', test: function (x) { return x === undefined } }
        ];

        var anyType = {
          name: 'any',
          test: ok
        };

        // types which need to be ignored
        var _ignore = [];

        // type conversions
        var _conversions = [];

        // This is a temporary object, will be replaced with a typed function at the end
        var typed = {
          types: _types,
          conversions: _conversions,
          ignore: _ignore
        };

        /**
         * Find the test function for a type
         * @param {String} typeName
         * @return {TypeDef} Returns the type definition when found,
         *                    Throws a TypeError otherwise
         */
        function findTypeByName (typeName) {
          var entry = findInArray(typed.types, function (entry) {
            return entry.name === typeName;
          });

          if (entry) {
            return entry;
          }

          if (typeName === 'any') { // special baked-in case 'any'
            return anyType;
          }

          var hint = findInArray(typed.types, function (entry) {
            return entry.name.toLowerCase() === typeName.toLowerCase();
          });

          throw new TypeError('Unknown type "' + typeName + '"' +
              (hint ? ('. Did you mean "' + hint.name + '"?') : ''));
        }

        /**
         * Find the index of a type definition. Handles special case 'any'
         * @param {TypeDef} type
         * @return {number}
         */
        function findTypeIndex(type) {
          if (type === anyType) {
            return 999;
          }

          return typed.types.indexOf(type);
        }

        /**
         * Find a type that matches a value.
         * @param {*} value
         * @return {string} Returns the name of the first type for which
         *                  the type test matches the value.
         */
        function findTypeName(value) {
          var entry = findInArray(typed.types, function (entry) {
            return entry.test(value);
          });

          if (entry) {
            return entry.name;
          }

          throw new TypeError('Value has unknown type. Value: ' + value);
        }

        /**
         * Find a specific signature from a (composed) typed function, for example:
         *
         *   typed.find(fn, ['number', 'string'])
         *   typed.find(fn, 'number, string')
         *
         * Function find only only works for exact matches.
         *
         * @param {Function} fn                   A typed-function
         * @param {string | string[]} signature   Signature to be found, can be
         *                                        an array or a comma separated string.
         * @return {Function}                     Returns the matching signature, or
         *                                        throws an error when no signature
         *                                        is found.
         */
        function find (fn, signature) {
          if (!fn.signatures) {
            throw new TypeError('Function is no typed-function');
          }

          // normalize input
          var arr;
          if (typeof signature === 'string') {
            arr = signature.split(',');
            for (var i = 0; i < arr.length; i++) {
              arr[i] = arr[i].trim();
            }
          }
          else if (Array.isArray(signature)) {
            arr = signature;
          }
          else {
            throw new TypeError('String array or a comma separated string expected');
          }

          var str = arr.join(',');

          // find an exact match
          var match = fn.signatures[str];
          if (match) {
            return match;
          }

          // TODO: extend find to match non-exact signatures

          throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
        }

        /**
         * Convert a given value to another data type.
         * @param {*} value
         * @param {string} type
         */
        function convert (value, type) {
          var from = findTypeName(value);

          // check conversion is needed
          if (type === from) {
            return value;
          }

          for (var i = 0; i < typed.conversions.length; i++) {
            var conversion = typed.conversions[i];
            if (conversion.from === from && conversion.to === type) {
              return conversion.convert(value);
            }
          }

          throw new Error('Cannot convert from ' + from + ' to ' + type);
        }
        
        /**
         * Stringify parameters in a normalized way
         * @param {Param[]} params
         * @return {string}
         */
        function stringifyParams (params) {
          return params
              .map(function (param) {
                var typeNames = param.types.map(getTypeName);

                return (param.restParam ? '...' : '') + typeNames.join('|');
              })
              .join(',');
        }

        /**
         * Parse a parameter, like "...number | boolean"
         * @param {string} param
         * @param {ConversionDef[]} conversions
         * @return {Param} param
         */
        function parseParam (param, conversions) {
          var restParam = param.indexOf('...') === 0;
          var types = (!restParam)
              ? param
              : (param.length > 3)
                  ? param.slice(3)
                  : 'any';

          var typeNames = types.split('|').map(trim)
              .filter(notEmpty)
              .filter(notIgnore);

          var matchingConversions = filterConversions(conversions, typeNames);

          var exactTypes = typeNames.map(function (typeName) {
            var type = findTypeByName(typeName);

            return {
              name: typeName,
              typeIndex: findTypeIndex(type),
              test: type.test,
              conversion: null,
              conversionIndex: -1
            };
          });

          var convertibleTypes = matchingConversions.map(function (conversion) {
            var type = findTypeByName(conversion.from);

            return {
              name: conversion.from,
              typeIndex: findTypeIndex(type),
              test: type.test,
              conversion: conversion,
              conversionIndex: conversions.indexOf(conversion)
            };
          });

          return {
            types: exactTypes.concat(convertibleTypes),
            restParam: restParam
          };
        }

        /**
         * Parse a signature with comma separated parameters,
         * like "number | boolean, ...string"
         * @param {string} signature
         * @param {function} fn
         * @param {ConversionDef[]} conversions
         * @return {Signature | null} signature
         */
        function parseSignature (signature, fn, conversions) {
          var params = [];

          if (signature.trim() !== '') {
            params = signature
                .split(',')
                .map(trim)
                .map(function (param, index, array) {
                  var parsedParam = parseParam(param, conversions);

                  if (parsedParam.restParam && (index !== array.length - 1)) {
                    throw new SyntaxError('Unexpected rest parameter "' + param + '": ' +
                        'only allowed for the last parameter');
                  }

                  return parsedParam;
              });
          }

          if (params.some(isInvalidParam)) {
            // invalid signature: at least one parameter has no types
            // (they may have been filtered)
            return null;
          }

          return {
            params: params,
            fn: fn
          };
        }

        /**
         * Test whether a set of params contains a restParam
         * @param {Param[]} params
         * @return {boolean} Returns true when the last parameter is a restParam
         */
        function hasRestParam(params) {
          var param = last(params);
          return param ? param.restParam : false;
        }

        /**
         * Test whether a parameter contains conversions
         * @param {Param} param
         * @return {boolean} Returns true when at least one of the parameters
         *                   contains a conversion.
         */
        function hasConversions(param) {
          return param.types.some(function (type) {
            return type.conversion != null;
          });
        }

        /**
         * Create a type test for a single parameter, which can have one or multiple
         * types.
         * @param {Param} param
         * @return {function(x: *) : boolean} Returns a test function
         */
        function compileTest(param) {
          if (!param || param.types.length === 0) {
            // nothing to do
            return ok;
          }
          else if (param.types.length === 1) {
            return findTypeByName(param.types[0].name).test;
          }
          else if (param.types.length === 2) {
            var test0 = findTypeByName(param.types[0].name).test;
            var test1 = findTypeByName(param.types[1].name).test;
            return function or(x) {
              return test0(x) || test1(x);
            }
          }
          else { // param.types.length > 2
            var tests = param.types.map(function (type) {
              return findTypeByName(type.name).test;
            });
            return function or(x) {
              for (var i = 0; i < tests.length; i++) {
                if (tests[i](x)) {
                  return true;
                }
              }
              return false;
            }
          }
        }

        /**
         * Create a test for all parameters of a signature
         * @param {Param[]} params
         * @return {function(args: Array<*>) : boolean}
         */
        function compileTests(params) {
          var tests, test0, test1;

          if (hasRestParam(params)) {
            // variable arguments like '...number'
            tests = initial(params).map(compileTest);
            var varIndex = tests.length;
            var lastTest = compileTest(last(params));
            var testRestParam = function (args) {
              for (var i = varIndex; i < args.length; i++) {
                if (!lastTest(args[i])) {
                  return false;
                }
              }
              return true;
            };

            return function testArgs(args) {
              for (var i = 0; i < tests.length; i++) {
                if (!tests[i](args[i])) {
                  return false;
                }
              }
              return testRestParam(args) && (args.length >= varIndex + 1);
            };
          }
          else {
            // no variable arguments
            if (params.length === 0) {
              return function testArgs(args) {
                return args.length === 0;
              };
            }
            else if (params.length === 1) {
              test0 = compileTest(params[0]);
              return function testArgs(args) {
                return test0(args[0]) && args.length === 1;
              };
            }
            else if (params.length === 2) {
              test0 = compileTest(params[0]);
              test1 = compileTest(params[1]);
              return function testArgs(args) {
                return test0(args[0]) && test1(args[1]) && args.length === 2;
              };
            }
            else { // arguments.length > 2
              tests = params.map(compileTest);
              return function testArgs(args) {
                for (var i = 0; i < tests.length; i++) {
                  if (!tests[i](args[i])) {
                    return false;
                  }
                }
                return args.length === tests.length;
              };
            }
          }
        }

        /**
         * Find the parameter at a specific index of a signature.
         * Handles rest parameters.
         * @param {Signature} signature
         * @param {number} index
         * @return {Param | null} Returns the matching parameter when found,
         *                        null otherwise.
         */
        function getParamAtIndex(signature, index) {
          return index < signature.params.length
              ? signature.params[index]
              : hasRestParam(signature.params)
                  ? last(signature.params)
                  : null
        }

        /**
         * Get all type names of a parameter
         * @param {Signature} signature
         * @param {number} index
         * @param {boolean} excludeConversions
         * @return {string[]} Returns an array with type names
         */
        function getExpectedTypeNames (signature, index, excludeConversions) {
          var param = getParamAtIndex(signature, index);
          var types = param
              ? excludeConversions
                      ? param.types.filter(isExactType)
                      : param.types
              : [];

          return types.map(getTypeName);
        }

        /**
         * Returns the name of a type
         * @param {Type} type
         * @return {string} Returns the type name
         */
        function getTypeName(type) {
          return type.name;
        }

        /**
         * Test whether a type is an exact type or conversion
         * @param {Type} type
         * @return {boolean} Returns true when
         */
        function isExactType(type) {
          return type.conversion === null || type.conversion === undefined;
        }

        /**
         * Helper function for creating error messages: create an array with
         * all available types on a specific argument index.
         * @param {Signature[]} signatures
         * @param {number} index
         * @return {string[]} Returns an array with available types
         */
        function mergeExpectedParams(signatures, index) {
          var typeNames = uniq(flatMap(signatures, function (signature) {
            return getExpectedTypeNames(signature, index, false);
          }));

          return (typeNames.indexOf('any') !== -1) ? ['any'] : typeNames;
        }

        /**
         * Create
         * @param {string} name             The name of the function
         * @param {array.<*>} args          The actual arguments passed to the function
         * @param {Signature[]} signatures  A list with available signatures
         * @return {TypeError} Returns a type error with additional data
         *                     attached to it in the property `data`
         */
        function createError(name, args, signatures) {
          var err, expected;
          var _name = name || 'unnamed';

          // test for wrong type at some index
          var matchingSignatures = signatures;
          var index;
          for (index = 0; index < args.length; index++) {
            var nextMatchingDefs = matchingSignatures.filter(function (signature) {
              var test = compileTest(getParamAtIndex(signature, index));
              return (index < signature.params.length || hasRestParam(signature.params)) &&
                  test(args[index]);
            });

            if (nextMatchingDefs.length === 0) {
              // no matching signatures anymore, throw error "wrong type"
              expected = mergeExpectedParams(matchingSignatures, index);
              if (expected.length > 0) {
                var actualType = findTypeName(args[index]);

                err = new TypeError('Unexpected type of argument in function ' + _name +
                    ' (expected: ' + expected.join(' or ') +
                    ', actual: ' + actualType + ', index: ' + index + ')');
                err.data = {
                  category: 'wrongType',
                  fn: _name,
                  index: index,
                  actual: actualType,
                  expected: expected
                };
                return err;
              }
            }
            else {
              matchingSignatures = nextMatchingDefs;
            }
          }

          // test for too few arguments
          var lengths = matchingSignatures.map(function (signature) {
            return hasRestParam(signature.params) ? Infinity : signature.params.length;
          });
          if (args.length < Math.min.apply(null, lengths)) {
            expected = mergeExpectedParams(matchingSignatures, index);
            err = new TypeError('Too few arguments in function ' + _name +
                ' (expected: ' + expected.join(' or ') +
                ', index: ' + args.length + ')');
            err.data = {
              category: 'tooFewArgs',
              fn: _name,
              index: args.length,
              expected: expected
            };
            return err;
          }

          // test for too many arguments
          var maxLength = Math.max.apply(null, lengths);
          if (args.length > maxLength) {
            err = new TypeError('Too many arguments in function ' + _name +
                ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
            err.data = {
              category: 'tooManyArgs',
              fn: _name,
              index: args.length,
              expectedLength: maxLength
            };
            return err;
          }

          err = new TypeError('Arguments of type "' + args.join(', ') +
              '" do not match any of the defined signatures of function ' + _name + '.');
          err.data = {
            category: 'mismatch',
            actual: args.map(findTypeName)
          };
          return err;
        }

        /**
         * Find the lowest index of all exact types of a parameter (no conversions)
         * @param {Param} param
         * @return {number} Returns the index of the lowest type in typed.types
         */
        function getLowestTypeIndex (param) {
          var min = 999;

          for (var i = 0; i < param.types.length; i++) {
            if (isExactType(param.types[i])) {
              min = Math.min(min, param.types[i].typeIndex);
            }
          }

          return min;
        }

        /**
         * Find the lowest index of the conversion of all types of the parameter
         * having a conversion
         * @param {Param} param
         * @return {number} Returns the lowest index of the conversions of this type
         */
        function getLowestConversionIndex (param) {
          var min = 999;

          for (var i = 0; i < param.types.length; i++) {
            if (!isExactType(param.types[i])) {
              min = Math.min(min, param.types[i].conversionIndex);
            }
          }

          return min;
        }

        /**
         * Compare two params
         * @param {Param} param1
         * @param {Param} param2
         * @return {number} returns a negative number when param1 must get a lower
         *                  index than param2, a positive number when the opposite,
         *                  or zero when both are equal
         */
        function compareParams (param1, param2) {
          var c;

          // compare having a rest parameter or not
          c = param1.restParam - param2.restParam;
          if (c !== 0) {
            return c;
          }

          // compare having conversions or not
          c = hasConversions(param1) - hasConversions(param2);
          if (c !== 0) {
            return c;
          }

          // compare the index of the types
          c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);
          if (c !== 0) {
            return c;
          }

          // compare the index of any conversion
          return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);
        }

        /**
         * Compare two signatures
         * @param {Signature} signature1
         * @param {Signature} signature2
         * @return {number} returns a negative number when param1 must get a lower
         *                  index than param2, a positive number when the opposite,
         *                  or zero when both are equal
         */
        function compareSignatures (signature1, signature2) {
          var len = Math.min(signature1.params.length, signature2.params.length);
          var i;
          var c;

          // compare whether the params have conversions at all or not
          c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions);
          if (c !== 0) {
            return c;
          }

          // next compare whether the params have conversions one by one
          for (i = 0; i < len; i++) {
            c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);
            if (c !== 0) {
              return c;
            }
          }

          // compare the types of the params one by one
          for (i = 0; i < len; i++) {
            c = compareParams(signature1.params[i], signature2.params[i]);
            if (c !== 0) {
              return c;
            }
          }

          // compare the number of params
          return signature1.params.length - signature2.params.length;
        }

        /**
         * Get params containing all types that can be converted to the defined types.
         *
         * @param {ConversionDef[]} conversions
         * @param {string[]} typeNames
         * @return {ConversionDef[]} Returns the conversions that are available
         *                        for every type (if any)
         */
        function filterConversions(conversions, typeNames) {
          var matches = {};

          conversions.forEach(function (conversion) {
            if (typeNames.indexOf(conversion.from) === -1 &&
                typeNames.indexOf(conversion.to) !== -1 &&
                !matches[conversion.from]) {
              matches[conversion.from] = conversion;
            }
          });

          return Object.keys(matches).map(function (from) {
            return matches[from];
          });
        }

        /**
         * Preprocess arguments before calling the original function:
         * - if needed convert the parameters
         * - in case of rest parameters, move the rest parameters into an Array
         * @param {Param[]} params
         * @param {function} fn
         * @return {function} Returns a wrapped function
         */
        function compileArgsPreprocessing(params, fn) {
          var fnConvert = fn;

          // TODO: can we make this wrapper function smarter/simpler?

          if (params.some(hasConversions)) {
            var restParam = hasRestParam(params);
            var compiledConversions = params.map(compileArgConversion);

            fnConvert = function convertArgs() {
              var args = [];
              var last = restParam ? arguments.length - 1 : arguments.length;
              for (var i = 0; i < last; i++) {
                args[i] = compiledConversions[i](arguments[i]);
              }
              if (restParam) {
                args[last] = arguments[last].map(compiledConversions[last]);
              }

              return fn.apply(this, args);
            };
          }

          var fnPreprocess = fnConvert;
          if (hasRestParam(params)) {
            var offset = params.length - 1;

            fnPreprocess = function preprocessRestParams () {
              return fnConvert.apply(this,
                  slice(arguments, 0, offset).concat([slice(arguments, offset)]));
            };
          }

          return fnPreprocess;
        }

        /**
         * Compile conversion for a parameter to the right type
         * @param {Param} param
         * @return {function} Returns the wrapped function that will convert arguments
         *
         */
        function compileArgConversion(param) {
          var test0, test1, conversion0, conversion1;
          var tests = [];
          var conversions = [];

          param.types.forEach(function (type) {
            if (type.conversion) {
              tests.push(findTypeByName(type.conversion.from).test);
              conversions.push(type.conversion.convert);
            }
          });

          // create optimized conversion functions depending on the number of conversions
          switch (conversions.length) {
            case 0:
              return function convertArg(arg) {
                return arg;
              }

            case 1:
              test0 = tests[0];
              conversion0 = conversions[0];
              return function convertArg(arg) {
                if (test0(arg)) {
                  return conversion0(arg)
                }
                return arg;
              }

            case 2:
              test0 = tests[0];
              test1 = tests[1];
              conversion0 = conversions[0];
              conversion1 = conversions[1];
              return function convertArg(arg) {
                if (test0(arg)) {
                  return conversion0(arg)
                }
                if (test1(arg)) {
                  return conversion1(arg)
                }
                return arg;
              }

            default:
              return function convertArg(arg) {
                for (var i = 0; i < conversions.length; i++) {
                  if (tests[i](arg)) {
                    return conversions[i](arg);
                  }
                }
                return arg;
              }
          }
        }

        /**
         * Convert an array with signatures into a map with signatures,
         * where signatures with union types are split into separate signatures
         *
         * Throws an error when there are conflicting types
         *
         * @param {Signature[]} signatures
         * @return {Object.<string, function>}  Returns a map with signatures
         *                                      as key and the original function
         *                                      of this signature as value.
         */
        function createSignaturesMap(signatures) {
          var signaturesMap = {};
          signatures.forEach(function (signature) {
            if (!signature.params.some(hasConversions)) {
              splitParams(signature.params, true).forEach(function (params) {
                signaturesMap[stringifyParams(params)] = signature.fn;
              });
            }
          });

          return signaturesMap;
        }

        /**
         * Split params with union types in to separate params.
         *
         * For example:
         *
         *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
         *     // returns:
         *     // [
         *     //   ['Array', 'string'],
         *     //   ['Array', 'RegExp'],
         *     //   ['Object', 'string'],
         *     //   ['Object', 'RegExp']
         *     // ]
         *
         * @param {Param[]} params
         * @param {boolean} ignoreConversionTypes
         * @return {Param[]}
         */
        function splitParams(params, ignoreConversionTypes) {
          function _splitParams(params, index, types) {
            if (index < params.length) {
              var param = params[index];
              var filteredTypes = ignoreConversionTypes
                  ? param.types.filter(isExactType)
                  : param.types;
              var typeGroups;

              if (param.restParam) {
                // split the types of a rest parameter in two:
                // one with only exact types, and one with exact types and conversions
                var exactTypes = filteredTypes.filter(isExactType);
                typeGroups = exactTypes.length < filteredTypes.length
                    ? [exactTypes, filteredTypes]
                    : [filteredTypes];

              }
              else {
                // split all the types of a regular parameter into one type per group
                typeGroups = filteredTypes.map(function (type) {
                  return [type]
                });
              }

              // recurse over the groups with types
              return flatMap(typeGroups, function (typeGroup) {
                return _splitParams(params, index + 1, types.concat([typeGroup]));
              });

            }
            else {
              // we've reached the end of the parameters. Now build a new Param
              var splittedParams = types.map(function (type, typeIndex) {
                return {
                  types: type,
                  restParam: (typeIndex === params.length - 1) && hasRestParam(params)
                }
              });

              return [splittedParams];
            }
          }

          return _splitParams(params, 0, []);
        }

        /**
         * Test whether two signatures have a conflicting signature
         * @param {Signature} signature1
         * @param {Signature} signature2
         * @return {boolean} Returns true when the signatures conflict, false otherwise.
         */
        function hasConflictingParams(signature1, signature2) {
          var ii = Math.max(signature1.params.length, signature2.params.length);

          for (var i = 0; i < ii; i++) {
            var typesNames1 = getExpectedTypeNames(signature1, i, true);
            var typesNames2 = getExpectedTypeNames(signature2, i, true);

            if (!hasOverlap(typesNames1, typesNames2)) {
              return false;
            }
          }

          var len1 = signature1.params.length;
          var len2 = signature2.params.length;
          var restParam1 = hasRestParam(signature1.params);
          var restParam2 = hasRestParam(signature2.params);

          return restParam1
              ? restParam2 ? (len1 === len2) : (len2 >= len1)
              : restParam2 ? (len1 >= len2)  : (len1 === len2)
        }

        /**
         * Create a typed function
         * @param {String} name               The name for the typed function
         * @param {Object.<string, function>} signaturesMap
         *                                    An object with one or
         *                                    multiple signatures as key, and the
         *                                    function corresponding to the
         *                                    signature as value.
         * @return {function}  Returns the created typed function.
         */
        function createTypedFunction(name, signaturesMap) {
          if (Object.keys(signaturesMap).length === 0) {
            throw new SyntaxError('No signatures provided');
          }

          // parse the signatures, and check for conflicts
          var parsedSignatures = [];
          Object.keys(signaturesMap)
              .map(function (signature) {
                return parseSignature(signature, signaturesMap[signature], typed.conversions);
              })
              .filter(notNull)
              .forEach(function (parsedSignature) {
                // check whether this parameter conflicts with already parsed signatures
                var conflictingSignature = findInArray(parsedSignatures, function (s) {
                  return hasConflictingParams(s, parsedSignature)
                });
                if (conflictingSignature) {
                  throw new TypeError('Conflicting signatures "' +
                      stringifyParams(conflictingSignature.params) + '" and "' +
                      stringifyParams(parsedSignature.params) + '".');
                }

                parsedSignatures.push(parsedSignature);
              });

          // split and filter the types of the signatures, and then order them
          var signatures = flatMap(parsedSignatures, function (parsedSignature) {
            var params = parsedSignature ? splitParams(parsedSignature.params, false) : [];

            return params.map(function (params) {
              return {
                params: params,
                fn: parsedSignature.fn
              };
            });
          }).filter(notNull);

          signatures.sort(compareSignatures);

          // we create a highly optimized checks for the first couple of signatures with max 2 arguments
          var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
          var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
          var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
          var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
          var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
          var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
          var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;

          // compile the tests
          var tests = signatures.map(function (signature) {
            return compileTests(signature.params);
          });

          var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
          var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
          var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
          var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
          var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
          var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;

          var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
          var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
          var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
          var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
          var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
          var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;

          // compile the functions
          var fns = signatures.map(function(signature) {
            return compileArgsPreprocessing(signature.params, signature.fn);
          });

          var fn0 = ok0 ? fns[0] : undef;
          var fn1 = ok1 ? fns[1] : undef;
          var fn2 = ok2 ? fns[2] : undef;
          var fn3 = ok3 ? fns[3] : undef;
          var fn4 = ok4 ? fns[4] : undef;
          var fn5 = ok5 ? fns[5] : undef;

          var len0 = ok0 ? signatures[0].params.length : -1;
          var len1 = ok1 ? signatures[1].params.length : -1;
          var len2 = ok2 ? signatures[2].params.length : -1;
          var len3 = ok3 ? signatures[3].params.length : -1;
          var len4 = ok4 ? signatures[4].params.length : -1;
          var len5 = ok5 ? signatures[5].params.length : -1;

          // simple and generic, but also slow
          var iStart = allOk ? 6 : 0;
          var iEnd = signatures.length;
          var generic = function generic() {

            for (var i = iStart; i < iEnd; i++) {
              if (tests[i](arguments)) {
                return fns[i].apply(this, arguments);
              }
            }

            return typed.onMismatch(name, arguments, signatures);
          };

          // create the typed function
          // fast, specialized version. Falls back to the slower, generic one if needed
          var fn = function fn(arg0, arg1) {

            if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
            if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
            if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
            if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
            if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
            if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }

            return generic.apply(fn, arguments);
          };

          // attach name the typed function
          try {
            Object.defineProperty(fn, 'name', {value: name});
          }
          catch (err) {
            // old browsers do not support Object.defineProperty and some don't support setting the name property
            // the function name is not essential for the functioning, it's mostly useful for debugging,
            // so it's fine to have unnamed functions.
          }

          // attach signatures to the function
          fn.signatures = createSignaturesMap(signatures);

          return fn;
        }

        /**
         * Action to take on mismatch
         * @param {string} name      Name of function that was attempted to be called
         * @param {Array} args       Actual arguments to the call
         * @param {Array} signatures Known signatures of the named typed-function
         */
        function _onMismatch(name, args, signatures) {
          throw createError(name, args, signatures);
        }

        /**
         * Test whether a type should be NOT be ignored
         * @param {string} typeName
         * @return {boolean}
         */
        function notIgnore(typeName) {
          return typed.ignore.indexOf(typeName) === -1;
        }

        /**
         * trim a string
         * @param {string} str
         * @return {string}
         */
        function trim(str) {
          return str.trim();
        }

        /**
         * Test whether a string is not empty
         * @param {string} str
         * @return {boolean}
         */
        function notEmpty(str) {
          return !!str;
        }

        /**
         * test whether a value is not strict equal to null
         * @param {*} value
         * @return {boolean}
         */
        function notNull(value) {
          return value !== null;
        }

        /**
         * Test whether a parameter has no types defined
         * @param {Param} param
         * @return {boolean}
         */
        function isInvalidParam (param) {
          return param.types.length === 0;
        }

        /**
         * Return all but the last items of an array
         * @param {Array} arr
         * @return {Array}
         */
        function initial(arr) {
          return arr.slice(0, arr.length - 1);
        }

        /**
         * return the last item of an array
         * @param {Array} arr
         * @return {*}
         */
        function last(arr) {
          return arr[arr.length - 1];
        }

        /**
         * Slice an array or function Arguments
         * @param {Array | Arguments | IArguments} arr
         * @param {number} start
         * @param {number} [end]
         * @return {Array}
         */
        function slice(arr, start, end) {
          return Array.prototype.slice.call(arr, start, end);
        }

        /**
         * Test whether an array contains some item
         * @param {Array} array
         * @param {*} item
         * @return {boolean} Returns true if array contains item, false if not.
         */
        function contains(array, item) {
          return array.indexOf(item) !== -1;
        }

        /**
         * Test whether two arrays have overlapping items
         * @param {Array} array1
         * @param {Array} array2
         * @return {boolean} Returns true when at least one item exists in both arrays
         */
        function hasOverlap(array1, array2) {
          for (var i = 0; i < array1.length; i++) {
            if (contains(array2, array1[i])) {
              return true;
            }
          }

          return false;
        }

        /**
         * Return the first item from an array for which test(arr[i]) returns true
         * @param {Array} arr
         * @param {function} test
         * @return {* | undefined} Returns the first matching item
         *                         or undefined when there is no match
         */
        function findInArray(arr, test) {
          for (var i = 0; i < arr.length; i++) {
            if (test(arr[i])) {
              return arr[i];
            }
          }
          return undefined;
        }

        /**
         * Filter unique items of an array with strings
         * @param {string[]} arr
         * @return {string[]}
         */
        function uniq(arr) {
          var entries = {};
          for (var i = 0; i < arr.length; i++) {
            entries[arr[i]] = true;
          }
          return Object.keys(entries);
        }

        /**
         * Flat map the result invoking a callback for every item in an array.
         * https://gist.github.com/samgiles/762ee337dff48623e729
         * @param {Array} arr
         * @param {function} callback
         * @return {Array}
         */
        function flatMap(arr, callback) {
          return Array.prototype.concat.apply([], arr.map(callback));
        }

        /**
         * Retrieve the function name from a set of typed functions,
         * and check whether the name of all functions match (if given)
         * @param {function[]} fns
         */
        function getName (fns) {
          var name = '';

          for (var i = 0; i < fns.length; i++) {
            var fn = fns[i];

            // check whether the names are the same when defined
            if ((typeof fn.signatures === 'object' || typeof fn.signature === 'string') && fn.name !== '') {
              if (name === '') {
                name = fn.name;
              }
              else if (name !== fn.name) {
                var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
                err.data = {
                  actual: fn.name,
                  expected: name
                };
                throw err;
              }
            }
          }

          return name;
        }

        // extract and merge all signatures of a list with typed functions
        function extractSignatures(fns) {
          var err;
          var signaturesMap = {};

          function validateUnique(_signature, _fn) {
            if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {
              err = new Error('Signature "' + _signature + '" is defined twice');
              err.data = {signature: _signature};
              throw err;
              // else: both signatures point to the same function, that's fine
            }
          }

          for (var i = 0; i < fns.length; i++) {
            var fn = fns[i];

            // test whether this is a typed-function
            if (typeof fn.signatures === 'object') {
              // merge the signatures
              for (var signature in fn.signatures) {
                if (fn.signatures.hasOwnProperty(signature)) {
                  validateUnique(signature, fn.signatures[signature]);
                  signaturesMap[signature] = fn.signatures[signature];
                }
              }
            }
            else if (typeof fn.signature === 'string') {
              validateUnique(fn.signature, fn);
              signaturesMap[fn.signature] = fn;
            }
            else {
              err = new TypeError('Function is no typed-function (index: ' + i + ')');
              err.data = {index: i};
              throw err;
            }
          }

          return signaturesMap;
        }

        typed = createTypedFunction('typed', {
          'string, Object': createTypedFunction,
          'Object': function (signaturesMap) {
            // find existing name
            var fns = [];
            for (var signature in signaturesMap) {
              if (signaturesMap.hasOwnProperty(signature)) {
                fns.push(signaturesMap[signature]);
              }
            }
            var name = getName(fns);
            return createTypedFunction(name, signaturesMap);
          },
          '...Function': function (fns) {
            return createTypedFunction(getName(fns), extractSignatures(fns));
          },
          'string, ...Function': function (name, fns) {
            return createTypedFunction(name, extractSignatures(fns));
          }
        });

        typed.create = create;
        typed.types = _types;
        typed.conversions = _conversions;
        typed.ignore = _ignore;
        typed.onMismatch = _onMismatch;
        typed.throwMismatchError = _onMismatch;
        typed.createError = createError;
        typed.convert = convert;
        typed.find = find;

        /**
         * add a type
         * @param {{name: string, test: function}} type
         * @param {boolean} [beforeObjectTest=true]
         *                          If true, the new test will be inserted before
         *                          the test with name 'Object' (if any), since
         *                          tests for Object match Array and classes too.
         */
        typed.addType = function (type, beforeObjectTest) {
          if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
            throw new TypeError('Object with properties {name: string, test: function} expected');
          }

          if (beforeObjectTest !== false) {
            for (var i = 0; i < typed.types.length; i++) {
              if (typed.types[i].name === 'Object') {
                typed.types.splice(i, 0, type);
                return
              }
            }
          }

          typed.types.push(type);
        };

        // add a conversion
        typed.addConversion = function (conversion) {
          if (!conversion
              || typeof conversion.from !== 'string'
              || typeof conversion.to !== 'string'
              || typeof conversion.convert !== 'function') {
            throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
          }

          typed.conversions.push(conversion);
        };

        return typed;
      }

      return create();
    }));
    });

    /**
     * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
     */

    /**
     * Check if a number is integer
     * @param {number | boolean} value
     * @return {boolean} isInteger
     */

    function isInteger$1(value) {
      if (typeof value === 'boolean') {
        return true;
      }

      return isFinite(value) ? value === Math.round(value) : false;
    }
    /**
     * Calculate the sign of a number
     * @param {number} x
     * @returns {number}
     */

    var sign$1 = Math.sign || function (x) {
      if (x > 0) {
        return 1;
      } else if (x < 0) {
        return -1;
      } else {
        return 0;
      }
    };
    /**
     * Calculate the base-2 logarithm of a number
     * @param {number} x
     * @returns {number}
     */

    var log2$1 = Math.log2 || function log2(x) {
      return Math.log(x) / Math.LN2;
    };
    /**
     * Calculate the base-10 logarithm of a number
     * @param {number} x
     * @returns {number}
     */

    var log10$1 = Math.log10 || function log10(x) {
      return Math.log(x) / Math.LN10;
    };
    /**
     * Calculate the natural logarithm of a number + 1
     * @param {number} x
     * @returns {number}
     */

    var log1p$1 = Math.log1p || function (x) {
      return Math.log(x + 1);
    };
    /**
     * Calculate cubic root for a number
     *
     * Code from es6-shim.js:
     *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
     *
     * @param {number} x
     * @returns {number} Returns the cubic root of x
     */

    var cbrt$1 = Math.cbrt || function cbrt(x) {
      if (x === 0) {
        return x;
      }

      var negate = x < 0;
      var result;

      if (negate) {
        x = -x;
      }

      if (isFinite(x)) {
        result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods

        result = (x / (result * result) + 2 * result) / 3;
      } else {
        result = x;
      }

      return negate ? -result : result;
    };
    /**
     * Calculates exponentiation minus 1
     * @param {number} x
     * @return {number} res
     */

    var expm1$1 = Math.expm1 || function expm1(x) {
      return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;
    };
    /**
     * Formats a number in a given base
     * @param {number} n
     * @param {number} base
     * @param {number} size
     * @returns {string}
     */

    function formatNumberToBase(n, base, size) {
      var prefixes = {
        2: '0b',
        8: '0o',
        16: '0x'
      };
      var prefix = prefixes[base];
      var suffix = '';

      if (size) {
        if (size < 1) {
          throw new Error('size must be in greater than 0');
        }

        if (!isInteger$1(size)) {
          throw new Error('size must be an integer');
        }

        if (n > 2 ** (size - 1) - 1 || n < -(2 ** (size - 1))) {
          throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
        }

        if (!isInteger$1(n)) {
          throw new Error('Value must be an integer');
        }

        if (n < 0) {
          n = n + 2 ** size;
        }

        suffix = "i".concat(size);
      }

      var sign = '';

      if (n < 0) {
        n = -n;
        sign = '-';
      }

      return "".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);
    }
    /**
     * Convert a number to a formatted string representation.
     *
     * Syntax:
     *
     *    format(value)
     *    format(value, options)
     *    format(value, precision)
     *    format(value, fn)
     *
     * Where:
     *
     *    {number} value   The value to be formatted
     *    {Object} options An object with formatting options. Available options:
     *                     {string} notation
     *                         Number notation. Choose from:
     *                         'fixed'          Always use regular number notation.
     *                                          For example '123.40' and '14000000'
     *                         'exponential'    Always use exponential notation.
     *                                          For example '1.234e+2' and '1.4e+7'
     *                         'engineering'    Always use engineering notation.
     *                                          For example '123.4e+0' and '14.0e+6'
     *                         'auto' (default) Regular number notation for numbers
     *                                          having an absolute value between
     *                                          `lowerExp` and `upperExp` bounds, and
     *                                          uses exponential notation elsewhere.
     *                                          Lower bound is included, upper bound
     *                                          is excluded.
     *                                          For example '123.4' and '1.4e7'.
     *                         'bin', 'oct, or
     *                         'hex'            Format the number using binary, octal,
     *                                          or hexadecimal notation.
     *                                          For example '0b1101' and '0x10fe'.
     *                     {number} wordSize    The word size in bits to use for formatting
     *                                          in binary, octal, or hexadecimal notation.
     *                                          To be used only with 'bin', 'oct', or 'hex'
     *                                          values for 'notation' option. When this option
     *                                          is defined the value is formatted as a signed
     *                                          twos complement integer of the given word size
     *                                          and the size suffix is appended to the output.
     *                                          For example
     *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
     *                                          Default value is undefined.
     *                     {number} precision   A number between 0 and 16 to round
     *                                          the digits of the number.
     *                                          In case of notations 'exponential',
     *                                          'engineering', and 'auto',
     *                                          `precision` defines the total
     *                                          number of significant digits returned.
     *                                          In case of notation 'fixed',
     *                                          `precision` defines the number of
     *                                          significant digits after the decimal
     *                                          point.
     *                                          `precision` is undefined by default,
     *                                          not rounding any digits.
     *                     {number} lowerExp    Exponent determining the lower boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `-3`.
     *                     {number} upperExp    Exponent determining the upper boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `5`.
     *    {Function} fn    A custom formatting function. Can be used to override the
     *                     built-in notations. Function `fn` is called with `value` as
     *                     parameter and must return a string. Is useful for example to
     *                     format all values inside a matrix in a particular way.
     *
     * Examples:
     *
     *    format(6.4)                                        // '6.4'
     *    format(1240000)                                    // '1.24e6'
     *    format(1/3)                                        // '0.3333333333333333'
     *    format(1/3, 3)                                     // '0.333'
     *    format(21385, 2)                                   // '21000'
     *    format(12.071, {notation: 'fixed'})                // '12'
     *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
     *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
     *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
     *
     * @param {number} value
     * @param {Object | Function | number} [options]
     * @return {string} str The formatted value
     */


    function format$3(value, options) {
      if (typeof options === 'function') {
        // handle format(value, fn)
        return options(value);
      } // handle special cases


      if (value === Infinity) {
        return 'Infinity';
      } else if (value === -Infinity) {
        return '-Infinity';
      } else if (isNaN(value)) {
        return 'NaN';
      } // default values for options


      var notation = 'auto';
      var precision;
      var wordSize;

      if (options) {
        // determine notation from options
        if (options.notation) {
          notation = options.notation;
        } // determine precision from options


        if (isNumber(options)) {
          precision = options;
        } else if (isNumber(options.precision)) {
          precision = options.precision;
        }

        if (options.wordSize) {
          wordSize = options.wordSize;

          if (typeof wordSize !== 'number') {
            throw new Error('Option "wordSize" must be a number');
          }
        }
      } // handle the various notations


      switch (notation) {
        case 'fixed':
          return toFixed$1(value, precision);

        case 'exponential':
          return toExponential$1(value, precision);

        case 'engineering':
          return toEngineering$1(value, precision);

        case 'bin':
          return formatNumberToBase(value, 2, wordSize);

        case 'oct':
          return formatNumberToBase(value, 8, wordSize);

        case 'hex':
          return formatNumberToBase(value, 16, wordSize);

        case 'auto':
          // remove trailing zeros after the decimal point
          return toPrecision(value, precision, options && options).replace(/((\.\d*?)(0+))($|e)/, function () {
            var digits = arguments[2];
            var e = arguments[4];
            return digits !== '.' ? digits + e : e;
          });

        default:
          throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
      }
    }
    /**
     * Split a number into sign, coefficients, and exponent
     * @param {number | string} value
     * @return {SplitValue}
     *              Returns an object containing sign, coefficients, and exponent
     */

    function splitNumber(value) {
      // parse the input value
      var match = String(value).toLowerCase().match(/^(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);

      if (!match) {
        throw new SyntaxError('Invalid number ' + value);
      }

      var sign = match[1];
      var digits = match[2];
      var exponent = parseFloat(match[4] || '0');
      var dot = digits.indexOf('.');
      exponent += dot !== -1 ? dot - 1 : digits.length - 1;
      var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
      .replace(/^0*/, function (zeros) {
        // remove leading zeros, add their count to the exponent
        exponent -= zeros.length;
        return '';
      }).replace(/0*$/, '') // remove trailing zeros
      .split('').map(function (d) {
        return parseInt(d);
      });

      if (coefficients.length === 0) {
        coefficients.push(0);
        exponent++;
      }

      return {
        sign,
        coefficients,
        exponent
      };
    }
    /**
     * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
     * @param {number | string} value
     * @param {number} [precision]        Optional number of significant figures to return.
     */

    function toEngineering$1(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }

      var split = splitNumber(value);
      var rounded = roundDigits(split, precision);
      var e = rounded.exponent;
      var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent

      var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

      if (isNumber(precision)) {
        // add zeroes to give correct sig figs
        while (precision > c.length || e - newExp + 1 > c.length) {
          c.push(0);
        }
      } else {
        // concatenate coefficients with necessary zeros
        // add zeros if necessary (for example: 1e+8 -> 100e+6)
        var missingZeros = Math.abs(e - newExp) - (c.length - 1);

        for (var i = 0; i < missingZeros; i++) {
          c.push(0);
        }
      } // find difference in exponents


      var expDiff = Math.abs(e - newExp);
      var decimalIdx = 1; // push decimal index over by expDiff times

      while (expDiff > 0) {
        decimalIdx++;
        expDiff--;
      } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
      // otherwise concat with the rest of the coefficients


      var decimals = c.slice(decimalIdx).join('');
      var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
      var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
      return rounded.sign + str;
    }
    /**
     * Format a number with fixed notation.
     * @param {number | string} value
     * @param {number} [precision=undefined]  Optional number of decimals after the
     *                                        decimal point. null by default.
     */

    function toFixed$1(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }

      var splitValue = splitNumber(value);
      var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
      var c = rounded.coefficients;
      var p = rounded.exponent + 1; // exponent may have changed
      // append zeros if needed

      var pp = p + (precision || 0);

      if (c.length < pp) {
        c = c.concat(zeros$1(pp - c.length));
      } // prepend zeros if needed


      if (p < 0) {
        c = zeros$1(-p + 1).concat(c);
        p = 1;
      } // insert a dot if needed


      if (p < c.length) {
        c.splice(p, 0, p === 0 ? '0.' : '.');
      }

      return rounded.sign + c.join('');
    }
    /**
     * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
     * @param {number | string} value
     * @param {number} [precision]  Number of digits in formatted output.
     *                              If not provided, the maximum available digits
     *                              is used.
     */

    function toExponential$1(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      } // round if needed, else create a clone


      var split = splitNumber(value);
      var rounded = precision ? roundDigits(split, precision) : split;
      var c = rounded.coefficients;
      var e = rounded.exponent; // append zeros if needed

      if (c.length < precision) {
        c = c.concat(zeros$1(precision - c.length));
      } // format as `C.CCCe+EEE` or `C.CCCe-EEE`


      var first = c.shift();
      return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
    }
    /**
     * Format a number with a certain precision
     * @param {number | string} value
     * @param {number} [precision=undefined] Optional number of digits.
     * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
     *                                       By default:
     *                                         lowerExp = -3 (incl)
     *                                         upper = +5 (excl)
     * @return {string}
     */

    function toPrecision(value, precision, options) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      } // determine lower and upper bound for exponential notation.


      var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
      var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
      var split = splitNumber(value);
      var rounded = precision ? roundDigits(split, precision) : split;

      if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {
        // exponential notation
        return toExponential$1(value, precision);
      } else {
        var c = rounded.coefficients;
        var e = rounded.exponent; // append trailing zeros

        if (c.length < precision) {
          c = c.concat(zeros$1(precision - c.length));
        } // append trailing zeros
        // TODO: simplify the next statement


        c = c.concat(zeros$1(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros

        c = zeros$1(-e).concat(c);
        var dot = e > 0 ? e : 0;

        if (dot < c.length - 1) {
          c.splice(dot + 1, 0, '.');
        }

        return rounded.sign + c.join('');
      }
    }
    /**
     * Round the number of digits of a number *
     * @param {SplitValue} split       A value split with .splitNumber(value)
     * @param {number} precision  A positive integer
     * @return {SplitValue}
     *              Returns an object containing sign, coefficients, and exponent
     *              with rounded digits
     */

    function roundDigits(split, precision) {
      // create a clone
      var rounded = {
        sign: split.sign,
        coefficients: split.coefficients,
        exponent: split.exponent
      };
      var c = rounded.coefficients; // prepend zeros if needed

      while (precision <= 0) {
        c.unshift(0);
        rounded.exponent++;
        precision++;
      }

      if (c.length > precision) {
        var removed = c.splice(precision, c.length - precision);

        if (removed[0] >= 5) {
          var i = precision - 1;
          c[i]++;

          while (c[i] === 10) {
            c.pop();

            if (i === 0) {
              c.unshift(0);
              rounded.exponent++;
              i++;
            }

            i--;
            c[i]++;
          }
        }
      }

      return rounded;
    }
    /**
     * Create an array filled with zeros.
     * @param {number} length
     * @return {Array}
     */

    function zeros$1(length) {
      var arr = [];

      for (var i = 0; i < length; i++) {
        arr.push(0);
      }

      return arr;
    }
    /**
     * Count the number of significant digits of a number.
     *
     * For example:
     *   2.34 returns 3
     *   0.0034 returns 2
     *   120.5e+30 returns 4
     *
     * @param {number} value
     * @return {number} digits   Number of significant digits
     */


    function digits(value) {
      return value.toExponential().replace(/e.*$/, '') // remove exponential notation
      .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
      .length;
    }
    /**
     * Minimum number added to one that makes the result different than one
     */

    var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
    /**
     * Compares two floating point numbers.
     * @param {number} x          First value to compare
     * @param {number} y          Second value to compare
     * @param {number} [epsilon]  The maximum relative difference between x and y
     *                            If epsilon is undefined or null, the function will
     *                            test whether x and y are exactly equal.
     * @return {boolean} whether the two numbers are nearly equal
    */

    function nearlyEqual$1(x, y, epsilon) {
      // if epsilon is null or undefined, test whether x and y are exactly equal
      if (epsilon === null || epsilon === undefined) {
        return x === y;
      }

      if (x === y) {
        return true;
      } // NaN


      if (isNaN(x) || isNaN(y)) {
        return false;
      } // at this point x and y should be finite


      if (isFinite(x) && isFinite(y)) {
        // check numbers are very close, needed when comparing numbers near zero
        var diff = Math.abs(x - y);

        if (diff < DBL_EPSILON) {
          return true;
        } else {
          // use relative error
          return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
        }
      } // Infinite and Number or negative Infinite and positive Infinite cases


      return false;
    }
    /**
     * Calculate the hyperbolic arccos of a number
     * @param {number} x
     * @return {number}
     */

    var acosh$1 = Math.acosh || function (x) {
      return Math.log(Math.sqrt(x * x - 1) + x);
    };
    var asinh$1 = Math.asinh || function (x) {
      return Math.log(Math.sqrt(x * x + 1) + x);
    };
    /**
     * Calculate the hyperbolic arctangent of a number
     * @param {number} x
     * @return {number}
     */

    var atanh$1 = Math.atanh || function (x) {
      return Math.log((1 + x) / (1 - x)) / 2;
    };
    /**
     * Calculate the hyperbolic cosine of a number
     * @param {number} x
     * @returns {number}
     */

    var cosh$1 = Math.cosh || function (x) {
      return (Math.exp(x) + Math.exp(-x)) / 2;
    };
    /**
     * Calculate the hyperbolic sine of a number
     * @param {number} x
     * @returns {number}
     */

    var sinh$1 = Math.sinh || function (x) {
      return (Math.exp(x) - Math.exp(-x)) / 2;
    };
    /**
     * Calculate the hyperbolic tangent of a number
     * @param {number} x
     * @returns {number}
     */

    var tanh$1 = Math.tanh || function (x) {
      var e = Math.exp(2 * x);
      return (e - 1) / (e + 1);
    };
    /**
     * Returns a value with the magnitude of x and the sign of y.
     * @param {number} x
     * @param {number} y
     * @returns {number}
     */

    function copysign(x, y) {
      var signx = x > 0 ? true : x < 0 ? false : 1 / x === Infinity;
      var signy = y > 0 ? true : y < 0 ? false : 1 / y === Infinity;
      return signx ^ signy ? -x : x;
    }

    /**
     * Formats a BigNumber in a given base
     * @param {BigNumber} n
     * @param {number} base
     * @param {number} size
     * @returns {string}
     */

    function formatBigNumberToBase(n, base, size) {
      var BigNumberCtor = n.constructor;
      var big2 = new BigNumberCtor(2);
      var suffix = '';

      if (size) {
        if (size < 1) {
          throw new Error('size must be in greater than 0');
        }

        if (!isInteger$1(size)) {
          throw new Error('size must be an integer');
        }

        if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) {
          throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
        }

        if (!n.isInteger()) {
          throw new Error('Value must be an integer');
        }

        if (n.lessThan(0)) {
          n = n.add(big2.pow(size));
        }

        suffix = "i".concat(size);
      }

      switch (base) {
        case 2:
          return "".concat(n.toBinary()).concat(suffix);

        case 8:
          return "".concat(n.toOctal()).concat(suffix);

        case 16:
          return "".concat(n.toHexadecimal()).concat(suffix);

        default:
          throw new Error("Base ".concat(base, " not supported "));
      }
    }
    /**
     * Convert a BigNumber to a formatted string representation.
     *
     * Syntax:
     *
     *    format(value)
     *    format(value, options)
     *    format(value, precision)
     *    format(value, fn)
     *
     * Where:
     *
     *    {number} value   The value to be formatted
     *    {Object} options An object with formatting options. Available options:
     *                     {string} notation
     *                         Number notation. Choose from:
     *                         'fixed'          Always use regular number notation.
     *                                          For example '123.40' and '14000000'
     *                         'exponential'    Always use exponential notation.
     *                                          For example '1.234e+2' and '1.4e+7'
     *                         'auto' (default) Regular number notation for numbers
     *                                          having an absolute value between
     *                                          `lower` and `upper` bounds, and uses
     *                                          exponential notation elsewhere.
     *                                          Lower bound is included, upper bound
     *                                          is excluded.
     *                                          For example '123.4' and '1.4e7'.
     *                         'bin', 'oct, or
     *                         'hex'            Format the number using binary, octal,
     *                                          or hexadecimal notation.
     *                                          For example '0b1101' and '0x10fe'.
     *                     {number} wordSize    The word size in bits to use for formatting
     *                                          in binary, octal, or hexadecimal notation.
     *                                          To be used only with 'bin', 'oct', or 'hex'
     *                                          values for 'notation' option. When this option
     *                                          is defined the value is formatted as a signed
     *                                          twos complement integer of the given word size
     *                                          and the size suffix is appended to the output.
     *                                          For example
     *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
     *                                          Default value is undefined.
     *                     {number} precision   A number between 0 and 16 to round
     *                                          the digits of the number.
     *                                          In case of notations 'exponential',
     *                                          'engineering', and 'auto',
     *                                          `precision` defines the total
     *                                          number of significant digits returned.
     *                                          In case of notation 'fixed',
     *                                          `precision` defines the number of
     *                                          significant digits after the decimal
     *                                          point.
     *                                          `precision` is undefined by default.
     *                     {number} lowerExp    Exponent determining the lower boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `-3`.
     *                     {number} upperExp    Exponent determining the upper boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `5`.
     *    {Function} fn    A custom formatting function. Can be used to override the
     *                     built-in notations. Function `fn` is called with `value` as
     *                     parameter and must return a string. Is useful for example to
     *                     format all values inside a matrix in a particular way.
     *
     * Examples:
     *
     *    format(6.4)                                        // '6.4'
     *    format(1240000)                                    // '1.24e6'
     *    format(1/3)                                        // '0.3333333333333333'
     *    format(1/3, 3)                                     // '0.333'
     *    format(21385, 2)                                   // '21000'
     *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
     *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
     *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
     *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
     *
     * @param {BigNumber} value
     * @param {Object | Function | number} [options]
     * @return {string} str The formatted value
     */


    function format$2(value, options) {
      if (typeof options === 'function') {
        // handle format(value, fn)
        return options(value);
      } // handle special cases


      if (!value.isFinite()) {
        return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
      } // default values for options


      var notation = 'auto';
      var precision;
      var wordSize;

      if (options !== undefined) {
        // determine notation from options
        if (options.notation) {
          notation = options.notation;
        } // determine precision from options


        if (typeof options === 'number') {
          precision = options;
        } else if (options.precision) {
          precision = options.precision;
        }

        if (options.wordSize) {
          wordSize = options.wordSize;

          if (typeof wordSize !== 'number') {
            throw new Error('Option "wordSize" must be a number');
          }
        }
      } // handle the various notations


      switch (notation) {
        case 'fixed':
          return toFixed(value, precision);

        case 'exponential':
          return toExponential(value, precision);

        case 'engineering':
          return toEngineering(value, precision);

        case 'bin':
          return formatBigNumberToBase(value, 2, wordSize);

        case 'oct':
          return formatBigNumberToBase(value, 8, wordSize);

        case 'hex':
          return formatBigNumberToBase(value, 16, wordSize);

        case 'auto':
          {
            // determine lower and upper bound for exponential notation.
            // TODO: implement support for upper and lower to be BigNumbers themselves
            var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
            var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero

            if (value.isZero()) return '0'; // determine whether or not to output exponential notation

            var str;
            var rounded = value.toSignificantDigits(precision);
            var exp = rounded.e;

            if (exp >= lowerExp && exp < upperExp) {
              // normal number notation
              str = rounded.toFixed();
            } else {
              // exponential notation
              str = toExponential(value, precision);
            } // remove trailing zeros after the decimal point


            return str.replace(/((\.\d*?)(0+))($|e)/, function () {
              var digits = arguments[2];
              var e = arguments[4];
              return digits !== '.' ? digits + e : e;
            });
          }

        default:
          throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
      }
    }
    /**
     * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
     * @param {BigNumber | string} value
     * @param {number} [precision]        Optional number of significant figures to return.
     */

    function toEngineering(value, precision) {
      // find nearest lower multiple of 3 for exponent
      var e = value.e;
      var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent

      var valueWithoutExp = value.mul(Math.pow(10, -newExp));
      var valueStr = valueWithoutExp.toPrecision(precision);

      if (valueStr.indexOf('e') !== -1) {
        valueStr = valueWithoutExp.toString();
      }

      return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
    }
    /**
     * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
     * @param {BigNumber} value
     * @param {number} [precision]  Number of digits in formatted output.
     *                              If not provided, the maximum available digits
     *                              is used.
     * @returns {string} str
     */

    function toExponential(value, precision) {
      if (precision !== undefined) {
        return value.toExponential(precision - 1); // Note the offset of one
      } else {
        return value.toExponential();
      }
    }
    /**
     * Format a number with fixed notation.
     * @param {BigNumber} value
     * @param {number} [precision=undefined] Optional number of decimals after the
     *                                       decimal point. Undefined by default.
     */

    function toFixed(value, precision) {
      return value.toFixed(precision);
    }

    /**
     * Check if a text ends with a certain string.
     * @param {string} text
     * @param {string} search
     */

    function endsWith(text, search) {
      var start = text.length - search.length;
      var end = text.length;
      return text.substring(start, end) === search;
    }
    /**
     * Format a value of any type into a string.
     *
     * Usage:
     *     math.format(value)
     *     math.format(value, precision)
     *     math.format(value, options)
     *
     * When value is a function:
     *
     * - When the function has a property `syntax`, it returns this
     *   syntax description.
     * - In other cases, a string `'function'` is returned.
     *
     * When `value` is an Object:
     *
     * - When the object contains a property `format` being a function, this
     *   function is invoked as `value.format(options)` and the result is returned.
     * - When the object has its own `toString` method, this method is invoked
     *   and the result is returned.
     * - In other cases the function will loop over all object properties and
     *   return JSON object notation like '{"a": 2, "b": 3}'.
     *
     * Example usage:
     *     math.format(2/7)                // '0.2857142857142857'
     *     math.format(math.pi, 3)         // '3.14'
     *     math.format(new Complex(2, 3))  // '2 + 3i'
     *     math.format('hello')            // '"hello"'
     *
     * @param {*} value             Value to be stringified
     * @param {Object | number | Function} [options]
     *     Formatting options. See src/utils/number.js:format for a
     *     description of the available options controlling number output.
     *     This generic "format" also supports the option property `truncate: NN`
     *     giving the maximum number NN of characters to return (if there would
     *     have been more, they are deleted and replaced by an ellipsis).
     * @return {string} str
     */

    function format$1(value, options) {
      var result = _format(value, options);

      if (options && typeof options === 'object' && 'truncate' in options && result.length > options.truncate) {
        return result.substring(0, options.truncate - 3) + '...';
      }

      return result;
    }

    function _format(value, options) {
      if (typeof value === 'number') {
        return format$3(value, options);
      }

      if (isBigNumber(value)) {
        return format$2(value, options);
      } // note: we use unsafe duck-typing here to check for Fractions, this is
      // ok here since we're only invoking toString or concatenating its values


      if (looksLikeFraction(value)) {
        if (!options || options.fraction !== 'decimal') {
          // output as ratio, like '1/3'
          return value.s * value.n + '/' + value.d;
        } else {
          // output as decimal, like '0.(3)'
          return value.toString();
        }
      }

      if (Array.isArray(value)) {
        return formatArray(value, options);
      }

      if (isString(value)) {
        return '"' + value + '"';
      }

      if (typeof value === 'function') {
        return value.syntax ? String(value.syntax) : 'function';
      }

      if (value && typeof value === 'object') {
        if (typeof value.format === 'function') {
          return value.format(options);
        } else if (value && value.toString(options) !== {}.toString()) {
          // this object has a non-native toString method, use that one
          return value.toString(options);
        } else {
          var entries = Object.keys(value).map(key => {
            return '"' + key + '": ' + format$1(value[key], options);
          });
          return '{' + entries.join(', ') + '}';
        }
      }

      return String(value);
    }
    /**
     * Stringify a value into a string enclosed in double quotes.
     * Unescaped double quotes and backslashes inside the value are escaped.
     * @param {*} value
     * @return {string}
     */


    function stringify(value) {
      var text = String(value);
      var escaped = '';
      var i = 0;

      while (i < text.length) {
        var c = text.charAt(i);

        if (c === '\\') {
          escaped += c;
          i++;
          c = text.charAt(i);

          if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
            escaped += '\\'; // no valid escape character -> escape it
          }

          escaped += c;
        } else if (c === '"') {
          escaped += '\\"';
        } else {
          escaped += c;
        }

        i++;
      }

      return '"' + escaped + '"';
    }
    /**
     * Escape special HTML characters
     * @param {*} value
     * @return {string}
     */

    function escape$1(value) {
      var text = String(value);
      text = text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      return text;
    }
    /**
     * Recursively format an n-dimensional matrix
     * Example output: "[[1, 2], [3, 4]]"
     * @param {Array} array
     * @param {Object | number | Function} [options]  Formatting options. See
     *                                                lib/utils/number:format for a
     *                                                description of the available
     *                                                options.
     * @returns {string} str
     */

    function formatArray(array, options) {
      if (Array.isArray(array)) {
        var str = '[';
        var len = array.length;

        for (var i = 0; i < len; i++) {
          if (i !== 0) {
            str += ', ';
          }

          str += formatArray(array[i], options);
        }

        str += ']';
        return str;
      } else {
        return format$1(array, options);
      }
    }
    /**
     * Check whether a value looks like a Fraction (unsafe duck-type check)
     * @param {*} value
     * @return {boolean}
     */


    function looksLikeFraction(value) {
      return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
    }
    /**
     * Compare two strings
     * @param {string} x
     * @param {string} y
     * @returns {number}
     */


    function compareText$1(x, y) {
      // we don't want to convert numbers to string, only accept string input
      if (!isString(x)) {
        throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf$1(x) + ', index: 0)');
      }

      if (!isString(y)) {
        throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf$1(y) + ', index: 1)');
      }

      return x === y ? 0 : x > y ? 1 : -1;
    }

    /**
     * Create a range error with the message:
     *     'Dimension mismatch (<actual size> != <expected size>)'
     * @param {number | number[]} actual        The actual size
     * @param {number | number[]} expected      The expected size
     * @param {string} [relation='!=']          Optional relation between actual
     *                                          and expected size: '!=', '<', etc.
     * @extends RangeError
     */
    function DimensionError(actual, expected, relation) {
      if (!(this instanceof DimensionError)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }

      this.actual = actual;
      this.expected = expected;
      this.relation = relation;
      this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
      this.stack = new Error().stack;
    }
    DimensionError.prototype = new RangeError();
    DimensionError.prototype.constructor = RangeError;
    DimensionError.prototype.name = 'DimensionError';
    DimensionError.prototype.isDimensionError = true;

    /**
     * Create a range error with the message:
     *     'Index out of range (index < min)'
     *     'Index out of range (index < max)'
     *
     * @param {number} index     The actual index
     * @param {number} [min=0]   Minimum index (included)
     * @param {number} [max]     Maximum index (excluded)
     * @extends RangeError
     */
    function IndexError(index, min, max) {
      if (!(this instanceof IndexError)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }

      this.index = index;

      if (arguments.length < 3) {
        this.min = 0;
        this.max = min;
      } else {
        this.min = min;
        this.max = max;
      }

      if (this.min !== undefined && this.index < this.min) {
        this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
      } else if (this.max !== undefined && this.index >= this.max) {
        this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
      } else {
        this.message = 'Index out of range (' + this.index + ')';
      }

      this.stack = new Error().stack;
    }
    IndexError.prototype = new RangeError();
    IndexError.prototype.constructor = RangeError;
    IndexError.prototype.name = 'IndexError';
    IndexError.prototype.isIndexError = true;

    /**
     * Calculate the size of a multi dimensional array.
     * This function checks the size of the first entry, it does not validate
     * whether all dimensions match. (use function `validate` for that)
     * @param {Array} x
     * @Return {Number[]} size
     */

    function arraySize(x) {
      var s = [];

      while (Array.isArray(x)) {
        s.push(x.length);
        x = x[0];
      }

      return s;
    }
    /**
     * Recursively validate whether each element in a multi dimensional array
     * has a size corresponding to the provided size array.
     * @param {Array} array    Array to be validated
     * @param {number[]} size  Array with the size of each dimension
     * @param {number} dim   Current dimension
     * @throws DimensionError
     * @private
     */

    function _validate(array, size, dim) {
      var i;
      var len = array.length;

      if (len !== size[dim]) {
        throw new DimensionError(len, size[dim]);
      }

      if (dim < size.length - 1) {
        // recursively validate each child array
        var dimNext = dim + 1;

        for (i = 0; i < len; i++) {
          var child = array[i];

          if (!Array.isArray(child)) {
            throw new DimensionError(size.length - 1, size.length, '<');
          }

          _validate(array[i], size, dimNext);
        }
      } else {
        // last dimension. none of the childs may be an array
        for (i = 0; i < len; i++) {
          if (Array.isArray(array[i])) {
            throw new DimensionError(size.length + 1, size.length, '>');
          }
        }
      }
    }
    /**
     * Validate whether each element in a multi dimensional array has
     * a size corresponding to the provided size array.
     * @param {Array} array    Array to be validated
     * @param {number[]} size  Array with the size of each dimension
     * @throws DimensionError
     */


    function validate(array, size) {
      var isScalar = size.length === 0;

      if (isScalar) {
        // scalar
        if (Array.isArray(array)) {
          throw new DimensionError(array.length, 0);
        }
      } else {
        // array
        _validate(array, size, 0);
      }
    }
    /**
     * Test whether index is an integer number with index >= 0 and index < length
     * when length is provided
     * @param {number} index    Zero-based index
     * @param {number} [length] Length of the array
     */

    function validateIndex(index, length) {
      if (!isNumber(index) || !isInteger$1(index)) {
        throw new TypeError('Index must be an integer (value: ' + index + ')');
      }

      if (index < 0 || typeof length === 'number' && index >= length) {
        throw new IndexError(index, length);
      }
    }
    /**
     * Resize a multi dimensional array. The resized array is returned.
     * @param {Array} array         Array to be resized
     * @param {Array.<number>} size Array with the size of each dimension
     * @param {*} [defaultValue=0]  Value to be filled in in new entries,
     *                              zero by default. Specify for example `null`,
     *                              to clearly see entries that are not explicitly
     *                              set.
     * @return {Array} array         The resized array
     */

    function resize$1(array, size, defaultValue) {
      // TODO: add support for scalars, having size=[] ?
      // check the type of the arguments
      if (!Array.isArray(array) || !Array.isArray(size)) {
        throw new TypeError('Array expected');
      }

      if (size.length === 0) {
        throw new Error('Resizing to scalar is not supported');
      } // check whether size contains positive integers


      size.forEach(function (value) {
        if (!isNumber(value) || !isInteger$1(value) || value < 0) {
          throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$1(size) + ')');
        }
      }); // recursively resize the array

      var _defaultValue = defaultValue !== undefined ? defaultValue : 0;

      _resize(array, size, 0, _defaultValue);

      return array;
    }
    /**
     * Recursively resize a multi dimensional array
     * @param {Array} array         Array to be resized
     * @param {number[]} size       Array with the size of each dimension
     * @param {number} dim          Current dimension
     * @param {*} [defaultValue]    Value to be filled in in new entries,
     *                              undefined by default.
     * @private
     */

    function _resize(array, size, dim, defaultValue) {
      var i;
      var elem;
      var oldLen = array.length;
      var newLen = size[dim];
      var minLen = Math.min(oldLen, newLen); // apply new length

      array.length = newLen;

      if (dim < size.length - 1) {
        // non-last dimension
        var dimNext = dim + 1; // resize existing child arrays

        for (i = 0; i < minLen; i++) {
          // resize child array
          elem = array[i];

          if (!Array.isArray(elem)) {
            elem = [elem]; // add a dimension

            array[i] = elem;
          }

          _resize(elem, size, dimNext, defaultValue);
        } // create new child arrays


        for (i = minLen; i < newLen; i++) {
          // get child array
          elem = [];
          array[i] = elem; // resize new child array

          _resize(elem, size, dimNext, defaultValue);
        }
      } else {
        // last dimension
        // remove dimensions of existing values
        for (i = 0; i < minLen; i++) {
          while (Array.isArray(array[i])) {
            array[i] = array[i][0];
          }
        } // fill new elements with the default value


        for (i = minLen; i < newLen; i++) {
          array[i] = defaultValue;
        }
      }
    }
    /**
     * Re-shape a multi dimensional array to fit the specified dimensions
     * @param {Array} array           Array to be reshaped
     * @param {Array.<number>} sizes  List of sizes for each dimension
     * @returns {Array}               Array whose data has been formatted to fit the
     *                                specified dimensions
     *
     * @throws {DimensionError}       If the product of the new dimension sizes does
     *                                not equal that of the old ones
     */


    function reshape$1(array, sizes) {
      var flatArray = flatten$2(array);
      var currentLength = flatArray.length;

      if (!Array.isArray(array) || !Array.isArray(sizes)) {
        throw new TypeError('Array expected');
      }

      if (sizes.length === 0) {
        throw new DimensionError(0, currentLength, '!=');
      }

      sizes = processSizesWildcard(sizes, currentLength);
      var newLength = product$1(sizes);

      if (currentLength !== newLength) {
        throw new DimensionError(newLength, currentLength, '!=');
      }

      try {
        return _reshape(flatArray, sizes);
      } catch (e) {
        if (e instanceof DimensionError) {
          throw new DimensionError(newLength, currentLength, '!=');
        }

        throw e;
      }
    }
    /**
     * Replaces the wildcard -1 in the sizes array.
     * @param {Array.<number>} sizes  List of sizes for each dimension. At most on wildcard.
     * @param {number} currentLength  Number of elements in the array.
     * @throws {Error}                If more than one wildcard or unable to replace it.
     * @returns {Array.<number>}      The sizes array with wildcard replaced.
     */

    function processSizesWildcard(sizes, currentLength) {
      var newLength = product$1(sizes);
      var processedSizes = sizes.slice();
      var WILDCARD = -1;
      var wildCardIndex = sizes.indexOf(WILDCARD);
      var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;

      if (isMoreThanOneWildcard) {
        throw new Error('More than one wildcard in sizes');
      }

      var hasWildcard = wildCardIndex >= 0;
      var canReplaceWildcard = currentLength % newLength === 0;

      if (hasWildcard) {
        if (canReplaceWildcard) {
          processedSizes[wildCardIndex] = -currentLength / newLength;
        } else {
          throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);
        }
      }

      return processedSizes;
    }
    /**
     * Computes the product of all array elements.
     * @param {Array<number>} array Array of factors
     * @returns {number}            Product of all elements
     */

    function product$1(array) {
      return array.reduce((prev, curr) => prev * curr, 1);
    }
    /**
     * Iteratively re-shape a multi dimensional array to fit the specified dimensions
     * @param {Array} array           Array to be reshaped
     * @param {Array.<number>} sizes  List of sizes for each dimension
     * @returns {Array}               Array whose data has been formatted to fit the
     *                                specified dimensions
     */


    function _reshape(array, sizes) {
      // testing if there are enough elements for the requested shape
      var tmpArray = array;
      var tmpArray2; // for each dimensions starting by the last one and ignoring the first one

      for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
        var size = sizes[sizeIndex];
        tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size

        var length = tmpArray.length / size;

        for (var i = 0; i < length; i++) {
          tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
        } // set it as the new tmpArray for the next loop turn or for return


        tmpArray = tmpArray2;
      }

      return tmpArray;
    }
    /**
     * Squeeze a multi dimensional array
     * @param {Array} array
     * @param {Array} [size]
     * @returns {Array} returns the array itself
     */


    function squeeze$1(array, size) {
      var s = size || arraySize(array); // squeeze outer dimensions

      while (Array.isArray(array) && array.length === 1) {
        array = array[0];
        s.shift();
      } // find the first dimension to be squeezed


      var dims = s.length;

      while (s[dims - 1] === 1) {
        dims--;
      } // squeeze inner dimensions


      if (dims < s.length) {
        array = _squeeze(array, dims, 0);
        s.length = dims;
      }

      return array;
    }
    /**
     * Recursively squeeze a multi dimensional array
     * @param {Array} array
     * @param {number} dims Required number of dimensions
     * @param {number} dim  Current dimension
     * @returns {Array | *} Returns the squeezed array
     * @private
     */

    function _squeeze(array, dims, dim) {
      var i, ii;

      if (dim < dims) {
        var next = dim + 1;

        for (i = 0, ii = array.length; i < ii; i++) {
          array[i] = _squeeze(array[i], dims, next);
        }
      } else {
        while (Array.isArray(array)) {
          array = array[0];
        }
      }

      return array;
    }
    /**
     * Unsqueeze a multi dimensional array: add dimensions when missing
     *
     * Paramter `size` will be mutated to match the new, unqueezed matrix size.
     *
     * @param {Array} array
     * @param {number} dims       Desired number of dimensions of the array
     * @param {number} [outer]    Number of outer dimensions to be added
     * @param {Array} [size] Current size of array.
     * @returns {Array} returns the array itself
     * @private
     */


    function unsqueeze(array, dims, outer, size) {
      var s = size || arraySize(array); // unsqueeze outer dimensions

      if (outer) {
        for (var i = 0; i < outer; i++) {
          array = [array];
          s.unshift(1);
        }
      } // unsqueeze inner dimensions


      array = _unsqueeze(array, dims, 0);

      while (s.length < dims) {
        s.push(1);
      }

      return array;
    }
    /**
     * Recursively unsqueeze a multi dimensional array
     * @param {Array} array
     * @param {number} dims Required number of dimensions
     * @param {number} dim  Current dimension
     * @returns {Array | *} Returns the squeezed array
     * @private
     */

    function _unsqueeze(array, dims, dim) {
      var i, ii;

      if (Array.isArray(array)) {
        var next = dim + 1;

        for (i = 0, ii = array.length; i < ii; i++) {
          array[i] = _unsqueeze(array[i], dims, next);
        }
      } else {
        for (var d = dim; d < dims; d++) {
          array = [array];
        }
      }

      return array;
    }
    /**
     * Flatten a multi dimensional array, put all elements in a one dimensional
     * array
     * @param {Array} array   A multi dimensional array
     * @return {Array}        The flattened array (1 dimensional)
     */


    function flatten$2(array) {
      if (!Array.isArray(array)) {
        // if not an array, return as is
        return array;
      }

      var flat = [];
      array.forEach(function callback(value) {
        if (Array.isArray(value)) {
          value.forEach(callback); // traverse through sub-arrays recursively
        } else {
          flat.push(value);
        }
      });
      return flat;
    }
    /**
     * A safe map
     * @param {Array} array
     * @param {function} callback
     */

    function map$1(array, callback) {
      return Array.prototype.map.call(array, callback);
    }
    /**
     * A safe forEach
     * @param {Array} array
     * @param {function} callback
     */

    function forEach$1(array, callback) {
      Array.prototype.forEach.call(array, callback);
    }
    /**
     * A safe filter
     * @param {Array} array
     * @param {function} callback
     */

    function filter$1(array, callback) {
      if (arraySize(array).length !== 1) {
        throw new Error('Only one dimensional matrices supported');
      }

      return Array.prototype.filter.call(array, callback);
    }
    /**
     * Filter values in a callback given a regular expression
     * @param {Array} array
     * @param {RegExp} regexp
     * @return {Array} Returns the filtered array
     * @private
     */

    function filterRegExp(array, regexp) {
      if (arraySize(array).length !== 1) {
        throw new Error('Only one dimensional matrices supported');
      }

      return Array.prototype.filter.call(array, entry => regexp.test(entry));
    }
    /**
     * A safe join
     * @param {Array} array
     * @param {string} separator
     */

    function join(array, separator) {
      return Array.prototype.join.call(array, separator);
    }
    /**
     * Assign a numeric identifier to every element of a sorted array
     * @param {Array} a  An array
     * @return {Array} An array of objects containing the original value and its identifier
     */

    function identify(a) {
      if (!Array.isArray(a)) {
        throw new TypeError('Array input expected');
      }

      if (a.length === 0) {
        return a;
      }

      var b = [];
      var count = 0;
      b[0] = {
        value: a[0],
        identifier: 0
      };

      for (var i = 1; i < a.length; i++) {
        if (a[i] === a[i - 1]) {
          count++;
        } else {
          count = 0;
        }

        b.push({
          value: a[i],
          identifier: count
        });
      }

      return b;
    }
    /**
     * Remove the numeric identifier from the elements
     * @param {array} a  An array
     * @return {array} An array of values without identifiers
     */

    function generalize(a) {
      if (!Array.isArray(a)) {
        throw new TypeError('Array input expected');
      }

      if (a.length === 0) {
        return a;
      }

      var b = [];

      for (var i = 0; i < a.length; i++) {
        b.push(a[i].value);
      }

      return b;
    }
    /**
     * Check the datatype of a given object
     * This is a low level implementation that should only be used by
     * parent Matrix classes such as SparseMatrix or DenseMatrix
     * This method does not validate Array Matrix shape
     * @param {Array} array
     * @param {function} typeOf   Callback function to use to determine the type of a value
     * @return {string}
     */

    function getArrayDataType(array, typeOf) {
      var type; // to hold type info

      var length = 0; // to hold length value to ensure it has consistent sizes

      for (var i = 0; i < array.length; i++) {
        var item = array[i];
        var isArray = Array.isArray(item); // Saving the target matrix row size

        if (i === 0 && isArray) {
          length = item.length;
        } // If the current item is an array but the length does not equal the targetVectorSize


        if (isArray && item.length !== length) {
          return undefined;
        }

        var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array
        : typeOf(item);

        if (type === undefined) {
          type = itemType; // first item
        } else if (type !== itemType) {
          return 'mixed';
        } else ;
      }

      return type;
    }

    /**
     * Create a factory function, which can be used to inject dependencies.
     *
     * The created functions are memoized, a consecutive call of the factory
     * with the exact same inputs will return the same function instance.
     * The memoized cache is exposed on `factory.cache` and can be cleared
     * if needed.
     *
     * Example:
     *
     *     const name = 'log'
     *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']
     *
     *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {
     *       // ... create the function log here and return it
     *     }
     *
     * @param {string} name           Name of the function to be created
     * @param {string[]} dependencies The names of all required dependencies
     * @param {function} create       Callback function called with an object with all dependencies
     * @param {Object} [meta]         Optional object with meta information that will be attached
     *                                to the created factory function as property `meta`.
     * @returns {function}
     */

    function factory(name, dependencies, create, meta) {
      function assertAndCreate(scope) {
        // we only pass the requested dependencies to the factory function
        // to prevent functions to rely on dependencies that are not explicitly
        // requested.
        var deps = pickShallow(scope, dependencies.map(stripOptionalNotation));
        assertDependencies(name, dependencies, scope);
        return create(deps);
      }

      assertAndCreate.isFactory = true;
      assertAndCreate.fn = name;
      assertAndCreate.dependencies = dependencies.slice().sort();

      if (meta) {
        assertAndCreate.meta = meta;
      }

      return assertAndCreate;
    }
    /**
     * Assert that all dependencies of a list with dependencies are available in the provided scope.
     *
     * Will throw an exception when there are dependencies missing.
     *
     * @param {string} name   Name for the function to be created. Used to generate a useful error message
     * @param {string[]} dependencies
     * @param {Object} scope
     */

    function assertDependencies(name, dependencies, scope) {
      var allDefined = dependencies.filter(dependency => !isOptionalDependency(dependency)) // filter optionals
      .every(dependency => scope[dependency] !== undefined);

      if (!allDefined) {
        var missingDependencies = dependencies.filter(dependency => scope[dependency] === undefined); // TODO: create a custom error class for this, a MathjsError or something like that

        throw new Error("Cannot create function \"".concat(name, "\", ") + "some dependencies are missing: ".concat(missingDependencies.map(d => "\"".concat(d, "\"")).join(', '), "."));
      }
    }
    function isOptionalDependency(dependency) {
      return dependency && dependency[0] === '?';
    }
    function stripOptionalNotation(dependency) {
      return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;
    }

    /**
     * Get a property of a plain object
     * Throws an error in case the object is not a plain object or the
     * property is not defined on the object itself
     * @param {Object} object
     * @param {string} prop
     * @return {*} Returns the property value when safe
     */

    function getSafeProperty(object, prop) {
      // only allow getting safe properties of a plain object
      if (isPlainObject(object) && isSafeProperty(object, prop)) {
        return object[prop];
      }

      if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
        throw new Error('Cannot access method "' + prop + '" as a property');
      }

      throw new Error('No access to property "' + prop + '"');
    }
    /**
     * Set a property on a plain object.
     * Throws an error in case the object is not a plain object or the
     * property would override an inherited property like .constructor or .toString
     * @param {Object} object
     * @param {string} prop
     * @param {*} value
     * @return {*} Returns the value
     */
    // TODO: merge this function into access.js?


    function setSafeProperty(object, prop, value) {
      // only allow setting safe properties of a plain object
      if (isPlainObject(object) && isSafeProperty(object, prop)) {
        object[prop] = value;
        return value;
      }

      throw new Error('No access to property "' + prop + '"');
    }

    function hasSafeProperty(object, prop) {
      return prop in object;
    }
    /**
     * Test whether a property is safe to use for an object.
     * For example .toString and .constructor are not safe
     * @param {string} prop
     * @return {boolean} Returns true when safe
     */


    function isSafeProperty(object, prop) {
      if (!object || typeof object !== 'object') {
        return false;
      } // SAFE: whitelisted
      // e.g length


      if (hasOwnProperty$1(safeNativeProperties, prop)) {
        return true;
      } // UNSAFE: inherited from Object prototype
      // e.g constructor


      if (prop in Object.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Object.prototype is a root object
        return false;
      } // UNSAFE: inherited from Function prototype
      // e.g call, apply


      if (prop in Function.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Function.prototype is a root object
        return false;
      }

      return true;
    }
    /**
     * Validate whether a method is safe.
     * Throws an error when that's not the case.
     * @param {Object} object
     * @param {string} method
     */
    // TODO: merge this function into assign.js?


    function validateSafeMethod(object, method) {
      if (!isSafeMethod(object, method)) {
        throw new Error('No access to method "' + method + '"');
      }
    }
    /**
     * Check whether a method is safe.
     * Throws an error when that's not the case (for example for `constructor`).
     * @param {Object} object
     * @param {string} method
     * @return {boolean} Returns true when safe, false otherwise
     */


    function isSafeMethod(object, method) {
      if (object === null || object === undefined || typeof object[method] !== 'function') {
        return false;
      } // UNSAFE: ghosted
      // e.g overridden toString
      // Note that IE10 doesn't support __proto__ and we can't do this check there.


      if (hasOwnProperty$1(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {
        return false;
      } // SAFE: whitelisted
      // e.g toString


      if (hasOwnProperty$1(safeNativeMethods, method)) {
        return true;
      } // UNSAFE: inherited from Object prototype
      // e.g constructor


      if (method in Object.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Object.prototype is a root object
        return false;
      } // UNSAFE: inherited from Function prototype
      // e.g call, apply


      if (method in Function.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Function.prototype is a root object
        return false;
      }

      return true;
    }

    function isPlainObject(object) {
      return typeof object === 'object' && object && object.constructor === Object;
    }

    var safeNativeProperties = {
      length: true,
      name: true
    };
    var safeNativeMethods = {
      toString: true,
      valueOf: true,
      toLocaleString: true
    };

    /**
     * A map facade on a bare object.
     *
     * The small number of methods needed to implement a scope,
     * forwarding on to the SafeProperty functions. Over time, the codebase
     * will stop using this method, as all objects will be Maps, rather than
     * more security prone objects.
     */

    class ObjectWrappingMap {
      constructor(object) {
        this.wrappedObject = object;
      }

      keys() {
        return Object.keys(this.wrappedObject);
      }

      get(key) {
        return getSafeProperty(this.wrappedObject, key);
      }

      set(key, value) {
        setSafeProperty(this.wrappedObject, key, value);
        return this;
      }

      has(key) {
        return hasSafeProperty(this.wrappedObject, key);
      }

    }
    /**
     * Creates an empty map, or whatever your platform's polyfill is.
     *
     * @returns an empty Map or Map like object.
     */

    function createEmptyMap() {
      return new Map();
    }
    /**
     * Creates a Map from the given object.
     *
     * @param { Map | { [key: string]: unknown } | undefined } mapOrObject
     * @returns
     */

    function createMap$1(mapOrObject) {
      if (!mapOrObject) {
        return createEmptyMap();
      }

      if (isMap(mapOrObject)) {
        return mapOrObject;
      }

      if (isObject(mapOrObject)) {
        return new ObjectWrappingMap(mapOrObject);
      }

      throw new Error('createMap can create maps from objects or Maps');
    }
    /**
     * Unwraps a map into an object.
     *
     * @param {Map} map
     * @returns { [key: string]: unknown }
     */

    function toObject(map) {
      if (map instanceof ObjectWrappingMap) {
        return map.wrappedObject;
      }

      var object = {};

      for (var key of map.keys()) {
        var value = map.get(key);
        setSafeProperty(object, key, value);
      }

      return object;
    }
    /**
     * Returns `true` if the passed object appears to be a Map (i.e. duck typing).
     *
     * Methods looked for are `get`, `set`, `keys` and `has`.
     *
     * @param {Map | object} object
     * @returns
     */

    function isMap(object) {
      // We can use the fast instanceof, or a slower duck typing check.
      // The duck typing method needs to cover enough methods to not be confused with DenseMatrix.
      if (!object) {
        return false;
      }

      return object instanceof Map || object instanceof ObjectWrappingMap || typeof object.set === 'function' && typeof object.get === 'function' && typeof object.keys === 'function' && typeof object.has === 'function';
    }
    /**
     * Copies the contents of key-value pairs from each `objects` in to `map`.
     *
     * Object is `objects` can be a `Map` or object.
     *
     * This is the `Map` analog to `Object.assign`.
     */

    function assign(map) {
      for (var _len = arguments.length, objects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        objects[_key - 1] = arguments[_key];
      }

      for (var args of objects) {
        if (!args) {
          continue;
        }

        if (isMap(args)) {
          for (var key of args.keys()) {
            map.set(key, args.get(key));
          }
        } else if (isObject(args)) {
          for (var _key2 of Object.keys(args)) {
            map.set(_key2, args[_key2]);
          }
        }
      }

      return map;
    }

    /**
     * Create a typed-function which checks the types of the arguments and
     * can match them against multiple provided signatures. The typed-function
     * automatically converts inputs in order to find a matching signature.
     * Typed functions throw informative errors in case of wrong input arguments.
     *
     * See the library [typed-function](https://github.com/josdejong/typed-function)
     * for detailed documentation.
     *
     * Syntax:
     *
     *     math.typed(name, signatures) : function
     *     math.typed(signatures) : function
     *
     * Examples:
     *
     *     // create a typed function with multiple types per argument (type union)
     *     const fn2 = typed({
     *       'number | boolean': function (b) {
     *         return 'b is a number or boolean'
     *       },
     *       'string, number | boolean': function (a, b) {
     *         return 'a is a string, b is a number or boolean'
     *       }
     *     })
     *
     *     // create a typed function with an any type argument
     *     const log = typed({
     *       'string, any': function (event, data) {
     *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
     *       }
     *     })
     *
     * @param {string} [name]                          Optional name for the typed-function
     * @param {Object<string, function>} signatures   Object with one or multiple function signatures
     * @returns {function} The created typed-function.
     */

    var _createTyped2 = function _createTyped() {
      // initially, return the original instance of typed-function
      // consecutively, return a new instance from typed.create.
      _createTyped2 = typedFunction.create;
      return typedFunction;
    };

    var dependencies$4D = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];
    /**
     * Factory function for creating a new typed instance
     * @param {Object} dependencies   Object with data types like Complex and BigNumber
     * @returns {Function}
     */

    var createTyped = /* #__PURE__ */factory('typed', dependencies$4D, function createTyped(_ref) {
      var {
        BigNumber,
        Complex,
        DenseMatrix,
        Fraction
      } = _ref;

      // TODO: typed-function must be able to silently ignore signatures with unknown data types
      // get a new instance of typed-function
      var typed = _createTyped2(); // define all types. The order of the types determines in which order function
      // arguments are type-checked (so for performance it's important to put the
      // most used types first).


      typed.types = [{
        name: 'number',
        test: isNumber
      }, {
        name: 'Complex',
        test: isComplex
      }, {
        name: 'BigNumber',
        test: isBigNumber
      }, {
        name: 'Fraction',
        test: isFraction
      }, {
        name: 'Unit',
        test: isUnit
      }, {
        name: 'string',
        test: isString
      }, {
        name: 'Chain',
        test: isChain
      }, {
        name: 'Array',
        test: isArray
      }, {
        name: 'Matrix',
        test: isMatrix
      }, {
        name: 'DenseMatrix',
        test: isDenseMatrix
      }, {
        name: 'SparseMatrix',
        test: isSparseMatrix
      }, {
        name: 'Range',
        test: isRange
      }, {
        name: 'Index',
        test: isIndex
      }, {
        name: 'boolean',
        test: isBoolean
      }, {
        name: 'ResultSet',
        test: isResultSet
      }, {
        name: 'Help',
        test: isHelp
      }, {
        name: 'function',
        test: isFunction
      }, {
        name: 'Date',
        test: isDate
      }, {
        name: 'RegExp',
        test: isRegExp
      }, {
        name: 'null',
        test: isNull
      }, {
        name: 'undefined',
        test: isUndefined
      }, {
        name: 'AccessorNode',
        test: isAccessorNode
      }, {
        name: 'ArrayNode',
        test: isArrayNode
      }, {
        name: 'AssignmentNode',
        test: isAssignmentNode
      }, {
        name: 'BlockNode',
        test: isBlockNode
      }, {
        name: 'ConditionalNode',
        test: isConditionalNode
      }, {
        name: 'ConstantNode',
        test: isConstantNode
      }, {
        name: 'FunctionNode',
        test: isFunctionNode
      }, {
        name: 'FunctionAssignmentNode',
        test: isFunctionAssignmentNode
      }, {
        name: 'IndexNode',
        test: isIndexNode
      }, {
        name: 'Node',
        test: isNode
      }, {
        name: 'ObjectNode',
        test: isObjectNode
      }, {
        name: 'OperatorNode',
        test: isOperatorNode
      }, {
        name: 'ParenthesisNode',
        test: isParenthesisNode
      }, {
        name: 'RangeNode',
        test: isRangeNode
      }, {
        name: 'SymbolNode',
        test: isSymbolNode
      }, {
        name: 'Map',
        test: isMap
      }, {
        name: 'Object',
        test: isObject
      } // order 'Object' last, it matches on other classes too
      ];
      typed.conversions = [{
        from: 'number',
        to: 'BigNumber',
        convert: function convert(x) {
          if (!BigNumber) {
            throwNoBignumber(x);
          } // note: conversion from number to BigNumber can fail if x has >15 digits


          if (digits(x) > 15) {
            throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
          }

          return new BigNumber(x);
        }
      }, {
        from: 'number',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }

          return new Complex(x, 0);
        }
      }, {
        from: 'number',
        to: 'string',
        convert: function convert(x) {
          return x + '';
        }
      }, {
        from: 'BigNumber',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }

          return new Complex(x.toNumber(), 0);
        }
      }, {
        from: 'Fraction',
        to: 'BigNumber',
        convert: function convert(x) {
          throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
        }
      }, {
        from: 'Fraction',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }

          return new Complex(x.valueOf(), 0);
        }
      }, {
        from: 'number',
        to: 'Fraction',
        convert: function convert(x) {
          if (!Fraction) {
            throwNoFraction(x);
          }

          var f = new Fraction(x);

          if (f.valueOf() !== x) {
            throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
          }

          return f;
        }
      }, {
        // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
        //  from: 'Fraction',
        //  to: 'number',
        //  convert: function (x) {
        //    return x.valueOf()
        //  }
        // }, {
        from: 'string',
        to: 'number',
        convert: function convert(x) {
          var n = Number(x);

          if (isNaN(n)) {
            throw new Error('Cannot convert "' + x + '" to a number');
          }

          return n;
        }
      }, {
        from: 'string',
        to: 'BigNumber',
        convert: function convert(x) {
          if (!BigNumber) {
            throwNoBignumber(x);
          }

          try {
            return new BigNumber(x);
          } catch (err) {
            throw new Error('Cannot convert "' + x + '" to BigNumber');
          }
        }
      }, {
        from: 'string',
        to: 'Fraction',
        convert: function convert(x) {
          if (!Fraction) {
            throwNoFraction(x);
          }

          try {
            return new Fraction(x);
          } catch (err) {
            throw new Error('Cannot convert "' + x + '" to Fraction');
          }
        }
      }, {
        from: 'string',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }

          try {
            return new Complex(x);
          } catch (err) {
            throw new Error('Cannot convert "' + x + '" to Complex');
          }
        }
      }, {
        from: 'boolean',
        to: 'number',
        convert: function convert(x) {
          return +x;
        }
      }, {
        from: 'boolean',
        to: 'BigNumber',
        convert: function convert(x) {
          if (!BigNumber) {
            throwNoBignumber(x);
          }

          return new BigNumber(+x);
        }
      }, {
        from: 'boolean',
        to: 'Fraction',
        convert: function convert(x) {
          if (!Fraction) {
            throwNoFraction(x);
          }

          return new Fraction(+x);
        }
      }, {
        from: 'boolean',
        to: 'string',
        convert: function convert(x) {
          return String(x);
        }
      }, {
        from: 'Array',
        to: 'Matrix',
        convert: function convert(array) {
          if (!DenseMatrix) {
            throwNoMatrix();
          }

          return new DenseMatrix(array);
        }
      }, {
        from: 'Matrix',
        to: 'Array',
        convert: function convert(matrix) {
          return matrix.valueOf();
        }
      }];
      return typed;
    });

    function throwNoBignumber(x) {
      throw new Error("Cannot convert value ".concat(x, " into a BigNumber: no class 'BigNumber' provided"));
    }

    function throwNoComplex(x) {
      throw new Error("Cannot convert value ".concat(x, " into a Complex number: no class 'Complex' provided"));
    }

    function throwNoMatrix() {
      throw new Error('Cannot convert array into a Matrix: no class \'DenseMatrix\' provided');
    }

    function throwNoFraction(x) {
      throw new Error("Cannot convert value ".concat(x, " into a Fraction, no class 'Fraction' provided."));
    }

    var name$4C = 'ResultSet';
    var dependencies$4C = [];
    var createResultSet = /* #__PURE__ */factory(name$4C, dependencies$4C, () => {
      /**
       * A ResultSet contains a list or results
       * @class ResultSet
       * @param {Array} entries
       * @constructor ResultSet
       */
      function ResultSet(entries) {
        if (!(this instanceof ResultSet)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.entries = entries || [];
      }
      /**
       * Attach type information
       */


      ResultSet.prototype.type = 'ResultSet';
      ResultSet.prototype.isResultSet = true;
      /**
       * Returns the array with results hold by this ResultSet
       * @memberof ResultSet
       * @returns {Array} entries
       */

      ResultSet.prototype.valueOf = function () {
        return this.entries;
      };
      /**
       * Returns the stringified results of the ResultSet
       * @memberof ResultSet
       * @returns {string} string
       */


      ResultSet.prototype.toString = function () {
        return '[' + this.entries.join(', ') + ']';
      };
      /**
       * Get a JSON representation of the ResultSet
       * @memberof ResultSet
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "ResultSet", "entries": [...]}`
       */


      ResultSet.prototype.toJSON = function () {
        return {
          mathjs: 'ResultSet',
          entries: this.entries
        };
      };
      /**
       * Instantiate a ResultSet from a JSON object
       * @memberof ResultSet
       * @param {Object} json  A JSON object structured as:
       *                       `{"mathjs": "ResultSet", "entries": [...]}`
       * @return {ResultSet}
       */


      ResultSet.fromJSON = function (json) {
        return new ResultSet(json.entries);
      };

      return ResultSet;
    }, {
      isClass: true
    });

    var decimal = createCommonjsModule(function (module) {
    (function (globalScope) {


      /*
       *  decimal.js v10.3.1
       *  An arbitrary-precision Decimal type for JavaScript.
       *  https://github.com/MikeMcl/decimal.js
       *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>
       *  MIT Licence
       */


      // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


        // The maximum exponent magnitude.
        // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
      var EXP_LIMIT = 9e15,                      // 0 to 9e15

        // The limit on the value of `precision`, and on the value of the first argument to
        // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
        MAX_DIGITS = 1e9,                        // 0 to 1e9

        // Base conversion alphabet.
        NUMERALS = '0123456789abcdef',

        // The natural logarithm of 10 (1025 digits).
        LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

        // Pi (1025 digits).
        PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


        // The initial configuration properties of the Decimal constructor.
        DEFAULTS = {

          // These values must be integers within the stated ranges (inclusive).
          // Most of these values can be changed at run-time using the `Decimal.config` method.

          // The maximum number of significant digits of the result of a calculation or base conversion.
          // E.g. `Decimal.config({ precision: 20 });`
          precision: 20,                         // 1 to MAX_DIGITS

          // The rounding mode used when rounding to `precision`.
          //
          // ROUND_UP         0 Away from zero.
          // ROUND_DOWN       1 Towards zero.
          // ROUND_CEIL       2 Towards +Infinity.
          // ROUND_FLOOR      3 Towards -Infinity.
          // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
          // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
          // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
          // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
          // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
          //
          // E.g.
          // `Decimal.rounding = 4;`
          // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
          rounding: 4,                           // 0 to 8

          // The modulo mode used when calculating the modulus: a mod n.
          // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
          // The remainder (r) is calculated as: r = a - n * q.
          //
          // UP         0 The remainder is positive if the dividend is negative, else is negative.
          // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
          // FLOOR      3 The remainder has the same sign as the divisor (Python %).
          // HALF_EVEN  6 The IEEE 754 remainder function.
          // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
          //
          // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
          // division (9) are commonly used for the modulus operation. The other rounding modes can also
          // be used, but they may not give useful results.
          modulo: 1,                             // 0 to 9

          // The exponent value at and beneath which `toString` returns exponential notation.
          // JavaScript numbers: -7
          toExpNeg: -7,                          // 0 to -EXP_LIMIT

          // The exponent value at and above which `toString` returns exponential notation.
          // JavaScript numbers: 21
          toExpPos:  21,                         // 0 to EXP_LIMIT

          // The minimum exponent value, beneath which underflow to zero occurs.
          // JavaScript numbers: -324  (5e-324)
          minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

          // The maximum exponent value, above which overflow to Infinity occurs.
          // JavaScript numbers: 308  (1.7976931348623157e+308)
          maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

          // Whether to use cryptographically-secure random number generation, if available.
          crypto: false                          // true/false
        },


      // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


        Decimal, inexact, noConflict, quadrant,
        external = true,

        decimalError = '[DecimalError] ',
        invalidArgument = decimalError + 'Invalid argument: ',
        precisionLimitExceeded = decimalError + 'Precision limit exceeded',
        cryptoUnavailable = decimalError + 'crypto unavailable',
        tag = '[object Decimal]',

        mathfloor = Math.floor,
        mathpow = Math.pow,

        isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
        isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
        isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
        isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

        BASE = 1e7,
        LOG_BASE = 7,
        MAX_SAFE_INTEGER = 9007199254740991,

        LN10_PRECISION = LN10.length - 1,
        PI_PRECISION = PI.length - 1,

        // Decimal.prototype object
        P = { toStringTag: tag };


      // Decimal prototype methods


      /*
       *  absoluteValue             abs
       *  ceil
       *  clampedTo                 clamp
       *  comparedTo                cmp
       *  cosine                    cos
       *  cubeRoot                  cbrt
       *  decimalPlaces             dp
       *  dividedBy                 div
       *  dividedToIntegerBy        divToInt
       *  equals                    eq
       *  floor
       *  greaterThan               gt
       *  greaterThanOrEqualTo      gte
       *  hyperbolicCosine          cosh
       *  hyperbolicSine            sinh
       *  hyperbolicTangent         tanh
       *  inverseCosine             acos
       *  inverseHyperbolicCosine   acosh
       *  inverseHyperbolicSine     asinh
       *  inverseHyperbolicTangent  atanh
       *  inverseSine               asin
       *  inverseTangent            atan
       *  isFinite
       *  isInteger                 isInt
       *  isNaN
       *  isNegative                isNeg
       *  isPositive                isPos
       *  isZero
       *  lessThan                  lt
       *  lessThanOrEqualTo         lte
       *  logarithm                 log
       *  [maximum]                 [max]
       *  [minimum]                 [min]
       *  minus                     sub
       *  modulo                    mod
       *  naturalExponential        exp
       *  naturalLogarithm          ln
       *  negated                   neg
       *  plus                      add
       *  precision                 sd
       *  round
       *  sine                      sin
       *  squareRoot                sqrt
       *  tangent                   tan
       *  times                     mul
       *  toBinary
       *  toDecimalPlaces           toDP
       *  toExponential
       *  toFixed
       *  toFraction
       *  toHexadecimal             toHex
       *  toNearest
       *  toNumber
       *  toOctal
       *  toPower                   pow
       *  toPrecision
       *  toSignificantDigits       toSD
       *  toString
       *  truncated                 trunc
       *  valueOf                   toJSON
       */


      /*
       * Return a new Decimal whose value is the absolute value of this Decimal.
       *
       */
      P.absoluteValue = P.abs = function () {
        var x = new this.constructor(this);
        if (x.s < 0) x.s = 1;
        return finalise(x);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
       * direction of positive Infinity.
       *
       */
      P.ceil = function () {
        return finalise(new this.constructor(this), this.e + 1, 2);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal clamped to the range
       * delineated by `min` and `max`.
       *
       * min {number|string|Decimal}
       * max {number|string|Decimal}
       *
       */
      P.clampedTo = P.clamp = function (min, max) {
        var k,
          x = this,
          Ctor = x.constructor;
        min = new Ctor(min);
        max = new Ctor(max);
        if (!min.s || !max.s) return new Ctor(NaN);
        if (min.gt(max)) throw Error(invalidArgument + max);
        k = x.cmp(min);
        return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);
      };


      /*
       * Return
       *   1    if the value of this Decimal is greater than the value of `y`,
       *  -1    if the value of this Decimal is less than the value of `y`,
       *   0    if they have the same value,
       *   NaN  if the value of either Decimal is NaN.
       *
       */
      P.comparedTo = P.cmp = function (y) {
        var i, j, xdL, ydL,
          x = this,
          xd = x.d,
          yd = (y = new x.constructor(y)).d,
          xs = x.s,
          ys = y.s;

        // Either NaN or ±Infinity?
        if (!xd || !yd) {
          return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
        }

        // Either zero?
        if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

        // Signs differ?
        if (xs !== ys) return xs;

        // Compare exponents.
        if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

        xdL = xd.length;
        ydL = yd.length;

        // Compare digit by digit.
        for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
          if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
        }

        // Compare lengths.
        return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
      };


      /*
       * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-1, 1]
       *
       * cos(0)         = 1
       * cos(-0)        = 1
       * cos(Infinity)  = NaN
       * cos(-Infinity) = NaN
       * cos(NaN)       = NaN
       *
       */
      P.cosine = P.cos = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (!x.d) return new Ctor(NaN);

        // cos(0) = cos(-0) = 1
        if (!x.d[0]) return new Ctor(1);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
        Ctor.rounding = 1;

        x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
      };


      /*
       *
       * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       *  cbrt(0)  =  0
       *  cbrt(-0) = -0
       *  cbrt(1)  =  1
       *  cbrt(-1) = -1
       *  cbrt(N)  =  N
       *  cbrt(-I) = -I
       *  cbrt(I)  =  I
       *
       * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
       *
       */
      P.cubeRoot = P.cbrt = function () {
        var e, m, n, r, rep, s, sd, t, t3, t3plusx,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite() || x.isZero()) return new Ctor(x);
        external = false;

        // Initial estimate.
        s = x.s * mathpow(x.s * x, 1 / 3);

         // Math.cbrt underflow/overflow?
         // Pass x to Math.pow as integer, then adjust the exponent of the result.
        if (!s || Math.abs(s) == 1 / 0) {
          n = digitsToString(x.d);
          e = x.e;

          // Adjust n exponent so it is a multiple of 3 away from x exponent.
          if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
          s = mathpow(n, 1 / 3);

          // Rarely, e may be one less than the result exponent value.
          e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

          if (s == 1 / 0) {
            n = '5e' + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf('e') + 1) + e;
          }

          r = new Ctor(n);
          r.s = x.s;
        } else {
          r = new Ctor(s.toString());
        }

        sd = (e = Ctor.precision) + 3;

        // Halley's method.
        // TODO? Compare Newton's method.
        for (;;) {
          t = r;
          t3 = t.times(t).times(t);
          t3plusx = t3.plus(x);
          r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

          // TODO? Replace with for-loop and checkRoundingDigits.
          if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
            n = n.slice(sd - 3, sd + 1);

            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
            // , i.e. approaching a rounding boundary, continue the iteration.
            if (n == '9999' || !rep && n == '4999') {

              // On the first iteration only, check to see if rounding up gives the exact result as the
              // nines may infinitely repeat.
              if (!rep) {
                finalise(t, e + 1, 0);

                if (t.times(t).times(t).eq(x)) {
                  r = t;
                  break;
                }
              }

              sd += 4;
              rep = 1;
            } else {

              // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
              // If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                // Truncate to the first rounding digit.
                finalise(r, e + 1, 1);
                m = !r.times(r).times(r).eq(x);
              }

              break;
            }
          }
        }

        external = true;

        return finalise(r, e, Ctor.rounding, m);
      };


      /*
       * Return the number of decimal places of the value of this Decimal.
       *
       */
      P.decimalPlaces = P.dp = function () {
        var w,
          d = this.d,
          n = NaN;

        if (d) {
          w = d.length - 1;
          n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

          // Subtract the number of trailing zeros of the last word.
          w = d[w];
          if (w) for (; w % 10 == 0; w /= 10) n--;
          if (n < 0) n = 0;
        }

        return n;
      };


      /*
       *  n / 0 = I
       *  n / N = N
       *  n / I = 0
       *  0 / n = 0
       *  0 / 0 = N
       *  0 / N = N
       *  0 / I = 0
       *  N / n = N
       *  N / 0 = N
       *  N / N = N
       *  N / I = N
       *  I / n = I
       *  I / 0 = I
       *  I / N = N
       *  I / I = N
       *
       * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       */
      P.dividedBy = P.div = function (y) {
        return divide(this, new this.constructor(y));
      };


      /*
       * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
       * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
       *
       */
      P.dividedToIntegerBy = P.divToInt = function (y) {
        var x = this,
          Ctor = x.constructor;
        return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
      };


      /*
       * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
       *
       */
      P.equals = P.eq = function (y) {
        return this.cmp(y) === 0;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
       * direction of negative Infinity.
       *
       */
      P.floor = function () {
        return finalise(new this.constructor(this), this.e + 1, 3);
      };


      /*
       * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
       * false.
       *
       */
      P.greaterThan = P.gt = function (y) {
        return this.cmp(y) > 0;
      };


      /*
       * Return true if the value of this Decimal is greater than or equal to the value of `y`,
       * otherwise return false.
       *
       */
      P.greaterThanOrEqualTo = P.gte = function (y) {
        var k = this.cmp(y);
        return k == 1 || k === 0;
      };


      /*
       * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [1, Infinity]
       *
       * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
       *
       * cosh(0)         = 1
       * cosh(-0)        = 1
       * cosh(Infinity)  = Infinity
       * cosh(-Infinity) = Infinity
       * cosh(NaN)       = NaN
       *
       *  x        time taken (ms)   result
       * 1000      9                 9.8503555700852349694e+433
       * 10000     25                4.4034091128314607936e+4342
       * 100000    171               1.4033316802130615897e+43429
       * 1000000   3817              1.5166076984010437725e+434294
       * 10000000  abandoned after 2 minute wait
       *
       * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
       *
       */
      P.hyperbolicCosine = P.cosh = function () {
        var k, n, pr, rm, len,
          x = this,
          Ctor = x.constructor,
          one = new Ctor(1);

        if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
        if (x.isZero()) return one;

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
        Ctor.rounding = 1;
        len = x.d.length;

        // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
        // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

        // Estimate the optimum number of times to use the argument reduction.
        // TODO? Estimation reused from cosine() and may not be optimal here.
        if (len < 32) {
          k = Math.ceil(len / 3);
          n = (1 / tinyPow(4, k)).toString();
        } else {
          k = 16;
          n = '2.3283064365386962890625e-10';
        }

        x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

        // Reverse argument reduction
        var cosh2_x,
          i = k,
          d8 = new Ctor(8);
        for (; i--;) {
          cosh2_x = x.times(x);
          x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
        }

        return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
      };


      /*
       * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-Infinity, Infinity]
       *
       * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
       *
       * sinh(0)         = 0
       * sinh(-0)        = -0
       * sinh(Infinity)  = Infinity
       * sinh(-Infinity) = -Infinity
       * sinh(NaN)       = NaN
       *
       * x        time taken (ms)
       * 10       2 ms
       * 100      5 ms
       * 1000     14 ms
       * 10000    82 ms
       * 100000   886 ms            1.4033316802130615897e+43429
       * 200000   2613 ms
       * 300000   5407 ms
       * 400000   8824 ms
       * 500000   13026 ms          8.7080643612718084129e+217146
       * 1000000  48543 ms
       *
       * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
       *
       */
      P.hyperbolicSine = P.sinh = function () {
        var k, pr, rm, len,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite() || x.isZero()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
        Ctor.rounding = 1;
        len = x.d.length;

        if (len < 3) {
          x = taylorSeries(Ctor, 2, x, x, true);
        } else {

          // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
          // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
          // 3 multiplications and 1 addition

          // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
          // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
          // 4 multiplications and 2 additions

          // Estimate the optimum number of times to use the argument reduction.
          k = 1.4 * Math.sqrt(len);
          k = k > 16 ? 16 : k | 0;

          x = x.times(1 / tinyPow(5, k));
          x = taylorSeries(Ctor, 2, x, x, true);

          // Reverse argument reduction
          var sinh2_x,
            d5 = new Ctor(5),
            d16 = new Ctor(16),
            d20 = new Ctor(20);
          for (; k--;) {
            sinh2_x = x.times(x);
            x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
          }
        }

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return finalise(x, pr, rm, true);
      };


      /*
       * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-1, 1]
       *
       * tanh(x) = sinh(x) / cosh(x)
       *
       * tanh(0)         = 0
       * tanh(-0)        = -0
       * tanh(Infinity)  = 1
       * tanh(-Infinity) = -1
       * tanh(NaN)       = NaN
       *
       */
      P.hyperbolicTangent = P.tanh = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite()) return new Ctor(x.s);
        if (x.isZero()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 7;
        Ctor.rounding = 1;

        return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
      };


      /*
       * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
       * this Decimal.
       *
       * Domain: [-1, 1]
       * Range: [0, pi]
       *
       * acos(x) = pi/2 - asin(x)
       *
       * acos(0)       = pi/2
       * acos(-0)      = pi/2
       * acos(1)       = 0
       * acos(-1)      = pi
       * acos(1/2)     = pi/3
       * acos(-1/2)    = 2*pi/3
       * acos(|x| > 1) = NaN
       * acos(NaN)     = NaN
       *
       */
      P.inverseCosine = P.acos = function () {
        var halfPi,
          x = this,
          Ctor = x.constructor,
          k = x.abs().cmp(1),
          pr = Ctor.precision,
          rm = Ctor.rounding;

        if (k !== -1) {
          return k === 0
            // |x| is 1
            ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
            // |x| > 1 or x is NaN
            : new Ctor(NaN);
        }

        if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

        // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

        Ctor.precision = pr + 6;
        Ctor.rounding = 1;

        x = x.asin();
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return halfPi.minus(x);
      };


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
       * value of this Decimal.
       *
       * Domain: [1, Infinity]
       * Range: [0, Infinity]
       *
       * acosh(x) = ln(x + sqrt(x^2 - 1))
       *
       * acosh(x < 1)     = NaN
       * acosh(NaN)       = NaN
       * acosh(Infinity)  = Infinity
       * acosh(-Infinity) = NaN
       * acosh(0)         = NaN
       * acosh(-0)        = NaN
       * acosh(1)         = 0
       * acosh(-1)        = NaN
       *
       */
      P.inverseHyperbolicCosine = P.acosh = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
        if (!x.isFinite()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
        Ctor.rounding = 1;
        external = false;

        x = x.times(x).minus(1).sqrt().plus(x);

        external = true;
        Ctor.precision = pr;
        Ctor.rounding = rm;

        return x.ln();
      };


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
       * of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-Infinity, Infinity]
       *
       * asinh(x) = ln(x + sqrt(x^2 + 1))
       *
       * asinh(NaN)       = NaN
       * asinh(Infinity)  = Infinity
       * asinh(-Infinity) = -Infinity
       * asinh(0)         = 0
       * asinh(-0)        = -0
       *
       */
      P.inverseHyperbolicSine = P.asinh = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite() || x.isZero()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
        Ctor.rounding = 1;
        external = false;

        x = x.times(x).plus(1).sqrt().plus(x);

        external = true;
        Ctor.precision = pr;
        Ctor.rounding = rm;

        return x.ln();
      };


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
       * value of this Decimal.
       *
       * Domain: [-1, 1]
       * Range: [-Infinity, Infinity]
       *
       * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
       *
       * atanh(|x| > 1)   = NaN
       * atanh(NaN)       = NaN
       * atanh(Infinity)  = NaN
       * atanh(-Infinity) = NaN
       * atanh(0)         = 0
       * atanh(-0)        = -0
       * atanh(1)         = Infinity
       * atanh(-1)        = -Infinity
       *
       */
      P.inverseHyperbolicTangent = P.atanh = function () {
        var pr, rm, wpr, xsd,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite()) return new Ctor(NaN);
        if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        xsd = x.sd();

        if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

        Ctor.precision = wpr = xsd - x.e;

        x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

        Ctor.precision = pr + 4;
        Ctor.rounding = 1;

        x = x.ln();

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return x.times(0.5);
      };


      /*
       * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-pi/2, pi/2]
       *
       * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
       *
       * asin(0)       = 0
       * asin(-0)      = -0
       * asin(1/2)     = pi/6
       * asin(-1/2)    = -pi/6
       * asin(1)       = pi/2
       * asin(-1)      = -pi/2
       * asin(|x| > 1) = NaN
       * asin(NaN)     = NaN
       *
       * TODO? Compare performance of Taylor series.
       *
       */
      P.inverseSine = P.asin = function () {
        var halfPi, k,
          pr, rm,
          x = this,
          Ctor = x.constructor;

        if (x.isZero()) return new Ctor(x);

        k = x.abs().cmp(1);
        pr = Ctor.precision;
        rm = Ctor.rounding;

        if (k !== -1) {

          // |x| is 1
          if (k === 0) {
            halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
            halfPi.s = x.s;
            return halfPi;
          }

          // |x| > 1 or x is NaN
          return new Ctor(NaN);
        }

        // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

        Ctor.precision = pr + 6;
        Ctor.rounding = 1;

        x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return x.times(2);
      };


      /*
       * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
       * of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-pi/2, pi/2]
       *
       * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
       *
       * atan(0)         = 0
       * atan(-0)        = -0
       * atan(1)         = pi/4
       * atan(-1)        = -pi/4
       * atan(Infinity)  = pi/2
       * atan(-Infinity) = -pi/2
       * atan(NaN)       = NaN
       *
       */
      P.inverseTangent = P.atan = function () {
        var i, j, k, n, px, t, r, wpr, x2,
          x = this,
          Ctor = x.constructor,
          pr = Ctor.precision,
          rm = Ctor.rounding;

        if (!x.isFinite()) {
          if (!x.s) return new Ctor(NaN);
          if (pr + 4 <= PI_PRECISION) {
            r = getPi(Ctor, pr + 4, rm).times(0.5);
            r.s = x.s;
            return r;
          }
        } else if (x.isZero()) {
          return new Ctor(x);
        } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
          r = getPi(Ctor, pr + 4, rm).times(0.25);
          r.s = x.s;
          return r;
        }

        Ctor.precision = wpr = pr + 10;
        Ctor.rounding = 1;

        // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

        // Argument reduction
        // Ensure |x| < 0.42
        // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

        k = Math.min(28, wpr / LOG_BASE + 2 | 0);

        for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

        external = false;

        j = Math.ceil(wpr / LOG_BASE);
        n = 1;
        x2 = x.times(x);
        r = new Ctor(x);
        px = x;

        // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
        for (; i !== -1;) {
          px = px.times(x2);
          t = r.minus(px.div(n += 2));

          px = px.times(x2);
          r = t.plus(px.div(n += 2));

          if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
        }

        if (k) r = r.times(2 << (k - 1));

        external = true;

        return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
      };


      /*
       * Return true if the value of this Decimal is a finite number, otherwise return false.
       *
       */
      P.isFinite = function () {
        return !!this.d;
      };


      /*
       * Return true if the value of this Decimal is an integer, otherwise return false.
       *
       */
      P.isInteger = P.isInt = function () {
        return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
      };


      /*
       * Return true if the value of this Decimal is NaN, otherwise return false.
       *
       */
      P.isNaN = function () {
        return !this.s;
      };


      /*
       * Return true if the value of this Decimal is negative, otherwise return false.
       *
       */
      P.isNegative = P.isNeg = function () {
        return this.s < 0;
      };


      /*
       * Return true if the value of this Decimal is positive, otherwise return false.
       *
       */
      P.isPositive = P.isPos = function () {
        return this.s > 0;
      };


      /*
       * Return true if the value of this Decimal is 0 or -0, otherwise return false.
       *
       */
      P.isZero = function () {
        return !!this.d && this.d[0] === 0;
      };


      /*
       * Return true if the value of this Decimal is less than `y`, otherwise return false.
       *
       */
      P.lessThan = P.lt = function (y) {
        return this.cmp(y) < 0;
      };


      /*
       * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
       *
       */
      P.lessThanOrEqualTo = P.lte = function (y) {
        return this.cmp(y) < 1;
      };


      /*
       * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * If no base is specified, return log[10](arg).
       *
       * log[base](arg) = ln(arg) / ln(base)
       *
       * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
       * otherwise:
       *
       * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
       * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
       * between the result and the correctly rounded result will be one ulp (unit in the last place).
       *
       * log[-b](a)       = NaN
       * log[0](a)        = NaN
       * log[1](a)        = NaN
       * log[NaN](a)      = NaN
       * log[Infinity](a) = NaN
       * log[b](0)        = -Infinity
       * log[b](-0)       = -Infinity
       * log[b](-a)       = NaN
       * log[b](1)        = 0
       * log[b](Infinity) = Infinity
       * log[b](NaN)      = NaN
       *
       * [base] {number|string|Decimal} The base of the logarithm.
       *
       */
      P.logarithm = P.log = function (base) {
        var isBase10, d, denominator, k, inf, num, sd, r,
          arg = this,
          Ctor = arg.constructor,
          pr = Ctor.precision,
          rm = Ctor.rounding,
          guard = 5;

        // Default base is 10.
        if (base == null) {
          base = new Ctor(10);
          isBase10 = true;
        } else {
          base = new Ctor(base);
          d = base.d;

          // Return NaN if base is negative, or non-finite, or is 0 or 1.
          if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

          isBase10 = base.eq(10);
        }

        d = arg.d;

        // Is arg negative, non-finite, 0 or 1?
        if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
          return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
        }

        // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
        // integer power of 10.
        if (isBase10) {
          if (d.length > 1) {
            inf = true;
          } else {
            for (k = d[0]; k % 10 === 0;) k /= 10;
            inf = k !== 1;
          }
        }

        external = false;
        sd = pr + guard;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

        // The result will have 5 rounding digits.
        r = divide(num, denominator, sd, 1);

        // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
        // calculate 10 further digits.
        //
        // If the result is known to have an infinite decimal expansion, repeat this until it is clear
        // that the result is above or below the boundary. Otherwise, if after calculating the 10
        // further digits, the last 14 are nines, round up and assume the result is exact.
        // Also assume the result is exact if the last 14 are zero.
        //
        // Example of a result that will be incorrectly rounded:
        // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
        // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
        // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
        // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
        // place is still 2.6.
        if (checkRoundingDigits(r.d, k = pr, rm)) {

          do {
            sd += 10;
            num = naturalLogarithm(arg, sd);
            denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
            r = divide(num, denominator, sd, 1);

            if (!inf) {

              // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
              if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
                r = finalise(r, pr + 1, 0);
              }

              break;
            }
          } while (checkRoundingDigits(r.d, k += 10, rm));
        }

        external = true;

        return finalise(r, pr, rm);
      };


      /*
       * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
       *
       * arguments {number|string|Decimal}
       *
      P.max = function () {
        Array.prototype.push.call(arguments, this);
        return maxOrMin(this.constructor, arguments, 'lt');
      };
       */


      /*
       * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
       *
       * arguments {number|string|Decimal}
       *
      P.min = function () {
        Array.prototype.push.call(arguments, this);
        return maxOrMin(this.constructor, arguments, 'gt');
      };
       */


      /*
       *  n - 0 = n
       *  n - N = N
       *  n - I = -I
       *  0 - n = -n
       *  0 - 0 = 0
       *  0 - N = N
       *  0 - I = -I
       *  N - n = N
       *  N - 0 = N
       *  N - N = N
       *  N - I = N
       *  I - n = I
       *  I - 0 = I
       *  I - N = N
       *  I - I = N
       *
       * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       */
      P.minus = P.sub = function (y) {
        var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
          x = this,
          Ctor = x.constructor;

        y = new Ctor(y);

        // If either is not finite...
        if (!x.d || !y.d) {

          // Return NaN if either is NaN.
          if (!x.s || !y.s) y = new Ctor(NaN);

          // Return y negated if x is finite and y is ±Infinity.
          else if (x.d) y.s = -y.s;

          // Return x if y is finite and x is ±Infinity.
          // Return x if both are ±Infinity with different signs.
          // Return NaN if both are ±Infinity with the same sign.
          else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

          return y;
        }

        // If signs differ...
        if (x.s != y.s) {
          y.s = -y.s;
          return x.plus(y);
        }

        xd = x.d;
        yd = y.d;
        pr = Ctor.precision;
        rm = Ctor.rounding;

        // If either is zero...
        if (!xd[0] || !yd[0]) {

          // Return y negated if x is zero and y is non-zero.
          if (yd[0]) y.s = -y.s;

          // Return x if y is zero and x is non-zero.
          else if (xd[0]) y = new Ctor(x);

          // Return zero if both are zero.
          // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
          else return new Ctor(rm === 3 ? -0 : 0);

          return external ? finalise(y, pr, rm) : y;
        }

        // x and y are finite, non-zero numbers with the same sign.

        // Calculate base 1e7 exponents.
        e = mathfloor(y.e / LOG_BASE);
        xe = mathfloor(x.e / LOG_BASE);

        xd = xd.slice();
        k = xe - e;

        // If base 1e7 exponents differ...
        if (k) {
          xLTy = k < 0;

          if (xLTy) {
            d = xd;
            k = -k;
            len = yd.length;
          } else {
            d = yd;
            e = xe;
            len = xd.length;
          }

          // Numbers with massively different exponents would result in a very high number of
          // zeros needing to be prepended, but this can be avoided while still ensuring correct
          // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
          i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

          if (k > i) {
            k = i;
            d.length = 1;
          }

          // Prepend zeros to equalise exponents.
          d.reverse();
          for (i = k; i--;) d.push(0);
          d.reverse();

        // Base 1e7 exponents equal.
        } else {

          // Check digits to determine which is the bigger number.

          i = xd.length;
          len = yd.length;
          xLTy = i < len;
          if (xLTy) len = i;

          for (i = 0; i < len; i++) {
            if (xd[i] != yd[i]) {
              xLTy = xd[i] < yd[i];
              break;
            }
          }

          k = 0;
        }

        if (xLTy) {
          d = xd;
          xd = yd;
          yd = d;
          y.s = -y.s;
        }

        len = xd.length;

        // Append zeros to `xd` if shorter.
        // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
        for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

        // Subtract yd from xd.
        for (i = yd.length; i > k;) {

          if (xd[--i] < yd[i]) {
            for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
            --xd[j];
            xd[i] += BASE;
          }

          xd[i] -= yd[i];
        }

        // Remove trailing zeros.
        for (; xd[--len] === 0;) xd.pop();

        // Remove leading zeros and adjust exponent accordingly.
        for (; xd[0] === 0; xd.shift()) --e;

        // Zero?
        if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

        y.d = xd;
        y.e = getBase10Exponent(xd, e);

        return external ? finalise(y, pr, rm) : y;
      };


      /*
       *   n % 0 =  N
       *   n % N =  N
       *   n % I =  n
       *   0 % n =  0
       *  -0 % n = -0
       *   0 % 0 =  N
       *   0 % N =  N
       *   0 % I =  0
       *   N % n =  N
       *   N % 0 =  N
       *   N % N =  N
       *   N % I =  N
       *   I % n =  N
       *   I % 0 =  N
       *   I % N =  N
       *   I % I =  N
       *
       * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * The result depends on the modulo mode.
       *
       */
      P.modulo = P.mod = function (y) {
        var q,
          x = this,
          Ctor = x.constructor;

        y = new Ctor(y);

        // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
        if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

        // Return x if y is ±Infinity or x is ±0.
        if (!y.d || x.d && !x.d[0]) {
          return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
        }

        // Prevent rounding of intermediate calculations.
        external = false;

        if (Ctor.modulo == 9) {

          // Euclidian division: q = sign(y) * floor(x / abs(y))
          // result = x - q * y    where  0 <= result < abs(y)
          q = divide(x, y.abs(), 0, 3, 1);
          q.s *= y.s;
        } else {
          q = divide(x, y, 0, Ctor.modulo, 1);
        }

        q = q.times(y);

        external = true;

        return x.minus(q);
      };


      /*
       * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
       * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       */
      P.naturalExponential = P.exp = function () {
        return naturalExponential(this);
      };


      /*
       * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
       * rounded to `precision` significant digits using rounding mode `rounding`.
       *
       */
      P.naturalLogarithm = P.ln = function () {
        return naturalLogarithm(this);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
       * -1.
       *
       */
      P.negated = P.neg = function () {
        var x = new this.constructor(this);
        x.s = -x.s;
        return finalise(x);
      };


      /*
       *  n + 0 = n
       *  n + N = N
       *  n + I = I
       *  0 + n = n
       *  0 + 0 = 0
       *  0 + N = N
       *  0 + I = I
       *  N + n = N
       *  N + 0 = N
       *  N + N = N
       *  N + I = N
       *  I + n = I
       *  I + 0 = I
       *  I + N = N
       *  I + I = I
       *
       * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       */
      P.plus = P.add = function (y) {
        var carry, d, e, i, k, len, pr, rm, xd, yd,
          x = this,
          Ctor = x.constructor;

        y = new Ctor(y);

        // If either is not finite...
        if (!x.d || !y.d) {

          // Return NaN if either is NaN.
          if (!x.s || !y.s) y = new Ctor(NaN);

          // Return x if y is finite and x is ±Infinity.
          // Return x if both are ±Infinity with the same sign.
          // Return NaN if both are ±Infinity with different signs.
          // Return y if x is finite and y is ±Infinity.
          else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

          return y;
        }

         // If signs differ...
        if (x.s != y.s) {
          y.s = -y.s;
          return x.minus(y);
        }

        xd = x.d;
        yd = y.d;
        pr = Ctor.precision;
        rm = Ctor.rounding;

        // If either is zero...
        if (!xd[0] || !yd[0]) {

          // Return x if y is zero.
          // Return y if y is non-zero.
          if (!yd[0]) y = new Ctor(x);

          return external ? finalise(y, pr, rm) : y;
        }

        // x and y are finite, non-zero numbers with the same sign.

        // Calculate base 1e7 exponents.
        k = mathfloor(x.e / LOG_BASE);
        e = mathfloor(y.e / LOG_BASE);

        xd = xd.slice();
        i = k - e;

        // If base 1e7 exponents differ...
        if (i) {

          if (i < 0) {
            d = xd;
            i = -i;
            len = yd.length;
          } else {
            d = yd;
            e = k;
            len = xd.length;
          }

          // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
          k = Math.ceil(pr / LOG_BASE);
          len = k > len ? k + 1 : len + 1;

          if (i > len) {
            i = len;
            d.length = 1;
          }

          // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
          d.reverse();
          for (; i--;) d.push(0);
          d.reverse();
        }

        len = xd.length;
        i = yd.length;

        // If yd is longer than xd, swap xd and yd so xd points to the longer array.
        if (len - i < 0) {
          i = len;
          d = yd;
          yd = xd;
          xd = d;
        }

        // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
        for (carry = 0; i;) {
          carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
          xd[i] %= BASE;
        }

        if (carry) {
          xd.unshift(carry);
          ++e;
        }

        // Remove trailing zeros.
        // No need to check for zero, as +x + +y != 0 && -x + -y != 0
        for (len = xd.length; xd[--len] == 0;) xd.pop();

        y.d = xd;
        y.e = getBase10Exponent(xd, e);

        return external ? finalise(y, pr, rm) : y;
      };


      /*
       * Return the number of significant digits of the value of this Decimal.
       *
       * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
       *
       */
      P.precision = P.sd = function (z) {
        var k,
          x = this;

        if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

        if (x.d) {
          k = getPrecision(x.d);
          if (z && x.e + 1 > k) k = x.e + 1;
        } else {
          k = NaN;
        }

        return k;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
       * rounding mode `rounding`.
       *
       */
      P.round = function () {
        var x = this,
          Ctor = x.constructor;

        return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
      };


      /*
       * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-1, 1]
       *
       * sin(x) = x - x^3/3! + x^5/5! - ...
       *
       * sin(0)         = 0
       * sin(-0)        = -0
       * sin(Infinity)  = NaN
       * sin(-Infinity) = NaN
       * sin(NaN)       = NaN
       *
       */
      P.sine = P.sin = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite()) return new Ctor(NaN);
        if (x.isZero()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
        Ctor.rounding = 1;

        x = sine(Ctor, toLessThanHalfPi(Ctor, x));

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
      };


      /*
       * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       *  sqrt(-n) =  N
       *  sqrt(N)  =  N
       *  sqrt(-I) =  N
       *  sqrt(I)  =  I
       *  sqrt(0)  =  0
       *  sqrt(-0) = -0
       *
       */
      P.squareRoot = P.sqrt = function () {
        var m, n, sd, r, rep, t,
          x = this,
          d = x.d,
          e = x.e,
          s = x.s,
          Ctor = x.constructor;

        // Negative/NaN/Infinity/zero?
        if (s !== 1 || !d || !d[0]) {
          return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
        }

        external = false;

        // Initial estimate.
        s = Math.sqrt(+x);

        // Math.sqrt underflow/overflow?
        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
        if (s == 0 || s == 1 / 0) {
          n = digitsToString(d);

          if ((n.length + e) % 2 == 0) n += '0';
          s = Math.sqrt(n);
          e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

          if (s == 1 / 0) {
            n = '5e' + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf('e') + 1) + e;
          }

          r = new Ctor(n);
        } else {
          r = new Ctor(s.toString());
        }

        sd = (e = Ctor.precision) + 3;

        // Newton-Raphson iteration.
        for (;;) {
          t = r;
          r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

          // TODO? Replace with for-loop and checkRoundingDigits.
          if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
            n = n.slice(sd - 3, sd + 1);

            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
            // 4999, i.e. approaching a rounding boundary, continue the iteration.
            if (n == '9999' || !rep && n == '4999') {

              // On the first iteration only, check to see if rounding up gives the exact result as the
              // nines may infinitely repeat.
              if (!rep) {
                finalise(t, e + 1, 0);

                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }

              sd += 4;
              rep = 1;
            } else {

              // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
              // If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                // Truncate to the first rounding digit.
                finalise(r, e + 1, 1);
                m = !r.times(r).eq(x);
              }

              break;
            }
          }
        }

        external = true;

        return finalise(r, e, Ctor.rounding, m);
      };


      /*
       * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-Infinity, Infinity]
       *
       * tan(0)         = 0
       * tan(-0)        = -0
       * tan(Infinity)  = NaN
       * tan(-Infinity) = NaN
       * tan(NaN)       = NaN
       *
       */
      P.tangent = P.tan = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite()) return new Ctor(NaN);
        if (x.isZero()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 10;
        Ctor.rounding = 1;

        x = x.sin();
        x.s = 1;
        x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
      };


      /*
       *  n * 0 = 0
       *  n * N = N
       *  n * I = I
       *  0 * n = 0
       *  0 * 0 = 0
       *  0 * N = N
       *  0 * I = N
       *  N * n = N
       *  N * 0 = N
       *  N * N = N
       *  N * I = N
       *  I * n = I
       *  I * 0 = N
       *  I * N = N
       *  I * I = I
       *
       * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       */
      P.times = P.mul = function (y) {
        var carry, e, i, k, r, rL, t, xdL, ydL,
          x = this,
          Ctor = x.constructor,
          xd = x.d,
          yd = (y = new Ctor(y)).d;

        y.s *= x.s;

         // If either is NaN, ±Infinity or ±0...
        if (!xd || !xd[0] || !yd || !yd[0]) {

          return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

            // Return NaN if either is NaN.
            // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
            ? NaN

            // Return ±Infinity if either is ±Infinity.
            // Return ±0 if either is ±0.
            : !xd || !yd ? y.s / 0 : y.s * 0);
        }

        e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
        xdL = xd.length;
        ydL = yd.length;

        // Ensure xd points to the longer array.
        if (xdL < ydL) {
          r = xd;
          xd = yd;
          yd = r;
          rL = xdL;
          xdL = ydL;
          ydL = rL;
        }

        // Initialise the result array with zeros.
        r = [];
        rL = xdL + ydL;
        for (i = rL; i--;) r.push(0);

        // Multiply!
        for (i = ydL; --i >= 0;) {
          carry = 0;
          for (k = xdL + i; k > i;) {
            t = r[k] + yd[i] * xd[k - i - 1] + carry;
            r[k--] = t % BASE | 0;
            carry = t / BASE | 0;
          }

          r[k] = (r[k] + carry) % BASE | 0;
        }

        // Remove trailing zeros.
        for (; !r[--rL];) r.pop();

        if (carry) ++e;
        else r.shift();

        y.d = r;
        y.e = getBase10Exponent(r, e);

        return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
      };


      /*
       * Return a string representing the value of this Decimal in base 2, round to `sd` significant
       * digits using rounding mode `rm`.
       *
       * If the optional `sd` argument is present then return binary exponential notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toBinary = function (sd, rm) {
        return toStringBinary(this, 2, sd, rm);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
       * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
       *
       * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toDecimalPlaces = P.toDP = function (dp, rm) {
        var x = this,
          Ctor = x.constructor;

        x = new Ctor(x);
        if (dp === void 0) return x;

        checkInt32(dp, 0, MAX_DIGITS);

        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);

        return finalise(x, dp + x.e + 1, rm);
      };


      /*
       * Return a string representing the value of this Decimal in exponential notation rounded to
       * `dp` fixed decimal places using rounding mode `rounding`.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toExponential = function (dp, rm) {
        var str,
          x = this,
          Ctor = x.constructor;

        if (dp === void 0) {
          str = finiteToString(x, true);
        } else {
          checkInt32(dp, 0, MAX_DIGITS);

          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);

          x = finalise(new Ctor(x), dp + 1, rm);
          str = finiteToString(x, true, dp + 1);
        }

        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };


      /*
       * Return a string representing the value of this Decimal in normal (fixed-point) notation to
       * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
       * omitted.
       *
       * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
       * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
       * (-0).toFixed(3) is '0.000'.
       * (-0.5).toFixed(0) is '-0'.
       *
       */
      P.toFixed = function (dp, rm) {
        var str, y,
          x = this,
          Ctor = x.constructor;

        if (dp === void 0) {
          str = finiteToString(x);
        } else {
          checkInt32(dp, 0, MAX_DIGITS);

          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);

          y = finalise(new Ctor(x), dp + x.e + 1, rm);
          str = finiteToString(y, false, dp + y.e + 1);
        }

        // To determine whether to add the minus sign look at the value before it was rounded,
        // i.e. look at `x` rather than `y`.
        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };


      /*
       * Return an array representing the value of this Decimal as a simple fraction with an integer
       * numerator and an integer denominator.
       *
       * The denominator will be a positive non-zero value less than or equal to the specified maximum
       * denominator. If a maximum denominator is not specified, the denominator will be the lowest
       * value necessary to represent the number exactly.
       *
       * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
       *
       */
      P.toFraction = function (maxD) {
        var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
          x = this,
          xd = x.d,
          Ctor = x.constructor;

        if (!xd) return new Ctor(x);

        n1 = d0 = new Ctor(1);
        d1 = n0 = new Ctor(0);

        d = new Ctor(d1);
        e = d.e = getPrecision(xd) - x.e - 1;
        k = e % LOG_BASE;
        d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

        if (maxD == null) {

          // d is 10**e, the minimum max-denominator needed.
          maxD = e > 0 ? d : n1;
        } else {
          n = new Ctor(maxD);
          if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
          maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
        }

        external = false;
        n = new Ctor(digitsToString(xd));
        pr = Ctor.precision;
        Ctor.precision = e = xd.length * LOG_BASE * 2;

        for (;;)  {
          q = divide(n, d, 0, 1, 1);
          d2 = d0.plus(q.times(d1));
          if (d2.cmp(maxD) == 1) break;
          d0 = d1;
          d1 = d2;
          d2 = n1;
          n1 = n0.plus(q.times(d2));
          n0 = d2;
          d2 = d;
          d = n.minus(q.times(d2));
          n = d2;
        }

        d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
        n0 = n0.plus(d2.times(n1));
        d0 = d0.plus(d2.times(d1));
        n0.s = n1.s = x.s;

        // Determine which fraction is closer to x, n0/d0 or n1/d1?
        r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
            ? [n1, d1] : [n0, d0];

        Ctor.precision = pr;
        external = true;

        return r;
      };


      /*
       * Return a string representing the value of this Decimal in base 16, round to `sd` significant
       * digits using rounding mode `rm`.
       *
       * If the optional `sd` argument is present then return binary exponential notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toHexadecimal = P.toHex = function (sd, rm) {
        return toStringBinary(this, 16, sd, rm);
      };


      /*
       * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
       * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
       *
       * The return value will always have the same sign as this Decimal, unless either this Decimal
       * or `y` is NaN, in which case the return value will be also be NaN.
       *
       * The return value is not affected by the value of `precision`.
       *
       * y {number|string|Decimal} The magnitude to round to a multiple of.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toNearest() rounding mode not an integer: {rm}'
       * 'toNearest() rounding mode out of range: {rm}'
       *
       */
      P.toNearest = function (y, rm) {
        var x = this,
          Ctor = x.constructor;

        x = new Ctor(x);

        if (y == null) {

          // If x is not finite, return x.
          if (!x.d) return x;

          y = new Ctor(1);
          rm = Ctor.rounding;
        } else {
          y = new Ctor(y);
          if (rm === void 0) {
            rm = Ctor.rounding;
          } else {
            checkInt32(rm, 0, 8);
          }

          // If x is not finite, return x if y is not NaN, else NaN.
          if (!x.d) return y.s ? x : y;

          // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
          if (!y.d) {
            if (y.s) y.s = x.s;
            return y;
          }
        }

        // If y is not zero, calculate the nearest multiple of y to x.
        if (y.d[0]) {
          external = false;
          x = divide(x, y, 0, rm, 1).times(y);
          external = true;
          finalise(x);

        // If y is zero, return zero with the sign of x.
        } else {
          y.s = x.s;
          x = y;
        }

        return x;
      };


      /*
       * Return the value of this Decimal converted to a number primitive.
       * Zero keeps its sign.
       *
       */
      P.toNumber = function () {
        return +this;
      };


      /*
       * Return a string representing the value of this Decimal in base 8, round to `sd` significant
       * digits using rounding mode `rm`.
       *
       * If the optional `sd` argument is present then return binary exponential notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toOctal = function (sd, rm) {
        return toStringBinary(this, 8, sd, rm);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
       * to `precision` significant digits using rounding mode `rounding`.
       *
       * ECMAScript compliant.
       *
       *   pow(x, NaN)                           = NaN
       *   pow(x, ±0)                            = 1

       *   pow(NaN, non-zero)                    = NaN
       *   pow(abs(x) > 1, +Infinity)            = +Infinity
       *   pow(abs(x) > 1, -Infinity)            = +0
       *   pow(abs(x) == 1, ±Infinity)           = NaN
       *   pow(abs(x) < 1, +Infinity)            = +0
       *   pow(abs(x) < 1, -Infinity)            = +Infinity
       *   pow(+Infinity, y > 0)                 = +Infinity
       *   pow(+Infinity, y < 0)                 = +0
       *   pow(-Infinity, odd integer > 0)       = -Infinity
       *   pow(-Infinity, even integer > 0)      = +Infinity
       *   pow(-Infinity, odd integer < 0)       = -0
       *   pow(-Infinity, even integer < 0)      = +0
       *   pow(+0, y > 0)                        = +0
       *   pow(+0, y < 0)                        = +Infinity
       *   pow(-0, odd integer > 0)              = -0
       *   pow(-0, even integer > 0)             = +0
       *   pow(-0, odd integer < 0)              = -Infinity
       *   pow(-0, even integer < 0)             = +Infinity
       *   pow(finite x < 0, finite non-integer) = NaN
       *
       * For non-integer or very large exponents pow(x, y) is calculated using
       *
       *   x^y = exp(y*ln(x))
       *
       * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
       * probability of an incorrectly rounded result
       * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
       * i.e. 1 in 250,000,000,000,000
       *
       * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
       *
       * y {number|string|Decimal} The power to which to raise this Decimal.
       *
       */
      P.toPower = P.pow = function (y) {
        var e, k, pr, r, rm, s,
          x = this,
          Ctor = x.constructor,
          yn = +(y = new Ctor(y));

        // Either ±Infinity, NaN or ±0?
        if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

        x = new Ctor(x);

        if (x.eq(1)) return x;

        pr = Ctor.precision;
        rm = Ctor.rounding;

        if (y.eq(1)) return finalise(x, pr, rm);

        // y exponent
        e = mathfloor(y.e / LOG_BASE);

        // If y is a small integer use the 'exponentiation by squaring' algorithm.
        if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
          r = intPow(Ctor, x, k, pr);
          return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
        }

        s = x.s;

        // if x is negative
        if (s < 0) {

          // if y is not an integer
          if (e < y.d.length - 1) return new Ctor(NaN);

          // Result is positive if x is negative and the last digit of integer y is even.
          if ((y.d[e] & 1) == 0) s = 1;

          // if x.eq(-1)
          if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
            x.s = s;
            return x;
          }
        }

        // Estimate result exponent.
        // x^y = 10^e,  where e = y * log10(x)
        // log10(x) = log10(x_significand) + x_exponent
        // log10(x_significand) = ln(x_significand) / ln(10)
        k = mathpow(+x, yn);
        e = k == 0 || !isFinite(k)
          ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
          : new Ctor(k + '').e;

        // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

        // Overflow/underflow?
        if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

        external = false;
        Ctor.rounding = x.s = 1;

        // Estimate the extra guard digits needed to ensure five correct rounding digits from
        // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
        // new Decimal(2.32456).pow('2087987436534566.46411')
        // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
        k = Math.min(12, (e + '').length);

        // r = x^y = exp(y*ln(x))
        r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

        // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
        if (r.d) {

          // Truncate to the required precision plus five rounding digits.
          r = finalise(r, pr + 5, 1);

          // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
          // the result.
          if (checkRoundingDigits(r.d, pr, rm)) {
            e = pr + 10;

            // Truncate to the increased precision plus five rounding digits.
            r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

            // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
            if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
              r = finalise(r, pr + 1, 0);
            }
          }
        }

        r.s = s;
        external = true;
        Ctor.rounding = rm;

        return finalise(r, pr, rm);
      };


      /*
       * Return a string representing the value of this Decimal rounded to `sd` significant digits
       * using rounding mode `rounding`.
       *
       * Return exponential notation if `sd` is less than the number of digits necessary to represent
       * the integer part of the value in normal notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toPrecision = function (sd, rm) {
        var str,
          x = this,
          Ctor = x.constructor;

        if (sd === void 0) {
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
        } else {
          checkInt32(sd, 1, MAX_DIGITS);

          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);

          x = finalise(new Ctor(x), sd, rm);
          str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
        }

        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
       * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
       * omitted.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toSD() digits out of range: {sd}'
       * 'toSD() digits not an integer: {sd}'
       * 'toSD() rounding mode not an integer: {rm}'
       * 'toSD() rounding mode out of range: {rm}'
       *
       */
      P.toSignificantDigits = P.toSD = function (sd, rm) {
        var x = this,
          Ctor = x.constructor;

        if (sd === void 0) {
          sd = Ctor.precision;
          rm = Ctor.rounding;
        } else {
          checkInt32(sd, 1, MAX_DIGITS);

          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
        }

        return finalise(new Ctor(x), sd, rm);
      };


      /*
       * Return a string representing the value of this Decimal.
       *
       * Return exponential notation if this Decimal has a positive exponent equal to or greater than
       * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
       *
       */
      P.toString = function () {
        var x = this,
          Ctor = x.constructor,
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
       *
       */
      P.truncated = P.trunc = function () {
        return finalise(new this.constructor(this), this.e + 1, 1);
      };


      /*
       * Return a string representing the value of this Decimal.
       * Unlike `toString`, negative zero will include the minus sign.
       *
       */
      P.valueOf = P.toJSON = function () {
        var x = this,
          Ctor = x.constructor,
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

        return x.isNeg() ? '-' + str : str;
      };


      // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


      /*
       *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
       *                           finiteToString, naturalExponential, naturalLogarithm
       *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
       *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
       *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
       *  convertBase              toStringBinary, parseOther
       *  cos                      P.cos
       *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
       *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
       *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
       *                           taylorSeries, atan2, parseOther
       *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
       *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
       *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
       *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
       *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
       *                           P.truncated, divide, getLn10, getPi, naturalExponential,
       *                           naturalLogarithm, ceil, floor, round, trunc
       *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
       *                           toStringBinary
       *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
       *  getLn10                  P.logarithm, naturalLogarithm
       *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
       *  getPrecision             P.precision, P.toFraction
       *  getZeroString            digitsToString, finiteToString
       *  intPow                   P.toPower, parseOther
       *  isOdd                    toLessThanHalfPi
       *  maxOrMin                 max, min
       *  naturalExponential       P.naturalExponential, P.toPower
       *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
       *                           P.toPower, naturalExponential
       *  nonFiniteToString        finiteToString, toStringBinary
       *  parseDecimal             Decimal
       *  parseOther               Decimal
       *  sin                      P.sin
       *  taylorSeries             P.cosh, P.sinh, cos, sin
       *  toLessThanHalfPi         P.cos, P.sin
       *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
       *  truncate                 intPow
       *
       *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
       *                           naturalLogarithm, config, parseOther, random, Decimal
       */


      function digitsToString(d) {
        var i, k, ws,
          indexOfLastWord = d.length - 1,
          str = '',
          w = d[0];

        if (indexOfLastWord > 0) {
          str += w;
          for (i = 1; i < indexOfLastWord; i++) {
            ws = d[i] + '';
            k = LOG_BASE - ws.length;
            if (k) str += getZeroString(k);
            str += ws;
          }

          w = d[i];
          ws = w + '';
          k = LOG_BASE - ws.length;
          if (k) str += getZeroString(k);
        } else if (w === 0) {
          return '0';
        }

        // Remove trailing zeros of last w.
        for (; w % 10 === 0;) w /= 10;

        return str + w;
      }


      function checkInt32(i, min, max) {
        if (i !== ~~i || i < min || i > max) {
          throw Error(invalidArgument + i);
        }
      }


      /*
       * Check 5 rounding digits if `repeating` is null, 4 otherwise.
       * `repeating == null` if caller is `log` or `pow`,
       * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
       */
      function checkRoundingDigits(d, i, rm, repeating) {
        var di, k, r, rd;

        // Get the length of the first word of the array d.
        for (k = d[0]; k >= 10; k /= 10) --i;

        // Is the rounding digit in the first word of d?
        if (--i < 0) {
          i += LOG_BASE;
          di = 0;
        } else {
          di = Math.ceil((i + 1) / LOG_BASE);
          i %= LOG_BASE;
        }

        // i is the index (0 - 6) of the rounding digit.
        // E.g. if within the word 3487563 the first rounding digit is 5,
        // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
        k = mathpow(10, LOG_BASE - i);
        rd = d[di] % k | 0;

        if (repeating == null) {
          if (i < 3) {
            if (i == 0) rd = rd / 100 | 0;
            else if (i == 1) rd = rd / 10 | 0;
            r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
          } else {
            r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
              (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
                (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
          }
        } else {
          if (i < 4) {
            if (i == 0) rd = rd / 1000 | 0;
            else if (i == 1) rd = rd / 100 | 0;
            else if (i == 2) rd = rd / 10 | 0;
            r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
          } else {
            r = ((repeating || rm < 4) && rd + 1 == k ||
            (!repeating && rm > 3) && rd + 1 == k / 2) &&
              (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
          }
        }

        return r;
      }


      // Convert string of `baseIn` to an array of numbers of `baseOut`.
      // Eg. convertBase('255', 10, 16) returns [15, 15].
      // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
      function convertBase(str, baseIn, baseOut) {
        var j,
          arr = [0],
          arrL,
          i = 0,
          strL = str.length;

        for (; i < strL;) {
          for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
          arr[0] += NUMERALS.indexOf(str.charAt(i++));
          for (j = 0; j < arr.length; j++) {
            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] === void 0) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }

        return arr.reverse();
      }


      /*
       * cos(x) = 1 - x^2/2! + x^4/4! - ...
       * |x| < pi/2
       *
       */
      function cosine(Ctor, x) {
        var k, len, y;

        if (x.isZero()) return x;

        // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
        // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

        // Estimate the optimum number of times to use the argument reduction.
        len = x.d.length;
        if (len < 32) {
          k = Math.ceil(len / 3);
          y = (1 / tinyPow(4, k)).toString();
        } else {
          k = 16;
          y = '2.3283064365386962890625e-10';
        }

        Ctor.precision += k;

        x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

        // Reverse argument reduction
        for (var i = k; i--;) {
          var cos2x = x.times(x);
          x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
        }

        Ctor.precision -= k;

        return x;
      }


      /*
       * Perform division in the specified base.
       */
      var divide = (function () {

        // Assumes non-zero x and k, and hence non-zero result.
        function multiplyInteger(x, k, base) {
          var temp,
            carry = 0,
            i = x.length;

          for (x = x.slice(); i--;) {
            temp = x[i] * k + carry;
            x[i] = temp % base | 0;
            carry = temp / base | 0;
          }

          if (carry) x.unshift(carry);

          return x;
        }

        function compare(a, b, aL, bL) {
          var i, r;

          if (aL != bL) {
            r = aL > bL ? 1 : -1;
          } else {
            for (i = r = 0; i < aL; i++) {
              if (a[i] != b[i]) {
                r = a[i] > b[i] ? 1 : -1;
                break;
              }
            }
          }

          return r;
        }

        function subtract(a, b, aL, base) {
          var i = 0;

          // Subtract b from a.
          for (; aL--;) {
            a[aL] -= i;
            i = a[aL] < b[aL] ? 1 : 0;
            a[aL] = i * base + a[aL] - b[aL];
          }

          // Remove leading zeros.
          for (; !a[0] && a.length > 1;) a.shift();
        }

        return function (x, y, pr, rm, dp, base) {
          var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
            yL, yz,
            Ctor = x.constructor,
            sign = x.s == y.s ? 1 : -1,
            xd = x.d,
            yd = y.d;

          // Either NaN, Infinity or 0?
          if (!xd || !xd[0] || !yd || !yd[0]) {

            return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
              !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

              // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
              xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
          }

          if (base) {
            logBase = 1;
            e = x.e - y.e;
          } else {
            base = BASE;
            logBase = LOG_BASE;
            e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
          }

          yL = yd.length;
          xL = xd.length;
          q = new Ctor(sign);
          qd = q.d = [];

          // Result exponent may be one less than e.
          // The digit array of a Decimal from toStringBinary may have trailing zeros.
          for (i = 0; yd[i] == (xd[i] || 0); i++);

          if (yd[i] > (xd[i] || 0)) e--;

          if (pr == null) {
            sd = pr = Ctor.precision;
            rm = Ctor.rounding;
          } else if (dp) {
            sd = pr + (x.e - y.e) + 1;
          } else {
            sd = pr;
          }

          if (sd < 0) {
            qd.push(1);
            more = true;
          } else {

            // Convert precision in number of base 10 digits to base 1e7 digits.
            sd = sd / logBase + 2 | 0;
            i = 0;

            // divisor < 1e7
            if (yL == 1) {
              k = 0;
              yd = yd[0];
              sd++;

              // k is the carry.
              for (; (i < xL || k) && sd--; i++) {
                t = k * base + (xd[i] || 0);
                qd[i] = t / yd | 0;
                k = t % yd | 0;
              }

              more = k || i < xL;

            // divisor >= 1e7
            } else {

              // Normalise xd and yd so highest order digit of yd is >= base/2
              k = base / (yd[0] + 1) | 0;

              if (k > 1) {
                yd = multiplyInteger(yd, k, base);
                xd = multiplyInteger(xd, k, base);
                yL = yd.length;
                xL = xd.length;
              }

              xi = yL;
              rem = xd.slice(0, yL);
              remL = rem.length;

              // Add zeros to make remainder as long as divisor.
              for (; remL < yL;) rem[remL++] = 0;

              yz = yd.slice();
              yz.unshift(0);
              yd0 = yd[0];

              if (yd[1] >= base / 2) ++yd0;

              do {
                k = 0;

                // Compare divisor and remainder.
                cmp = compare(yd, rem, yL, remL);

                // If divisor < remainder.
                if (cmp < 0) {

                  // Calculate trial digit, k.
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                  // k will be how many times the divisor goes into the current remainder.
                  k = rem0 / yd0 | 0;

                  //  Algorithm:
                  //  1. product = divisor * trial digit (k)
                  //  2. if product > remainder: product -= divisor, k--
                  //  3. remainder -= product
                  //  4. if product was < remainder at 2:
                  //    5. compare new remainder and divisor
                  //    6. If remainder > divisor: remainder -= divisor, k++

                  if (k > 1) {
                    if (k >= base) k = base - 1;

                    // product = divisor * trial digit.
                    prod = multiplyInteger(yd, k, base);
                    prodL = prod.length;
                    remL = rem.length;

                    // Compare product and remainder.
                    cmp = compare(prod, rem, prodL, remL);

                    // product > remainder.
                    if (cmp == 1) {
                      k--;

                      // Subtract divisor from product.
                      subtract(prod, yL < prodL ? yz : yd, prodL, base);
                    }
                  } else {

                    // cmp is -1.
                    // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                    // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                    if (k == 0) cmp = k = 1;
                    prod = yd.slice();
                  }

                  prodL = prod.length;
                  if (prodL < remL) prod.unshift(0);

                  // Subtract product from remainder.
                  subtract(rem, prod, remL, base);

                  // If product was < previous remainder.
                  if (cmp == -1) {
                    remL = rem.length;

                    // Compare divisor and new remainder.
                    cmp = compare(yd, rem, yL, remL);

                    // If divisor < new remainder, subtract divisor from remainder.
                    if (cmp < 1) {
                      k++;

                      // Subtract divisor from remainder.
                      subtract(rem, yL < remL ? yz : yd, remL, base);
                    }
                  }

                  remL = rem.length;
                } else if (cmp === 0) {
                  k++;
                  rem = [0];
                }    // if cmp === 1, k will be 0

                // Add the next digit, k, to the result array.
                qd[i++] = k;

                // Update the remainder.
                if (cmp && rem[0]) {
                  rem[remL++] = xd[xi] || 0;
                } else {
                  rem = [xd[xi]];
                  remL = 1;
                }

              } while ((xi++ < xL || rem[0] !== void 0) && sd--);

              more = rem[0] !== void 0;
            }

            // Leading zero?
            if (!qd[0]) qd.shift();
          }

          // logBase is 1 when divide is being used for base conversion.
          if (logBase == 1) {
            q.e = e;
            inexact = more;
          } else {

            // To calculate q.e, first get the number of digits of qd[0].
            for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
            q.e = i + e * logBase - 1;

            finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
          }

          return q;
        };
      })();


      /*
       * Round `x` to `sd` significant digits using rounding mode `rm`.
       * Check for over/under-flow.
       */
       function finalise(x, sd, rm, isTruncated) {
        var digits, i, j, k, rd, roundUp, w, xd, xdi,
          Ctor = x.constructor;

        // Don't round if sd is null or undefined.
        out: if (sd != null) {
          xd = x.d;

          // Infinity/NaN.
          if (!xd) return x;

          // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
          // w: the word of xd containing rd, a base 1e7 number.
          // xdi: the index of w within xd.
          // digits: the number of digits of w.
          // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
          // they had leading zeros)
          // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

          // Get the length of the first word of the digits array xd.
          for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
          i = sd - digits;

          // Is the rounding digit in the first word of xd?
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            w = xd[xdi = 0];

            // Get the rounding digit at index j of w.
            rd = w / mathpow(10, digits - j - 1) % 10 | 0;
          } else {
            xdi = Math.ceil((i + 1) / LOG_BASE);
            k = xd.length;
            if (xdi >= k) {
              if (isTruncated) {

                // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
                for (; k++ <= xdi;) xd.push(0);
                w = rd = 0;
                digits = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              w = k = xd[xdi];

              // Get the number of digits of w.
              for (digits = 1; k >= 10; k /= 10) digits++;

              // Get the index of rd within w.
              i %= LOG_BASE;

              // Get the index of rd within w, adjusted for leading zeros.
              // The number of leading zeros of w is given by LOG_BASE - digits.
              j = i - LOG_BASE + digits;

              // Get the rounding digit at index j of w.
              rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
            }
          }

          // Are there any non-zero digits after the rounding digit?
          isTruncated = isTruncated || sd < 0 ||
            xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

          // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
          // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
          // will give 714.

          roundUp = rm < 4
            ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
            : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

              // Check whether the digit to the left of the rounding digit is odd.
              ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
                rm == (x.s < 0 ? 8 : 7));

          if (sd < 1 || !xd[0]) {
            xd.length = 0;
            if (roundUp) {

              // Convert sd to decimal places.
              sd -= x.e + 1;

              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
              xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
              x.e = -sd || 0;
            } else {

              // Zero.
              xd[0] = x.e = 0;
            }

            return x;
          }

          // Remove excess digits.
          if (i == 0) {
            xd.length = xdi;
            k = 1;
            xdi--;
          } else {
            xd.length = xdi + 1;
            k = mathpow(10, LOG_BASE - i);

            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
            // j > 0 means i > number of leading zeros of w.
            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
          }

          if (roundUp) {
            for (;;) {

              // Is the digit to be rounded up in the first word of xd?
              if (xdi == 0) {

                // i will be the length of xd[0] before k is added.
                for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
                j = xd[0] += k;
                for (k = 1; j >= 10; j /= 10) k++;

                // if i != k the length has increased.
                if (i != k) {
                  x.e++;
                  if (xd[0] == BASE) xd[0] = 1;
                }

                break;
              } else {
                xd[xdi] += k;
                if (xd[xdi] != BASE) break;
                xd[xdi--] = 0;
                k = 1;
              }
            }
          }

          // Remove trailing zeros.
          for (i = xd.length; xd[--i] === 0;) xd.pop();
        }

        if (external) {

          // Overflow?
          if (x.e > Ctor.maxE) {

            // Infinity.
            x.d = null;
            x.e = NaN;

          // Underflow?
          } else if (x.e < Ctor.minE) {

            // Zero.
            x.e = 0;
            x.d = [0];
            // Ctor.underflow = true;
          } // else Ctor.underflow = false;
        }

        return x;
      }


      function finiteToString(x, isExp, sd) {
        if (!x.isFinite()) return nonFiniteToString(x);
        var k,
          e = x.e,
          str = digitsToString(x.d),
          len = str.length;

        if (isExp) {
          if (sd && (k = sd - len) > 0) {
            str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
          } else if (len > 1) {
            str = str.charAt(0) + '.' + str.slice(1);
          }

          str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
        } else if (e < 0) {
          str = '0.' + getZeroString(-e - 1) + str;
          if (sd && (k = sd - len) > 0) str += getZeroString(k);
        } else if (e >= len) {
          str += getZeroString(e + 1 - len);
          if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
        } else {
          if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
          if (sd && (k = sd - len) > 0) {
            if (e + 1 === len) str += '.';
            str += getZeroString(k);
          }
        }

        return str;
      }


      // Calculate the base 10 exponent from the base 1e7 exponent.
      function getBase10Exponent(digits, e) {
        var w = digits[0];

        // Add the number of digits of the first word of the digits array.
        for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
        return e;
      }


      function getLn10(Ctor, sd, pr) {
        if (sd > LN10_PRECISION) {

          // Reset global state in case the exception is caught.
          external = true;
          if (pr) Ctor.precision = pr;
          throw Error(precisionLimitExceeded);
        }
        return finalise(new Ctor(LN10), sd, 1, true);
      }


      function getPi(Ctor, sd, rm) {
        if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
        return finalise(new Ctor(PI), sd, rm, true);
      }


      function getPrecision(digits) {
        var w = digits.length - 1,
          len = w * LOG_BASE + 1;

        w = digits[w];

        // If non-zero...
        if (w) {

          // Subtract the number of trailing zeros of the last word.
          for (; w % 10 == 0; w /= 10) len--;

          // Add the number of digits of the first word.
          for (w = digits[0]; w >= 10; w /= 10) len++;
        }

        return len;
      }


      function getZeroString(k) {
        var zs = '';
        for (; k--;) zs += '0';
        return zs;
      }


      /*
       * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
       * integer of type number.
       *
       * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
       *
       */
      function intPow(Ctor, x, n, pr) {
        var isTruncated,
          r = new Ctor(1),

          // Max n of 9007199254740991 takes 53 loop iterations.
          // Maximum digits array length; leaves [28, 34] guard digits.
          k = Math.ceil(pr / LOG_BASE + 4);

        external = false;

        for (;;) {
          if (n % 2) {
            r = r.times(x);
            if (truncate(r.d, k)) isTruncated = true;
          }

          n = mathfloor(n / 2);
          if (n === 0) {

            // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
            n = r.d.length - 1;
            if (isTruncated && r.d[n] === 0) ++r.d[n];
            break;
          }

          x = x.times(x);
          truncate(x.d, k);
        }

        external = true;

        return r;
      }


      function isOdd(n) {
        return n.d[n.d.length - 1] & 1;
      }


      /*
       * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
       */
      function maxOrMin(Ctor, args, ltgt) {
        var y,
          x = new Ctor(args[0]),
          i = 0;

        for (; ++i < args.length;) {
          y = new Ctor(args[i]);
          if (!y.s) {
            x = y;
            break;
          } else if (x[ltgt](y)) {
            x = y;
          }
        }

        return x;
      }


      /*
       * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
       * digits.
       *
       * Taylor/Maclaurin series.
       *
       * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
       *
       * Argument reduction:
       *   Repeat x = x / 32, k += 5, until |x| < 0.1
       *   exp(x) = exp(x / 2^k)^(2^k)
       *
       * Previously, the argument was initially reduced by
       * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
       * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
       * found to be slower than just dividing repeatedly by 32 as above.
       *
       * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
       * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
       * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
       *
       *  exp(Infinity)  = Infinity
       *  exp(-Infinity) = 0
       *  exp(NaN)       = NaN
       *  exp(±0)        = 1
       *
       *  exp(x) is non-terminating for any finite, non-zero x.
       *
       *  The result will always be correctly rounded.
       *
       */
      function naturalExponential(x, sd) {
        var denominator, guard, j, pow, sum, t, wpr,
          rep = 0,
          i = 0,
          k = 0,
          Ctor = x.constructor,
          rm = Ctor.rounding,
          pr = Ctor.precision;

        // 0/NaN/Infinity?
        if (!x.d || !x.d[0] || x.e > 17) {

          return new Ctor(x.d
            ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
            : x.s ? x.s < 0 ? 0 : x : 0 / 0);
        }

        if (sd == null) {
          external = false;
          wpr = pr;
        } else {
          wpr = sd;
        }

        t = new Ctor(0.03125);

        // while abs(x) >= 0.1
        while (x.e > -2) {

          // x = x / 2^5
          x = x.times(t);
          k += 5;
        }

        // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
        // necessary to ensure the first 4 rounding digits are correct.
        guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
        wpr += guard;
        denominator = pow = sum = new Ctor(1);
        Ctor.precision = wpr;

        for (;;) {
          pow = finalise(pow.times(x), wpr, 1);
          denominator = denominator.times(++i);
          t = sum.plus(divide(pow, denominator, wpr, 1));

          if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
            j = k;
            while (j--) sum = finalise(sum.times(sum), wpr, 1);

            // Check to see if the first 4 rounding digits are [49]999.
            // If so, repeat the summation with a higher precision, otherwise
            // e.g. with precision: 18, rounding: 1
            // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
            // `wpr - guard` is the index of first rounding digit.
            if (sd == null) {

              if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                Ctor.precision = wpr += 10;
                denominator = pow = t = new Ctor(1);
                i = 0;
                rep++;
              } else {
                return finalise(sum, Ctor.precision = pr, rm, external = true);
              }
            } else {
              Ctor.precision = pr;
              return sum;
            }
          }

          sum = t;
        }
      }


      /*
       * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
       * digits.
       *
       *  ln(-n)        = NaN
       *  ln(0)         = -Infinity
       *  ln(-0)        = -Infinity
       *  ln(1)         = 0
       *  ln(Infinity)  = Infinity
       *  ln(-Infinity) = NaN
       *  ln(NaN)       = NaN
       *
       *  ln(n) (n != 1) is non-terminating.
       *
       */
      function naturalLogarithm(y, sd) {
        var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
          n = 1,
          guard = 10,
          x = y,
          xd = x.d,
          Ctor = x.constructor,
          rm = Ctor.rounding,
          pr = Ctor.precision;

        // Is x negative or Infinity, NaN, 0 or 1?
        if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
          return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
        }

        if (sd == null) {
          external = false;
          wpr = pr;
        } else {
          wpr = sd;
        }

        Ctor.precision = wpr += guard;
        c = digitsToString(xd);
        c0 = c.charAt(0);

        if (Math.abs(e = x.e) < 1.5e15) {

          // Argument reduction.
          // The series converges faster the closer the argument is to 1, so using
          // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
          // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
          // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
          // later be divided by this number, then separate out the power of 10 using
          // ln(a*10^b) = ln(a) + b*ln(10).

          // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
          //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
          // max n is 6 (gives 0.7 - 1.3)
          while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
            x = x.times(y);
            c = digitsToString(x.d);
            c0 = c.charAt(0);
            n++;
          }

          e = x.e;

          if (c0 > 1) {
            x = new Ctor('0.' + c);
            e++;
          } else {
            x = new Ctor(c0 + '.' + c.slice(1));
          }
        } else {

          // The argument reduction method above may result in overflow if the argument y is a massive
          // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
          // function using ln(x*10^e) = ln(x) + e*ln(10).
          t = getLn10(Ctor, wpr + 2, pr).times(e + '');
          x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
          Ctor.precision = pr;

          return sd == null ? finalise(x, pr, rm, external = true) : x;
        }

        // x1 is x reduced to a value near 1.
        x1 = x;

        // Taylor series.
        // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
        // where x = (y - 1)/(y + 1)    (|x| < 1)
        sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
        x2 = finalise(x.times(x), wpr, 1);
        denominator = 3;

        for (;;) {
          numerator = finalise(numerator.times(x2), wpr, 1);
          t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

          if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
            sum = sum.times(2);

            // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
            // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
            if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
            sum = divide(sum, new Ctor(n), wpr, 1);

            // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
            // been repeated previously) and the first 4 rounding digits 9999?
            // If so, restart the summation with a higher precision, otherwise
            // e.g. with precision: 12, rounding: 1
            // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
            // `wpr - guard` is the index of first rounding digit.
            if (sd == null) {
              if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                Ctor.precision = wpr += guard;
                t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
                x2 = finalise(x.times(x), wpr, 1);
                denominator = rep = 1;
              } else {
                return finalise(sum, Ctor.precision = pr, rm, external = true);
              }
            } else {
              Ctor.precision = pr;
              return sum;
            }
          }

          sum = t;
          denominator += 2;
        }
      }


      // ±Infinity, NaN.
      function nonFiniteToString(x) {
        // Unsigned.
        return String(x.s * x.s / 0);
      }


      /*
       * Parse the value of a new Decimal `x` from string `str`.
       */
      function parseDecimal(x, str) {
        var e, i, len;

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

        // Exponential form?
        if ((i = str.search(/e/i)) > 0) {

          // Determine exponent.
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {

          // Integer.
          e = str.length;
        }

        // Determine leading zeros.
        for (i = 0; str.charCodeAt(i) === 48; i++);

        // Determine trailing zeros.
        for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
        str = str.slice(i, len);

        if (str) {
          len -= i;
          x.e = e = e - i - 1;
          x.d = [];

          // Transform base

          // e is the base 10 exponent.
          // i is where to slice str to get the first word of the digits array.
          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE;

          if (i < len) {
            if (i) x.d.push(+str.slice(0, i));
            for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
            str = str.slice(i);
            i = LOG_BASE - str.length;
          } else {
            i -= len;
          }

          for (; i--;) str += '0';
          x.d.push(+str);

          if (external) {

            // Overflow?
            if (x.e > x.constructor.maxE) {

              // Infinity.
              x.d = null;
              x.e = NaN;

            // Underflow?
            } else if (x.e < x.constructor.minE) {

              // Zero.
              x.e = 0;
              x.d = [0];
              // x.constructor.underflow = true;
            } // else x.constructor.underflow = false;
          }
        } else {

          // Zero.
          x.e = 0;
          x.d = [0];
        }

        return x;
      }


      /*
       * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
       */
      function parseOther(x, str) {
        var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

        if (str.indexOf('_') > -1) {
          str = str.replace(/(\d)_(?=\d)/g, '$1');
          if (isDecimal.test(str)) return parseDecimal(x, str);
        } else if (str === 'Infinity' || str === 'NaN') {
          if (!+str) x.s = NaN;
          x.e = NaN;
          x.d = null;
          return x;
        }

        if (isHex.test(str))  {
          base = 16;
          str = str.toLowerCase();
        } else if (isBinary.test(str))  {
          base = 2;
        } else if (isOctal.test(str))  {
          base = 8;
        } else {
          throw Error(invalidArgument + str);
        }

        // Is there a binary exponent part?
        i = str.search(/p/i);

        if (i > 0) {
          p = +str.slice(i + 1);
          str = str.substring(2, i);
        } else {
          str = str.slice(2);
        }

        // Convert `str` as an integer then divide the result by `base` raised to a power such that the
        // fraction part will be restored.
        i = str.indexOf('.');
        isFloat = i >= 0;
        Ctor = x.constructor;

        if (isFloat) {
          str = str.replace('.', '');
          len = str.length;
          i = len - i;

          // log[10](16) = 1.2041... , log[10](88) = 1.9444....
          divisor = intPow(Ctor, new Ctor(base), i, i * 2);
        }

        xd = convertBase(str, base, BASE);
        xe = xd.length - 1;

        // Remove trailing zeros.
        for (i = xe; xd[i] === 0; --i) xd.pop();
        if (i < 0) return new Ctor(x.s * 0);
        x.e = getBase10Exponent(xd, xe);
        x.d = xd;
        external = false;

        // At what precision to perform the division to ensure exact conversion?
        // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
        // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
        // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
        // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
        // Therefore using 4 * the number of digits of str will always be enough.
        if (isFloat) x = divide(x, divisor, len * 4);

        // Multiply by the binary exponent part if present.
        if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
        external = true;

        return x;
      }


      /*
       * sin(x) = x - x^3/3! + x^5/5! - ...
       * |x| < pi/2
       *
       */
      function sine(Ctor, x) {
        var k,
          len = x.d.length;

        if (len < 3) {
          return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
        }

        // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
        // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
        // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

        // Estimate the optimum number of times to use the argument reduction.
        k = 1.4 * Math.sqrt(len);
        k = k > 16 ? 16 : k | 0;

        x = x.times(1 / tinyPow(5, k));
        x = taylorSeries(Ctor, 2, x, x);

        // Reverse argument reduction
        var sin2_x,
          d5 = new Ctor(5),
          d16 = new Ctor(16),
          d20 = new Ctor(20);
        for (; k--;) {
          sin2_x = x.times(x);
          x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
        }

        return x;
      }


      // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
      function taylorSeries(Ctor, n, x, y, isHyperbolic) {
        var j, t, u, x2,
          pr = Ctor.precision,
          k = Math.ceil(pr / LOG_BASE);

        external = false;
        x2 = x.times(x);
        u = new Ctor(y);

        for (;;) {
          t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
          u = isHyperbolic ? y.plus(t) : y.minus(t);
          y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
          t = u.plus(y);

          if (t.d[k] !== void 0) {
            for (j = k; t.d[j] === u.d[j] && j--;);
            if (j == -1) break;
          }

          j = u;
          u = y;
          y = t;
          t = j;
        }

        external = true;
        t.d.length = k + 1;

        return t;
      }


      // Exponent e must be positive and non-zero.
      function tinyPow(b, e) {
        var n = b;
        while (--e) n *= b;
        return n;
      }


      // Return the absolute value of `x` reduced to less than or equal to half pi.
      function toLessThanHalfPi(Ctor, x) {
        var t,
          isNeg = x.s < 0,
          pi = getPi(Ctor, Ctor.precision, 1),
          halfPi = pi.times(0.5);

        x = x.abs();

        if (x.lte(halfPi)) {
          quadrant = isNeg ? 4 : 1;
          return x;
        }

        t = x.divToInt(pi);

        if (t.isZero()) {
          quadrant = isNeg ? 3 : 2;
        } else {
          x = x.minus(t.times(pi));

          // 0 <= x < pi
          if (x.lte(halfPi)) {
            quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
            return x;
          }

          quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
        }

        return x.minus(pi).abs();
      }


      /*
       * Return the value of Decimal `x` as a string in base `baseOut`.
       *
       * If the optional `sd` argument is present include a binary exponent suffix.
       */
      function toStringBinary(x, baseOut, sd, rm) {
        var base, e, i, k, len, roundUp, str, xd, y,
          Ctor = x.constructor,
          isExp = sd !== void 0;

        if (isExp) {
          checkInt32(sd, 1, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
        } else {
          sd = Ctor.precision;
          rm = Ctor.rounding;
        }

        if (!x.isFinite()) {
          str = nonFiniteToString(x);
        } else {
          str = finiteToString(x);
          i = str.indexOf('.');

          // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
          // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
          // minBinaryExponent = floor(decimalExponent * log[2](10))
          // log[2](10) = 3.321928094887362347870319429489390175864

          if (isExp) {
            base = 2;
            if (baseOut == 16) {
              sd = sd * 4 - 3;
            } else if (baseOut == 8) {
              sd = sd * 3 - 2;
            }
          } else {
            base = baseOut;
          }

          // Convert the number as an integer then divide the result by its base raised to a power such
          // that the fraction part will be restored.

          // Non-integer.
          if (i >= 0) {
            str = str.replace('.', '');
            y = new Ctor(1);
            y.e = str.length - i;
            y.d = convertBase(finiteToString(y), 10, base);
            y.e = y.d.length;
          }

          xd = convertBase(str, 10, base);
          e = len = xd.length;

          // Remove trailing zeros.
          for (; xd[--len] == 0;) xd.pop();

          if (!xd[0]) {
            str = isExp ? '0p+0' : '0';
          } else {
            if (i < 0) {
              e--;
            } else {
              x = new Ctor(x);
              x.d = xd;
              x.e = e;
              x = divide(x, y, sd, rm, 0, base);
              xd = x.d;
              e = x.e;
              roundUp = inexact;
            }

            // The rounding digit, i.e. the digit after the digit that may be rounded up.
            i = xd[sd];
            k = base / 2;
            roundUp = roundUp || xd[sd + 1] !== void 0;

            roundUp = rm < 4
              ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
              : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
                rm === (x.s < 0 ? 8 : 7));

            xd.length = sd;

            if (roundUp) {

              // Rounding up may mean the previous digit has to be rounded up and so on.
              for (; ++xd[--sd] > base - 1;) {
                xd[sd] = 0;
                if (!sd) {
                  ++e;
                  xd.unshift(1);
                }
              }
            }

            // Determine trailing zeros.
            for (len = xd.length; !xd[len - 1]; --len);

            // E.g. [4, 11, 15] becomes 4bf.
            for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

            // Add binary exponent suffix?
            if (isExp) {
              if (len > 1) {
                if (baseOut == 16 || baseOut == 8) {
                  i = baseOut == 16 ? 4 : 3;
                  for (--len; len % i; len++) str += '0';
                  xd = convertBase(str, base, baseOut);
                  for (len = xd.length; !xd[len - 1]; --len);

                  // xd[0] will always be be 1
                  for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
                } else {
                  str = str.charAt(0) + '.' + str.slice(1);
                }
              }

              str =  str + (e < 0 ? 'p' : 'p+') + e;
            } else if (e < 0) {
              for (; ++e;) str = '0' + str;
              str = '0.' + str;
            } else {
              if (++e > len) for (e -= len; e-- ;) str += '0';
              else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
            }
          }

          str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
        }

        return x.s < 0 ? '-' + str : str;
      }


      // Does not strip trailing zeros.
      function truncate(arr, len) {
        if (arr.length > len) {
          arr.length = len;
          return true;
        }
      }


      // Decimal methods


      /*
       *  abs
       *  acos
       *  acosh
       *  add
       *  asin
       *  asinh
       *  atan
       *  atanh
       *  atan2
       *  cbrt
       *  ceil
       *  clamp
       *  clone
       *  config
       *  cos
       *  cosh
       *  div
       *  exp
       *  floor
       *  hypot
       *  ln
       *  log
       *  log2
       *  log10
       *  max
       *  min
       *  mod
       *  mul
       *  pow
       *  random
       *  round
       *  set
       *  sign
       *  sin
       *  sinh
       *  sqrt
       *  sub
       *  sum
       *  tan
       *  tanh
       *  trunc
       */


      /*
       * Return a new Decimal whose value is the absolute value of `x`.
       *
       * x {number|string|Decimal}
       *
       */
      function abs(x) {
        return new this(x).abs();
      }


      /*
       * Return a new Decimal whose value is the arccosine in radians of `x`.
       *
       * x {number|string|Decimal}
       *
       */
      function acos(x) {
        return new this(x).acos();
      }


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function acosh(x) {
        return new this(x).acosh();
      }


      /*
       * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       * y {number|string|Decimal}
       *
       */
      function add(x, y) {
        return new this(x).plus(y);
      }


      /*
       * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function asin(x) {
        return new this(x).asin();
      }


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function asinh(x) {
        return new this(x).asinh();
      }


      /*
       * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function atan(x) {
        return new this(x).atan();
      }


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function atanh(x) {
        return new this(x).atanh();
      }


      /*
       * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
       * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-pi, pi]
       *
       * y {number|string|Decimal} The y-coordinate.
       * x {number|string|Decimal} The x-coordinate.
       *
       * atan2(±0, -0)               = ±pi
       * atan2(±0, +0)               = ±0
       * atan2(±0, -x)               = ±pi for x > 0
       * atan2(±0, x)                = ±0 for x > 0
       * atan2(-y, ±0)               = -pi/2 for y > 0
       * atan2(y, ±0)                = pi/2 for y > 0
       * atan2(±y, -Infinity)        = ±pi for finite y > 0
       * atan2(±y, +Infinity)        = ±0 for finite y > 0
       * atan2(±Infinity, x)         = ±pi/2 for finite x
       * atan2(±Infinity, -Infinity) = ±3*pi/4
       * atan2(±Infinity, +Infinity) = ±pi/4
       * atan2(NaN, x) = NaN
       * atan2(y, NaN) = NaN
       *
       */
      function atan2(y, x) {
        y = new this(y);
        x = new this(x);
        var r,
          pr = this.precision,
          rm = this.rounding,
          wpr = pr + 4;

        // Either NaN
        if (!y.s || !x.s) {
          r = new this(NaN);

        // Both ±Infinity
        } else if (!y.d && !x.d) {
          r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
          r.s = y.s;

        // x is ±Infinity or y is ±0
        } else if (!x.d || y.isZero()) {
          r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
          r.s = y.s;

        // y is ±Infinity or x is ±0
        } else if (!y.d || x.isZero()) {
          r = getPi(this, wpr, 1).times(0.5);
          r.s = y.s;

        // Both non-zero and finite
        } else if (x.s < 0) {
          this.precision = wpr;
          this.rounding = 1;
          r = this.atan(divide(y, x, wpr, 1));
          x = getPi(this, wpr, 1);
          this.precision = pr;
          this.rounding = rm;
          r = y.s < 0 ? r.minus(x) : r.plus(x);
        } else {
          r = this.atan(divide(y, x, wpr, 1));
        }

        return r;
      }


      /*
       * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function cbrt(x) {
        return new this(x).cbrt();
      }


      /*
       * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
       *
       * x {number|string|Decimal}
       *
       */
      function ceil(x) {
        return finalise(x = new this(x), x.e + 1, 2);
      }


      /*
       * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.
       *
       * x {number|string|Decimal}
       * min {number|string|Decimal}
       * max {number|string|Decimal}
       *
       */
      function clamp(x, min, max) {
        return new this(x).clamp(min, max);
      }


      /*
       * Configure global settings for a Decimal constructor.
       *
       * `obj` is an object with one or more of the following properties,
       *
       *   precision  {number}
       *   rounding   {number}
       *   toExpNeg   {number}
       *   toExpPos   {number}
       *   maxE       {number}
       *   minE       {number}
       *   modulo     {number}
       *   crypto     {boolean|number}
       *   defaults   {true}
       *
       * E.g. Decimal.config({ precision: 20, rounding: 4 })
       *
       */
      function config(obj) {
        if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
        var i, p, v,
          useDefaults = obj.defaults === true,
          ps = [
            'precision', 1, MAX_DIGITS,
            'rounding', 0, 8,
            'toExpNeg', -EXP_LIMIT, 0,
            'toExpPos', 0, EXP_LIMIT,
            'maxE', 0, EXP_LIMIT,
            'minE', -EXP_LIMIT, 0,
            'modulo', 0, 9
          ];

        for (i = 0; i < ps.length; i += 3) {
          if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
          if ((v = obj[p]) !== void 0) {
            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
            else throw Error(invalidArgument + p + ': ' + v);
          }
        }

        if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
        if ((v = obj[p]) !== void 0) {
          if (v === true || v === false || v === 0 || v === 1) {
            if (v) {
              if (typeof crypto != 'undefined' && crypto &&
                (crypto.getRandomValues || crypto.randomBytes)) {
                this[p] = true;
              } else {
                throw Error(cryptoUnavailable);
              }
            } else {
              this[p] = false;
            }
          } else {
            throw Error(invalidArgument + p + ': ' + v);
          }
        }

        return this;
      }


      /*
       * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function cos(x) {
        return new this(x).cos();
      }


      /*
       * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function cosh(x) {
        return new this(x).cosh();
      }


      /*
       * Create and return a Decimal constructor with the same configuration properties as this Decimal
       * constructor.
       *
       */
      function clone(obj) {
        var i, p, ps;

        /*
         * The Decimal constructor and exported function.
         * Return a new Decimal instance.
         *
         * v {number|string|Decimal} A numeric value.
         *
         */
        function Decimal(v) {
          var e, i, t,
            x = this;

          // Decimal called without new.
          if (!(x instanceof Decimal)) return new Decimal(v);

          // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
          // which points to Object.
          x.constructor = Decimal;

          // Duplicate.
          if (isDecimalInstance(v)) {
            x.s = v.s;

            if (external) {
              if (!v.d || v.e > Decimal.maxE) {

                // Infinity.
                x.e = NaN;
                x.d = null;
              } else if (v.e < Decimal.minE) {

                // Zero.
                x.e = 0;
                x.d = [0];
              } else {
                x.e = v.e;
                x.d = v.d.slice();
              }
            } else {
              x.e = v.e;
              x.d = v.d ? v.d.slice() : v.d;
            }

            return;
          }

          t = typeof v;

          if (t === 'number') {
            if (v === 0) {
              x.s = 1 / v < 0 ? -1 : 1;
              x.e = 0;
              x.d = [0];
              return;
            }

            if (v < 0) {
              v = -v;
              x.s = -1;
            } else {
              x.s = 1;
            }

            // Fast path for small integers.
            if (v === ~~v && v < 1e7) {
              for (e = 0, i = v; i >= 10; i /= 10) e++;

              if (external) {
                if (e > Decimal.maxE) {
                  x.e = NaN;
                  x.d = null;
                } else if (e < Decimal.minE) {
                  x.e = 0;
                  x.d = [0];
                } else {
                  x.e = e;
                  x.d = [v];
                }
              } else {
                x.e = e;
                x.d = [v];
              }

              return;

            // Infinity, NaN.
            } else if (v * 0 !== 0) {
              if (!v) x.s = NaN;
              x.e = NaN;
              x.d = null;
              return;
            }

            return parseDecimal(x, v.toString());

          } else if (t !== 'string') {
            throw Error(invalidArgument + v);
          }

          // Minus sign?
          if ((i = v.charCodeAt(0)) === 45) {
            v = v.slice(1);
            x.s = -1;
          } else {
            // Plus sign?
            if (i === 43) v = v.slice(1);
            x.s = 1;
          }

          return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
        }

        Decimal.prototype = P;

        Decimal.ROUND_UP = 0;
        Decimal.ROUND_DOWN = 1;
        Decimal.ROUND_CEIL = 2;
        Decimal.ROUND_FLOOR = 3;
        Decimal.ROUND_HALF_UP = 4;
        Decimal.ROUND_HALF_DOWN = 5;
        Decimal.ROUND_HALF_EVEN = 6;
        Decimal.ROUND_HALF_CEIL = 7;
        Decimal.ROUND_HALF_FLOOR = 8;
        Decimal.EUCLID = 9;

        Decimal.config = Decimal.set = config;
        Decimal.clone = clone;
        Decimal.isDecimal = isDecimalInstance;

        Decimal.abs = abs;
        Decimal.acos = acos;
        Decimal.acosh = acosh;        // ES6
        Decimal.add = add;
        Decimal.asin = asin;
        Decimal.asinh = asinh;        // ES6
        Decimal.atan = atan;
        Decimal.atanh = atanh;        // ES6
        Decimal.atan2 = atan2;
        Decimal.cbrt = cbrt;          // ES6
        Decimal.ceil = ceil;
        Decimal.clamp = clamp;
        Decimal.cos = cos;
        Decimal.cosh = cosh;          // ES6
        Decimal.div = div;
        Decimal.exp = exp;
        Decimal.floor = floor;
        Decimal.hypot = hypot;        // ES6
        Decimal.ln = ln;
        Decimal.log = log;
        Decimal.log10 = log10;        // ES6
        Decimal.log2 = log2;          // ES6
        Decimal.max = max;
        Decimal.min = min;
        Decimal.mod = mod;
        Decimal.mul = mul;
        Decimal.pow = pow;
        Decimal.random = random;
        Decimal.round = round;
        Decimal.sign = sign;          // ES6
        Decimal.sin = sin;
        Decimal.sinh = sinh;          // ES6
        Decimal.sqrt = sqrt;
        Decimal.sub = sub;
        Decimal.sum = sum;
        Decimal.tan = tan;
        Decimal.tanh = tanh;          // ES6
        Decimal.trunc = trunc;        // ES6

        if (obj === void 0) obj = {};
        if (obj) {
          if (obj.defaults !== true) {
            ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
            for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
          }
        }

        Decimal.config(obj);

        return Decimal;
      }


      /*
       * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       * y {number|string|Decimal}
       *
       */
      function div(x, y) {
        return new this(x).div(y);
      }


      /*
       * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} The power to which to raise the base of the natural log.
       *
       */
      function exp(x) {
        return new this(x).exp();
      }


      /*
       * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
       *
       * x {number|string|Decimal}
       *
       */
      function floor(x) {
        return finalise(x = new this(x), x.e + 1, 3);
      }


      /*
       * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
       * rounded to `precision` significant digits using rounding mode `rounding`.
       *
       * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
       *
       * arguments {number|string|Decimal}
       *
       */
      function hypot() {
        var i, n,
          t = new this(0);

        external = false;

        for (i = 0; i < arguments.length;) {
          n = new this(arguments[i++]);
          if (!n.d) {
            if (n.s) {
              external = true;
              return new this(1 / 0);
            }
            t = n;
          } else if (t.d) {
            t = t.plus(n.times(n));
          }
        }

        external = true;

        return t.sqrt();
      }


      /*
       * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
       * otherwise return false.
       *
       */
      function isDecimalInstance(obj) {
        return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
      }


      /*
       * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function ln(x) {
        return new this(x).ln();
      }


      /*
       * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
       * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
       *
       * log[y](x)
       *
       * x {number|string|Decimal} The argument of the logarithm.
       * y {number|string|Decimal} The base of the logarithm.
       *
       */
      function log(x, y) {
        return new this(x).log(y);
      }


      /*
       * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function log2(x) {
        return new this(x).log(2);
      }


      /*
       * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function log10(x) {
        return new this(x).log(10);
      }


      /*
       * Return a new Decimal whose value is the maximum of the arguments.
       *
       * arguments {number|string|Decimal}
       *
       */
      function max() {
        return maxOrMin(this, arguments, 'lt');
      }


      /*
       * Return a new Decimal whose value is the minimum of the arguments.
       *
       * arguments {number|string|Decimal}
       *
       */
      function min() {
        return maxOrMin(this, arguments, 'gt');
      }


      /*
       * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
       * using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       * y {number|string|Decimal}
       *
       */
      function mod(x, y) {
        return new this(x).mod(y);
      }


      /*
       * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       * y {number|string|Decimal}
       *
       */
      function mul(x, y) {
        return new this(x).mul(y);
      }


      /*
       * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} The base.
       * y {number|string|Decimal} The exponent.
       *
       */
      function pow(x, y) {
        return new this(x).pow(y);
      }


      /*
       * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
       * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
       * are produced).
       *
       * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
       *
       */
      function random(sd) {
        var d, e, k, n,
          i = 0,
          r = new this(1),
          rd = [];

        if (sd === void 0) sd = this.precision;
        else checkInt32(sd, 1, MAX_DIGITS);

        k = Math.ceil(sd / LOG_BASE);

        if (!this.crypto) {
          for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

        // Browsers supporting crypto.getRandomValues.
        } else if (crypto.getRandomValues) {
          d = crypto.getRandomValues(new Uint32Array(k));

          for (; i < k;) {
            n = d[i];

            // 0 <= n < 4294967296
            // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
            if (n >= 4.29e9) {
              d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
            } else {

              // 0 <= n <= 4289999999
              // 0 <= (n % 1e7) <= 9999999
              rd[i++] = n % 1e7;
            }
          }

        // Node.js supporting crypto.randomBytes.
        } else if (crypto.randomBytes) {

          // buffer
          d = crypto.randomBytes(k *= 4);

          for (; i < k;) {

            // 0 <= n < 2147483648
            n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

            // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
            if (n >= 2.14e9) {
              crypto.randomBytes(4).copy(d, i);
            } else {

              // 0 <= n <= 2139999999
              // 0 <= (n % 1e7) <= 9999999
              rd.push(n % 1e7);
              i += 4;
            }
          }

          i = k / 4;
        } else {
          throw Error(cryptoUnavailable);
        }

        k = rd[--i];
        sd %= LOG_BASE;

        // Convert trailing digits to zeros according to sd.
        if (k && sd) {
          n = mathpow(10, LOG_BASE - sd);
          rd[i] = (k / n | 0) * n;
        }

        // Remove trailing words which are zero.
        for (; rd[i] === 0; i--) rd.pop();

        // Zero?
        if (i < 0) {
          e = 0;
          rd = [0];
        } else {
          e = -1;

          // Remove leading words which are zero and adjust exponent accordingly.
          for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

          // Count the digits of the first word of rd to determine leading zeros.
          for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

          // Adjust the exponent for leading zeros of the first word of rd.
          if (k < LOG_BASE) e -= LOG_BASE - k;
        }

        r.e = e;
        r.d = rd;

        return r;
      }


      /*
       * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
       *
       * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
       *
       * x {number|string|Decimal}
       *
       */
      function round(x) {
        return finalise(x = new this(x), x.e + 1, this.rounding);
      }


      /*
       * Return
       *   1    if x > 0,
       *  -1    if x < 0,
       *   0    if x is 0,
       *  -0    if x is -0,
       *   NaN  otherwise
       *
       * x {number|string|Decimal}
       *
       */
      function sign(x) {
        x = new this(x);
        return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
      }


      /*
       * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
       * using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function sin(x) {
        return new this(x).sin();
      }


      /*
       * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function sinh(x) {
        return new this(x).sinh();
      }


      /*
       * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function sqrt(x) {
        return new this(x).sqrt();
      }


      /*
       * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
       * using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       * y {number|string|Decimal}
       *
       */
      function sub(x, y) {
        return new this(x).sub(y);
      }


      /*
       * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * Only the result is rounded, not the intermediate calculations.
       *
       * arguments {number|string|Decimal}
       *
       */
      function sum() {
        var i = 0,
          args = arguments,
          x = new this(args[i]);

        external = false;
        for (; x.s && ++i < args.length;) x = x.plus(args[i]);
        external = true;

        return finalise(x, this.precision, this.rounding);
      }


      /*
       * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function tan(x) {
        return new this(x).tan();
      }


      /*
       * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function tanh(x) {
        return new this(x).tanh();
      }


      /*
       * Return a new Decimal whose value is `x` truncated to an integer.
       *
       * x {number|string|Decimal}
       *
       */
      function trunc(x) {
        return finalise(x = new this(x), x.e + 1, 1);
      }


      // Create and configure initial Decimal constructor.
      Decimal = clone(DEFAULTS);
      Decimal.prototype.constructor = Decimal;
      Decimal['default'] = Decimal.Decimal = Decimal;

      // Create the internal constants from their string values.
      LN10 = new Decimal(LN10);
      PI = new Decimal(PI);


      // Export.


      // AMD.
      if (module.exports) {
        if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {
          P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;
          P[Symbol.toStringTag] = 'Decimal';
        }

        module.exports = Decimal;

      // Browser.
      } else {
        if (!globalScope) {
          globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;
        }

        noConflict = globalScope.Decimal;
        Decimal.noConflict = function () {
          globalScope.Decimal = noConflict;
          return Decimal;
        };

        globalScope.Decimal = Decimal;
      }
    })(commonjsGlobal);
    });

    var name$4B = 'BigNumber';
    var dependencies$4B = ['?on', 'config'];
    var createBigNumberClass = /* #__PURE__ */factory(name$4B, dependencies$4B, _ref => {
      var {
        on,
        config
      } = _ref;
      var BigNumber = decimal.clone({
        precision: config.precision,
        modulo: decimal.EUCLID
      });
      BigNumber.prototype = Object.create(BigNumber.prototype);
      /**
       * Attach type information
       */

      BigNumber.prototype.type = 'BigNumber';
      BigNumber.prototype.isBigNumber = true;
      /**
       * Get a JSON representation of a BigNumber containing
       * type information
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "BigNumber", "value": "0.2"}`
       */

      BigNumber.prototype.toJSON = function () {
        return {
          mathjs: 'BigNumber',
          value: this.toString()
        };
      };
      /**
       * Instantiate a BigNumber from a JSON object
       * @param {Object} json  a JSON object structured as:
       *                       `{"mathjs": "BigNumber", "value": "0.2"}`
       * @return {BigNumber}
       */


      BigNumber.fromJSON = function (json) {
        return new BigNumber(json.value);
      };

      if (on) {
        // listen for changed in the configuration, automatically apply changed precision
        on('config', function (curr, prev) {
          if (curr.precision !== prev.precision) {
            BigNumber.config({
              precision: curr.precision
            });
          }
        });
      }

      return BigNumber;
    }, {
      isClass: true
    });

    /**
     * @license Complex.js v2.1.1 12/05/2020
     *
     * Copyright (c) 2020, Robert Eisele (robert@xarg.org)
     * Dual licensed under the MIT or GPL Version 2 licenses.
     **/

    var complex$1 = createCommonjsModule(function (module, exports) {
    /**
     *
     * This class allows the manipulation of complex numbers.
     * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
     *
     * Object form
     * { re: <real>, im: <imaginary> }
     * { arg: <angle>, abs: <radius> }
     * { phi: <angle>, r: <radius> }
     *
     * Array / Vector form
     * [ real, imaginary ]
     *
     * Double form
     * 99.3 - Single double value
     *
     * String form
     * '23.1337' - Simple real number
     * '15+3i' - a simple complex number
     * '3-i' - a simple complex number
     *
     * Example:
     *
     * var c = new Complex('99.3+8i');
     * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
     *
     */

    (function(root) {

      var cosh = Math.cosh || function(x) {
        return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
      };

      var sinh = Math.sinh || function(x) {
        return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
      };

      /**
       * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).
       *
       * @param {number} x
       * @returns {number} cos(x) - 1
       */
      var cosm1 = function(x) {

        var b = Math.PI / 4;
        if (-b > x || x > b) {
          return Math.cos(x) - 1.0;
        }

        /* Calculate horner form of polynomial of taylor series in Q
        var fac = 1, alt = 1, pol = {};
        for (var i = 0; i <= 16; i++) {
          fac*= i || 1;
          if (i % 2 == 0) {
            pol[i] = new Fraction(1, alt * fac);
            alt = -alt;
          }
        }
        console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1
        */

        var xx = x * x;
        return xx * (
          xx * (
            xx * (
              xx * (
                xx * (
                  xx * (
                    xx * (
                      xx / 20922789888000
                      - 1 / 87178291200)
                    + 1 / 479001600)
                  - 1 / 3628800)
                + 1 / 40320)
              - 1 / 720)
            + 1 / 24)
          - 1 / 2);
      };

      var hypot = function(x, y) {

        var a = Math.abs(x);
        var b = Math.abs(y);

        if (a < 3000 && b < 3000) {
          return Math.sqrt(a * a + b * b);
        }

        if (a < b) {
          a = b;
          b = x / y;
        } else {
          b = y / x;
        }
        return a * Math.sqrt(1 + b * b);
      };

      var parser_exit = function() {
        throw SyntaxError('Invalid Param');
      };

      /**
       * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
       *
       * @param {number} a
       * @param {number} b
       * @returns {number}
       */
      function logHypot(a, b) {

        var _a = Math.abs(a);
        var _b = Math.abs(b);

        if (a === 0) {
          return Math.log(_b);
        }

        if (b === 0) {
          return Math.log(_a);
        }

        if (_a < 3000 && _b < 3000) {
          return Math.log(a * a + b * b) * 0.5;
        }

        /* I got 4 ideas to compute this property without overflow:
         *
         * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
         *
         * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

         Math.log(a * a + b * b) / 2

         *
         *
         * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

         var fn = function(a, b) {
         a = Math.abs(a);
         b = Math.abs(b);
         var t = Math.min(a, b);
         a = Math.max(a, b);
         t = t / a;

         return Math.log(a) + Math.log(1 + t * t) / 2;
         };

         * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

         Math.log(a / Math.cos(Math.atan2(b, a)))

         * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

         Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

         */

         a = a / 2;
         b = b / 2;

        return 0.5 * Math.log(a * a + b * b) + Math.LN2;
      }

      var parse = function(a, b) {

        var z = { 're': 0, 'im': 0 };

        if (a === undefined || a === null) {
          z['re'] =
          z['im'] = 0;
        } else if (b !== undefined) {
          z['re'] = a;
          z['im'] = b;
        } else
          switch (typeof a) {

            case 'object':

              if ('im' in a && 're' in a) {
                z['re'] = a['re'];
                z['im'] = a['im'];
              } else if ('abs' in a && 'arg' in a) {
                if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
                  return Complex['INFINITY'];
                }
                z['re'] = a['abs'] * Math.cos(a['arg']);
                z['im'] = a['abs'] * Math.sin(a['arg']);
              } else if ('r' in a && 'phi' in a) {
                if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
                  return Complex['INFINITY'];
                }
                z['re'] = a['r'] * Math.cos(a['phi']);
                z['im'] = a['r'] * Math.sin(a['phi']);
              } else if (a.length === 2) { // Quick array check
                z['re'] = a[0];
                z['im'] = a[1];
              } else {
                parser_exit();
              }
              break;

            case 'string':

              z['im'] = /* void */
              z['re'] = 0;

              var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
              var plus = 1;
              var minus = 0;

              if (tokens === null) {
                parser_exit();
              }

              for (var i = 0; i < tokens.length; i++) {

                var c = tokens[i];

                if (c === ' ' || c === '\t' || c === '\n') ; else if (c === '+') {
                  plus++;
                } else if (c === '-') {
                  minus++;
                } else if (c === 'i' || c === 'I') {

                  if (plus + minus === 0) {
                    parser_exit();
                  }

                  if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
                    z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
                    i++;
                  } else {
                    z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
                  }
                  plus = minus = 0;

                } else {

                  if (plus + minus === 0 || isNaN(c)) {
                    parser_exit();
                  }

                  if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
                    z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
                    i++;
                  } else {
                    z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
                  }
                  plus = minus = 0;
                }
              }

              // Still something on the stack
              if (plus + minus > 0) {
                parser_exit();
              }
              break;

            case 'number':
              z['im'] = 0;
              z['re'] = a;
              break;

            default:
              parser_exit();
          }

        if (isNaN(z['re']) || isNaN(z['im'])) ;

        return z;
      };

      /**
       * @constructor
       * @returns {Complex}
       */
      function Complex(a, b) {

        if (!(this instanceof Complex)) {
          return new Complex(a, b);
        }

        var z = parse(a, b);

        this['re'] = z['re'];
        this['im'] = z['im'];
      }

      Complex.prototype = {

        're': 0,
        'im': 0,

        /**
         * Calculates the sign of a complex number, which is a normalized complex
         *
         * @returns {Complex}
         */
        'sign': function() {

          var abs = this['abs']();

          return new Complex(
            this['re'] / abs,
            this['im'] / abs);
        },

        /**
         * Adds two complex numbers
         *
         * @returns {Complex}
         */
        'add': function(a, b) {

          var z = new Complex(a, b);

          // Infinity + Infinity = NaN
          if (this['isInfinite']() && z['isInfinite']()) {
            return Complex['NAN'];
          }

          // Infinity + z = Infinity { where z != Infinity }
          if (this['isInfinite']() || z['isInfinite']()) {
            return Complex['INFINITY'];
          }

          return new Complex(
            this['re'] + z['re'],
            this['im'] + z['im']);
        },

        /**
         * Subtracts two complex numbers
         *
         * @returns {Complex}
         */
        'sub': function(a, b) {

          var z = new Complex(a, b);

          // Infinity - Infinity = NaN
          if (this['isInfinite']() && z['isInfinite']()) {
            return Complex['NAN'];
          }

          // Infinity - z = Infinity { where z != Infinity }
          if (this['isInfinite']() || z['isInfinite']()) {
            return Complex['INFINITY'];
          }

          return new Complex(
            this['re'] - z['re'],
            this['im'] - z['im']);
        },

        /**
         * Multiplies two complex numbers
         *
         * @returns {Complex}
         */
        'mul': function(a, b) {

          var z = new Complex(a, b);

          // Infinity * 0 = NaN
          if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
            return Complex['NAN'];
          }

          // Infinity * z = Infinity { where z != 0 }
          if (this['isInfinite']() || z['isInfinite']()) {
            return Complex['INFINITY'];
          }

          // Short circuit for real values
          if (z['im'] === 0 && this['im'] === 0) {
            return new Complex(this['re'] * z['re'], 0);
          }

          return new Complex(
            this['re'] * z['re'] - this['im'] * z['im'],
            this['re'] * z['im'] + this['im'] * z['re']);
        },

        /**
         * Divides two complex numbers
         *
         * @returns {Complex}
         */
        'div': function(a, b) {

          var z = new Complex(a, b);

          // 0 / 0 = NaN and Infinity / Infinity = NaN
          if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {
            return Complex['NAN'];
          }

          // Infinity / 0 = Infinity
          if (this['isInfinite']() || z['isZero']()) {
            return Complex['INFINITY'];
          }

          // 0 / Infinity = 0
          if (this['isZero']() || z['isInfinite']()) {
            return Complex['ZERO'];
          }

          a = this['re'];
          b = this['im'];

          var c = z['re'];
          var d = z['im'];
          var t, x;

          if (0 === d) {
            // Divisor is real
            return new Complex(a / c, b / c);
          }

          if (Math.abs(c) < Math.abs(d)) {

            x = c / d;
            t = c * x + d;

            return new Complex(
              (a * x + b) / t,
              (b * x - a) / t);

          } else {

            x = d / c;
            t = d * x + c;

            return new Complex(
              (a + b * x) / t,
              (b - a * x) / t);
          }
        },

        /**
         * Calculate the power of two complex numbers
         *
         * @returns {Complex}
         */
        'pow': function(a, b) {

          var z = new Complex(a, b);

          a = this['re'];
          b = this['im'];

          if (z['isZero']()) {
            return Complex['ONE'];
          }

          // If the exponent is real
          if (z['im'] === 0) {

            if (b === 0 && a > 0) {

              return new Complex(Math.pow(a, z['re']), 0);

            } else if (a === 0) { // If base is fully imaginary

              switch ((z['re'] % 4 + 4) % 4) {
                case 0:
                  return new Complex(Math.pow(b, z['re']), 0);
                case 1:
                  return new Complex(0, Math.pow(b, z['re']));
                case 2:
                  return new Complex(-Math.pow(b, z['re']), 0);
                case 3:
                  return new Complex(0, -Math.pow(b, z['re']));
              }
            }
          }

          /* I couldn't find a good formula, so here is a derivation and optimization
           *
           * z_1^z_2 = (a + bi)^(c + di)
           *         = exp((c + di) * log(a + bi)
           *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
           * =>...
           * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
           * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
           *
           * =>...
           * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
           * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
           *
           * =>
           * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
           * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
           *
           */

          if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
            return Complex['ZERO'];
          }

          var arg = Math.atan2(b, a);
          var loh = logHypot(a, b);

          a = Math.exp(z['re'] * loh - z['im'] * arg);
          b = z['im'] * loh + z['re'] * arg;
          return new Complex(
            a * Math.cos(b),
            a * Math.sin(b));
        },

        /**
         * Calculate the complex square root
         *
         * @returns {Complex}
         */
        'sqrt': function() {

          var a = this['re'];
          var b = this['im'];
          var r = this['abs']();

          var re, im;

          if (a >= 0) {

            if (b === 0) {
              return new Complex(Math.sqrt(a), 0);
            }

            re = 0.5 * Math.sqrt(2.0 * (r + a));
          } else {
            re = Math.abs(b) / Math.sqrt(2 * (r - a));
          }

          if (a <= 0) {
            im = 0.5 * Math.sqrt(2.0 * (r - a));
          } else {
            im = Math.abs(b) / Math.sqrt(2 * (r + a));
          }

          return new Complex(re, b < 0 ? -im : im);
        },

        /**
         * Calculate the complex exponent
         *
         * @returns {Complex}
         */
        'exp': function() {

          var tmp = Math.exp(this['re']);

          if (this['im'] === 0) ;
          return new Complex(
            tmp * Math.cos(this['im']),
            tmp * Math.sin(this['im']));
        },

        /**
         * Calculate the complex exponent and subtracts one.
         *
         * This may be more accurate than `Complex(x).exp().sub(1)` if
         * `x` is small.
         *
         * @returns {Complex}
         */
        'expm1': function() {

          /**
           * exp(a + i*b) - 1
           = exp(a) * (cos(b) + j*sin(b)) - 1
           = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
           */

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            Math.expm1(a) * Math.cos(b) + cosm1(b),
            Math.exp(a) * Math.sin(b));
        },

        /**
         * Calculate the natural log
         *
         * @returns {Complex}
         */
        'log': function() {

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            logHypot(a, b),
            Math.atan2(b, a));
        },

        /**
         * Calculate the magnitude of the complex number
         *
         * @returns {number}
         */
        'abs': function() {

          return hypot(this['re'], this['im']);
        },

        /**
         * Calculate the angle of the complex number
         *
         * @returns {number}
         */
        'arg': function() {

          return Math.atan2(this['im'], this['re']);
        },

        /**
         * Calculate the sine of the complex number
         *
         * @returns {Complex}
         */
        'sin': function() {

          // sin(z) = ( e^iz - e^-iz ) / 2i 
          //        = sin(a)cosh(b) + i cos(a)sinh(b)

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            Math.sin(a) * cosh(b),
            Math.cos(a) * sinh(b));
        },

        /**
         * Calculate the cosine
         *
         * @returns {Complex}
         */
        'cos': function() {

          // cos(z) = ( e^iz + e^-iz ) / 2 
          //        = cos(a)cosh(b) - i sin(a)sinh(b)

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            Math.cos(a) * cosh(b),
            -Math.sin(a) * sinh(b));
        },

        /**
         * Calculate the tangent
         *
         * @returns {Complex}
         */
        'tan': function() {

          // tan(z) = sin(z) / cos(z) 
          //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )
          //        = ( e^2iz - 1 ) / i( e^2iz + 1 )
          //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = Math.cos(a) + cosh(b);

          return new Complex(
            Math.sin(a) / d,
            sinh(b) / d);
        },

        /**
         * Calculate the cotangent
         *
         * @returns {Complex}
         */
        'cot': function() {

          // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = Math.cos(a) - cosh(b);

          return new Complex(
            -Math.sin(a) / d,
            sinh(b) / d);
        },

        /**
         * Calculate the secant
         *
         * @returns {Complex}
         */
        'sec': function() {

          // sec(c) = 2 / (e^(ci) + e^(-ci))

          var a = this['re'];
          var b = this['im'];
          var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);

          return new Complex(
            Math.cos(a) * cosh(b) / d,
            Math.sin(a) * sinh(b) / d);
        },

        /**
         * Calculate the cosecans
         *
         * @returns {Complex}
         */
        'csc': function() {

          // csc(c) = 2i / (e^(ci) - e^(-ci))

          var a = this['re'];
          var b = this['im'];
          var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);

          return new Complex(
            Math.sin(a) * cosh(b) / d,
            -Math.cos(a) * sinh(b) / d);
        },

        /**
         * Calculate the complex arcus sinus
         *
         * @returns {Complex}
         */
        'asin': function() {

          // asin(c) = -i * log(ci + sqrt(1 - c^2))

          var a = this['re'];
          var b = this['im'];

          var t1 = new Complex(
            b * b - a * a + 1,
            -2 * a * b)['sqrt']();

          var t2 = new Complex(
            t1['re'] - b,
            t1['im'] + a)['log']();

          return new Complex(t2['im'], -t2['re']);
        },

        /**
         * Calculate the complex arcus cosinus
         *
         * @returns {Complex}
         */
        'acos': function() {

          // acos(c) = i * log(c - i * sqrt(1 - c^2))

          var a = this['re'];
          var b = this['im'];

          var t1 = new Complex(
            b * b - a * a + 1,
            -2 * a * b)['sqrt']();

          var t2 = new Complex(
            t1['re'] - b,
            t1['im'] + a)['log']();

          return new Complex(Math.PI / 2 - t2['im'], t2['re']);
        },

        /**
         * Calculate the complex arcus tangent
         *
         * @returns {Complex}
         */
        'atan': function() {

          // atan(c) = i / 2 log((i + x) / (i - x))

          var a = this['re'];
          var b = this['im'];

          if (a === 0) {

            if (b === 1) {
              return new Complex(0, Infinity);
            }

            if (b === -1) {
              return new Complex(0, -Infinity);
            }
          }

          var d = a * a + (1.0 - b) * (1.0 - b);

          var t1 = new Complex(
            (1 - b * b - a * a) / d,
            -2 * a / d).log();

          return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
        },

        /**
         * Calculate the complex arcus cotangent
         *
         * @returns {Complex}
         */
        'acot': function() {

          // acot(c) = i / 2 log((c - i) / (c + i))

          var a = this['re'];
          var b = this['im'];

          if (b === 0) {
            return new Complex(Math.atan2(1, a), 0);
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).atan()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).atan();
        },

        /**
         * Calculate the complex arcus secant
         *
         * @returns {Complex}
         */
        'asec': function() {

          // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

          var a = this['re'];
          var b = this['im'];

          if (a === 0 && b === 0) {
            return new Complex(0, Infinity);
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).acos()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).acos();
        },

        /**
         * Calculate the complex arcus cosecans
         *
         * @returns {Complex}
         */
        'acsc': function() {

          // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

          var a = this['re'];
          var b = this['im'];

          if (a === 0 && b === 0) {
            return new Complex(Math.PI / 2, Infinity);
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).asin()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).asin();
        },

        /**
         * Calculate the complex sinh
         *
         * @returns {Complex}
         */
        'sinh': function() {

          // sinh(c) = (e^c - e^-c) / 2

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            sinh(a) * Math.cos(b),
            cosh(a) * Math.sin(b));
        },

        /**
         * Calculate the complex cosh
         *
         * @returns {Complex}
         */
        'cosh': function() {

          // cosh(c) = (e^c + e^-c) / 2

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            cosh(a) * Math.cos(b),
            sinh(a) * Math.sin(b));
        },

        /**
         * Calculate the complex tanh
         *
         * @returns {Complex}
         */
        'tanh': function() {

          // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = cosh(a) + Math.cos(b);

          return new Complex(
            sinh(a) / d,
            Math.sin(b) / d);
        },

        /**
         * Calculate the complex coth
         *
         * @returns {Complex}
         */
        'coth': function() {

          // coth(c) = (e^c + e^-c) / (e^c - e^-c)

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = cosh(a) - Math.cos(b);

          return new Complex(
            sinh(a) / d,
            -Math.sin(b) / d);
        },

        /**
         * Calculate the complex coth
         *
         * @returns {Complex}
         */
        'csch': function() {

          // csch(c) = 2 / (e^c - e^-c)

          var a = this['re'];
          var b = this['im'];
          var d = Math.cos(2 * b) - cosh(2 * a);

          return new Complex(
            -2 * sinh(a) * Math.cos(b) / d,
            2 * cosh(a) * Math.sin(b) / d);
        },

        /**
         * Calculate the complex sech
         *
         * @returns {Complex}
         */
        'sech': function() {

          // sech(c) = 2 / (e^c + e^-c)

          var a = this['re'];
          var b = this['im'];
          var d = Math.cos(2 * b) + cosh(2 * a);

          return new Complex(
            2 * cosh(a) * Math.cos(b) / d,
            -2 * sinh(a) * Math.sin(b) / d);
        },

        /**
         * Calculate the complex asinh
         *
         * @returns {Complex}
         */
        'asinh': function() {

          // asinh(c) = log(c + sqrt(c^2 + 1))

          var tmp = this['im'];
          this['im'] = -this['re'];
          this['re'] = tmp;
          var res = this['asin']();

          this['re'] = -this['im'];
          this['im'] = tmp;
          tmp = res['re'];

          res['re'] = -res['im'];
          res['im'] = tmp;
          return res;
        },

        /**
         * Calculate the complex acosh
         *
         * @returns {Complex}
         */
        'acosh': function() {

          // acosh(c) = log(c + sqrt(c^2 - 1))

          var res = this['acos']();
          if (res['im'] <= 0) {
            var tmp = res['re'];
            res['re'] = -res['im'];
            res['im'] = tmp;
          } else {
            var tmp = res['im'];
            res['im'] = -res['re'];
            res['re'] = tmp;
          }
          return res;
        },

        /**
         * Calculate the complex atanh
         *
         * @returns {Complex}
         */
        'atanh': function() {

          // atanh(c) = log((1+c) / (1-c)) / 2

          var a = this['re'];
          var b = this['im'];

          var noIM = a > 1 && b === 0;
          var oneMinus = 1 - a;
          var onePlus = 1 + a;
          var d = oneMinus * oneMinus + b * b;

          var x = (d !== 0)
            ? new Complex(
              (onePlus * oneMinus - b * b) / d,
              (b * oneMinus + onePlus * b) / d)
            : new Complex(
              (a !== -1) ? (a / 0) : 0,
              (b !== 0) ? (b / 0) : 0);

          var temp = x['re'];
          x['re'] = logHypot(x['re'], x['im']) / 2;
          x['im'] = Math.atan2(x['im'], temp) / 2;
          if (noIM) {
            x['im'] = -x['im'];
          }
          return x;
        },

        /**
         * Calculate the complex acoth
         *
         * @returns {Complex}
         */
        'acoth': function() {

          // acoth(c) = log((c+1) / (c-1)) / 2

          var a = this['re'];
          var b = this['im'];

          if (a === 0 && b === 0) {
            return new Complex(0, Math.PI / 2);
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).atanh()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).atanh();
        },

        /**
         * Calculate the complex acsch
         *
         * @returns {Complex}
         */
        'acsch': function() {

          // acsch(c) = log((1+sqrt(1+c^2))/c)

          var a = this['re'];
          var b = this['im'];

          if (b === 0) {

            return new Complex(
              (a !== 0)
                ? Math.log(a + Math.sqrt(a * a + 1))
                : Infinity, 0);
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).asinh()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).asinh();
        },

        /**
         * Calculate the complex asech
         *
         * @returns {Complex}
         */
        'asech': function() {

          // asech(c) = log((1+sqrt(1-c^2))/c)

          var a = this['re'];
          var b = this['im'];

          if (this['isZero']()) {
            return Complex['INFINITY'];
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).acosh()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).acosh();
        },

        /**
         * Calculate the complex inverse 1/z
         *
         * @returns {Complex}
         */
        'inverse': function() {

          // 1 / 0 = Infinity and 1 / Infinity = 0
          if (this['isZero']()) {
            return Complex['INFINITY'];
          }

          if (this['isInfinite']()) {
            return Complex['ZERO'];
          }

          var a = this['re'];
          var b = this['im'];

          var d = a * a + b * b;

          return new Complex(a / d, -b / d);
        },

        /**
         * Returns the complex conjugate
         *
         * @returns {Complex}
         */
        'conjugate': function() {

          return new Complex(this['re'], -this['im']);
        },

        /**
         * Gets the negated complex number
         *
         * @returns {Complex}
         */
        'neg': function() {

          return new Complex(-this['re'], -this['im']);
        },

        /**
         * Ceils the actual complex number
         *
         * @returns {Complex}
         */
        'ceil': function(places) {

          places = Math.pow(10, places || 0);

          return new Complex(
            Math.ceil(this['re'] * places) / places,
            Math.ceil(this['im'] * places) / places);
        },

        /**
         * Floors the actual complex number
         *
         * @returns {Complex}
         */
        'floor': function(places) {

          places = Math.pow(10, places || 0);

          return new Complex(
            Math.floor(this['re'] * places) / places,
            Math.floor(this['im'] * places) / places);
        },

        /**
         * Ceils the actual complex number
         *
         * @returns {Complex}
         */
        'round': function(places) {

          places = Math.pow(10, places || 0);

          return new Complex(
            Math.round(this['re'] * places) / places,
            Math.round(this['im'] * places) / places);
        },

        /**
         * Compares two complex numbers
         *
         * **Note:** new Complex(Infinity).equals(Infinity) === false
         *
         * @returns {boolean}
         */
        'equals': function(a, b) {

          var z = new Complex(a, b);

          return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
            Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
        },

        /**
         * Clones the actual object
         *
         * @returns {Complex}
         */
        'clone': function() {

          return new Complex(this['re'], this['im']);
        },

        /**
         * Gets a string of the actual complex number
         *
         * @returns {string}
         */
        'toString': function() {

          var a = this['re'];
          var b = this['im'];
          var ret = "";

          if (this['isNaN']()) {
            return 'NaN';
          }

          if (this['isInfinite']()) {
            return 'Infinity';
          }

          if (Math.abs(a) < Complex['EPSILON']) {
            a = 0;
          }

          if (Math.abs(b) < Complex['EPSILON']) {
            b = 0;
          }

          // If is real number
          if (b === 0) {
            return ret + a;
          }

          if (a !== 0) {
            ret += a;
            ret += " ";
            if (b < 0) {
              b = -b;
              ret += "-";
            } else {
              ret += "+";
            }
            ret += " ";
          } else if (b < 0) {
            b = -b;
            ret += "-";
          }

          if (1 !== b) { // b is the absolute imaginary part
            ret += b;
          }
          return ret + "i";
        },

        /**
         * Returns the actual number as a vector
         *
         * @returns {Array}
         */
        'toVector': function() {

          return [this['re'], this['im']];
        },

        /**
         * Returns the actual real value of the current object
         *
         * @returns {number|null}
         */
        'valueOf': function() {

          if (this['im'] === 0) {
            return this['re'];
          }
          return null;
        },

        /**
         * Determines whether a complex number is not on the Riemann sphere.
         *
         * @returns {boolean}
         */
        'isNaN': function() {
          return isNaN(this['re']) || isNaN(this['im']);
        },

        /**
         * Determines whether or not a complex number is at the zero pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        'isZero': function() {
          return this['im'] === 0 && this['re'] === 0;
        },

        /**
         * Determines whether a complex number is not at the infinity pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        'isFinite': function() {
          return isFinite(this['re']) && isFinite(this['im']);
        },

        /**
         * Determines whether or not a complex number is at the infinity pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        'isInfinite': function() {
          return !(this['isNaN']() || this['isFinite']());
        }
      };

      Complex['ZERO'] = new Complex(0, 0);
      Complex['ONE'] = new Complex(1, 0);
      Complex['I'] = new Complex(0, 1);
      Complex['PI'] = new Complex(Math.PI, 0);
      Complex['E'] = new Complex(Math.E, 0);
      Complex['INFINITY'] = new Complex(Infinity, Infinity);
      Complex['NAN'] = new Complex(NaN, NaN);
      Complex['EPSILON'] = 1e-15;

      {
        Object.defineProperty(Complex, "__esModule", { 'value': true });
        Complex['default'] = Complex;
        Complex['Complex'] = Complex;
        module['exports'] = Complex;
      }

    })();
    });

    var Complex$1 = /*@__PURE__*/getDefaultExportFromCjs(complex$1);

    var name$4A = 'Complex';
    var dependencies$4A = [];
    var createComplexClass = /* #__PURE__ */factory(name$4A, dependencies$4A, () => {
      /**
       * Attach type information
       */
      Complex$1.prototype.type = 'Complex';
      Complex$1.prototype.isComplex = true;
      /**
       * Get a JSON representation of the complex number
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
       */

      Complex$1.prototype.toJSON = function () {
        return {
          mathjs: 'Complex',
          re: this.re,
          im: this.im
        };
      };
      /*
       * Return the value of the complex number in polar notation
       * The angle phi will be set in the interval of [-pi, pi].
       * @return {{r: number, phi: number}} Returns and object with properties r and phi.
       */


      Complex$1.prototype.toPolar = function () {
        return {
          r: this.abs(),
          phi: this.arg()
        };
      };
      /**
       * Get a string representation of the complex number,
       * with optional formatting options.
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @return {string} str
       */


      Complex$1.prototype.format = function (options) {
        var str = '';
        var im = this.im;
        var re = this.re;
        var strRe = format$3(this.re, options);
        var strIm = format$3(this.im, options); // round either re or im when smaller than the configured precision

        var precision = isNumber(options) ? options : options ? options.precision : null;

        if (precision !== null) {
          var epsilon = Math.pow(10, -precision);

          if (Math.abs(re / im) < epsilon) {
            re = 0;
          }

          if (Math.abs(im / re) < epsilon) {
            im = 0;
          }
        }

        if (im === 0) {
          // real value
          str = strRe;
        } else if (re === 0) {
          // purely complex value
          if (im === 1) {
            str = 'i';
          } else if (im === -1) {
            str = '-i';
          } else {
            str = strIm + 'i';
          }
        } else {
          // complex value
          if (im < 0) {
            if (im === -1) {
              str = strRe + ' - i';
            } else {
              str = strRe + ' - ' + strIm.substring(1) + 'i';
            }
          } else {
            if (im === 1) {
              str = strRe + ' + i';
            } else {
              str = strRe + ' + ' + strIm + 'i';
            }
          }
        }

        return str;
      };
      /**
       * Create a complex number from polar coordinates
       *
       * Usage:
       *
       *     Complex.fromPolar(r: number, phi: number) : Complex
       *     Complex.fromPolar({r: number, phi: number}) : Complex
       *
       * @param {*} args...
       * @return {Complex}
       */


      Complex$1.fromPolar = function (args) {
        switch (arguments.length) {
          case 1:
            {
              var arg = arguments[0];

              if (typeof arg === 'object') {
                return Complex$1(arg);
              } else {
                throw new TypeError('Input has to be an object with r and phi keys.');
              }
            }

          case 2:
            {
              var r = arguments[0];
              var phi = arguments[1];

              if (isNumber(r)) {
                if (isUnit(phi) && phi.hasBase('ANGLE')) {
                  // convert unit to a number in radians
                  phi = phi.toNumber('rad');
                }

                if (isNumber(phi)) {
                  return new Complex$1({
                    r,
                    phi
                  });
                }

                throw new TypeError('Phi is not a number nor an angle unit.');
              } else {
                throw new TypeError('Radius r is not a number.');
              }
            }

          default:
            throw new SyntaxError('Wrong number of arguments in function fromPolar');
        }
      };

      Complex$1.prototype.valueOf = Complex$1.prototype.toString;
      /**
       * Create a Complex number from a JSON object
       * @param {Object} json  A JSON Object structured as
       *                       {"mathjs": "Complex", "re": 2, "im": 3}
       *                       All properties are optional, default values
       *                       for `re` and `im` are 0.
       * @return {Complex} Returns a new Complex number
       */

      Complex$1.fromJSON = function (json) {
        return new Complex$1(json);
      };
      /**
       * Compare two complex numbers, `a` and `b`:
       *
       * - Returns 1 when the real part of `a` is larger than the real part of `b`
       * - Returns -1 when the real part of `a` is smaller than the real part of `b`
       * - Returns 1 when the real parts are equal
       *   and the imaginary part of `a` is larger than the imaginary part of `b`
       * - Returns -1 when the real parts are equal
       *   and the imaginary part of `a` is smaller than the imaginary part of `b`
       * - Returns 0 when both real and imaginary parts are equal.
       *
       * @params {Complex} a
       * @params {Complex} b
       * @returns {number} Returns the comparison result: -1, 0, or 1
       */


      Complex$1.compare = function (a, b) {
        if (a.re > b.re) {
          return 1;
        }

        if (a.re < b.re) {
          return -1;
        }

        if (a.im > b.im) {
          return 1;
        }

        if (a.im < b.im) {
          return -1;
        }

        return 0;
      };

      return Complex$1;
    }, {
      isClass: true
    });

    /**
     * @license Fraction.js v4.2.0 05/03/2022
     * https://www.xarg.org/2014/03/rational-numbers-in-javascript/
     *
     * Copyright (c) 2021, Robert Eisele (robert@xarg.org)
     * Dual licensed under the MIT or GPL Version 2 licenses.
     **/

    var fraction$1 = createCommonjsModule(function (module, exports) {
    /**
     *
     * This class offers the possibility to calculate fractions.
     * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
     *
     * Array/Object form
     * [ 0 => <nominator>, 1 => <denominator> ]
     * [ n => <nominator>, d => <denominator> ]
     *
     * Integer form
     * - Single integer value
     *
     * Double form
     * - Single double value
     *
     * String form
     * 123.456 - a simple double
     * 123/456 - a string fraction
     * 123.'456' - a double with repeating decimal places
     * 123.(456) - synonym
     * 123.45'6' - a double with repeating last place
     * 123.45(6) - synonym
     *
     * Example:
     *
     * var f = new Fraction("9.4'31'");
     * f.mul([-4, 3]).div(4.9);
     *
     */

    (function(root) {

      // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
      // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
      // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
      var MAX_CYCLE_LEN = 2000;

      // Parsed data to avoid calling "new" all the time
      var P = {
        "s": 1,
        "n": 0,
        "d": 1
      };

      function assign(n, s) {

        if (isNaN(n = parseInt(n, 10))) {
          throw Fraction['InvalidParameter'];
        }
        return n * s;
      }

      // Creates a new Fraction internally without the need of the bulky constructor
      function newFraction(n, d) {

        if (d === 0) {
          throw Fraction['DivisionByZero'];
        }

        var f = Object.create(Fraction.prototype);
        f["s"] = n < 0 ? -1 : 1;

        n = n < 0 ? -n : n;

        var a = gcd(n, d);

        f["n"] = n / a;
        f["d"] = d / a;
        return f;
      }

      function factorize(num) {

        var factors = {};

        var n = num;
        var i = 2;
        var s = 4;

        while (s <= n) {

          while (n % i === 0) {
            n/= i;
            factors[i] = (factors[i] || 0) + 1;
          }
          s+= 1 + 2 * i++;
        }

        if (n !== num) {
          if (n > 1)
            factors[n] = (factors[n] || 0) + 1;
        } else {
          factors[num] = (factors[num] || 0) + 1;
        }
        return factors;
      }

      var parse = function(p1, p2) {

        var n = 0, d = 1, s = 1;
        var v = 0, w = 0, x = 0, y = 1, z = 1;

        var A = 0, B = 1;
        var C = 1, D = 1;

        var N = 10000000;
        var M;

        if (p1 === undefined || p1 === null) ; else if (p2 !== undefined) {
          n = p1;
          d = p2;
          s = n * d;

          if (n % 1 !== 0 || d % 1 !== 0) {
            throw Fraction['NonIntegerParameter'];
          }

        } else
          switch (typeof p1) {

            case "object":
              {
                if ("d" in p1 && "n" in p1) {
                  n = p1["n"];
                  d = p1["d"];
                  if ("s" in p1)
                    n*= p1["s"];
                } else if (0 in p1) {
                  n = p1[0];
                  if (1 in p1)
                    d = p1[1];
                } else {
                  throw Fraction['InvalidParameter'];
                }
                s = n * d;
                break;
              }
            case "number":
              {
                if (p1 < 0) {
                  s = p1;
                  p1 = -p1;
                }

                if (p1 % 1 === 0) {
                  n = p1;
                } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

                  if (p1 >= 1) {
                    z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                    p1/= z;
                  }

                  // Using Farey Sequences
                  // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

                  while (B <= N && D <= N) {
                    M = (A + C) / (B + D);

                    if (p1 === M) {
                      if (B + D <= N) {
                        n = A + C;
                        d = B + D;
                      } else if (D > B) {
                        n = C;
                        d = D;
                      } else {
                        n = A;
                        d = B;
                      }
                      break;

                    } else {

                      if (p1 > M) {
                        A+= C;
                        B+= D;
                      } else {
                        C+= A;
                        D+= B;
                      }

                      if (B > N) {
                        n = C;
                        d = D;
                      } else {
                        n = A;
                        d = B;
                      }
                    }
                  }
                  n*= z;
                } else if (isNaN(p1) || isNaN(p2)) {
                  d = n = NaN;
                }
                break;
              }
            case "string":
              {
                B = p1.match(/\d+|./g);

                if (B === null)
                  throw Fraction['InvalidParameter'];

                if (B[A] === '-') {// Check for minus sign at the beginning
                  s = -1;
                  A++;
                } else if (B[A] === '+') {// Check for plus sign at the beginning
                  A++;
                }

                if (B.length === A + 1) { // Check if it's just a simple number "1234"
                  w = assign(B[A++], s);
                } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

                  if (B[A] !== '.') { // Handle 0.5 and .5
                    v = assign(B[A++], s);
                  }
                  A++;

                  // Check for decimal places
                  if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
                    w = assign(B[A], s);
                    y = Math.pow(10, B[A].length);
                    A++;
                  }

                  // Check for repeating places
                  if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
                    x = assign(B[A + 1], s);
                    z = Math.pow(10, B[A + 1].length) - 1;
                    A+= 3;
                  }

                } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
                  w = assign(B[A], s);
                  y = assign(B[A + 2], 1);
                  A+= 3;
                } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
                  v = assign(B[A], s);
                  w = assign(B[A + 2], s);
                  y = assign(B[A + 4], 1);
                  A+= 5;
                }

                if (B.length <= A) { // Check for more tokens on the stack
                  d = y * z;
                  s = /* void */
                  n = x + d * v + z * w;
                  break;
                }

                /* Fall through on error */
              }
            default:
              throw Fraction['InvalidParameter'];
          }

        if (d === 0) {
          throw Fraction['DivisionByZero'];
        }

        P["s"] = s < 0 ? -1 : 1;
        P["n"] = Math.abs(n);
        P["d"] = Math.abs(d);
      };

      function modpow(b, e, m) {

        var r = 1;
        for (; e > 0; b = (b * b) % m, e >>= 1) {

          if (e & 1) {
            r = (r * b) % m;
          }
        }
        return r;
      }


      function cycleLen(n, d) {

        for (; d % 2 === 0;
          d/= 2) {
        }

        for (; d % 5 === 0;
          d/= 5) {
        }

        if (d === 1) // Catch non-cyclic numbers
          return 0;

        // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
        // 10^(d-1) % d == 1
        // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
        // as we want to translate the numbers to strings.

        var rem = 10 % d;
        var t = 1;

        for (; rem !== 1; t++) {
          rem = rem * 10 % d;

          if (t > MAX_CYCLE_LEN)
            return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
        }
        return t;
      }


      function cycleStart(n, d, len) {

        var rem1 = 1;
        var rem2 = modpow(10, len, d);

        for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
          // Solve 10^s == 10^(s+t) (mod d)

          if (rem1 === rem2)
            return t;

          rem1 = rem1 * 10 % d;
          rem2 = rem2 * 10 % d;
        }
        return 0;
      }

      function gcd(a, b) {

        if (!a)
          return b;
        if (!b)
          return a;

        while (1) {
          a%= b;
          if (!a)
            return b;
          b%= a;
          if (!b)
            return a;
        }
      }
      /**
       * Module constructor
       *
       * @constructor
       * @param {number|Fraction=} a
       * @param {number=} b
       */
      function Fraction(a, b) {

        parse(a, b);

        if (this instanceof Fraction) {
          a = gcd(P["d"], P["n"]); // Abuse variable a
          this["s"] = P["s"];
          this["n"] = P["n"] / a;
          this["d"] = P["d"] / a;
        } else {
          return newFraction(P['s'] * P['n'], P['d']);
        }
      }

      Fraction['DivisionByZero'] = new Error("Division by Zero");
      Fraction['InvalidParameter'] = new Error("Invalid argument");
      Fraction['NonIntegerParameter'] = new Error("Parameters must be integer");

      Fraction.prototype = {

        "s": 1,
        "n": 0,
        "d": 1,

        /**
         * Calculates the absolute value
         *
         * Ex: new Fraction(-4).abs() => 4
         **/
        "abs": function() {

          return newFraction(this["n"], this["d"]);
        },

        /**
         * Inverts the sign of the current fraction
         *
         * Ex: new Fraction(-4).neg() => 4
         **/
        "neg": function() {

          return newFraction(-this["s"] * this["n"], this["d"]);
        },

        /**
         * Adds two rational numbers
         *
         * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
         **/
        "add": function(a, b) {

          parse(a, b);
          return newFraction(
            this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
            this["d"] * P["d"]
          );
        },

        /**
         * Subtracts two rational numbers
         *
         * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
         **/
        "sub": function(a, b) {

          parse(a, b);
          return newFraction(
            this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
            this["d"] * P["d"]
          );
        },

        /**
         * Multiplies two rational numbers
         *
         * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
         **/
        "mul": function(a, b) {

          parse(a, b);
          return newFraction(
            this["s"] * P["s"] * this["n"] * P["n"],
            this["d"] * P["d"]
          );
        },

        /**
         * Divides two rational numbers
         *
         * Ex: new Fraction("-17.(345)").inverse().div(3)
         **/
        "div": function(a, b) {

          parse(a, b);
          return newFraction(
            this["s"] * P["s"] * this["n"] * P["d"],
            this["d"] * P["n"]
          );
        },

        /**
         * Clones the actual object
         *
         * Ex: new Fraction("-17.(345)").clone()
         **/
        "clone": function() {
          return newFraction(this['s'] * this['n'], this['d']);
        },

        /**
         * Calculates the modulo of two rational numbers - a more precise fmod
         *
         * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
         **/
        "mod": function(a, b) {

          if (isNaN(this['n']) || isNaN(this['d'])) {
            return new Fraction(NaN);
          }

          if (a === undefined) {
            return newFraction(this["s"] * this["n"] % this["d"], 1);
          }

          parse(a, b);
          if (0 === P["n"] && 0 === this["d"]) {
            throw Fraction['DivisionByZero'];
          }

          /*
           * First silly attempt, kinda slow
           *
           return that["sub"]({
           "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
           "d": num["d"],
           "s": this["s"]
           });*/

          /*
           * New attempt: a1 / b1 = a2 / b2 * q + r
           * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
           * => (b2 * a1 % a2 * b1) / (b1 * b2)
           */
          return newFraction(
            this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
            P["d"] * this["d"]
          );
        },

        /**
         * Calculates the fractional gcd of two rational numbers
         *
         * Ex: new Fraction(5,8).gcd(3,7) => 1/56
         */
        "gcd": function(a, b) {

          parse(a, b);

          // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

          return newFraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
        },

        /**
         * Calculates the fractional lcm of two rational numbers
         *
         * Ex: new Fraction(5,8).lcm(3,7) => 15
         */
        "lcm": function(a, b) {

          parse(a, b);

          // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

          if (P["n"] === 0 && this["n"] === 0) {
            return newFraction(0, 1);
          }
          return newFraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
        },

        /**
         * Calculates the ceil of a rational number
         *
         * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
         **/
        "ceil": function(places) {

          places = Math.pow(10, places || 0);

          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return newFraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
        },

        /**
         * Calculates the floor of a rational number
         *
         * Ex: new Fraction('4.(3)').floor() => (4 / 1)
         **/
        "floor": function(places) {

          places = Math.pow(10, places || 0);

          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return newFraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
        },

        /**
         * Rounds a rational numbers
         *
         * Ex: new Fraction('4.(3)').round() => (4 / 1)
         **/
        "round": function(places) {

          places = Math.pow(10, places || 0);

          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return newFraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
        },

        /**
         * Gets the inverse of the fraction, means numerator and denominator are exchanged
         *
         * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
         **/
        "inverse": function() {

          return newFraction(this["s"] * this["d"], this["n"]);
        },

        /**
         * Calculates the fraction to some rational exponent, if possible
         *
         * Ex: new Fraction(-1,2).pow(-3) => -8
         */
        "pow": function(a, b) {

          parse(a, b);

          // Trivial case when exp is an integer

          if (P['d'] === 1) {

            if (P['s'] < 0) {
              return newFraction(Math.pow(this['s'] * this["d"], P['n']), Math.pow(this["n"], P['n']));
            } else {
              return newFraction(Math.pow(this['s'] * this["n"], P['n']), Math.pow(this["d"], P['n']));
            }
          }

          // Negative roots become complex
          //     (-a/b)^(c/d) = x
          // <=> (-1)^(c/d) * (a/b)^(c/d) = x
          // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°
          // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )
          // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.
          if (this['s'] < 0) return null;

          // Now prime factor n and d
          var N = factorize(this['n']);
          var D = factorize(this['d']);

          // Exponentiate and take root for n and d individually
          var n = 1;
          var d = 1;
          for (var k in N) {
            if (k === '1') continue;
            if (k === '0') {
              n = 0;
              break;
            }
            N[k]*= P['n'];

            if (N[k] % P['d'] === 0) {
              N[k]/= P['d'];
            } else return null;
            n*= Math.pow(k, N[k]);
          }

          for (var k in D) {
            if (k === '1') continue;
            D[k]*= P['n'];

            if (D[k] % P['d'] === 0) {
              D[k]/= P['d'];
            } else return null;
            d*= Math.pow(k, D[k]);
          }

          if (P['s'] < 0) {
            return newFraction(d, n);
          }
          return newFraction(n, d);
        },

        /**
         * Check if two rational numbers are the same
         *
         * Ex: new Fraction(19.6).equals([98, 5]);
         **/
        "equals": function(a, b) {

          parse(a, b);
          return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
        },

        /**
         * Check if two rational numbers are the same
         *
         * Ex: new Fraction(19.6).equals([98, 5]);
         **/
        "compare": function(a, b) {

          parse(a, b);
          var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
          return (0 < t) - (t < 0);
        },

        "simplify": function(eps) {

          if (isNaN(this['n']) || isNaN(this['d'])) {
            return this;
          }

          eps = eps || 0.001;

          var thisABS = this['abs']();
          var cont = thisABS['toContinued']();

          for (var i = 1; i < cont.length; i++) {

            var s = newFraction(cont[i - 1], 1);
            for (var k = i - 2; k >= 0; k--) {
              s = s['inverse']()['add'](cont[k]);
            }

            if (s['sub'](thisABS)['abs']().valueOf() < eps) {
              return s['mul'](this['s']);
            }
          }
          return this;
        },

        /**
         * Check if two rational numbers are divisible
         *
         * Ex: new Fraction(19.6).divisible(1.5);
         */
        "divisible": function(a, b) {

          parse(a, b);
          return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
        },

        /**
         * Returns a decimal representation of the fraction
         *
         * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
         **/
        'valueOf': function() {

          return this["s"] * this["n"] / this["d"];
        },

        /**
         * Returns a string-fraction representation of a Fraction object
         *
         * Ex: new Fraction("1.'3'").toFraction(true) => "4 1/3"
         **/
        'toFraction': function(excludeWhole) {

          var whole, str = "";
          var n = this["n"];
          var d = this["d"];
          if (this["s"] < 0) {
            str+= '-';
          }

          if (d === 1) {
            str+= n;
          } else {

            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
              str+= whole;
              str+= " ";
              n%= d;
            }

            str+= n;
            str+= '/';
            str+= d;
          }
          return str;
        },

        /**
         * Returns a latex representation of a Fraction object
         *
         * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
         **/
        'toLatex': function(excludeWhole) {

          var whole, str = "";
          var n = this["n"];
          var d = this["d"];
          if (this["s"] < 0) {
            str+= '-';
          }

          if (d === 1) {
            str+= n;
          } else {

            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
              str+= whole;
              n%= d;
            }

            str+= "\\frac{";
            str+= n;
            str+= '}{';
            str+= d;
            str+= '}';
          }
          return str;
        },

        /**
         * Returns an array of continued fraction elements
         *
         * Ex: new Fraction("7/8").toContinued() => [0,1,7]
         */
        'toContinued': function() {

          var t;
          var a = this['n'];
          var b = this['d'];
          var res = [];

          if (isNaN(a) || isNaN(b)) {
            return res;
          }

          do {
            res.push(Math.floor(a / b));
            t = a % b;
            a = b;
            b = t;
          } while (a !== 1);

          return res;
        },

        /**
         * Creates a string representation of a fraction with all digits
         *
         * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
         **/
        'toString': function(dec) {

          var N = this["n"];
          var D = this["d"];

          if (isNaN(N) || isNaN(D)) {
            return "NaN";
          }

          dec = dec || 15; // 15 = decimal places when no repetation

          var cycLen = cycleLen(N, D); // Cycle length
          var cycOff = cycleStart(N, D, cycLen); // Cycle start

          var str = this['s'] < 0 ? "-" : "";

          str+= N / D | 0;

          N%= D;
          N*= 10;

          if (N)
            str+= ".";

          if (cycLen) {

            for (var i = cycOff; i--;) {
              str+= N / D | 0;
              N%= D;
              N*= 10;
            }
            str+= "(";
            for (var i = cycLen; i--;) {
              str+= N / D | 0;
              N%= D;
              N*= 10;
            }
            str+= ")";
          } else {
            for (var i = dec; N && i--;) {
              str+= N / D | 0;
              N%= D;
              N*= 10;
            }
          }
          return str;
        }
      };

      {
        Object.defineProperty(Fraction, "__esModule", { 'value': true });
        Fraction['default'] = Fraction;
        Fraction['Fraction'] = Fraction;
        module['exports'] = Fraction;
      }

    })();
    });

    var Fraction$1 = /*@__PURE__*/getDefaultExportFromCjs(fraction$1);

    var name$4z = 'Fraction';
    var dependencies$4z = [];
    var createFractionClass = /* #__PURE__ */factory(name$4z, dependencies$4z, () => {
      /**
       * Attach type information
       */
      Fraction$1.prototype.type = 'Fraction';
      Fraction$1.prototype.isFraction = true;
      /**
       * Get a JSON representation of a Fraction containing type information
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
       */

      Fraction$1.prototype.toJSON = function () {
        return {
          mathjs: 'Fraction',
          n: this.s * this.n,
          d: this.d
        };
      };
      /**
       * Instantiate a Fraction from a JSON object
       * @param {Object} json  a JSON object structured as:
       *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
       * @return {BigNumber}
       */


      Fraction$1.fromJSON = function (json) {
        return new Fraction$1(json);
      };

      return Fraction$1;
    }, {
      isClass: true
    });

    var name$4y = 'Range';
    var dependencies$4y = [];
    var createRangeClass = /* #__PURE__ */factory(name$4y, dependencies$4y, () => {
      /**
       * Create a range. A range has a start, step, and end, and contains functions
       * to iterate over the range.
       *
       * A range can be constructed as:
       *
       *     const range = new Range(start, end)
       *     const range = new Range(start, end, step)
       *
       * To get the result of the range:
       *     range.forEach(function (x) {
       *         console.log(x)
       *     })
       *     range.map(function (x) {
       *         return math.sin(x)
       *     })
       *     range.toArray()
       *
       * Example usage:
       *
       *     const c = new Range(2, 6)       // 2:1:5
       *     c.toArray()                     // [2, 3, 4, 5]
       *     const d = new Range(2, -3, -1)  // 2:-1:-2
       *     d.toArray()                     // [2, 1, 0, -1, -2]
       *
       * @class Range
       * @constructor Range
       * @param {number} start  included lower bound
       * @param {number} end    excluded upper bound
       * @param {number} [step] step size, default value is 1
       */
      function Range(start, end, step) {
        if (!(this instanceof Range)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        var hasStart = start !== null && start !== undefined;
        var hasEnd = end !== null && end !== undefined;
        var hasStep = step !== null && step !== undefined;

        if (hasStart) {
          if (isBigNumber(start)) {
            start = start.toNumber();
          } else if (typeof start !== 'number') {
            throw new TypeError('Parameter start must be a number');
          }
        }

        if (hasEnd) {
          if (isBigNumber(end)) {
            end = end.toNumber();
          } else if (typeof end !== 'number') {
            throw new TypeError('Parameter end must be a number');
          }
        }

        if (hasStep) {
          if (isBigNumber(step)) {
            step = step.toNumber();
          } else if (typeof step !== 'number') {
            throw new TypeError('Parameter step must be a number');
          }
        }

        this.start = hasStart ? parseFloat(start) : 0;
        this.end = hasEnd ? parseFloat(end) : 0;
        this.step = hasStep ? parseFloat(step) : 1;
      }
      /**
       * Attach type information
       */


      Range.prototype.type = 'Range';
      Range.prototype.isRange = true;
      /**
       * Parse a string into a range,
       * The string contains the start, optional step, and end, separated by a colon.
       * If the string does not contain a valid range, null is returned.
       * For example str='0:2:11'.
       * @memberof Range
       * @param {string} str
       * @return {Range | null} range
       */

      Range.parse = function (str) {
        if (typeof str !== 'string') {
          return null;
        }

        var args = str.split(':');
        var nums = args.map(function (arg) {
          return parseFloat(arg);
        });
        var invalid = nums.some(function (num) {
          return isNaN(num);
        });

        if (invalid) {
          return null;
        }

        switch (nums.length) {
          case 2:
            return new Range(nums[0], nums[1]);

          case 3:
            return new Range(nums[0], nums[2], nums[1]);

          default:
            return null;
        }
      };
      /**
       * Create a clone of the range
       * @return {Range} clone
       */


      Range.prototype.clone = function () {
        return new Range(this.start, this.end, this.step);
      };
      /**
       * Retrieve the size of the range.
       * Returns an array containing one number, the number of elements in the range.
       * @memberof Range
       * @returns {number[]} size
       */


      Range.prototype.size = function () {
        var len = 0;
        var start = this.start;
        var step = this.step;
        var end = this.end;
        var diff = end - start;

        if (sign$1(step) === sign$1(diff)) {
          len = Math.ceil(diff / step);
        } else if (diff === 0) {
          len = 0;
        }

        if (isNaN(len)) {
          len = 0;
        }

        return [len];
      };
      /**
       * Calculate the minimum value in the range
       * @memberof Range
       * @return {number | undefined} min
       */


      Range.prototype.min = function () {
        var size = this.size()[0];

        if (size > 0) {
          if (this.step > 0) {
            // positive step
            return this.start;
          } else {
            // negative step
            return this.start + (size - 1) * this.step;
          }
        } else {
          return undefined;
        }
      };
      /**
       * Calculate the maximum value in the range
       * @memberof Range
       * @return {number | undefined} max
       */


      Range.prototype.max = function () {
        var size = this.size()[0];

        if (size > 0) {
          if (this.step > 0) {
            // positive step
            return this.start + (size - 1) * this.step;
          } else {
            // negative step
            return this.start;
          }
        } else {
          return undefined;
        }
      };
      /**
       * Execute a callback function for each value in the range.
       * @memberof Range
       * @param {function} callback   The callback method is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Range being traversed.
       */


      Range.prototype.forEach = function (callback) {
        var x = this.start;
        var step = this.step;
        var end = this.end;
        var i = 0;

        if (step > 0) {
          while (x < end) {
            callback(x, [i], this);
            x += step;
            i++;
          }
        } else if (step < 0) {
          while (x > end) {
            callback(x, [i], this);
            x += step;
            i++;
          }
        }
      };
      /**
       * Execute a callback function for each value in the Range, and return the
       * results as an array
       * @memberof Range
       * @param {function} callback   The callback method is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       * @returns {Array} array
       */


      Range.prototype.map = function (callback) {
        var array = [];
        this.forEach(function (value, index, obj) {
          array[index[0]] = callback(value, index, obj);
        });
        return array;
      };
      /**
       * Create an Array with a copy of the Ranges data
       * @memberof Range
       * @returns {Array} array
       */


      Range.prototype.toArray = function () {
        var array = [];
        this.forEach(function (value, index) {
          array[index[0]] = value;
        });
        return array;
      };
      /**
       * Get the primitive value of the Range, a one dimensional array
       * @memberof Range
       * @returns {Array} array
       */


      Range.prototype.valueOf = function () {
        // TODO: implement a caching mechanism for range.valueOf()
        return this.toArray();
      };
      /**
       * Get a string representation of the range, with optional formatting options.
       * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
       * @memberof Range
       * @param {Object | number | function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @returns {string} str
       */


      Range.prototype.format = function (options) {
        var str = format$3(this.start, options);

        if (this.step !== 1) {
          str += ':' + format$3(this.step, options);
        }

        str += ':' + format$3(this.end, options);
        return str;
      };
      /**
       * Get a string representation of the range.
       * @memberof Range
       * @returns {string}
       */


      Range.prototype.toString = function () {
        return this.format();
      };
      /**
       * Get a JSON representation of the range
       * @memberof Range
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
       */


      Range.prototype.toJSON = function () {
        return {
          mathjs: 'Range',
          start: this.start,
          end: this.end,
          step: this.step
        };
      };
      /**
       * Instantiate a Range from a JSON object
       * @memberof Range
       * @param {Object} json A JSON object structured as:
       *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
       * @return {Range}
       */


      Range.fromJSON = function (json) {
        return new Range(json.start, json.end, json.step);
      };

      return Range;
    }, {
      isClass: true
    });

    var name$4x = 'Matrix';
    var dependencies$4x = [];
    var createMatrixClass = /* #__PURE__ */factory(name$4x, dependencies$4x, () => {
      /**
       * @constructor Matrix
       *
       * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
       * array. A matrix can be constructed as:
       *
       *     let matrix = math.matrix(data)
       *
       * Matrix contains the functions to resize, get and set values, get the size,
       * clone the matrix and to convert the matrix to a vector, array, or scalar.
       * Furthermore, one can iterate over the matrix using map and forEach.
       * The internal Array of the Matrix can be accessed using the function valueOf.
       *
       * Example usage:
       *
       *     let matrix = math.matrix([[1, 2], [3, 4]])
       *     matix.size()              // [2, 2]
       *     matrix.resize([3, 2], 5)
       *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
       *     matrix.subset([1,2])       // 3 (indexes are zero-based)
       *
       */
      function Matrix() {
        if (!(this instanceof Matrix)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }
      }
      /**
       * Attach type information
       */


      Matrix.prototype.type = 'Matrix';
      Matrix.prototype.isMatrix = true;
      /**
       * Get the storage format used by the matrix.
       *
       * Usage:
       *     const format = matrix.storage()   // retrieve storage format
       *
       * @return {string}           The storage format.
       */

      Matrix.prototype.storage = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke storage on a Matrix interface');
      };
      /**
       * Get the datatype of the data stored in the matrix.
       *
       * Usage:
       *     const format = matrix.datatype()    // retrieve matrix datatype
       *
       * @return {string}           The datatype.
       */


      Matrix.prototype.datatype = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke datatype on a Matrix interface');
      };
      /**
       * Create a new Matrix With the type of the current matrix instance
       * @param {Array | Object} data
       * @param {string} [datatype]
       */


      Matrix.prototype.create = function (data, datatype) {
        throw new Error('Cannot invoke create on a Matrix interface');
      };
      /**
       * Get a subset of the matrix, or replace a subset of the matrix.
       *
       * Usage:
       *     const subset = matrix.subset(index)               // retrieve subset
       *     const value = matrix.subset(index, replacement)   // replace subset
       *
       * @param {Index} index
       * @param {Array | Matrix | *} [replacement]
       * @param {*} [defaultValue=0]      Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be filled with zeros.
       */


      Matrix.prototype.subset = function (index, replacement, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke subset on a Matrix interface');
      };
      /**
       * Get a single element from the matrix.
       * @param {number[]} index   Zero-based index
       * @return {*} value
       */


      Matrix.prototype.get = function (index) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke get on a Matrix interface');
      };
      /**
       * Replace a single element in the matrix.
       * @param {number[]} index   Zero-based index
       * @param {*} value
       * @param {*} [defaultValue]        Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be left undefined.
       * @return {Matrix} self
       */


      Matrix.prototype.set = function (index, value, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke set on a Matrix interface');
      };
      /**
       * Resize the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (resize in place).
       *
       * @param {number[]} size           The new size the matrix should have.
       * @param {*} [defaultValue=0]      Default value, filled in on new entries.
       *                                  If not provided, the matrix elements will
       *                                  be filled with zeros.
       * @param {boolean} [copy]          Return a resized copy of the matrix
       *
       * @return {Matrix}                 The resized matrix
       */


      Matrix.prototype.resize = function (size, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke resize on a Matrix interface');
      };
      /**
       * Reshape the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (reshape in place).
       *
       * @param {number[]} size           The new size the matrix should have.
       * @param {boolean} [copy]          Return a reshaped copy of the matrix
       *
       * @return {Matrix}                 The reshaped matrix
       */


      Matrix.prototype.reshape = function (size, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke reshape on a Matrix interface');
      };
      /**
       * Create a clone of the matrix
       * @return {Matrix} clone
       */


      Matrix.prototype.clone = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke clone on a Matrix interface');
      };
      /**
       * Retrieve the size of the matrix.
       * @returns {number[]} size
       */


      Matrix.prototype.size = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke size on a Matrix interface');
      };
      /**
       * Create a new matrix with the results of the callback function executed on
       * each entry of the matrix.
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
       *
       * @return {Matrix} matrix
       */


      Matrix.prototype.map = function (callback, skipZeros) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke map on a Matrix interface');
      };
      /**
       * Execute a callback function on each entry of the matrix.
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       */


      Matrix.prototype.forEach = function (callback) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke forEach on a Matrix interface');
      };
      /**
       * Iterate over the matrix elements
       * @return {Iterable<{ value, index: number[] }>}
       */


      Matrix.prototype[Symbol.iterator] = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot iterate a Matrix interface');
      };
      /**
       * Create an Array with a copy of the data of the Matrix
       * @returns {Array} array
       */


      Matrix.prototype.toArray = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke toArray on a Matrix interface');
      };
      /**
       * Get the primitive value of the Matrix: a multidimensional array
       * @returns {Array} array
       */


      Matrix.prototype.valueOf = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke valueOf on a Matrix interface');
      };
      /**
       * Get a string representation of the matrix, with optional formatting options.
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @returns {string} str
       */


      Matrix.prototype.format = function (options) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke format on a Matrix interface');
      };
      /**
       * Get a string representation of the matrix
       * @returns {string} str
       */


      Matrix.prototype.toString = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke toString on a Matrix interface');
      };

      return Matrix;
    }, {
      isClass: true
    });

    var name$4w = 'DenseMatrix';
    var dependencies$4w = ['Matrix'];
    var createDenseMatrixClass = /* #__PURE__ */factory(name$4w, dependencies$4w, _ref => {
      var {
        Matrix
      } = _ref;

      /**
       * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
       * @class DenseMatrix
       * @enum {{ value, index: number[] }}
       */
      function DenseMatrix(data, datatype) {
        if (!(this instanceof DenseMatrix)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (datatype && !isString(datatype)) {
          throw new Error('Invalid datatype: ' + datatype);
        }

        if (isMatrix(data)) {
          // check data is a DenseMatrix
          if (data.type === 'DenseMatrix') {
            // clone data & size
            this._data = clone$1(data._data);
            this._size = clone$1(data._size);
            this._datatype = datatype || data._datatype;
          } else {
            // build data from existing matrix
            this._data = data.toArray();
            this._size = data.size();
            this._datatype = datatype || data._datatype;
          }
        } else if (data && isArray(data.data) && isArray(data.size)) {
          // initialize fields from JSON representation
          this._data = data.data;
          this._size = data.size; // verify the dimensions of the array

          validate(this._data, this._size);
          this._datatype = datatype || data.datatype;
        } else if (isArray(data)) {
          // replace nested Matrices with Arrays
          this._data = preprocess(data); // get the dimensions of the array

          this._size = arraySize(this._data); // verify the dimensions of the array, TODO: compute size while processing array

          validate(this._data, this._size); // data type unknown

          this._datatype = datatype;
        } else if (data) {
          // unsupported type
          throw new TypeError('Unsupported type of data (' + typeOf$1(data) + ')');
        } else {
          // nothing provided
          this._data = [];
          this._size = [0];
          this._datatype = datatype;
        }
      }

      DenseMatrix.prototype = new Matrix();
      /**
       * Create a new DenseMatrix
       */

      DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {
        return new DenseMatrix(data, datatype);
      };
      /**
       * Attach type information
       */


      DenseMatrix.prototype.type = 'DenseMatrix';
      DenseMatrix.prototype.isDenseMatrix = true;
      /**
       * Get the matrix type
       *
       * Usage:
       *    const matrixType = matrix.getDataType()  // retrieves the matrix type
       *
       * @memberOf DenseMatrix
       * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
       */

      DenseMatrix.prototype.getDataType = function () {
        return getArrayDataType(this._data, typeOf$1);
      };
      /**
       * Get the storage format used by the matrix.
       *
       * Usage:
       *     const format = matrix.storage()  // retrieve storage format
       *
       * @memberof DenseMatrix
       * @return {string}           The storage format.
       */


      DenseMatrix.prototype.storage = function () {
        return 'dense';
      };
      /**
       * Get the datatype of the data stored in the matrix.
       *
       * Usage:
       *     const format = matrix.datatype()   // retrieve matrix datatype
       *
       * @memberof DenseMatrix
       * @return {string}           The datatype.
       */


      DenseMatrix.prototype.datatype = function () {
        return this._datatype;
      };
      /**
       * Create a new DenseMatrix
       * @memberof DenseMatrix
       * @param {Array} data
       * @param {string} [datatype]
       */


      DenseMatrix.prototype.create = function (data, datatype) {
        return new DenseMatrix(data, datatype);
      };
      /**
       * Get a subset of the matrix, or replace a subset of the matrix.
       *
       * Usage:
       *     const subset = matrix.subset(index)               // retrieve subset
       *     const value = matrix.subset(index, replacement)   // replace subset
       *
       * @memberof DenseMatrix
       * @param {Index} index
       * @param {Array | Matrix | *} [replacement]
       * @param {*} [defaultValue=0]      Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be filled with zeros.
       */


      DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
        switch (arguments.length) {
          case 1:
            return _get(this, index);
          // intentional fall through

          case 2:
          case 3:
            return _set(this, index, replacement, defaultValue);

          default:
            throw new SyntaxError('Wrong number of arguments');
        }
      };
      /**
       * Get a single element from the matrix.
       * @memberof DenseMatrix
       * @param {number[]} index   Zero-based index
       * @return {*} value
       */


      DenseMatrix.prototype.get = function (index) {
        if (!isArray(index)) {
          throw new TypeError('Array expected');
        }

        if (index.length !== this._size.length) {
          throw new DimensionError(index.length, this._size.length);
        } // check index


        for (var x = 0; x < index.length; x++) {
          validateIndex(index[x], this._size[x]);
        }

        var data = this._data;

        for (var i = 0, ii = index.length; i < ii; i++) {
          var indexI = index[i];
          validateIndex(indexI, data.length);
          data = data[indexI];
        }

        return data;
      };
      /**
       * Replace a single element in the matrix.
       * @memberof DenseMatrix
       * @param {number[]} index   Zero-based index
       * @param {*} value
       * @param {*} [defaultValue]        Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be left undefined.
       * @return {DenseMatrix} self
       */


      DenseMatrix.prototype.set = function (index, value, defaultValue) {
        if (!isArray(index)) {
          throw new TypeError('Array expected');
        }

        if (index.length < this._size.length) {
          throw new DimensionError(index.length, this._size.length, '<');
        }

        var i, ii, indexI; // enlarge matrix when needed

        var size = index.map(function (i) {
          return i + 1;
        });

        _fit(this, size, defaultValue); // traverse over the dimensions


        var data = this._data;

        for (i = 0, ii = index.length - 1; i < ii; i++) {
          indexI = index[i];
          validateIndex(indexI, data.length);
          data = data[indexI];
        } // set new value


        indexI = index[index.length - 1];
        validateIndex(indexI, data.length);
        data[indexI] = value;
        return this;
      };
      /**
       * Get a submatrix of this matrix
       * @memberof DenseMatrix
       * @param {DenseMatrix} matrix
       * @param {Index} index   Zero-based index
       * @private
       */


      function _get(matrix, index) {
        if (!isIndex(index)) {
          throw new TypeError('Invalid index');
        }

        var isScalar = index.isScalar();

        if (isScalar) {
          // return a scalar
          return matrix.get(index.min());
        } else {
          // validate dimensions
          var size = index.size();

          if (size.length !== matrix._size.length) {
            throw new DimensionError(size.length, matrix._size.length);
          } // validate if any of the ranges in the index is out of range


          var min = index.min();
          var max = index.max();

          for (var i = 0, ii = matrix._size.length; i < ii; i++) {
            validateIndex(min[i], matrix._size[i]);
            validateIndex(max[i], matrix._size[i]);
          } // retrieve submatrix
          // TODO: more efficient when creating an empty matrix and setting _data and _size manually


          return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
        }
      }
      /**
       * Recursively get a submatrix of a multi dimensional matrix.
       * Index is not checked for correct number or length of dimensions.
       * @memberof DenseMatrix
       * @param {Array} data
       * @param {Index} index
       * @param {number} dims   Total number of dimensions
       * @param {number} dim    Current dimension
       * @return {Array} submatrix
       * @private
       */


      function _getSubmatrix(data, index, dims, dim) {
        var last = dim === dims - 1;
        var range = index.dimension(dim);

        if (last) {
          return range.map(function (i) {
            validateIndex(i, data.length);
            return data[i];
          }).valueOf();
        } else {
          return range.map(function (i) {
            validateIndex(i, data.length);
            var child = data[i];
            return _getSubmatrix(child, index, dims, dim + 1);
          }).valueOf();
        }
      }
      /**
       * Replace a submatrix in this matrix
       * Indexes are zero-based.
       * @memberof DenseMatrix
       * @param {DenseMatrix} matrix
       * @param {Index} index
       * @param {DenseMatrix | Array | *} submatrix
       * @param {*} defaultValue          Default value, filled in on new entries when
       *                                  the matrix is resized.
       * @return {DenseMatrix} matrix
       * @private
       */


      function _set(matrix, index, submatrix, defaultValue) {
        if (!index || index.isIndex !== true) {
          throw new TypeError('Invalid index');
        } // get index size and check whether the index contains a single value


        var iSize = index.size();
        var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

        var sSize;

        if (isMatrix(submatrix)) {
          sSize = submatrix.size();
          submatrix = submatrix.valueOf();
        } else {
          sSize = arraySize(submatrix);
        }

        if (isScalar) {
          // set a scalar
          // check whether submatrix is a scalar
          if (sSize.length !== 0) {
            throw new TypeError('Scalar expected');
          }

          matrix.set(index.min(), submatrix, defaultValue);
        } else {
          // set a submatrix
          // validate dimensions
          if (iSize.length < matrix._size.length) {
            throw new DimensionError(iSize.length, matrix._size.length, '<');
          }

          if (sSize.length < iSize.length) {
            // calculate number of missing outer dimensions
            var i = 0;
            var outer = 0;

            while (iSize[i] === 1 && sSize[i] === 1) {
              i++;
            }

            while (iSize[i] === 1) {
              outer++;
              i++;
            } // unsqueeze both outer and inner dimensions


            submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
          } // check whether the size of the submatrix matches the index size


          if (!deepStrictEqual(iSize, sSize)) {
            throw new DimensionError(iSize, sSize, '>');
          } // enlarge matrix when needed


          var size = index.max().map(function (i) {
            return i + 1;
          });

          _fit(matrix, size, defaultValue); // insert the sub matrix


          var dims = iSize.length;
          var dim = 0;

          _setSubmatrix(matrix._data, index, submatrix, dims, dim);
        }

        return matrix;
      }
      /**
       * Replace a submatrix of a multi dimensional matrix.
       * @memberof DenseMatrix
       * @param {Array} data
       * @param {Index} index
       * @param {Array} submatrix
       * @param {number} dims   Total number of dimensions
       * @param {number} dim
       * @private
       */


      function _setSubmatrix(data, index, submatrix, dims, dim) {
        var last = dim === dims - 1;
        var range = index.dimension(dim);

        if (last) {
          range.forEach(function (dataIndex, subIndex) {
            validateIndex(dataIndex);
            data[dataIndex] = submatrix[subIndex[0]];
          });
        } else {
          range.forEach(function (dataIndex, subIndex) {
            validateIndex(dataIndex);

            _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
          });
        }
      }
      /**
       * Resize the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (resize in place).
       *
       * @memberof DenseMatrix
       * @param {number[] || Matrix} size The new size the matrix should have.
       * @param {*} [defaultValue=0]      Default value, filled in on new entries.
       *                                  If not provided, the matrix elements will
       *                                  be filled with zeros.
       * @param {boolean} [copy]          Return a resized copy of the matrix
       *
       * @return {Matrix}                 The resized matrix
       */


      DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
        // validate arguments
        if (!isCollection(size)) {
          throw new TypeError('Array or Matrix expected');
        } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector


        var sizeArray = size.valueOf().map(value => {
          return Array.isArray(value) && value.length === 1 ? value[0] : value;
        }); // matrix to resize

        var m = copy ? this.clone() : this; // resize matrix

        return _resize(m, sizeArray, defaultValue);
      };

      function _resize(matrix, size, defaultValue) {
        // check size
        if (size.length === 0) {
          // first value in matrix
          var v = matrix._data; // go deep

          while (isArray(v)) {
            v = v[0];
          }

          return v;
        } // resize matrix


        matrix._size = size.slice(0); // copy the array

        matrix._data = resize$1(matrix._data, matrix._size, defaultValue); // return matrix

        return matrix;
      }
      /**
       * Reshape the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (reshape in place).
       *
       * NOTE: This might be better suited to copy by default, instead of modifying
       *       in place. For now, it operates in place to remain consistent with
       *       resize().
       *
       * @memberof DenseMatrix
       * @param {number[]} size           The new size the matrix should have.
       * @param {boolean} [copy]          Return a reshaped copy of the matrix
       *
       * @return {Matrix}                 The reshaped matrix
       */


      DenseMatrix.prototype.reshape = function (size, copy) {
        var m = copy ? this.clone() : this;
        m._data = reshape$1(m._data, size);

        var currentLength = m._size.reduce((length, size) => length * size);

        m._size = processSizesWildcard(size, currentLength);
        return m;
      };
      /**
       * Enlarge the matrix when it is smaller than given size.
       * If the matrix is larger or equal sized, nothing is done.
       * @memberof DenseMatrix
       * @param {DenseMatrix} matrix           The matrix to be resized
       * @param {number[]} size
       * @param {*} defaultValue          Default value, filled in on new entries.
       * @private
       */


      function _fit(matrix, size, defaultValue) {
        var // copy the array
        newSize = matrix._size.slice(0);

        var changed = false; // add dimensions when needed

        while (newSize.length < size.length) {
          newSize.push(0);
          changed = true;
        } // enlarge size when needed


        for (var i = 0, ii = size.length; i < ii; i++) {
          if (size[i] > newSize[i]) {
            newSize[i] = size[i];
            changed = true;
          }
        }

        if (changed) {
          // resize only when size is changed
          _resize(matrix, newSize, defaultValue);
        }
      }
      /**
       * Create a clone of the matrix
       * @memberof DenseMatrix
       * @return {DenseMatrix} clone
       */


      DenseMatrix.prototype.clone = function () {
        var m = new DenseMatrix({
          data: clone$1(this._data),
          size: clone$1(this._size),
          datatype: this._datatype
        });
        return m;
      };
      /**
       * Retrieve the size of the matrix.
       * @memberof DenseMatrix
       * @returns {number[]} size
       */


      DenseMatrix.prototype.size = function () {
        return this._size.slice(0); // return a clone of _size
      };
      /**
       * Create a new matrix with the results of the callback function executed on
       * each entry of the matrix.
       * @memberof DenseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       *
       * @return {DenseMatrix} matrix
       */


      DenseMatrix.prototype.map = function (callback) {
        // matrix instance
        var me = this;

        var recurse = function recurse(value, index) {
          if (isArray(value)) {
            return value.map(function (child, i) {
              return recurse(child, index.concat(i));
            });
          } else {
            return callback(value, index, me);
          }
        }; // determine the new datatype when the original matrix has datatype defined
        // TODO: should be done in matrix constructor instead


        var data = recurse(this._data, []);
        var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf$1) : undefined;
        return new DenseMatrix(data, datatype);
      };
      /**
       * Execute a callback function on each entry of the matrix.
       * @memberof DenseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       */


      DenseMatrix.prototype.forEach = function (callback) {
        // matrix instance
        var me = this;

        var recurse = function recurse(value, index) {
          if (isArray(value)) {
            value.forEach(function (child, i) {
              recurse(child, index.concat(i));
            });
          } else {
            callback(value, index, me);
          }
        };

        recurse(this._data, []);
      };
      /**
       * Iterate over the matrix elements
       * @return {Iterable<{ value, index: number[] }>}
       */


      DenseMatrix.prototype[Symbol.iterator] = function* () {
        var recurse = function* recurse(value, index) {
          if (isArray(value)) {
            for (var i = 0; i < value.length; i++) {
              yield* recurse(value[i], index.concat(i));
            }
          } else {
            yield {
              value,
              index
            };
          }
        };

        yield* recurse(this._data, []);
      };
      /**
       * Returns an array containing the rows of a 2D matrix
       * @returns {Array<Matrix>}
       */


      DenseMatrix.prototype.rows = function () {
        var result = [];
        var s = this.size();

        if (s.length !== 2) {
          throw new TypeError('Rows can only be returned for a 2D matrix.');
        }

        var data = this._data;

        for (var row of data) {
          result.push(new DenseMatrix([row], this._datatype));
        }

        return result;
      };
      /**
       * Returns an array containing the columns of a 2D matrix
       * @returns {Array<Matrix>}
       */


      DenseMatrix.prototype.columns = function () {
        var _this = this;

        var result = [];
        var s = this.size();

        if (s.length !== 2) {
          throw new TypeError('Rows can only be returned for a 2D matrix.');
        }

        var data = this._data;

        var _loop = function _loop(i) {
          var col = data.map(row => [row[i]]);
          result.push(new DenseMatrix(col, _this._datatype));
        };

        for (var i = 0; i < s[1]; i++) {
          _loop(i);
        }

        return result;
      };
      /**
       * Create an Array with a copy of the data of the DenseMatrix
       * @memberof DenseMatrix
       * @returns {Array} array
       */


      DenseMatrix.prototype.toArray = function () {
        return clone$1(this._data);
      };
      /**
       * Get the primitive value of the DenseMatrix: a multidimensional array
       * @memberof DenseMatrix
       * @returns {Array} array
       */


      DenseMatrix.prototype.valueOf = function () {
        return this._data;
      };
      /**
       * Get a string representation of the matrix, with optional formatting options.
       * @memberof DenseMatrix
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @returns {string} str
       */


      DenseMatrix.prototype.format = function (options) {
        return format$1(this._data, options);
      };
      /**
       * Get a string representation of the matrix
       * @memberof DenseMatrix
       * @returns {string} str
       */


      DenseMatrix.prototype.toString = function () {
        return format$1(this._data);
      };
      /**
       * Get a JSON representation of the matrix
       * @memberof DenseMatrix
       * @returns {Object}
       */


      DenseMatrix.prototype.toJSON = function () {
        return {
          mathjs: 'DenseMatrix',
          data: this._data,
          size: this._size,
          datatype: this._datatype
        };
      };
      /**
       * Get the kth Matrix diagonal.
       *
       * @memberof DenseMatrix
       * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
       *
       * @returns {Matrix}                     The matrix with the diagonal values.
       */


      DenseMatrix.prototype.diagonal = function (k) {
        // validate k if any
        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          } // is must be an integer


          if (!isNumber(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        }

        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows & columns

        var rows = this._size[0];
        var columns = this._size[1]; // number diagonal values

        var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix

        var data = []; // loop rows

        for (var i = 0; i < n; i++) {
          data[i] = this._data[i + kSub][i + kSuper];
        } // create DenseMatrix


        return new DenseMatrix({
          data,
          size: [n],
          datatype: this._datatype
        });
      };
      /**
       * Create a diagonal matrix.
       *
       * @memberof DenseMatrix
       * @param {Array} size                     The matrix size.
       * @param {number | Matrix | Array } value The values for the diagonal.
       * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.
       * @param {number} [defaultValue]          The default value for non-diagonal
       * @param {string} [datatype]              The datatype for the diagonal
       *
       * @returns {DenseMatrix}
       */


      DenseMatrix.diagonal = function (size, value, k, defaultValue) {
        if (!isArray(size)) {
          throw new TypeError('Array expected, size parameter');
        }

        if (size.length !== 2) {
          throw new Error('Only two dimensions matrix are supported');
        } // map size & validate


        size = size.map(function (s) {
          // check it is a big number
          if (isBigNumber(s)) {
            // convert it
            s = s.toNumber();
          } // validate arguments


          if (!isNumber(s) || !isInteger$1(s) || s < 1) {
            throw new Error('Size values must be positive integers');
          }

          return s;
        }); // validate k if any

        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          } // is must be an integer


          if (!isNumber(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        }

        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows and columns

        var rows = size[0];
        var columns = size[1]; // number of non-zero items

        var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

        var _value; // check value


        if (isArray(value)) {
          // validate array
          if (value.length !== n) {
            // number of values in array must be n
            throw new Error('Invalid value array length');
          } // define function


          _value = function _value(i) {
            // return value @ i
            return value[i];
          };
        } else if (isMatrix(value)) {
          // matrix size
          var ms = value.size(); // validate matrix

          if (ms.length !== 1 || ms[0] !== n) {
            // number of values in array must be n
            throw new Error('Invalid matrix length');
          } // define function


          _value = function _value(i) {
            // return value @ i
            return value.get([i]);
          };
        } else {
          // define function
          _value = function _value() {
            // return value
            return value;
          };
        } // discover default value if needed


        if (!defaultValue) {
          // check first value in array
          defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero
          : 0;
        } // empty array


        var data = []; // check we need to resize array

        if (size.length > 0) {
          // resize array
          data = resize$1(data, size, defaultValue); // fill diagonal

          for (var d = 0; d < n; d++) {
            data[d + kSub][d + kSuper] = _value(d);
          }
        } // create DenseMatrix


        return new DenseMatrix({
          data,
          size: [rows, columns]
        });
      };
      /**
       * Generate a matrix from a JSON object
       * @memberof DenseMatrix
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
       *                       where mathjs is optional
       * @returns {DenseMatrix}
       */


      DenseMatrix.fromJSON = function (json) {
        return new DenseMatrix(json);
      };
      /**
       * Swap rows i and j in Matrix.
       *
       * @memberof DenseMatrix
       * @param {number} i       Matrix row index 1
       * @param {number} j       Matrix row index 2
       *
       * @return {Matrix}        The matrix reference
       */


      DenseMatrix.prototype.swapRows = function (i, j) {
        // check index
        if (!isNumber(i) || !isInteger$1(i) || !isNumber(j) || !isInteger$1(j)) {
          throw new Error('Row index must be positive integers');
        } // check dimensions


        if (this._size.length !== 2) {
          throw new Error('Only two dimensional matrix is supported');
        } // validate index


        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[0]); // swap rows

        DenseMatrix._swapRows(i, j, this._data); // return current instance


        return this;
      };
      /**
       * Swap rows i and j in Dense Matrix data structure.
       *
       * @param {number} i       Matrix row index 1
       * @param {number} j       Matrix row index 2
       * @param {Array} data     Matrix data
       */


      DenseMatrix._swapRows = function (i, j, data) {
        // swap values i <-> j
        var vi = data[i];
        data[i] = data[j];
        data[j] = vi;
      };
      /**
       * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
       * Matrices. Replaces all nested Matrices with Arrays
       * @memberof DenseMatrix
       * @param {Array} data
       * @return {Array} data
       */


      function preprocess(data) {
        for (var i = 0, ii = data.length; i < ii; i++) {
          var elem = data[i];

          if (isArray(elem)) {
            data[i] = preprocess(elem);
          } else if (elem && elem.isMatrix === true) {
            data[i] = preprocess(elem.valueOf());
          }
        }

        return data;
      }

      return DenseMatrix;
    }, {
      isClass: true
    });

    var name$4v = 'clone';
    var dependencies$4v = ['typed'];
    var createClone = /* #__PURE__ */factory(name$4v, dependencies$4v, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Clone an object. Will make a deep copy of the data.
       *
       * Syntax:
       *
       *     math.clone(x)
       *
       * Examples:
       *
       *    math.clone(3.5)                   // returns number 3.5
       *    math.clone(math.complex('2-4i') // returns Complex 2 - 4i
       *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg
       *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]
       *    math.clone("hello world")         // returns string "hello world"
       *
       * @param {*} x   Object to be cloned
       * @return {*} A clone of object x
       */
      return typed(name$4v, {
        any: clone$1
      });
    });

    /**
     * Transpose a matrix
     * @param {Array} mat
     * @returns {Array} ret
     * @private
     */
    function _switch$1(mat) {
      var I = mat.length;
      var J = mat[0].length;
      var i, j;
      var ret = [];

      for (j = 0; j < J; j++) {
        var tmp = [];

        for (i = 0; i < I; i++) {
          tmp.push(mat[i][j]);
        }

        ret.push(tmp);
      }

      return ret;
    }

    /**
     * Test whether an array contains collections
     * @param {Array} array
     * @returns {boolean} Returns true when the array contains one or multiple
     *                    collections (Arrays or Matrices). Returns false otherwise.
     */

    function containsCollections(array) {
      for (var i = 0; i < array.length; i++) {
        if (isCollection(array[i])) {
          return true;
        }
      }

      return false;
    }
    /**
     * Recursively loop over all elements in a given multi dimensional array
     * and invoke the callback on each of the elements.
     * @param {Array | Matrix} array
     * @param {Function} callback     The callback method is invoked with one
     *                                parameter: the current element in the array
     */

    function deepForEach(array, callback) {
      if (isMatrix(array)) {
        array = array.valueOf();
      }

      for (var i = 0, ii = array.length; i < ii; i++) {
        var value = array[i];

        if (Array.isArray(value)) {
          deepForEach(value, callback);
        } else {
          callback(value);
        }
      }
    }
    /**
     * Execute the callback function element wise for each element in array and any
     * nested array
     * Returns an array with the results
     * @param {Array | Matrix} array
     * @param {Function} callback   The callback is called with two parameters:
     *                              value1 and value2, which contain the current
     *                              element of both arrays.
     * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
     *
     * @return {Array | Matrix} res
     */

    function deepMap(array, callback, skipZeros) {
      if (array && typeof array.map === 'function') {
        // TODO: replace array.map with a for loop to improve performance
        return array.map(function (x) {
          return deepMap(x, callback);
        });
      } else {
        return callback(array);
      }
    }
    /**
     * Reduce a given matrix or array to a new matrix or
     * array with one less dimension, applying the given
     * callback in the selected dimension.
     * @param {Array | Matrix} mat
     * @param {number} dim
     * @param {Function} callback
     * @return {Array | Matrix} res
     */

    function reduce(mat, dim, callback) {
      var size = Array.isArray(mat) ? arraySize(mat) : mat.size();

      if (dim < 0 || dim >= size.length) {
        // TODO: would be more clear when throwing a DimensionError here
        throw new IndexError(dim, size.length);
      }

      if (isMatrix(mat)) {
        return mat.create(_reduce(mat.valueOf(), dim, callback));
      } else {
        return _reduce(mat, dim, callback);
      }
    }
    /**
     * Recursively reduce a matrix
     * @param {Array} mat
     * @param {number} dim
     * @param {Function} callback
     * @returns {Array} ret
     * @private
     */

    function _reduce(mat, dim, callback) {
      var i, ret, val, tran;

      if (dim <= 0) {
        if (!Array.isArray(mat[0])) {
          val = mat[0];

          for (i = 1; i < mat.length; i++) {
            val = callback(val, mat[i]);
          }

          return val;
        } else {
          tran = _switch$1(mat);
          ret = [];

          for (i = 0; i < tran.length; i++) {
            ret[i] = _reduce(tran[i], dim - 1, callback);
          }

          return ret;
        }
      } else {
        ret = [];

        for (i = 0; i < mat.length; i++) {
          ret[i] = _reduce(mat[i], dim - 1, callback);
        }

        return ret;
      }
    } // TODO: document function scatter


    function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {
      // a arrays
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr; // vars

      var k, k0, k1, i; // check we need to process values (pattern matrix)

      if (x) {
        // values in j
        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
          // row
          i = aindex[k]; // check value exists in current j

          if (w[i] !== mark) {
            // i is new entry in j
            w[i] = mark; // add i to pattern of C

            cindex.push(i); // x(i) = A, check we need to call function this time

            if (update) {
              // copy value to workspace calling callback function
              x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row

              u[i] = mark;
            } else {
              // copy value to workspace
              x[i] = avalues[k];
            }
          } else {
            // i exists in C already
            x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row

            u[i] = mark;
          }
        }
      } else {
        // values in j
        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
          // row
          i = aindex[k]; // check value exists in current j

          if (w[i] !== mark) {
            // i is new entry in j
            w[i] = mark; // add i to pattern of C

            cindex.push(i);
          } else {
            // indicate function was called on current row
            u[i] = mark;
          }
        }
      }
    }

    var name$4u = 'isInteger';
    var dependencies$4u = ['typed'];
    var createIsInteger = /* #__PURE__ */factory(name$4u, dependencies$4u, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Test whether a value is an integer number.
       * The function supports `number`, `BigNumber`, and `Fraction`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isInteger(x)
       *
       * Examples:
       *
       *    math.isInteger(2)                     // returns true
       *    math.isInteger(0)                     // returns true
       *    math.isInteger(0.5)                   // returns false
       *    math.isInteger(math.bignumber(500))   // returns true
       *    math.isInteger(math.fraction(4))      // returns true
       *    math.isInteger('3')                   // returns true
       *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
       *    math.isInteger(math.complex('2-4i')   // throws an error
       *
       * See also:
       *
       *    isNumeric, isPositive, isNegative, isZero
       *
       * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
       * @return {boolean}  Returns true when `x` contains a numeric, integer value.
       *                    Throws an error in case of an unknown data type.
       */
      return typed(name$4u, {
        number: isInteger$1,
        // TODO: what to do with isInteger(add(0.1, 0.2))  ?
        BigNumber: function BigNumber(x) {
          return x.isInt();
        },
        Fraction: function Fraction(x) {
          return x.d === 1 && isFinite(x.n);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var n1$4 = 'number';
    var n2$2 = 'number, number';
    function absNumber(a) {
      return Math.abs(a);
    }
    absNumber.signature = n1$4;
    function addNumber(a, b) {
      return a + b;
    }
    addNumber.signature = n2$2;
    function multiplyNumber(a, b) {
      return a * b;
    }
    multiplyNumber.signature = n2$2;
    function unaryMinusNumber(x) {
      return -x;
    }
    unaryMinusNumber.signature = n1$4;
    function unaryPlusNumber(x) {
      return x;
    }
    unaryPlusNumber.signature = n1$4;
    function cbrtNumber(x) {
      return cbrt$1(x);
    }
    cbrtNumber.signature = n1$4;
    function cubeNumber(x) {
      return x * x * x;
    }
    cubeNumber.signature = n1$4;
    function expNumber(x) {
      return Math.exp(x);
    }
    expNumber.signature = n1$4;
    function expm1Number(x) {
      return expm1$1(x);
    }
    expm1Number.signature = n1$4;
    /**
     * Calculate gcd for numbers
     * @param {number} a
     * @param {number} b
     * @returns {number} Returns the greatest common denominator of a and b
     */

    function gcdNumber(a, b) {
      if (!isInteger$1(a) || !isInteger$1(b)) {
        throw new Error('Parameters in function gcd must be integer numbers');
      } // https://en.wikipedia.org/wiki/Euclidean_algorithm


      var r;

      while (b !== 0) {
        r = a % b;
        a = b;
        b = r;
      }

      return a < 0 ? -a : a;
    }
    gcdNumber.signature = n2$2;
    /**
     * Calculate lcm for two numbers
     * @param {number} a
     * @param {number} b
     * @returns {number} Returns the least common multiple of a and b
     */

    function lcmNumber(a, b) {
      if (!isInteger$1(a) || !isInteger$1(b)) {
        throw new Error('Parameters in function lcm must be integer numbers');
      }

      if (a === 0 || b === 0) {
        return 0;
      } // https://en.wikipedia.org/wiki/Euclidean_algorithm
      // evaluate lcm here inline to reduce overhead


      var t;
      var prod = a * b;

      while (b !== 0) {
        t = b;
        b = a % t;
        a = t;
      }

      return Math.abs(prod / a);
    }
    lcmNumber.signature = n2$2;
    /**
     * Calculate the logarithm of a value, optionally to a given base.
     * @param {number} x
     * @param {number | null | undefined} base
     * @return {number}
     */

    function logNumber(x, y) {
      if (y) {
        return Math.log(x) / Math.log(y);
      }

      return Math.log(x);
    }
    /**
     * Calculate the 10-base logarithm of a number
     * @param {number} x
     * @return {number}
     */

    function log10Number(x) {
      return log10$1(x);
    }
    log10Number.signature = n1$4;
    /**
     * Calculate the 2-base logarithm of a number
     * @param {number} x
     * @return {number}
     */

    function log2Number(x) {
      return log2$1(x);
    }
    log2Number.signature = n1$4;
    /**
     * Calculate the modulus of two numbers
     * @param {number} x
     * @param {number} y
     * @returns {number} res
     * @private
     */

    function modNumber(x, y) {
      if (y > 0) {
        // We don't use JavaScript's % operator here as this doesn't work
        // correctly for x < 0 and x === 0
        // see https://en.wikipedia.org/wiki/Modulo_operation
        return x - y * Math.floor(x / y);
      } else if (y === 0) {
        return x;
      } else {
        // y < 0
        // TODO: implement mod for a negative divisor
        throw new Error('Cannot calculate mod for a negative divisor');
      }
    }
    modNumber.signature = n2$2;
    /**
     * Calculate the nth root of a, solve x^root == a
     * http://rosettacode.org/wiki/Nth_root#JavaScript
     * @param {number} a
     * @param {number} [2] root
     * @private
     */

    function nthRootNumber(a) {
      var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
      var inv = root < 0;

      if (inv) {
        root = -root;
      }

      if (root === 0) {
        throw new Error('Root must be non-zero');
      }

      if (a < 0 && Math.abs(root) % 2 !== 1) {
        throw new Error('Root must be odd when a is negative.');
      } // edge cases zero and infinity


      if (a === 0) {
        return inv ? Infinity : 0;
      }

      if (!isFinite(a)) {
        return inv ? 0 : a;
      }

      var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,
      // so (-1) ^ (1/root) = -1

      x = a < 0 ? -x : x;
      return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).
      // Newton's method has some well-known problems at times:
      // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis

      /*
      let x = 1 // Initial guess
      let xPrev = 1
      let i = 0
      const iMax = 10000
      do {
        const delta = (a / Math.pow(x, root - 1) - x) / root
        xPrev = x
        x = x + delta
        i++
      }
      while (xPrev !== x && i < iMax)
       if (xPrev !== x) {
        throw new Error('Function nthRoot failed to converge')
      }
       return inv ? 1 / x : x
      */
    }
    function signNumber(x) {
      return sign$1(x);
    }
    signNumber.signature = n1$4;
    function squareNumber(x) {
      return x * x;
    }
    squareNumber.signature = n1$4;
    /**
     * Calculate xgcd for two numbers
     * @param {number} a
     * @param {number} b
     * @return {number} result
     * @private
     */

    function xgcdNumber(a, b) {
      // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
      var t; // used to swap two variables

      var q; // quotient

      var r; // remainder

      var x = 0;
      var lastx = 1;
      var y = 1;
      var lasty = 0;

      if (!isInteger$1(a) || !isInteger$1(b)) {
        throw new Error('Parameters in function xgcd must be integer numbers');
      }

      while (b) {
        q = Math.floor(a / b);
        r = a - q * b;
        t = x;
        x = lastx - q * x;
        lastx = t;
        t = y;
        y = lasty - q * y;
        lasty = t;
        a = b;
        b = r;
      }

      var res;

      if (a < 0) {
        res = [-a, -lastx, -lasty];
      } else {
        res = [a, a ? lastx : 0, lasty];
      }

      return res;
    }
    xgcdNumber.signature = n2$2;
    /**
     * Calculates the power of x to y, x^y, for two numbers.
     * @param {number} x
     * @param {number} y
     * @return {number} res
     */

    function powNumber(x, y) {
      // x^Infinity === 0 if -1 < x < 1
      // A real number 0 is returned instead of complex(0)
      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
        return 0;
      }

      return Math.pow(x, y);
    }
    powNumber.signature = n2$2;
    /**
     * round a number to the given number of decimals, or to zero if decimals is
     * not provided
     * @param {number} value
     * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
     * @return {number} roundedValue
     */

    function roundNumber(value) {
      var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (!isInteger$1(decimals) || decimals < 0 || decimals > 15) {
        throw new Error('Number of decimals in function round must be an integer from 0 to 15 inclusive');
      }

      return parseFloat(toFixed$1(value, decimals));
    }

    var n1$3 = 'number';
    var n2$1 = 'number, number';
    function bitAndNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function bitAnd');
      }

      return x & y;
    }
    bitAndNumber.signature = n2$1;
    function bitNotNumber(x) {
      if (!isInteger$1(x)) {
        throw new Error('Integer expected in function bitNot');
      }

      return ~x;
    }
    bitNotNumber.signature = n1$3;
    function bitOrNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function bitOr');
      }

      return x | y;
    }
    bitOrNumber.signature = n2$1;
    function bitXorNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function bitXor');
      }

      return x ^ y;
    }
    bitXorNumber.signature = n2$1;
    function leftShiftNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function leftShift');
      }

      return x << y;
    }
    leftShiftNumber.signature = n2$1;
    function rightArithShiftNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function rightArithShift');
      }

      return x >> y;
    }
    rightArithShiftNumber.signature = n2$1;
    function rightLogShiftNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function rightLogShift');
      }

      return x >>> y;
    }
    rightLogShiftNumber.signature = n2$1;

    /** @param {number} i
     *  @param {number} n
     *  @returns {number} product of i to n
     */
    function product(i, n) {
      if (n < i) {
        return 1;
      }

      if (n === i) {
        return n;
      }

      var half = n + i >> 1; // divide (n + i) by 2 and truncate to integer

      return product(i, half) * product(half + 1, n);
    }

    function combinationsNumber(n, k) {
      if (!isInteger$1(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function combinations');
      }

      if (!isInteger$1(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function combinations');
      }

      if (k > n) {
        throw new TypeError('k must be less than or equal to n');
      }

      var nMinusk = n - k;
      var answer = 1;
      var firstnumerator = k < nMinusk ? nMinusk + 1 : k + 1;
      var nextdivisor = 2;
      var lastdivisor = k < nMinusk ? k : nMinusk; // balance multiplications and divisions to try to keep intermediate values
      // in exact-integer range as long as possible

      for (var nextnumerator = firstnumerator; nextnumerator <= n; ++nextnumerator) {
        answer *= nextnumerator;

        while (nextdivisor <= lastdivisor && answer % nextdivisor === 0) {
          answer /= nextdivisor;
          ++nextdivisor;
        }
      } // for big n, k, floating point may have caused weirdness in remainder


      if (nextdivisor <= lastdivisor) {
        answer /= product(nextdivisor, lastdivisor);
      }

      return answer;
    }
    combinationsNumber.signature = 'number, number';

    var pi$1 = Math.PI;
    var tau$1 = 2 * Math.PI;
    var e$1 = Math.E;
    var phi$1 = 1.6180339887498948; // eslint-disable-line no-loss-of-precision

    var n1$2 = 'number';
    var n2 = 'number, number';
    function notNumber(x) {
      return !x;
    }
    notNumber.signature = n1$2;
    function orNumber(x, y) {
      return !!(x || y);
    }
    orNumber.signature = n2;
    function xorNumber(x, y) {
      return !!x !== !!y;
    }
    xorNumber.signature = n2;
    function andNumber(x, y) {
      return !!(x && y);
    }
    andNumber.signature = n2;

    /* eslint-disable no-loss-of-precision */
    function gammaNumber(n) {
      var x;

      if (isInteger$1(n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity; // Will overflow
        }

        return product(1, n - 1);
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));
      }

      if (n >= 171.35) {
        return Infinity; // will overflow
      }

      if (n > 85.0) {
        // Extended Stirling Approx
        var twoN = n * n;
        var threeN = twoN * n;
        var fourN = threeN * n;
        var fiveN = fourN * n;
        return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
      }

      --n;
      x = gammaP[0];

      for (var i = 1; i < gammaP.length; ++i) {
        x += gammaP[i] / (n + i);
      }

      var t = n + gammaG + 0.5;
      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    }
    gammaNumber.signature = 'number'; // TODO: comment on the variables g and p

    var gammaG = 4.7421875;
    var gammaP = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5]; // lgamma implementation ref: https://mrob.com/pub/ries/lanczos-gamma.html#code
    // log(2 * pi) / 2

    var lnSqrt2PI = 0.91893853320467274178;
    var lgammaG = 5; // Lanczos parameter "g"

    var lgammaN = 7; // Range of coefficients "n"

    var lgammaSeries = [1.000000000190015, 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5];
    function lgammaNumber(n) {
      if (n < 0) return NaN;
      if (n === 0) return Infinity;
      if (!isFinite(n)) return n;

      if (n < 0.5) {
        // Use Euler's reflection formula:
        // gamma(z) = PI / (sin(PI * z) * gamma(1 - z))
        return Math.log(Math.PI / Math.sin(Math.PI * n)) - lgammaNumber(1 - n);
      } // Compute the logarithm of the Gamma function using the Lanczos method


      n = n - 1;
      var base = n + lgammaG + 0.5; // Base of the Lanczos exponential

      var sum = lgammaSeries[0]; // We start with the terms that have the smallest coefficients and largest denominator

      for (var i = lgammaN - 1; i >= 1; i--) {
        sum += lgammaSeries[i] / (n + i);
      }

      return lnSqrt2PI + (n + 0.5) * Math.log(base) - base + Math.log(sum);
    }
    lgammaNumber.signature = 'number';

    var n1$1 = 'number';
    function acoshNumber(x) {
      return acosh$1(x);
    }
    acoshNumber.signature = n1$1;
    function acotNumber(x) {
      return Math.atan(1 / x);
    }
    acotNumber.signature = n1$1;
    function acothNumber(x) {
      return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
    }
    acothNumber.signature = n1$1;
    function acscNumber(x) {
      return Math.asin(1 / x);
    }
    acscNumber.signature = n1$1;
    function acschNumber(x) {
      var xInv = 1 / x;
      return Math.log(xInv + Math.sqrt(xInv * xInv + 1));
    }
    acschNumber.signature = n1$1;
    function asecNumber(x) {
      return Math.acos(1 / x);
    }
    asecNumber.signature = n1$1;
    function asechNumber(x) {
      var xInv = 1 / x;
      var ret = Math.sqrt(xInv * xInv - 1);
      return Math.log(ret + xInv);
    }
    asechNumber.signature = n1$1;
    function asinhNumber(x) {
      return asinh$1(x);
    }
    asinhNumber.signature = n1$1;
    function atanhNumber(x) {
      return atanh$1(x);
    }
    atanhNumber.signature = n1$1;
    function cotNumber(x) {
      return 1 / Math.tan(x);
    }
    cotNumber.signature = n1$1;
    function cothNumber(x) {
      var e = Math.exp(2 * x);
      return (e + 1) / (e - 1);
    }
    cothNumber.signature = n1$1;
    function cscNumber(x) {
      return 1 / Math.sin(x);
    }
    cscNumber.signature = n1$1;
    function cschNumber(x) {
      // consider values close to zero (+/-)
      if (x === 0) {
        return Number.POSITIVE_INFINITY;
      } else {
        return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign$1(x);
      }
    }
    cschNumber.signature = n1$1;
    function secNumber(x) {
      return 1 / Math.cos(x);
    }
    secNumber.signature = n1$1;
    function sechNumber(x) {
      return 2 / (Math.exp(x) + Math.exp(-x));
    }
    sechNumber.signature = n1$1;
    function sinhNumber(x) {
      return sinh$1(x);
    }
    sinhNumber.signature = n1$1;

    var n1 = 'number';
    function isNegativeNumber(x) {
      return x < 0;
    }
    isNegativeNumber.signature = n1;
    function isPositiveNumber(x) {
      return x > 0;
    }
    isPositiveNumber.signature = n1;
    function isZeroNumber(x) {
      return x === 0;
    }
    isZeroNumber.signature = n1;
    function isNaNNumber(x) {
      return Number.isNaN(x);
    }
    isNaNNumber.signature = n1;

    var name$4t = 'isNegative';
    var dependencies$4t = ['typed'];
    var createIsNegative = /* #__PURE__ */factory(name$4t, dependencies$4t, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Test whether a value is negative: smaller than zero.
       * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isNegative(x)
       *
       * Examples:
       *
       *    math.isNegative(3)                     // returns false
       *    math.isNegative(-2)                    // returns true
       *    math.isNegative(0)                     // returns false
       *    math.isNegative(-0)                    // returns false
       *    math.isNegative(math.bignumber(2))     // returns false
       *    math.isNegative(math.fraction(-2, 5))  // returns true
       *    math.isNegative('-2')                  // returns true
       *    math.isNegative([2, 0, -3]')           // returns [false, false, true]
       *
       * See also:
       *
       *    isNumeric, isPositive, isZero, isInteger
       *
       * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
       * @return {boolean}  Returns true when `x` is larger than zero.
       *                    Throws an error in case of an unknown data type.
       */
      return typed(name$4t, {
        number: isNegativeNumber,
        BigNumber: function BigNumber(x) {
          return x.isNeg() && !x.isZero() && !x.isNaN();
        },
        Fraction: function Fraction(x) {
          return x.s < 0; // It's enough to decide on the sign
        },
        Unit: function Unit(x) {
          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$4s = 'isNumeric';
    var dependencies$4s = ['typed'];
    var createIsNumeric = /* #__PURE__ */factory(name$4s, dependencies$4s, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Test whether a value is an numeric value.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isNumeric(x)
       *
       * Examples:
       *
       *    math.isNumeric(2)                     // returns true
       *    math.isNumeric('2')                   // returns false
       *    math.hasNumericValue('2')             // returns true
       *    math.isNumeric(0)                     // returns true
       *    math.isNumeric(math.bignumber(500))   // returns true
       *    math.isNumeric(math.fraction(4))      // returns true
       *    math.isNumeric(math.complex('2-4i')   // returns false
       *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]
       *
       * See also:
       *
       *    isZero, isPositive, isNegative, isInteger, hasNumericValue
       *
       * @param {*} x       Value to be tested
       * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
       *                    `Fraction`, or `boolean`. Returns false for other types.
       *                    Throws an error in case of unknown types.
       */
      return typed(name$4s, {
        'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {
          return true;
        },
        'Complex | Unit | string | null | undefined | Node': function ComplexUnitStringNullUndefinedNode() {
          return false;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$4r = 'hasNumericValue';
    var dependencies$4r = ['typed', 'isNumeric'];
    var createHasNumericValue = /* #__PURE__ */factory(name$4r, dependencies$4r, _ref => {
      var {
        typed,
        isNumeric
      } = _ref;

      /**
       * Test whether a value is an numeric value.
       *
       * In case of a string, true is returned if the string contains a numeric value.
       *
       * Syntax:
       *
       *     math.hasNumericValue(x)
       *
       * Examples:
       *
       *    math.hasNumericValue(2)                     // returns true
       *    math.hasNumericValue('2')                   // returns true
       *    math.isNumeric('2')                         // returns false
       *    math.hasNumericValue(0)                     // returns true
       *    math.hasNumericValue(math.bignumber(500))   // returns true
       *    math.hasNumericValue(math.fraction(4))      // returns true
       *    math.hasNumericValue(math.complex('2-4i')   // returns false
       *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]
       *
       * See also:
       *
       *    isZero, isPositive, isNegative, isInteger, isNumeric
       *
       * @param {*} x       Value to be tested
       * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
       *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.
       *                    Throws an error in case of unknown types.
       */
      return typed(name$4r, {
        string: function string(x) {
          return x.trim().length > 0 && !isNaN(Number(x));
        },
        any: function any(x) {
          return isNumeric(x);
        }
      });
    });

    var name$4q = 'isPositive';
    var dependencies$4q = ['typed'];
    var createIsPositive = /* #__PURE__ */factory(name$4q, dependencies$4q, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Test whether a value is positive: larger than zero.
       * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isPositive(x)
       *
       * Examples:
       *
       *    math.isPositive(3)                     // returns true
       *    math.isPositive(-2)                    // returns false
       *    math.isPositive(0)                     // returns false
       *    math.isPositive(-0)                    // returns false
       *    math.isPositive(0.5)                   // returns true
       *    math.isPositive(math.bignumber(2))     // returns true
       *    math.isPositive(math.fraction(-2, 5))  // returns false
       *    math.isPositive(math.fraction(1,3))    // returns false
       *    math.isPositive('2')                   // returns true
       *    math.isPositive([2, 0, -3])            // returns [true, false, false]
       *
       * See also:
       *
       *    isNumeric, isZero, isNegative, isInteger
       *
       * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
       * @return {boolean}  Returns true when `x` is larger than zero.
       *                    Throws an error in case of an unknown data type.
       */
      return typed(name$4q, {
        number: isPositiveNumber,
        BigNumber: function BigNumber(x) {
          return !x.isNeg() && !x.isZero() && !x.isNaN();
        },
        Fraction: function Fraction(x) {
          return x.s > 0 && x.n > 0;
        },
        Unit: function Unit(x) {
          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$4p = 'isZero';
    var dependencies$4p = ['typed'];
    var createIsZero = /* #__PURE__ */factory(name$4p, dependencies$4p, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Test whether a value is zero.
       * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
       * `Complex`, and `Unit`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isZero(x)
       *
       * Examples:
       *
       *    math.isZero(0)                     // returns true
       *    math.isZero(2)                     // returns false
       *    math.isZero(0.5)                   // returns false
       *    math.isZero(math.bignumber(0))     // returns true
       *    math.isZero(math.fraction(0))      // returns true
       *    math.isZero(math.fraction(1,3))    // returns false
       *    math.isZero(math.complex('2 - 4i') // returns false
       *    math.isZero(math.complex('0i')     // returns true
       *    math.isZero('0')                   // returns true
       *    math.isZero('2')                   // returns false
       *    math.isZero([2, 0, -3]')           // returns [false, true, false]
       *
       * See also:
       *
       *    isNumeric, isPositive, isNegative, isInteger
       *
       * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
       * @return {boolean}  Returns true when `x` is zero.
       *                    Throws an error in case of an unknown data type.
       */
      return typed(name$4p, {
        number: isZeroNumber,
        BigNumber: function BigNumber(x) {
          return x.isZero();
        },
        Complex: function Complex(x) {
          return x.re === 0 && x.im === 0;
        },
        Fraction: function Fraction(x) {
          return x.d === 1 && x.n === 0;
        },
        Unit: function Unit(x) {
          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$4o = 'isNaN';
    var dependencies$4o = ['typed'];
    var createIsNaN = /* #__PURE__ */factory(name$4o, dependencies$4o, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Test whether a value is NaN (not a number).
       * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isNaN(x)
       *
       * Examples:
       *
       *    math.isNaN(3)                     // returns false
       *    math.isNaN(NaN)                   // returns true
       *    math.isNaN(0)                     // returns false
       *    math.isNaN(math.bignumber(NaN))   // returns true
       *    math.isNaN(math.bignumber(0))     // returns false
       *    math.isNaN(math.fraction(-2, 5))  // returns false
       *    math.isNaN('-2')                  // returns false
       *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]
       *
       * See also:
       *
       *    isNumeric, isNegative, isPositive, isZero, isInteger
       *
       * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
       * @return {boolean}  Returns true when `x` is NaN.
       *                    Throws an error in case of an unknown data type.
       */
      return typed(name$4o, {
        number: isNaNNumber,
        BigNumber: function BigNumber(x) {
          return x.isNaN();
        },
        Fraction: function Fraction(x) {
          return false;
        },
        Complex: function Complex(x) {
          return x.isNaN();
        },
        Unit: function Unit(x) {
          return Number.isNaN(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, Number.isNaN);
        }
      });
    });

    var name$4n = 'typeOf';
    var dependencies$4n = ['typed'];
    var createTypeOf = /* #__PURE__ */factory(name$4n, dependencies$4n, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Determine the type of a variable.
       *
       * Function `typeOf` recognizes the following types of objects:
       *
       * Object                 | Returns       | Example
       * ---------------------- | ------------- | ------------------------------------------
       * null                   | `'null'`      | `math.typeOf(null)`
       * number                 | `'number'`    | `math.typeOf(3.5)`
       * boolean                | `'boolean'`   | `math.typeOf(true)`
       * string                 | `'string'`    | `math.typeOf('hello world')`
       * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`
       * Date                   | `'Date'`      | `math.typeOf(new Date())`
       * Function               | `'Function'`  | `math.typeOf(function () {})`
       * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`
       * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`
       * undefined              | `'undefined'` | `math.typeOf(undefined)`
       * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`
       * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`
       * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`
       * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`
       * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
       * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
       * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`
       * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`
       * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`
       * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\nb=3'))`
       * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`
       * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`
       * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`
       * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`
       * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`
       * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`
       * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`
       * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`
       * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`
       * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`
       * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`
       * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`
       * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`
       * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`
       *
       * Syntax:
       *
       *    math.typeOf(x)
       *
       * Examples:
       *
       *    math.typeOf(3.5)                     // returns 'number'
       *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'
       *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'
       *    math.typeOf('hello world')           // returns 'string'
       *
       * @param {*} x     The variable for which to test the type.
       * @return {string} Returns the name of the type. Primitive types are lower case,
       *                  non-primitive types are upper-camel-case.
       *                  For example 'number', 'string', 'Array', 'Date'.
       */
      return typed(name$4n, {
        any: typeOf$1
      });
    });

    /**
     * Compares two BigNumbers.
     * @param {BigNumber} x       First value to compare
     * @param {BigNumber} y       Second value to compare
     * @param {number} [epsilon]  The maximum relative difference between x and y
     *                            If epsilon is undefined or null, the function will
     *                            test whether x and y are exactly equal.
     * @return {boolean} whether the two numbers are nearly equal
     */
    function nearlyEqual(x, y, epsilon) {
      // if epsilon is null or undefined, test whether x and y are exactly equal
      if (epsilon === null || epsilon === undefined) {
        return x.eq(y);
      } // use "==" operator, handles infinities


      if (x.eq(y)) {
        return true;
      } // NaN


      if (x.isNaN() || y.isNaN()) {
        return false;
      } // at this point x and y should be finite


      if (x.isFinite() && y.isFinite()) {
        // check numbers are very close, needed when comparing numbers near zero
        var diff = x.minus(y).abs();

        if (diff.isZero()) {
          return true;
        } else {
          // use relative error
          var max = x.constructor.max(x.abs(), y.abs());
          return diff.lte(max.times(epsilon));
        }
      } // Infinite and Number or negative Infinite and positive Infinite cases


      return false;
    }

    /**
     * Test whether two complex values are equal provided a given epsilon.
     * Does not use or change the global Complex.EPSILON setting
     * @param {Complex} x
     * @param {Complex} y
     * @param {number} epsilon
     * @returns {boolean}
     */

    function complexEquals(x, y, epsilon) {
      return nearlyEqual$1(x.re, y.re, epsilon) && nearlyEqual$1(x.im, y.im, epsilon);
    }

    var name$4m = 'equalScalar';
    var dependencies$4m = ['typed', 'config'];
    var createEqualScalar = /* #__PURE__ */factory(name$4m, dependencies$4m, _ref => {
      var {
        typed,
        config
      } = _ref;

      /**
       * Test whether two scalar values are nearly equal.
       *
       * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
       * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
       * @private
       */
      return typed(name$4m, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x === y;
        },
        'number, number': function numberNumber(x, y) {
          return nearlyEqual$1(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.eq(y) || nearlyEqual(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.equals(y);
        },
        'Complex, Complex': function ComplexComplex(x, y) {
          return complexEquals(x, y, config.epsilon);
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return this(x.value, y.value);
        }
      });
    });
    factory(name$4m, ['typed', 'config'], _ref2 => {
      var {
        typed,
        config
      } = _ref2;
      return typed(name$4m, {
        'number, number': function numberNumber(x, y) {
          return nearlyEqual$1(x, y, config.epsilon);
        }
      });
    });

    var name$4l = 'SparseMatrix';
    var dependencies$4l = ['typed', 'equalScalar', 'Matrix'];
    var createSparseMatrixClass = /* #__PURE__ */factory(name$4l, dependencies$4l, _ref => {
      var {
        typed,
        equalScalar,
        Matrix
      } = _ref;

      /**
       * Sparse Matrix implementation. This type implements
       * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))
       * format for two-dimensional sparse matrices.
       * @class SparseMatrix
       */
      function SparseMatrix(data, datatype) {
        if (!(this instanceof SparseMatrix)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (datatype && !isString(datatype)) {
          throw new Error('Invalid datatype: ' + datatype);
        }

        if (isMatrix(data)) {
          // create from matrix
          _createFromMatrix(this, data, datatype);
        } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
          // initialize fields
          this._values = data.values;
          this._index = data.index;
          this._ptr = data.ptr;
          this._size = data.size;
          this._datatype = datatype || data.datatype;
        } else if (isArray(data)) {
          // create from array
          _createFromArray(this, data, datatype);
        } else if (data) {
          // unsupported type
          throw new TypeError('Unsupported type of data (' + typeOf$1(data) + ')');
        } else {
          // nothing provided
          this._values = [];
          this._index = [];
          this._ptr = [0];
          this._size = [0, 0];
          this._datatype = datatype;
        }
      }

      function _createFromMatrix(matrix, source, datatype) {
        // check matrix type
        if (source.type === 'SparseMatrix') {
          // clone arrays
          matrix._values = source._values ? clone$1(source._values) : undefined;
          matrix._index = clone$1(source._index);
          matrix._ptr = clone$1(source._ptr);
          matrix._size = clone$1(source._size);
          matrix._datatype = datatype || source._datatype;
        } else {
          // build from matrix data
          _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
        }
      }

      function _createFromArray(matrix, data, datatype) {
        // initialize fields
        matrix._values = [];
        matrix._index = [];
        matrix._ptr = [];
        matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice

        var rows = data.length;
        var columns = 0; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0;

        if (isString(datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

          zero = typed.convert(0, datatype);
        } // check we have rows (empty array)


        if (rows > 0) {
          // column index
          var j = 0;

          do {
            // store pointer to values index
            matrix._ptr.push(matrix._index.length); // loop rows


            for (var i = 0; i < rows; i++) {
              // current row
              var row = data[i]; // check row is an array

              if (isArray(row)) {
                // update columns if needed (only on first column)
                if (j === 0 && columns < row.length) {
                  columns = row.length;
                } // check row has column


                if (j < row.length) {
                  // value
                  var v = row[j]; // check value != 0

                  if (!eq(v, zero)) {
                    // store value
                    matrix._values.push(v); // index


                    matrix._index.push(i);
                  }
                }
              } else {
                // update columns if needed (only on first column)
                if (j === 0 && columns < 1) {
                  columns = 1;
                } // check value != 0 (row is a scalar)


                if (!eq(row, zero)) {
                  // store value
                  matrix._values.push(row); // index


                  matrix._index.push(i);
                }
              }
            } // increment index


            j++;
          } while (j < columns);
        } // store number of values in ptr


        matrix._ptr.push(matrix._index.length); // size


        matrix._size = [rows, columns];
      }

      SparseMatrix.prototype = new Matrix();
      /**
       * Create a new SparseMatrix
       */

      SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {
        return new SparseMatrix(data, datatype);
      };
      /**
       * Attach type information
       */


      SparseMatrix.prototype.type = 'SparseMatrix';
      SparseMatrix.prototype.isSparseMatrix = true;
      /**
       * Get the matrix type
       *
       * Usage:
       *    const matrixType = matrix.getDataType()  // retrieves the matrix type
       *
       * @memberOf SparseMatrix
       * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
       */

      SparseMatrix.prototype.getDataType = function () {
        return getArrayDataType(this._values, typeOf$1);
      };
      /**
       * Get the storage format used by the matrix.
       *
       * Usage:
       *     const format = matrix.storage()   // retrieve storage format
       *
       * @memberof SparseMatrix
       * @return {string}           The storage format.
       */


      SparseMatrix.prototype.storage = function () {
        return 'sparse';
      };
      /**
       * Get the datatype of the data stored in the matrix.
       *
       * Usage:
       *     const format = matrix.datatype()    // retrieve matrix datatype
       *
       * @memberof SparseMatrix
       * @return {string}           The datatype.
       */


      SparseMatrix.prototype.datatype = function () {
        return this._datatype;
      };
      /**
       * Create a new SparseMatrix
       * @memberof SparseMatrix
       * @param {Array} data
       * @param {string} [datatype]
       */


      SparseMatrix.prototype.create = function (data, datatype) {
        return new SparseMatrix(data, datatype);
      };
      /**
       * Get the matrix density.
       *
       * Usage:
       *     const density = matrix.density()                   // retrieve matrix density
       *
       * @memberof SparseMatrix
       * @return {number}           The matrix density.
       */


      SparseMatrix.prototype.density = function () {
        // rows & columns
        var rows = this._size[0];
        var columns = this._size[1]; // calculate density

        return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
      };
      /**
       * Get a subset of the matrix, or replace a subset of the matrix.
       *
       * Usage:
       *     const subset = matrix.subset(index)               // retrieve subset
       *     const value = matrix.subset(index, replacement)   // replace subset
       *
       * @memberof SparseMatrix
       * @param {Index} index
       * @param {Array | Matrix | *} [replacement]
       * @param {*} [defaultValue=0]      Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be filled with zeros.
       */


      SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
        // check it is a pattern matrix
        if (!this._values) {
          throw new Error('Cannot invoke subset on a Pattern only matrix');
        } // check arguments


        switch (arguments.length) {
          case 1:
            return _getsubset(this, index);
          // intentional fall through

          case 2:
          case 3:
            return _setsubset(this, index, replacement, defaultValue);

          default:
            throw new SyntaxError('Wrong number of arguments');
        }
      };

      function _getsubset(matrix, idx) {
        // check idx
        if (!isIndex(idx)) {
          throw new TypeError('Invalid index');
        }

        var isScalar = idx.isScalar();

        if (isScalar) {
          // return a scalar
          return matrix.get(idx.min());
        } // validate dimensions


        var size = idx.size();

        if (size.length !== matrix._size.length) {
          throw new DimensionError(size.length, matrix._size.length);
        } // vars


        var i, ii, k, kk; // validate if any of the ranges in the index is out of range

        var min = idx.min();
        var max = idx.max();

        for (i = 0, ii = matrix._size.length; i < ii; i++) {
          validateIndex(min[i], matrix._size[i]);
          validateIndex(max[i], matrix._size[i]);
        } // matrix arrays


        var mvalues = matrix._values;
        var mindex = matrix._index;
        var mptr = matrix._ptr; // rows & columns dimensions for result matrix

        var rows = idx.dimension(0);
        var columns = idx.dimension(1); // workspace & permutation vector

        var w = [];
        var pv = []; // loop rows in resulting matrix

        rows.forEach(function (i, r) {
          // update permutation vector
          pv[i] = r[0]; // mark i in workspace

          w[i] = true;
        }); // result matrix arrays

        var values = mvalues ? [] : undefined;
        var index = [];
        var ptr = []; // loop columns in result matrix

        columns.forEach(function (j) {
          // update ptr
          ptr.push(index.length); // loop values in column j

          for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
            // row
            i = mindex[k]; // check row is in result matrix

            if (w[i] === true) {
              // push index
              index.push(pv[i]); // check we need to process values

              if (values) {
                values.push(mvalues[k]);
              }
            }
          }
        }); // update ptr

        ptr.push(index.length); // return matrix

        return new SparseMatrix({
          values,
          index,
          ptr,
          size,
          datatype: matrix._datatype
        });
      }

      function _setsubset(matrix, index, submatrix, defaultValue) {
        // check index
        if (!index || index.isIndex !== true) {
          throw new TypeError('Invalid index');
        } // get index size and check whether the index contains a single value


        var iSize = index.size();
        var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

        var sSize;

        if (isMatrix(submatrix)) {
          // submatrix size
          sSize = submatrix.size(); // use array representation

          submatrix = submatrix.toArray();
        } else {
          // get submatrix size (array, scalar)
          sSize = arraySize(submatrix);
        } // check index is a scalar


        if (isScalar) {
          // verify submatrix is a scalar
          if (sSize.length !== 0) {
            throw new TypeError('Scalar expected');
          } // set value


          matrix.set(index.min(), submatrix, defaultValue);
        } else {
          // validate dimensions, index size must be one or two dimensions
          if (iSize.length !== 1 && iSize.length !== 2) {
            throw new DimensionError(iSize.length, matrix._size.length, '<');
          } // check submatrix and index have the same dimensions


          if (sSize.length < iSize.length) {
            // calculate number of missing outer dimensions
            var i = 0;
            var outer = 0;

            while (iSize[i] === 1 && sSize[i] === 1) {
              i++;
            }

            while (iSize[i] === 1) {
              outer++;
              i++;
            } // unsqueeze both outer and inner dimensions


            submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
          } // check whether the size of the submatrix matches the index size


          if (!deepStrictEqual(iSize, sSize)) {
            throw new DimensionError(iSize, sSize, '>');
          } // insert the sub matrix


          if (iSize.length === 1) {
            // if the replacement index only has 1 dimension, go trough each one and set its value
            var range = index.dimension(0);
            range.forEach(function (dataIndex, subIndex) {
              validateIndex(dataIndex);
              matrix.set([dataIndex, 0], submatrix[subIndex[0]], defaultValue);
            });
          } else {
            // if the replacement index has 2 dimensions, go through each one and set the value in the correct index
            var firstDimensionRange = index.dimension(0);
            var secondDimensionRange = index.dimension(1);
            firstDimensionRange.forEach(function (firstDataIndex, firstSubIndex) {
              validateIndex(firstDataIndex);
              secondDimensionRange.forEach(function (secondDataIndex, secondSubIndex) {
                validateIndex(secondDataIndex);
                matrix.set([firstDataIndex, secondDataIndex], submatrix[firstSubIndex[0]][secondSubIndex[0]], defaultValue);
              });
            });
          }
        }

        return matrix;
      }
      /**
       * Get a single element from the matrix.
       * @memberof SparseMatrix
       * @param {number[]} index   Zero-based index
       * @return {*} value
       */


      SparseMatrix.prototype.get = function (index) {
        if (!isArray(index)) {
          throw new TypeError('Array expected');
        }

        if (index.length !== this._size.length) {
          throw new DimensionError(index.length, this._size.length);
        } // check it is a pattern matrix


        if (!this._values) {
          throw new Error('Cannot invoke get on a Pattern only matrix');
        } // row and column


        var i = index[0];
        var j = index[1]; // check i, j are valid

        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[1]); // find value index

        var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


        if (k < this._ptr[j + 1] && this._index[k] === i) {
          return this._values[k];
        }

        return 0;
      };
      /**
       * Replace a single element in the matrix.
       * @memberof SparseMatrix
       * @param {number[]} index   Zero-based index
       * @param {*} v
       * @param {*} [defaultValue]        Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be set to zero.
       * @return {SparseMatrix} self
       */


      SparseMatrix.prototype.set = function (index, v, defaultValue) {
        if (!isArray(index)) {
          throw new TypeError('Array expected');
        }

        if (index.length !== this._size.length) {
          throw new DimensionError(index.length, this._size.length);
        } // check it is a pattern matrix


        if (!this._values) {
          throw new Error('Cannot invoke set on a Pattern only matrix');
        } // row and column


        var i = index[0];
        var j = index[1]; // rows & columns

        var rows = this._size[0];
        var columns = this._size[1]; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0;

        if (isString(this._datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype

          zero = typed.convert(0, this._datatype);
        } // check we need to resize matrix


        if (i > rows - 1 || j > columns - 1) {
          // resize matrix
          _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns


          rows = this._size[0];
          columns = this._size[1];
        } // check i, j are valid


        validateIndex(i, rows);
        validateIndex(j, columns); // find value index

        var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


        if (k < this._ptr[j + 1] && this._index[k] === i) {
          // check value != 0
          if (!eq(v, zero)) {
            // update value
            this._values[k] = v;
          } else {
            // remove value from matrix
            _remove(k, j, this._values, this._index, this._ptr);
          }
        } else {
          // insert value @ (i, j)
          _insert(k, i, j, v, this._values, this._index, this._ptr);
        }

        return this;
      };

      function _getValueIndex(i, top, bottom, index) {
        // check row is on the bottom side
        if (bottom - top === 0) {
          return bottom;
        } // loop rows [top, bottom[


        for (var r = top; r < bottom; r++) {
          // check we found value index
          if (index[r] === i) {
            return r;
          }
        } // we did not find row


        return top;
      }

      function _remove(k, j, values, index, ptr) {
        // remove value @ k
        values.splice(k, 1);
        index.splice(k, 1); // update pointers

        for (var x = j + 1; x < ptr.length; x++) {
          ptr[x]--;
        }
      }

      function _insert(k, i, j, v, values, index, ptr) {
        // insert value
        values.splice(k, 0, v); // update row for k

        index.splice(k, 0, i); // update column pointers

        for (var x = j + 1; x < ptr.length; x++) {
          ptr[x]++;
        }
      }
      /**
       * Resize the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (resize in place).
       *
       * @memberof SparseMatrix
       * @param {number[] | Matrix} size  The new size the matrix should have.
       *                                  Since sparse matrices are always two-dimensional,
       *                                  size must be two numbers in either an array or a matrix
       * @param {*} [defaultValue=0]      Default value, filled in on new entries.
       *                                  If not provided, the matrix elements will
       *                                  be filled with zeros.
       * @param {boolean} [copy]          Return a resized copy of the matrix
       *
       * @return {Matrix}                 The resized matrix
       */


      SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
        // validate arguments
        if (!isCollection(size)) {
          throw new TypeError('Array or Matrix expected');
        } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector


        var sizeArray = size.valueOf().map(value => {
          return Array.isArray(value) && value.length === 1 ? value[0] : value;
        });

        if (sizeArray.length !== 2) {
          throw new Error('Only two dimensions matrix are supported');
        } // check sizes


        sizeArray.forEach(function (value) {
          if (!isNumber(value) || !isInteger$1(value) || value < 0) {
            throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$1(sizeArray) + ')');
          }
        }); // matrix to resize

        var m = copy ? this.clone() : this; // resize matrix

        return _resize(m, sizeArray[0], sizeArray[1], defaultValue);
      };

      function _resize(matrix, rows, columns, defaultValue) {
        // value to insert at the time of growing matrix
        var value = defaultValue || 0; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0;

        if (isString(matrix._datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

          zero = typed.convert(0, matrix._datatype); // convert value to the same datatype

          value = typed.convert(value, matrix._datatype);
        } // should we insert the value?


        var ins = !eq(value, zero); // old columns and rows

        var r = matrix._size[0];
        var c = matrix._size[1];
        var i, j, k; // check we need to increase columns

        if (columns > c) {
          // loop new columns
          for (j = c; j < columns; j++) {
            // update matrix._ptr for current column
            matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values

            if (ins) {
              // loop rows
              for (i = 0; i < r; i++) {
                // add new matrix._values
                matrix._values.push(value); // update matrix._index


                matrix._index.push(i);
              }
            }
          } // store number of matrix._values in matrix._ptr


          matrix._ptr[columns] = matrix._values.length;
        } else if (columns < c) {
          // truncate matrix._ptr
          matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index


          matrix._values.splice(matrix._ptr[columns], matrix._values.length);

          matrix._index.splice(matrix._ptr[columns], matrix._index.length);
        } // update columns


        c = columns; // check we need to increase rows

        if (rows > r) {
          // check we have to insert values
          if (ins) {
            // inserts
            var n = 0; // loop columns

            for (j = 0; j < c; j++) {
              // update matrix._ptr for current column
              matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values

              k = matrix._ptr[j + 1] + n; // pointer

              var p = 0; // loop new rows, initialize pointer

              for (i = r; i < rows; i++, p++) {
                // add value
                matrix._values.splice(k + p, 0, value); // update matrix._index


                matrix._index.splice(k + p, 0, i); // increment inserts


                n++;
              }
            } // store number of matrix._values in matrix._ptr


            matrix._ptr[c] = matrix._values.length;
          }
        } else if (rows < r) {
          // deletes
          var d = 0; // loop columns

          for (j = 0; j < c; j++) {
            // update matrix._ptr for current column
            matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column

            var k0 = matrix._ptr[j];
            var k1 = matrix._ptr[j + 1] - d; // loop matrix._index

            for (k = k0; k < k1; k++) {
              // row
              i = matrix._index[k]; // check we need to delete value and matrix._index

              if (i > rows - 1) {
                // remove value
                matrix._values.splice(k, 1); // remove item from matrix._index


                matrix._index.splice(k, 1); // increase deletes


                d++;
              }
            }
          } // update matrix._ptr for current column


          matrix._ptr[j] = matrix._values.length;
        } // update matrix._size


        matrix._size[0] = rows;
        matrix._size[1] = columns; // return matrix

        return matrix;
      }
      /**
       * Reshape the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (reshape in place).
       *
       * NOTE: This might be better suited to copy by default, instead of modifying
       *       in place. For now, it operates in place to remain consistent with
       *       resize().
       *
       * @memberof SparseMatrix
       * @param {number[]} sizes          The new size the matrix should have.
       *                                  Since sparse matrices are always two-dimensional,
       *                                  size must be two numbers in either an array or a matrix
       * @param {boolean} [copy]          Return a reshaped copy of the matrix
       *
       * @return {Matrix}                 The reshaped matrix
       */


      SparseMatrix.prototype.reshape = function (sizes, copy) {
        // validate arguments
        if (!isArray(sizes)) {
          throw new TypeError('Array expected');
        }

        if (sizes.length !== 2) {
          throw new Error('Sparse matrices can only be reshaped in two dimensions');
        } // check sizes


        sizes.forEach(function (value) {
          if (!isNumber(value) || !isInteger$1(value) || value <= -2 || value === 0) {
            throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + format$1(sizes) + ')');
          }
        });
        var currentLength = this._size[0] * this._size[1];
        sizes = processSizesWildcard(sizes, currentLength);
        var newLength = sizes[0] * sizes[1]; // m * n must not change

        if (currentLength !== newLength) {
          throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
        } // matrix to reshape


        var m = copy ? this.clone() : this; // return unchanged if the same shape

        if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {
          return m;
        } // Convert to COO format (generate a column index)


        var colIndex = [];

        for (var i = 0; i < m._ptr.length; i++) {
          for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
            colIndex.push(i);
          }
        } // Clone the values array


        var values = m._values.slice(); // Clone the row index array


        var rowIndex = m._index.slice(); // Transform the (row, column) indices


        for (var _i = 0; _i < m._index.length; _i++) {
          var r1 = rowIndex[_i];
          var c1 = colIndex[_i];
          var flat = r1 * m._size[1] + c1;
          colIndex[_i] = flat % sizes[1];
          rowIndex[_i] = Math.floor(flat / sizes[1]);
        } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
        // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
        // sorting several arrays based on some other array.
        // OR, we could easily just:
        // 1. Remove all values from the matrix


        m._values.length = 0;
        m._index.length = 0;
        m._ptr.length = sizes[1] + 1;
        m._size = sizes.slice();

        for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {
          m._ptr[_i2] = 0;
        } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
        // This step is probably the most time-consuming


        for (var h = 0; h < values.length; h++) {
          var _i3 = rowIndex[h];
          var _j = colIndex[h];
          var v = values[h];

          var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);

          _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
        } // The value indices are inserted out of order, but apparently that's... still OK?


        return m;
      };
      /**
       * Create a clone of the matrix
       * @memberof SparseMatrix
       * @return {SparseMatrix} clone
       */


      SparseMatrix.prototype.clone = function () {
        var m = new SparseMatrix({
          values: this._values ? clone$1(this._values) : undefined,
          index: clone$1(this._index),
          ptr: clone$1(this._ptr),
          size: clone$1(this._size),
          datatype: this._datatype
        });
        return m;
      };
      /**
       * Retrieve the size of the matrix.
       * @memberof SparseMatrix
       * @returns {number[]} size
       */


      SparseMatrix.prototype.size = function () {
        return this._size.slice(0); // copy the Array
      };
      /**
       * Create a new matrix with the results of the callback function executed on
       * each entry of the matrix.
       * @memberof SparseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
       *
       * @return {SparseMatrix} matrix
       */


      SparseMatrix.prototype.map = function (callback, skipZeros) {
        // check it is a pattern matrix
        if (!this._values) {
          throw new Error('Cannot invoke map on a Pattern only matrix');
        } // matrix instance


        var me = this; // rows and columns

        var rows = this._size[0];
        var columns = this._size[1]; // invoke callback

        var invoke = function invoke(v, i, j) {
          // invoke callback
          return callback(v, [i, j], me);
        }; // invoke _map


        return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
      };
      /**
       * Create a new matrix with the results of the callback function executed on the interval
       * [minRow..maxRow, minColumn..maxColumn].
       */


      function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
        // result arrays
        var values = [];
        var index = [];
        var ptr = []; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0;

        if (isString(matrix._datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

          zero = typed.convert(0, matrix._datatype);
        } // invoke callback


        var invoke = function invoke(v, x, y) {
          // invoke callback
          v = callback(v, x, y); // check value != 0

          if (!eq(v, zero)) {
            // store value
            values.push(v); // index

            index.push(x);
          }
        }; // loop columns


        for (var j = minColumn; j <= maxColumn; j++) {
          // store pointer to values index
          ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

          var k0 = matrix._ptr[j];
          var k1 = matrix._ptr[j + 1];

          if (skipZeros) {
            // loop k within [k0, k1[
            for (var k = k0; k < k1; k++) {
              // row index
              var i = matrix._index[k]; // check i is in range

              if (i >= minRow && i <= maxRow) {
                // value @ k
                invoke(matrix._values[k], i - minRow, j - minColumn);
              }
            }
          } else {
            // create a cache holding all defined values
            var _values = {};

            for (var _k = k0; _k < k1; _k++) {
              var _i4 = matrix._index[_k];
              _values[_i4] = matrix._values[_k];
            } // loop over all rows (indexes can be unordered so we can't use that),
            // and either read the value or zero


            for (var _i5 = minRow; _i5 <= maxRow; _i5++) {
              var value = _i5 in _values ? _values[_i5] : 0;
              invoke(value, _i5 - minRow, j - minColumn);
            }
          }
        } // store number of values in ptr


        ptr.push(values.length); // return sparse matrix

        return new SparseMatrix({
          values,
          index,
          ptr,
          size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
        });
      }
      /**
       * Execute a callback function on each entry of the matrix.
       * @memberof SparseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
       *                              If false, the indices are guaranteed to be in order,
       *                              if true, the indices can be unordered.
       */


      SparseMatrix.prototype.forEach = function (callback, skipZeros) {
        // check it is a pattern matrix
        if (!this._values) {
          throw new Error('Cannot invoke forEach on a Pattern only matrix');
        } // matrix instance


        var me = this; // rows and columns

        var rows = this._size[0];
        var columns = this._size[1]; // loop columns

        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1];

          if (skipZeros) {
            // loop k within [k0, k1[
            for (var k = k0; k < k1; k++) {
              // row index
              var i = this._index[k]; // value @ k

              callback(this._values[k], [i, j], me);
            }
          } else {
            // create a cache holding all defined values
            var values = {};

            for (var _k2 = k0; _k2 < k1; _k2++) {
              var _i6 = this._index[_k2];
              values[_i6] = this._values[_k2];
            } // loop over all rows (indexes can be unordered so we can't use that),
            // and either read the value or zero


            for (var _i7 = 0; _i7 < rows; _i7++) {
              var value = _i7 in values ? values[_i7] : 0;
              callback(value, [_i7, j], me);
            }
          }
        }
      };
      /**
       * Iterate over the matrix elements, skipping zeros
       * @return {Iterable<{ value, index: number[] }>}
       */


      SparseMatrix.prototype[Symbol.iterator] = function* () {
        if (!this._values) {
          throw new Error('Cannot iterate a Pattern only matrix');
        }

        var columns = this._size[1];

        for (var j = 0; j < columns; j++) {
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1];

          for (var k = k0; k < k1; k++) {
            // row index
            var i = this._index[k];
            yield {
              value: this._values[k],
              index: [i, j]
            };
          }
        }
      };
      /**
       * Create an Array with a copy of the data of the SparseMatrix
       * @memberof SparseMatrix
       * @returns {Array} array
       */


      SparseMatrix.prototype.toArray = function () {
        return _toArray(this._values, this._index, this._ptr, this._size, true);
      };
      /**
       * Get the primitive value of the SparseMatrix: a two dimensions array
       * @memberof SparseMatrix
       * @returns {Array} array
       */


      SparseMatrix.prototype.valueOf = function () {
        return _toArray(this._values, this._index, this._ptr, this._size, false);
      };

      function _toArray(values, index, ptr, size, copy) {
        // rows and columns
        var rows = size[0];
        var columns = size[1]; // result

        var a = []; // vars

        var i, j; // initialize array

        for (i = 0; i < rows; i++) {
          a[i] = [];

          for (j = 0; j < columns; j++) {
            a[i][j] = 0;
          }
        } // loop columns


        for (j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1]; // loop k within [k0, k1[

          for (var k = k0; k < k1; k++) {
            // row index
            i = index[k]; // set value (use one for pattern matrix)

            a[i][j] = values ? copy ? clone$1(values[k]) : values[k] : 1;
          }
        }

        return a;
      }
      /**
       * Get a string representation of the matrix, with optional formatting options.
       * @memberof SparseMatrix
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @returns {string} str
       */


      SparseMatrix.prototype.format = function (options) {
        // rows and columns
        var rows = this._size[0];
        var columns = this._size[1]; // density

        var density = this.density(); // rows & columns

        var str = 'Sparse Matrix [' + format$1(rows, options) + ' x ' + format$1(columns, options) + '] density: ' + format$1(density, options) + '\n'; // loop columns

        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1]; // loop k within [k0, k1[

          for (var k = k0; k < k1; k++) {
            // row index
            var i = this._index[k]; // append value

            str += '\n    (' + format$1(i, options) + ', ' + format$1(j, options) + ') ==> ' + (this._values ? format$1(this._values[k], options) : 'X');
          }
        }

        return str;
      };
      /**
       * Get a string representation of the matrix
       * @memberof SparseMatrix
       * @returns {string} str
       */


      SparseMatrix.prototype.toString = function () {
        return format$1(this.toArray());
      };
      /**
       * Get a JSON representation of the matrix
       * @memberof SparseMatrix
       * @returns {Object}
       */


      SparseMatrix.prototype.toJSON = function () {
        return {
          mathjs: 'SparseMatrix',
          values: this._values,
          index: this._index,
          ptr: this._ptr,
          size: this._size,
          datatype: this._datatype
        };
      };
      /**
       * Get the kth Matrix diagonal.
       *
       * @memberof SparseMatrix
       * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
       *
       * @returns {Matrix}                     The matrix vector with the diagonal values.
       */


      SparseMatrix.prototype.diagonal = function (k) {
        // validate k if any
        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          } // is must be an integer


          if (!isNumber(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        }

        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows & columns

        var rows = this._size[0];
        var columns = this._size[1]; // number diagonal values

        var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays

        var values = [];
        var index = [];
        var ptr = []; // initial ptr value

        ptr[0] = 0; // loop columns

        for (var j = kSuper; j < columns && values.length < n; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1]; // loop x within [k0, k1[

          for (var x = k0; x < k1; x++) {
            // row index
            var i = this._index[x]; // check row

            if (i === j - kSuper + kSub) {
              // value on this column
              values.push(this._values[x]); // store row

              index[values.length - 1] = i - kSub; // exit loop

              break;
            }
          }
        } // close ptr


        ptr.push(values.length); // return matrix

        return new SparseMatrix({
          values,
          index,
          ptr,
          size: [n, 1]
        });
      };
      /**
       * Generate a matrix from a JSON object
       * @memberof SparseMatrix
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
       *                       where mathjs is optional
       * @returns {SparseMatrix}
       */


      SparseMatrix.fromJSON = function (json) {
        return new SparseMatrix(json);
      };
      /**
       * Create a diagonal matrix.
       *
       * @memberof SparseMatrix
       * @param {Array} size                       The matrix size.
       * @param {number | Array | Matrix } value   The values for the diagonal.
       * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
       * @param {number} [defaultValue]            The default value for non-diagonal
       * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
       *
       * @returns {SparseMatrix}
       */


      SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
        if (!isArray(size)) {
          throw new TypeError('Array expected, size parameter');
        }

        if (size.length !== 2) {
          throw new Error('Only two dimensions matrix are supported');
        } // map size & validate


        size = size.map(function (s) {
          // check it is a big number
          if (isBigNumber(s)) {
            // convert it
            s = s.toNumber();
          } // validate arguments


          if (!isNumber(s) || !isInteger$1(s) || s < 1) {
            throw new Error('Size values must be positive integers');
          }

          return s;
        }); // validate k if any

        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          } // is must be an integer


          if (!isNumber(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        } // equal signature to use


        var eq = equalScalar; // zero value

        var zero = 0;

        if (isString(datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

          zero = typed.convert(0, datatype);
        }

        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows and columns

        var rows = size[0];
        var columns = size[1]; // number of non-zero items

        var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

        var _value; // check value


        if (isArray(value)) {
          // validate array
          if (value.length !== n) {
            // number of values in array must be n
            throw new Error('Invalid value array length');
          } // define function


          _value = function _value(i) {
            // return value @ i
            return value[i];
          };
        } else if (isMatrix(value)) {
          // matrix size
          var ms = value.size(); // validate matrix

          if (ms.length !== 1 || ms[0] !== n) {
            // number of values in array must be n
            throw new Error('Invalid matrix length');
          } // define function


          _value = function _value(i) {
            // return value @ i
            return value.get([i]);
          };
        } else {
          // define function
          _value = function _value() {
            // return value
            return value;
          };
        } // create arrays


        var values = [];
        var index = [];
        var ptr = []; // loop items

        for (var j = 0; j < columns; j++) {
          // number of rows with value
          ptr.push(values.length); // diagonal index

          var i = j - kSuper; // check we need to set diagonal value

          if (i >= 0 && i < n) {
            // get value @ i
            var v = _value(i); // check for zero


            if (!eq(v, zero)) {
              // column
              index.push(i + kSub); // add value

              values.push(v);
            }
          }
        } // last value should be number of values


        ptr.push(values.length); // create SparseMatrix

        return new SparseMatrix({
          values,
          index,
          ptr,
          size: [rows, columns]
        });
      };
      /**
       * Swap rows i and j in Matrix.
       *
       * @memberof SparseMatrix
       * @param {number} i       Matrix row index 1
       * @param {number} j       Matrix row index 2
       *
       * @return {Matrix}        The matrix reference
       */


      SparseMatrix.prototype.swapRows = function (i, j) {
        // check index
        if (!isNumber(i) || !isInteger$1(i) || !isNumber(j) || !isInteger$1(j)) {
          throw new Error('Row index must be positive integers');
        } // check dimensions


        if (this._size.length !== 2) {
          throw new Error('Only two dimensional matrix is supported');
        } // validate index


        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[0]); // swap rows

        SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance


        return this;
      };
      /**
       * Loop rows with data in column j.
       *
       * @param {number} j            Column
       * @param {Array} values        Matrix values
       * @param {Array} index         Matrix row indeces
       * @param {Array} ptr           Matrix column pointers
       * @param {Function} callback   Callback function invoked for every row in column j
       */


      SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
        // indeces for column j
        var k0 = ptr[j];
        var k1 = ptr[j + 1]; // loop

        for (var k = k0; k < k1; k++) {
          // invoke callback
          callback(index[k], values[k]);
        }
      };
      /**
       * Swap rows x and y in Sparse Matrix data structures.
       *
       * @param {number} x         Matrix row index 1
       * @param {number} y         Matrix row index 2
       * @param {number} columns   Number of columns in matrix
       * @param {Array} values     Matrix values
       * @param {Array} index      Matrix row indeces
       * @param {Array} ptr        Matrix column pointers
       */


      SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
        // loop columns
        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1]; // find value index @ x

          var kx = _getValueIndex(x, k0, k1, index); // find value index @ x


          var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix


          if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
            // swap values (check for pattern matrix)
            if (values) {
              var v = values[kx];
              values[kx] = values[ky];
              values[ky] = v;
            } // next column


            continue;
          } // check x row exist & no y row


          if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
            // value @ x (check for pattern matrix)
            var vx = values ? values[kx] : undefined; // insert value @ y

            index.splice(ky, 0, y);

            if (values) {
              values.splice(ky, 0, vx);
            } // remove value @ x (adjust array index if needed)


            index.splice(ky <= kx ? kx + 1 : kx, 1);

            if (values) {
              values.splice(ky <= kx ? kx + 1 : kx, 1);
            } // next column


            continue;
          } // check y row exist & no x row


          if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
            // value @ y (check for pattern matrix)
            var vy = values ? values[ky] : undefined; // insert value @ x

            index.splice(kx, 0, x);

            if (values) {
              values.splice(kx, 0, vy);
            } // remove value @ y (adjust array index if needed)


            index.splice(kx <= ky ? ky + 1 : ky, 1);

            if (values) {
              values.splice(kx <= ky ? ky + 1 : ky, 1);
            }
          }
        }
      };

      return SparseMatrix;
    }, {
      isClass: true
    });

    var name$4k = 'number';
    var dependencies$4k = ['typed'];
    /**
     * Separates the radix, integer part, and fractional part of a non decimal number string
     * @param {string} input string to parse
     * @returns {object} the parts of the string or null if not a valid input
     */

    function getNonDecimalNumberParts(input) {
      var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\.([0-9a-fA-F]*)/);

      if (nonDecimalWithRadixMatch) {
        var radix = {
          '0b': 2,
          '0o': 8,
          '0x': 16
        }[nonDecimalWithRadixMatch[1]];
        var integerPart = nonDecimalWithRadixMatch[2];
        var fractionalPart = nonDecimalWithRadixMatch[3];
        return {
          input,
          radix,
          integerPart,
          fractionalPart
        };
      } else {
        return null;
      }
    }
    /**
     * Makes a number from a radix, and integer part, and a fractional part
     * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)
     * @returns {number} the number
     */


    function makeNumberFromNonDecimalParts(parts) {
      var n = parseInt(parts.integerPart, parts.radix);
      var f = 0;

      for (var i = 0; i < parts.fractionalPart.length; i++) {
        var digitValue = parseInt(parts.fractionalPart[i], parts.radix);
        f += digitValue / Math.pow(parts.radix, i + 1);
      }

      var result = n + f;

      if (isNaN(result)) {
        throw new SyntaxError('String "' + parts.input + '" is no valid number');
      }

      return result;
    }

    var createNumber = /* #__PURE__ */factory(name$4k, dependencies$4k, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Create a number or convert a string, boolean, or unit to a number.
       * When value is a matrix, all elements will be converted to number.
       *
       * Syntax:
       *
       *    math.number(value)
       *    math.number(unit, valuelessUnit)
       *
       * Examples:
       *
       *    math.number(2)                         // returns number 2
       *    math.number('7.2')                     // returns number 7.2
       *    math.number(true)                      // returns number 1
       *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
       *    math.number(math.unit('52cm'), 'm')    // returns 0.52
       *
       * See also:
       *
       *    bignumber, boolean, complex, index, matrix, string, unit
       *
       * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
       * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
       * @return {number | Array | Matrix} The created number
       */
      var number = typed('number', {
        '': function _() {
          return 0;
        },
        number: function number(x) {
          return x;
        },
        string: function string(x) {
          if (x === 'NaN') return NaN;
          var nonDecimalNumberParts = getNonDecimalNumberParts(x);

          if (nonDecimalNumberParts) {
            return makeNumberFromNonDecimalParts(nonDecimalNumberParts);
          }

          var size = 0;
          var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);

          if (wordSizeSuffixMatch) {
            // x includes a size suffix like 0xffffi32, so we extract
            // the suffix and remove it from x
            size = Number(wordSizeSuffixMatch[2]);
            x = wordSizeSuffixMatch[1];
          }

          var num = Number(x);

          if (isNaN(num)) {
            throw new SyntaxError('String "' + x + '" is no valid number');
          }

          if (wordSizeSuffixMatch) {
            // x is a signed bin, oct, or hex literal
            // num is the value of string x if x is interpreted as unsigned
            if (num > 2 ** size - 1) {
              // literal is too large for size suffix
              throw new SyntaxError("String \"".concat(x, "\" is out of range"));
            } // check if the bit at index size - 1 is set and if so do the twos complement


            if (num >= 2 ** (size - 1)) {
              num = num - 2 ** size;
            }
          }

          return num;
        },
        BigNumber: function BigNumber(x) {
          return x.toNumber();
        },
        Fraction: function Fraction(x) {
          return x.valueOf();
        },
        Unit: function Unit(x) {
          throw new Error('Second argument with valueless unit expected');
        },
        null: function _null(x) {
          return 0;
        },
        'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
          return unit.toNumber(valuelessUnit);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      }); // reviver function to parse a JSON object like:
      //
      //     {"mathjs":"number","value":"2.3"}
      //
      // into a number 2.3

      number.fromJSON = function (json) {
        return parseFloat(json.value);
      };

      return number;
    });

    var name$4j = 'string';
    var dependencies$4j = ['typed'];
    var createString = /* #__PURE__ */factory(name$4j, dependencies$4j, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Create a string or convert any object into a string.
       * Elements of Arrays and Matrices are processed element wise.
       *
       * Syntax:
       *
       *    math.string(value)
       *
       * Examples:
       *
       *    math.string(4.2)               // returns string '4.2'
       *    math.string(math.complex(3, 2) // returns string '3 + 2i'
       *
       *    const u = math.unit(5, 'km')
       *    math.string(u.to('m'))         // returns string '5000 m'
       *
       *    math.string([true, false])     // returns ['true', 'false']
       *
       * See also:
       *
       *    bignumber, boolean, complex, index, matrix, number, unit
       *
       * @param {* | Array | Matrix | null} [value]  A value to convert to a string
       * @return {string | Array | Matrix} The created string
       */
      return typed(name$4j, {
        '': function _() {
          return '';
        },
        number: format$3,
        null: function _null(x) {
          return 'null';
        },
        boolean: function boolean(x) {
          return x + '';
        },
        string: function string(x) {
          return x;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        },
        any: function any(x) {
          return String(x);
        }
      });
    });

    var name$4i = 'boolean';
    var dependencies$4i = ['typed'];
    var createBoolean = /* #__PURE__ */factory(name$4i, dependencies$4i, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Create a boolean or convert a string or number to a boolean.
       * In case of a number, `true` is returned for non-zero numbers, and `false` in
       * case of zero.
       * Strings can be `'true'` or `'false'`, or can contain a number.
       * When value is a matrix, all elements will be converted to boolean.
       *
       * Syntax:
       *
       *    math.boolean(x)
       *
       * Examples:
       *
       *    math.boolean(0)     // returns false
       *    math.boolean(1)     // returns true
       *    math.boolean(-3)     // returns true
       *    math.boolean('true')     // returns true
       *    math.boolean('false')     // returns false
       *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]
       *
       * See also:
       *
       *    bignumber, complex, index, matrix, string, unit
       *
       * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
       * @return {boolean | Array | Matrix} The boolean value
       */
      return typed(name$4i, {
        '': function _() {
          return false;
        },
        boolean: function boolean(x) {
          return x;
        },
        number: function number(x) {
          return !!x;
        },
        null: function _null(x) {
          return false;
        },
        BigNumber: function BigNumber(x) {
          return !x.isZero();
        },
        string: function string(x) {
          // try case insensitive
          var lcase = x.toLowerCase();

          if (lcase === 'true') {
            return true;
          } else if (lcase === 'false') {
            return false;
          } // test whether value is a valid number


          var num = Number(x);

          if (x !== '' && !isNaN(num)) {
            return !!num;
          }

          throw new Error('Cannot convert "' + x + '" to a boolean');
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$4h = 'bignumber';
    var dependencies$4h = ['typed', 'BigNumber'];
    var createBignumber = /* #__PURE__ */factory(name$4h, dependencies$4h, _ref => {
      var {
        typed,
        BigNumber
      } = _ref;

      /**
       * Create a BigNumber, which can store numbers with arbitrary precision.
       * When a matrix is provided, all elements will be converted to BigNumber.
       *
       * Syntax:
       *
       *    math.bignumber(x)
       *
       * Examples:
       *
       *    0.1 + 0.2                                  // returns number 0.30000000000000004
       *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
       *
       *
       *    7.2e500                                    // returns number Infinity
       *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
       *
       * See also:
       *
       *    boolean, complex, index, matrix, string, unit
       *
       * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
       *                                                    0 by default.
       * @returns {BigNumber} The created bignumber
       */
      return typed('bignumber', {
        '': function _() {
          return new BigNumber(0);
        },
        number: function number(x) {
          // convert to string to prevent errors in case of >15 digits
          return new BigNumber(x + '');
        },
        string: function string(x) {
          var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);

          if (wordSizeSuffixMatch) {
            // x has a word size suffix
            var size = wordSizeSuffixMatch[2];
            var n = BigNumber(wordSizeSuffixMatch[1]);
            var twoPowSize = new BigNumber(2).pow(Number(size));

            if (n.gt(twoPowSize.sub(1))) {
              throw new SyntaxError("String \"".concat(x, "\" is out of range"));
            }

            var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);

            if (n.gte(twoPowSizeSubOne)) {
              return n.sub(twoPowSize);
            } else {
              return n;
            }
          }

          return new BigNumber(x);
        },
        BigNumber: function BigNumber(x) {
          // we assume a BigNumber is immutable
          return x;
        },
        Fraction: function Fraction(x) {
          return new BigNumber(x.n).div(x.d).times(x.s);
        },
        null: function _null(x) {
          return new BigNumber(0);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$4g = 'complex';
    var dependencies$4g = ['typed', 'Complex'];
    var createComplex = /* #__PURE__ */factory(name$4g, dependencies$4g, _ref => {
      var {
        typed,
        Complex
      } = _ref;

      /**
       * Create a complex value or convert a value to a complex value.
       *
       * Syntax:
       *
       *     math.complex()                           // creates a complex value with zero
       *                                              // as real and imaginary part.
       *     math.complex(re : number, im : string)   // creates a complex value with provided
       *                                              // values for real and imaginary part.
       *     math.complex(re : number)                // creates a complex value with provided
       *                                              // real value and zero imaginary part.
       *     math.complex(complex : Complex)          // clones the provided complex value.
       *     math.complex(arg : string)               // parses a string into a complex value.
       *     math.complex(array : Array)              // converts the elements of the array
       *                                              // or matrix element wise into a
       *                                              // complex value.
       *     math.complex({re: number, im: number})   // creates a complex value with provided
       *                                              // values for real an imaginary part.
       *     math.complex({r: number, phi: number})   // creates a complex value with provided
       *                                              // polar coordinates
       *
       * Examples:
       *
       *    const a = math.complex(3, -4)     // a = Complex 3 - 4i
       *    a.re = 5                          // a = Complex 5 - 4i
       *    const i = a.im                    // Number -4
       *    const b = math.complex('2 + 6i')  // Complex 2 + 6i
       *    const c = math.complex()          // Complex 0 + 0i
       *    const d = math.add(a, b)          // Complex 5 + 2i
       *
       * See also:
       *
       *    bignumber, boolean, index, matrix, number, string, unit
       *
       * @param {* | Array | Matrix} [args]
       *            Arguments specifying the real and imaginary part of the complex number
       * @return {Complex | Array | Matrix} Returns a complex value
       */
      return typed('complex', {
        '': function _() {
          return Complex.ZERO;
        },
        number: function number(x) {
          return new Complex(x, 0);
        },
        'number, number': function numberNumber(re, im) {
          return new Complex(re, im);
        },
        // TODO: this signature should be redundant
        'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
          return new Complex(re.toNumber(), im.toNumber());
        },
        Fraction: function Fraction(x) {
          return new Complex(x.valueOf(), 0);
        },
        Complex: function Complex(x) {
          return x.clone();
        },
        string: function string(x) {
          return Complex(x); // for example '2 + 3i'
        },
        null: function _null(x) {
          return Complex(0);
        },
        Object: function Object(x) {
          if ('re' in x && 'im' in x) {
            return new Complex(x.re, x.im);
          }

          if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {
            return new Complex(x);
          }

          throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$4f = 'fraction';
    var dependencies$4f = ['typed', 'Fraction'];
    var createFraction = /* #__PURE__ */factory(name$4f, dependencies$4f, _ref => {
      var {
        typed,
        Fraction
      } = _ref;

      /**
       * Create a fraction or convert a value to a fraction.
       *
       * With one numeric argument, produces the closest rational approximation to the
       * input.
       * With two arguments, the first is the numerator and the second is the denominator,
       * and creates the corresponding fraction. Both numerator and denominator must be
       * integers.
       * With one object argument, looks for the integer numerator as the value of property
       * 'n' and the integer denominator as the value of property 'd'.
       * With a matrix argument, creates a matrix of the same shape with entries
       * converted into fractions.
       *
       * Syntax:
       *     math.fraction(value)
       *     math.fraction(numerator, denominator)
       *     math.fraction({n: numerator, d: denominator})
       *     math.fraction(matrix: Array | Matrix)
       *
       * Examples:
       *
       *     math.fraction(6.283)             // returns Fraction 6283/1000
       *     math.fraction(1, 3)              // returns Fraction 1/3
       *     math.fraction('2/3')             // returns Fraction 2/3
       *     math.fraction({n: 2, d: 3})      // returns Fraction 2/3
       *     math.fraction([0.2, 0.25, 1.25]) // returns Array [1/5, 1/4, 5/4]
       *     math.fraction(4, 5.1)            // throws Error: Parameters must be integer
       *
       * See also:
       *
       *    bignumber, number, string, unit
       *
       * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
       *            Arguments specifying the value, or numerator and denominator of
       *            the fraction
       * @return {Fraction | Array | Matrix} Returns a fraction
       */
      return typed('fraction', {
        number: function number(x) {
          if (!isFinite(x) || isNaN(x)) {
            throw new Error(x + ' cannot be represented as a fraction');
          }

          return new Fraction(x);
        },
        string: function string(x) {
          return new Fraction(x);
        },
        'number, number': function numberNumber(numerator, denominator) {
          return new Fraction(numerator, denominator);
        },
        null: function _null(x) {
          return new Fraction(0);
        },
        BigNumber: function BigNumber(x) {
          return new Fraction(x.toString());
        },
        Fraction: function Fraction(x) {
          return x; // fractions are immutable
        },
        Object: function Object(x) {
          return new Fraction(x);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$4e = 'matrix';
    var dependencies$4e = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];
    var createMatrix = /* #__PURE__ */factory(name$4e, dependencies$4e, _ref => {
      var {
        typed,
        Matrix,
        DenseMatrix,
        SparseMatrix
      } = _ref;

      /**
       * Create a Matrix. The function creates a new `math.Matrix` object from
       * an `Array`. A Matrix has utility functions to manipulate the data in the
       * matrix, like getting the size and getting or setting values in the matrix.
       * Supported storage formats are 'dense' and 'sparse'.
       *
       * Syntax:
       *
       *    math.matrix()                         // creates an empty matrix using default storage format (dense).
       *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
       *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
       *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
       *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
       *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
       *
       * Examples:
       *
       *    let m = math.matrix([[1, 2], [3, 4]])
       *    m.size()                        // Array [2, 2]
       *    m.resize([3, 2], 5)
       *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
       *    m.get([1, 0])                    // number 3
       *
       * See also:
       *
       *    bignumber, boolean, complex, index, number, string, unit, sparse
       *
       * @param {Array | Matrix} [data]    A multi dimensional array
       * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`
       * @param {string} [datatype]        Type of the values
       *
       * @return {Matrix} The created matrix
       */
      return typed(name$4e, {
        '': function _() {
          return _create([]);
        },
        string: function string(format) {
          return _create([], format);
        },
        'string, string': function stringString(format, datatype) {
          return _create([], format, datatype);
        },
        Array: function Array(data) {
          return _create(data);
        },
        Matrix: function Matrix(data) {
          return _create(data, data.storage());
        },
        'Array | Matrix, string': _create,
        'Array | Matrix, string, string': _create
      });
      /**
       * Create a new Matrix with given storage format
       * @param {Array} data
       * @param {string} [format]
       * @param {string} [datatype]
       * @returns {Matrix} Returns a new Matrix
       * @private
       */

      function _create(data, format, datatype) {
        // get storage format constructor
        if (format === 'dense' || format === 'default' || format === undefined) {
          return new DenseMatrix(data, datatype);
        }

        if (format === 'sparse') {
          return new SparseMatrix(data, datatype);
        }

        throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');
      }
    });

    var name$4d = 'matrixFromFunction';
    var dependencies$4d = ['typed', 'matrix', 'isZero'];
    var createMatrixFromFunction = /* #__PURE__ */factory(name$4d, dependencies$4d, _ref => {
      var {
        typed,
        matrix,
        isZero
      } = _ref;

      /**
       * Create a matrix by evaluating a generating function at each index.
       * The simplest overload returns a multi-dimensional array as long as `size` is an array.
       * Passing `size` as a Matrix or specifying a `format` will result in returning a Matrix.
       *
       * Syntax:
       *
       *    math.matrixFromFunction(size, fn)
       *    math.matrixFromFunction(size, fn, format)
       *    math.matrixFromFunction(size, fn, format, datatype)
       *    math.matrixFromFunction(size, format, fn)
       *    math.matrixFromFunction(size, format, datatype, fn)
       *
       * Examples:
       *
       *    math.matrixFromFunction([3,3], i => i[0] - i[1]) // an antisymmetric matrix
       *    math.matrixFromFunction([100, 100], 'sparse', i => i[0] - i[1] === 1 ? 4 : 0) // a sparse subdiagonal matrix
       *    math.matrixFromFunction([5], i => math.random()) // a random vector
       *
       * See also:
       *
       *    matrix, zeros
       *
       * @param {Array | Matrix} size   The size of the matrix to be created
       * @param {function} fn           Callback function invoked for every entry in the matrix
       * @param {string} [format]       The Matrix storage format, either `'dense'` or `'sparse'`
       * @param {string} [datatype]     Type of the values
       * @return {Array | Matrix} Returns the created matrix
       */
      return typed(name$4d, {
        'Array | Matrix, function, string, string': function ArrayMatrixFunctionStringString(size, fn, format, datatype) {
          return _create(size, fn, format, datatype);
        },
        'Array | Matrix, function, string': function ArrayMatrixFunctionString(size, fn, format) {
          return _create(size, fn, format);
        },
        'Matrix, function': function MatrixFunction(size, fn) {
          return _create(size, fn, 'dense');
        },
        'Array, function': function ArrayFunction(size, fn) {
          return _create(size, fn, 'dense').toArray();
        },
        'Array | Matrix, string, function': function ArrayMatrixStringFunction(size, format, fn) {
          return _create(size, fn, format);
        },
        'Array | Matrix, string, string, function': function ArrayMatrixStringStringFunction(size, format, datatype, fn) {
          return _create(size, fn, format, datatype);
        }
      });

      function _create(size, fn, format, datatype) {
        var m;

        if (datatype !== undefined) {
          m = matrix(format, datatype);
        } else {
          m = matrix(format);
        }

        m.resize(size);
        m.forEach(function (_, index) {
          var val = fn(index);
          if (isZero(val)) return;
          m.set(index, val);
        });
        return m;
      }
    });

    var name$4c = 'matrixFromRows';
    var dependencies$4c = ['typed', 'matrix', 'flatten', 'size'];
    var createMatrixFromRows = /* #__PURE__ */factory(name$4c, dependencies$4c, _ref => {
      var {
        typed,
        matrix,
        flatten,
        size
      } = _ref;

      /**
       * Create a dense matrix from vectors as individual rows.
       * If you pass column vectors, they will be transposed (but not conjugated!)
       *
       * Syntax:
       *
       *    math.matrixFromRows(...arr)
       *    math.matrixFromRows(row1, row2)
       *    math.matrixFromRows(row1, row2, row3)
       *
       * Examples:
       *
       *    math.matrixFromRows([1, 2, 3], [[4],[5],[6]])
       *    math.matrixFromRows(...vectors)
       *
       * See also:
       *
       *    matrix, matrixFromColumns, matrixFromFunction, zeros
       *
       * @param {... Array | Matrix} rows  Multiple rows
       * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned
       */
      return typed(name$4c, {
        '...Array': function Array(arr) {
          return _createArray(arr);
        },
        '...Matrix': function Matrix(arr) {
          return matrix(_createArray(arr.map(m => m.toArray())));
        } // TODO implement this properly for SparseMatrix

      });

      function _createArray(arr) {
        if (arr.length === 0) throw new TypeError('At least one row is needed to construct a matrix.');
        var N = checkVectorTypeAndReturnLength(arr[0]);
        var result = [];

        for (var row of arr) {
          var rowLength = checkVectorTypeAndReturnLength(row);

          if (rowLength !== N) {
            throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (rowLength | 0));
          }

          result.push(flatten(row));
        }

        return result;
      }

      function checkVectorTypeAndReturnLength(vec) {
        var s = size(vec);

        if (s.length === 1) {
          // 1D vector
          return s[0];
        } else if (s.length === 2) {
          // 2D vector
          if (s[0] === 1) {
            // row vector
            return s[1];
          } else if (s[1] === 1) {
            // col vector
            return s[0];
          } else {
            throw new TypeError('At least one of the arguments is not a vector.');
          }
        } else {
          throw new TypeError('Only one- or two-dimensional vectors are supported.');
        }
      }
    });

    var name$4b = 'matrixFromColumns';
    var dependencies$4b = ['typed', 'matrix', 'flatten', 'size'];
    var createMatrixFromColumns = /* #__PURE__ */factory(name$4b, dependencies$4b, _ref => {
      var {
        typed,
        matrix,
        flatten,
        size
      } = _ref;

      /**
       * Create a dense matrix from vectors as individual columns.
       * If you pass row vectors, they will be transposed (but not conjugated!)
       *
       * Syntax:
       *
       *    math.matrixFromColumns(...arr)
       *    math.matrixFromColumns(col1, col2)
       *    math.matrixFromColumns(col1, col2, col3)
       *
       * Examples:
       *
       *    math.matrixFromColumns([1, 2, 3], [[4],[5],[6]])
       *    math.matrixFromColumns(...vectors)
       *
       * See also:
       *
       *    matrix, matrixFromRows, matrixFromFunction, zeros
       *
       * @param {... Array | Matrix} cols Multiple columns
       * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned
       */
      return typed(name$4b, {
        '...Array': function Array(arr) {
          return _createArray(arr);
        },
        '...Matrix': function Matrix(arr) {
          return matrix(_createArray(arr.map(m => m.toArray())));
        } // TODO implement this properly for SparseMatrix

      });

      function _createArray(arr) {
        if (arr.length === 0) throw new TypeError('At least one column is needed to construct a matrix.');
        var N = checkVectorTypeAndReturnLength(arr[0]); // create an array with empty rows

        var result = [];

        for (var i = 0; i < N; i++) {
          result[i] = [];
        } // loop columns


        for (var col of arr) {
          var colLength = checkVectorTypeAndReturnLength(col);

          if (colLength !== N) {
            throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (colLength | 0));
          }

          var f = flatten(col); // push a value to each row

          for (var _i = 0; _i < N; _i++) {
            result[_i].push(f[_i]);
          }
        }

        return result;
      }

      function checkVectorTypeAndReturnLength(vec) {
        var s = size(vec);

        if (s.length === 1) {
          // 1D vector
          return s[0];
        } else if (s.length === 2) {
          // 2D vector
          if (s[0] === 1) {
            // row vector
            return s[1];
          } else if (s[1] === 1) {
            // col vector
            return s[0];
          } else {
            throw new TypeError('At least one of the arguments is not a vector.');
          }
        } else {
          throw new TypeError('Only one- or two-dimensional vectors are supported.');
        }
      }
    });

    var name$4a = 'splitUnit';
    var dependencies$4a = ['typed'];
    var createSplitUnit = /* #__PURE__ */factory(name$4a, dependencies$4a, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Split a unit in an array of units whose sum is equal to the original unit.
       *
       * Syntax:
       *
       *     splitUnit(unit: Unit, parts: Array.<Unit>)
       *
       * Example:
       *
       *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])
       *     // [ 3 feet, 3.3700787401575 inch ]
       *
       * See also:
       *
       *     unit
       *
       * @param {Array} [parts] An array of strings or valueless units.
       * @return {Array} An array of units.
       */
      return typed(name$4a, {
        'Unit, Array': function UnitArray(unit, parts) {
          return unit.splitUnit(parts);
        }
      });
    });

    var name$49 = 'unaryMinus';
    var dependencies$49 = ['typed'];
    var createUnaryMinus = /* #__PURE__ */factory(name$49, dependencies$49, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Inverse the sign of a value, apply a unary minus operation.
       *
       * For matrices, the function is evaluated element wise. Boolean values and
       * strings will be converted to a number. For complex numbers, both real and
       * complex value are inverted.
       *
       * Syntax:
       *
       *    math.unaryMinus(x)
       *
       * Examples:
       *
       *    math.unaryMinus(3.5)      // returns -3.5
       *    math.unaryMinus(-4.2)     // returns 4.2
       *
       * See also:
       *
       *    add, subtract, unaryPlus
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
       */
      return typed(name$49, {
        number: unaryMinusNumber,
        Complex: function Complex(x) {
          return x.neg();
        },
        BigNumber: function BigNumber(x) {
          return x.neg();
        },
        Fraction: function Fraction(x) {
          return x.neg();
        },
        Unit: function Unit(x) {
          var res = x.clone();
          res.value = this(x.value);
          return res;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since unaryMinus(0) = 0
          return deepMap(x, this);
        } // TODO: add support for string

      });
    });

    var name$48 = 'unaryPlus';
    var dependencies$48 = ['typed', 'config', 'BigNumber'];
    var createUnaryPlus = /* #__PURE__ */factory(name$48, dependencies$48, _ref => {
      var {
        typed,
        config,
        BigNumber
      } = _ref;

      /**
       * Unary plus operation.
       * Boolean values and strings will be converted to a number, numeric values will be returned as is.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.unaryPlus(x)
       *
       * Examples:
       *
       *    math.unaryPlus(3.5)      // returns 3.5
       *    math.unaryPlus(1)     // returns 1
       *
       * See also:
       *
       *    unaryMinus, add, subtract
       *
       * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
       *            Input value
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
       *            Returns the input value when numeric, converts to a number when input is non-numeric.
       */
      return typed(name$48, {
        number: unaryPlusNumber,
        Complex: function Complex(x) {
          return x; // complex numbers are immutable
        },
        BigNumber: function BigNumber(x) {
          return x; // bignumbers are immutable
        },
        Fraction: function Fraction(x) {
          return x; // fractions are immutable
        },
        Unit: function Unit(x) {
          return x.clone();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since unaryPlus(0) = 0
          return deepMap(x, this);
        },
        'boolean | string': function booleanString(x) {
          // convert to a number or bignumber
          return config.number === 'BigNumber' ? new BigNumber(+x) : +x;
        }
      });
    });

    var name$47 = 'abs';
    var dependencies$47 = ['typed'];
    var createAbs = /* #__PURE__ */factory(name$47, dependencies$47, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Calculate the absolute value of a number. For matrices, the function is
       * evaluated element wise.
       *
       * Syntax:
       *
       *    math.abs(x)
       *
       * Examples:
       *
       *    math.abs(3.5)                // returns number 3.5
       *    math.abs(-4.2)               // returns number 4.2
       *
       *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
       *
       * See also:
       *
       *    sign
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
       *            A number or matrix for which to get the absolute value
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
       *            Absolute value of `x`
       */
      return typed(name$47, {
        number: absNumber,
        Complex: function Complex(x) {
          return x.abs();
        },
        BigNumber: function BigNumber(x) {
          return x.abs();
        },
        Fraction: function Fraction(x) {
          return x.abs();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since abs(0) = 0
          return deepMap(x, this);
        },
        Unit: function Unit(x) {
          return x.abs();
        }
      });
    });

    var name$46 = 'apply';
    var dependencies$46 = ['typed', 'isInteger'];
    var createApply = /* #__PURE__ */factory(name$46, dependencies$46, _ref => {
      var {
        typed,
        isInteger
      } = _ref;

      /**
       * Apply a function that maps an array to a scalar
       * along a given axis of a matrix or array.
       * Returns a new matrix or array with one less dimension than the input.
       *
       * Syntax:
       *
       *     math.apply(A, dim, callback)
       *
       * Where:
       *
       * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
       *
       * Examples:
       *
       *    const A = [[1, 2], [3, 4]]
       *    const sum = math.sum
       *
       *    math.apply(A, 0, sum)             // returns [4, 6]
       *    math.apply(A, 1, sum)             // returns [3, 7]
       *
       * See also:
       *
       *    map, filter, forEach
       *
       * @param {Array | Matrix} array   The input Matrix
       * @param {number} dim             The dimension along which the callback is applied
       * @param {Function} callback      The callback function that is applied. This Function
       *                                 should take an array or 1-d matrix as an input and
       *                                 return a number.
       * @return {Array | Matrix} res    The residual matrix with the function applied over some dimension.
       */
      return typed(name$46, {
        'Array | Matrix, number | BigNumber, function': function ArrayMatrixNumberBigNumberFunction(mat, dim, callback) {
          if (!isInteger(dim)) {
            throw new TypeError('Integer number expected for dimension');
          }

          var size = Array.isArray(mat) ? arraySize(mat) : mat.size();

          if (dim < 0 || dim >= size.length) {
            throw new IndexError(dim, size.length);
          }

          if (isMatrix(mat)) {
            return mat.create(_apply(mat.valueOf(), dim, callback));
          } else {
            return _apply(mat, dim, callback);
          }
        }
      });
    });
    /**
     * Recursively reduce a matrix
     * @param {Array} mat
     * @param {number} dim
     * @param {Function} callback
     * @returns {Array} ret
     * @private
     */

    function _apply(mat, dim, callback) {
      var i, ret, tran;

      if (dim <= 0) {
        if (!Array.isArray(mat[0])) {
          return callback(mat);
        } else {
          tran = _switch(mat);
          ret = [];

          for (i = 0; i < tran.length; i++) {
            ret[i] = _apply(tran[i], dim - 1, callback);
          }

          return ret;
        }
      } else {
        ret = [];

        for (i = 0; i < mat.length; i++) {
          ret[i] = _apply(mat[i], dim - 1, callback);
        }

        return ret;
      }
    }
    /**
     * Transpose a matrix
     * @param {Array} mat
     * @returns {Array} ret
     * @private
     */


    function _switch(mat) {
      var I = mat.length;
      var J = mat[0].length;
      var i, j;
      var ret = [];

      for (j = 0; j < J; j++) {
        var tmp = [];

        for (i = 0; i < I; i++) {
          tmp.push(mat[i][j]);
        }

        ret.push(tmp);
      }

      return ret;
    }

    var name$45 = 'addScalar';
    var dependencies$45 = ['typed'];
    var createAddScalar = /* #__PURE__ */factory(name$45, dependencies$45, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Add two scalar values, `x + y`.
       * This function is meant for internal use: it is used by the public function
       * `add`
       *
       * This function does not support collections (Array or Matrix).
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
       * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
       * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`
       * @private
       */
      return typed(name$45, {
        'number, number': addNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.add(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.plus(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.add(y);
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');
          if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');
          if (!x.equalBase(y)) throw new Error('Units do not match');
          var res = x.clone();
          res.value = this(res.value, y.value);
          res.fixPrefix = false;
          return res;
        }
      });
    });

    var name$44 = 'cbrt';
    var dependencies$44 = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];
    var createCbrt = /* #__PURE__ */factory(name$44, dependencies$44, _ref => {
      var {
        config,
        typed,
        isNegative,
        unaryMinus,
        matrix,
        Complex,
        BigNumber,
        Fraction
      } = _ref;

      /**
       * Calculate the cubic root of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.cbrt(x)
       *    math.cbrt(x, allRoots)
       *
       * Examples:
       *
       *    math.cbrt(27)                  // returns 3
       *    math.cube(3)                   // returns 27
       *    math.cbrt(-64)                 // returns -4
       *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m
       *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]
       *
       *    const x = math.complex('8i')
       *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i
       *    math.cbrt(x, true)             // returns Matrix [
       *                                    //    1.7320508075689 + i
       *                                    //   -1.7320508075689 + i
       *                                    //   -2i
       *                                    // ]
       *
       * See also:
       *
       *    square, sqrt, cube
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
       *            Value for which to calculate the cubic root.
       * @param {boolean} [allRoots]  Optional, false by default. Only applicable
       *            when `x` is a number or complex number. If true, all complex
       *            roots are returned, if false (default) the principal root is
       *            returned.
       * @return {number | BigNumber | Complex | Unit | Array | Matrix}
       *            Returns the cubic root of `x`
       */
      return typed(name$44, {
        number: cbrtNumber,
        // note: signature 'number, boolean' is also supported,
        //       created by typed as it knows how to convert number to Complex
        Complex: _cbrtComplex,
        'Complex, boolean': _cbrtComplex,
        BigNumber: function BigNumber(x) {
          return x.cbrt();
        },
        Unit: _cbrtUnit,
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since cbrt(0) = 0
          return deepMap(x, this);
        }
      });
      /**
       * Calculate the cubic root for a complex number
       * @param {Complex} x
       * @param {boolean} [allRoots]   If true, the function will return an array
       *                               with all three roots. If false or undefined,
       *                               the principal root is returned.
       * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
       * @private
       */

      function _cbrtComplex(x, allRoots) {
        // https://www.wikiwand.com/en/Cube_root#/Complex_numbers
        var arg3 = x.arg() / 3;
        var abs = x.abs(); // principal root:

        var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());

        if (allRoots) {
          var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];
          return config.matrix === 'Array' ? all : matrix(all);
        } else {
          return principal;
        }
      }
      /**
       * Calculate the cubic root for a Unit
       * @param {Unit} x
       * @return {Unit} Returns the cubic root of x
       * @private
       */


      function _cbrtUnit(x) {
        if (x.value && isComplex(x.value)) {
          var result = x.clone();
          result.value = 1.0;
          result = result.pow(1.0 / 3); // Compute the units

          result.value = _cbrtComplex(x.value); // Compute the value

          return result;
        } else {
          var negate = isNegative(x.value);

          if (negate) {
            x.value = unaryMinus(x.value);
          } // TODO: create a helper function for this


          var third;

          if (isBigNumber(x.value)) {
            third = new BigNumber(1).div(3);
          } else if (isFraction(x.value)) {
            third = new Fraction(1, 3);
          } else {
            third = 1 / 3;
          }

          var _result = x.pow(third);

          if (negate) {
            _result.value = unaryMinus(_result.value);
          }

          return _result;
        }
      }
    });

    var name$43 = 'algorithm11';
    var dependencies$43 = ['typed', 'equalScalar'];
    var createAlgorithm11 = /* #__PURE__ */factory(name$43, dependencies$43, _ref => {
      var {
        typed,
        equalScalar
      } = _ref;

      /**
       * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
       * Callback function invoked NZ times (number of nonzero items in S).
       *
       *
       *          ┌  f(Sij, b)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  0          ; otherwise
       *
       *
       * @param {Matrix}   s                 The SparseMatrix instance (S)
       * @param {Scalar}   b                 The Scalar value
       * @param {Function} callback          The f(Aij,b) operation to invoke
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
       */
      return function algorithm11(s, b, callback, inverse) {
        // sparse matrix arrays
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

        if (!avalues) {
          throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string') {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // convert b to the same datatype

          b = typed.convert(b, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = [];
        var cindex = [];
        var cptr = []; // loop columns

        for (var j = 0; j < columns; j++) {
          // initialize ptr
          cptr[j] = cindex.length; // values in j

          for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            var i = aindex[k]; // invoke callback

            var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero

            if (!eq(v, zero)) {
              // push index & value
              cindex.push(i);
              cvalues.push(v);
            }
          }
        } // update ptr


        cptr[columns] = cindex.length; // return sparse matrix

        return s.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$42 = 'algorithm12';
    var dependencies$42 = ['typed', 'DenseMatrix'];
    var createAlgorithm12 = /* #__PURE__ */factory(name$42, dependencies$42, _ref => {
      var {
        typed,
        DenseMatrix
      } = _ref;

      /**
       * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
       * Callback function invoked MxN times.
       *
       *
       *          ┌  f(Sij, b)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  f(0, b)    ; otherwise
       *
       *
       * @param {Matrix}   s                 The SparseMatrix instance (S)
       * @param {Scalar}   b                 The Scalar value
       * @param {Function} callback          The f(Aij,b) operation to invoke
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
       */
      return function algorithm12(s, b, callback, inverse) {
        // sparse matrix arrays
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

        if (!avalues) {
          throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string') {
          // datatype
          dt = adt; // convert b to the same datatype

          b = typed.convert(b, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cdata = []; // workspaces

        var x = []; // marks indicating we have a value in x for a given column

        var w = []; // loop columns

        for (var j = 0; j < columns; j++) {
          // columns mark
          var mark = j + 1; // values in j

          for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            var r = aindex[k]; // update workspace

            x[r] = avalues[k];
            w[r] = mark;
          } // loop rows


          for (var i = 0; i < rows; i++) {
            // initialize C on first column
            if (j === 0) {
              // create row array
              cdata[i] = [];
            } // check sparse matrix has a value @ i,j


            if (w[i] === mark) {
              // invoke callback, update C
              cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
            } else {
              // dense matrix value @ i, j
              cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
            }
          }
        } // return dense matrix


        return new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$41 = 'algorithm14';
    var dependencies$41 = ['typed'];
    var createAlgorithm14 = /* #__PURE__ */factory(name$41, dependencies$41, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
       * Callback function invoked MxN times.
       *
       * C(i,j,...z) = f(Aij..z, b)
       *
       * @param {Matrix}   a                 The DenseMatrix instance (A)
       * @param {Scalar}   b                 The Scalar value
       * @param {Function} callback          The f(Aij..z,b) operation to invoke
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
       */
      return function algorithm14(a, b, callback, inverse) {
        // a arrays
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // datatype

        var dt; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string') {
          // datatype
          dt = adt; // convert b to the same datatype

          b = typed.convert(b, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // populate cdata, iterate through dimensions


        var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix

        return a.createDenseMatrix({
          data: cdata,
          size: clone$1(asize),
          datatype: dt
        });
      }; // recursive function

      function _iterate(f, level, s, n, av, bv, inverse) {
        // initialize array for this level
        var cv = []; // check we reach the last level

        if (level === s.length - 1) {
          // loop arrays in last level
          for (var i = 0; i < n; i++) {
            // invoke callback and store value
            cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
          }
        } else {
          // iterate current level
          for (var j = 0; j < n; j++) {
            // iterate next level
            cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
          }
        }

        return cv;
      }
    });

    var name$40 = 'ceil';
    var dependencies$40 = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
    var createCeilNumber = /* #__PURE__ */factory(name$40, ['typed', 'config', 'round'], _ref => {
      var {
        typed,
        config,
        round
      } = _ref;
      return typed(name$40, {
        number: function number(x) {
          if (nearlyEqual$1(x, round(x), config.epsilon)) {
            return round(x);
          } else {
            return Math.ceil(x);
          }
        },
        'number, number': function numberNumber(x, n) {
          if (nearlyEqual$1(x, round(x, n), config.epsilon)) {
            return round(x, n);
          } else {
            var [number, exponent] = "".concat(x, "e").split('e');
            var result = Math.ceil(Number("".concat(number, "e").concat(Number(exponent) + n)));
            [number, exponent] = "".concat(result, "e").split('e');
            return Number("".concat(number, "e").concat(Number(exponent) - n));
          }
        }
      });
    });
    var createCeil = /* #__PURE__ */factory(name$40, dependencies$40, _ref2 => {
      var {
        typed,
        config,
        round,
        matrix,
        equalScalar,
        zeros,
        DenseMatrix
      } = _ref2;
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      var ceilNumber = createCeilNumber({
        typed,
        config,
        round
      });
      /**
       * Round a value towards plus infinity
       * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.ceil(x)
       *    math.ceil(x, n)
       *
       * Examples:
       *
       *    math.ceil(3.2)               // returns number 4
       *    math.ceil(3.8)               // returns number 4
       *    math.ceil(-4.2)              // returns number -4
       *    math.ceil(-4.7)              // returns number -4
       *
       *    math.ceil(3.212, 2)          // returns number 3.22
       *    math.ceil(3.288, 2)          // returns number 3.29
       *    math.ceil(-4.212, 2)         // returns number -4.21
       *    math.ceil(-4.782, 2)         // returns number -4.78
       *
       *    const c = math.complex(3.24, -2.71)
       *    math.ceil(c)                 // returns Complex 4 - 2i
       *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i
       *
       *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]
       *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]
       *
       * See also:
       *
       *    floor, fix, round
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
       * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
       */

      return typed('ceil', {
        number: ceilNumber.signatures.number,
        'number,number': ceilNumber.signatures['number,number'],
        Complex: function Complex(x) {
          return x.ceil();
        },
        'Complex, number': function ComplexNumber(x, n) {
          return x.ceil(n);
        },
        'Complex, BigNumber': function ComplexBigNumber(x, n) {
          return x.ceil(n.toNumber());
        },
        BigNumber: function BigNumber(x) {
          if (nearlyEqual(x, round(x), config.epsilon)) {
            return round(x);
          } else {
            return x.ceil();
          }
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
          if (nearlyEqual(x, round(x, n), config.epsilon)) {
            return round(x, n);
          } else {
            return x.toDecimalPlaces(n.toNumber(), decimal.ROUND_CEIL);
          }
        },
        Fraction: function Fraction(x) {
          return x.ceil();
        },
        'Fraction, number': function FractionNumber(x, n) {
          return x.ceil(n);
        },
        'Fraction, BigNumber': function FractionBigNumber(x, n) {
          return x.ceil(n.toNumber());
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since ceil(0) = 0
          return deepMap(x, this);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, n) {
          // deep map collection, skip zeros since ceil(0) = 0
          return deepMap(x, i => this(i, n));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, this, false);
        },
        'number | Complex | Fraction | BigNumber, Array': function numberComplexFractionBigNumberArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        },
        'number | Complex | Fraction | BigNumber, Matrix': function numberComplexFractionBigNumberMatrix(x, y) {
          if (equalScalar(x, 0)) return zeros(y.size(), y.storage());

          if (y.storage() === 'dense') {
            return algorithm14(y, x, this, true);
          }

          return algorithm12(y, x, this, true);
        }
      });
    });

    var name$3$ = 'cube';
    var dependencies$3$ = ['typed'];
    var createCube = /* #__PURE__ */factory(name$3$, dependencies$3$, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Compute the cube of a value, `x * x * x`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.cube(x)
       *
       * Examples:
       *
       *    math.cube(2)            // returns number 8
       *    math.pow(2, 3)          // returns number 8
       *    math.cube(4)            // returns number 64
       *    4 * 4 * 4               // returns number 64
       *
       *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]
       *
       * See also:
       *
       *    multiply, square, pow, cbrt
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
       */
      return typed(name$3$, {
        number: cubeNumber,
        Complex: function Complex(x) {
          return x.mul(x).mul(x); // Is faster than pow(x, 3)
        },
        BigNumber: function BigNumber(x) {
          return x.times(x).times(x);
        },
        Fraction: function Fraction(x) {
          return x.pow(3); // Is faster than mul()mul()mul()
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since cube(0) = 0
          return deepMap(x, this);
        },
        Unit: function Unit(x) {
          return x.pow(3);
        }
      });
    });

    var name$3_ = 'exp';
    var dependencies$3_ = ['typed'];
    var createExp = /* #__PURE__ */factory(name$3_, dependencies$3_, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Calculate the exponent of a value.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.exp(x)
       *
       * Examples:
       *
       *    math.exp(2)                  // returns number 7.3890560989306495
       *    math.pow(math.e, 2)          // returns number 7.3890560989306495
       *    math.log(math.exp(2))        // returns number 2
       *
       *    math.exp([1, 2, 3])
       *    // returns Array [
       *    //   2.718281828459045,
       *    //   7.3890560989306495,
       *    //   20.085536923187668
       *    // ]
       *
       * See also:
       *
       *    expm1, log, pow
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
       * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
       */
      return typed(name$3_, {
        number: expNumber,
        Complex: function Complex(x) {
          return x.exp();
        },
        BigNumber: function BigNumber(x) {
          return x.exp();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // TODO: exp(sparse) should return a dense matrix since exp(0)==1
          return deepMap(x, this);
        }
      });
    });

    var name$3Z = 'expm1';
    var dependencies$3Z = ['typed', 'Complex'];
    var createExpm1 = /* #__PURE__ */factory(name$3Z, dependencies$3Z, _ref => {
      var {
        typed,
        Complex: _Complex
      } = _ref;

      /**
       * Calculate the value of subtracting 1 from the exponential value.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.expm1(x)
       *
       * Examples:
       *
       *    math.expm1(2)                      // returns number 6.38905609893065
       *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495
       *    math.log(math.expm1(2) + 1)        // returns number 2
       *
       *    math.expm1([1, 2, 3])
       *    // returns Array [
       *    //   1.718281828459045,
       *    //   6.3890560989306495,
       *    //   19.085536923187668
       *    // ]
       *
       * See also:
       *
       *    exp, log, pow
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1
       * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
       */
      return typed(name$3Z, {
        number: expm1Number,
        Complex: function Complex(x) {
          var r = Math.exp(x.re);
          return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));
        },
        BigNumber: function BigNumber(x) {
          return x.exp().minus(1);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$3Y = 'fix';
    var dependencies$3Y = ['typed', 'Complex', 'matrix', 'ceil', 'floor', 'equalScalar', 'zeros', 'DenseMatrix'];
    var createFixNumber = /* #__PURE__ */factory(name$3Y, ['typed', 'ceil', 'floor'], _ref => {
      var {
        typed,
        ceil,
        floor
      } = _ref;
      return typed(name$3Y, {
        number: function number(x) {
          return x > 0 ? floor(x) : ceil(x);
        },
        'number, number': function numberNumber(x, n) {
          return x > 0 ? floor(x, n) : ceil(x, n);
        }
      });
    });
    var createFix = /* #__PURE__ */factory(name$3Y, dependencies$3Y, _ref2 => {
      var {
        typed,
        Complex: _Complex,
        matrix,
        ceil,
        floor,
        equalScalar,
        zeros,
        DenseMatrix
      } = _ref2;
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      var fixNumber = createFixNumber({
        typed,
        ceil,
        floor
      });
      /**
       * Round a value towards zero.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.fix(x)
       *    math.fix(x,n)
       *
       * Examples:
       *
       *    math.fix(3.2)                // returns number 3
       *    math.fix(3.8)                // returns number 3
       *    math.fix(-4.2)               // returns number -4
       *    math.fix(-4.7)               // returns number -4
       *
       *    math.fix(3.12, 1)                // returns number 3.1
       *    math.fix(3.18, 1)                // returns number 3.1
       *    math.fix(-4.12, 1)               // returns number -4.1
       *    math.fix(-4.17, 1)               // returns number -4.1
       *
       *    const c = math.complex(3.22, -2.78)
       *    math.fix(c)                  // returns Complex 3 - 2i
       *    math.fix(c, 1)               // returns Complex 3.2 - 2.7i
       *
       *    math.fix([3.2, 3.8, -4.7])      // returns Array [3, 3, -4]
       *    math.fix([3.2, 3.8, -4.7], 1)   // returns Array [3.2, 3.8, -4.7]
       *
       * See also:
       *
       *    ceil, floor, round
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x    Number to be rounded
       * @param  {number | BigNumber | Array} [n=0]                             Number of decimals
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix}     Rounded value
       */

      return typed('fix', {
        number: fixNumber.signatures.number,
        'number, number | BigNumber': fixNumber.signatures['number,number'],
        Complex: function Complex(x) {
          return new _Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
        },
        'Complex, number': function ComplexNumber(x, n) {
          return new _Complex(x.re > 0 ? floor(x.re, n) : ceil(x.re, n), x.im > 0 ? floor(x.im, n) : ceil(x.im, n));
        },
        'Complex, BigNumber': function ComplexBigNumber(x, bn) {
          var n = bn.toNumber();
          return new _Complex(x.re > 0 ? floor(x.re, n) : ceil(x.re, n), x.im > 0 ? floor(x.im, n) : ceil(x.im, n));
        },
        BigNumber: function BigNumber(x) {
          return x.isNegative() ? ceil(x) : floor(x);
        },
        'BigNumber, number | BigNumber': function BigNumberNumberBigNumber(x, n) {
          return x.isNegative() ? ceil(x, n) : floor(x, n);
        },
        Fraction: function Fraction(x) {
          return x.s < 0 ? x.ceil() : x.floor();
        },
        'Fraction, number | BigNumber': function FractionNumberBigNumber(x, n) {
          return x.s < 0 ? ceil(x, n) : floor(x, n);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since fix(0) = 0
          return deepMap(x, this);
        },
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(x, n) {
          // deep map collection, skip zeros since fix(0) = 0
          return deepMap(x, i => this(i, n));
        },
        'number | Complex | Fraction | BigNumber, Array': function numberComplexFractionBigNumberArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        },
        'number | Complex | Fraction | BigNumber, Matrix': function numberComplexFractionBigNumberMatrix(x, y) {
          if (equalScalar(x, 0)) return zeros(y.size(), y.storage());

          if (y.storage() === 'dense') {
            return algorithm14(y, x, this, true);
          }

          return algorithm12(y, x, this, true);
        }
      });
    });

    var name$3X = 'floor';
    var dependencies$3X = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
    var createFloorNumber = /* #__PURE__ */factory(name$3X, ['typed', 'config', 'round'], _ref => {
      var {
        typed,
        config,
        round
      } = _ref;
      return typed(name$3X, {
        number: function number(x) {
          if (nearlyEqual$1(x, round(x), config.epsilon)) {
            return round(x);
          } else {
            return Math.floor(x);
          }
        },
        'number, number': function numberNumber(x, n) {
          if (nearlyEqual$1(x, round(x, n), config.epsilon)) {
            return round(x, n);
          } else {
            var [number, exponent] = "".concat(x, "e").split('e');
            var result = Math.floor(Number("".concat(number, "e").concat(Number(exponent) + n)));
            [number, exponent] = "".concat(result, "e").split('e');
            return Number("".concat(number, "e").concat(Number(exponent) - n));
          }
        }
      });
    });
    var createFloor = /* #__PURE__ */factory(name$3X, dependencies$3X, _ref2 => {
      var {
        typed,
        config,
        round,
        matrix,
        equalScalar,
        zeros,
        DenseMatrix
      } = _ref2;
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      var floorNumber = createFloorNumber({
        typed,
        config,
        round
      });
      /**
       * Round a value towards minus infinity.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.floor(x)
       *    math.floor(x, n)
       *
       * Examples:
       *
       *    math.floor(3.2)              // returns number 3
       *    math.floor(3.8)              // returns number 3
       *    math.floor(-4.2)             // returns number -5
       *    math.floor(-4.7)             // returns number -5
       *
       *    math.floor(3.212, 2)          // returns number 3.21
       *    math.floor(3.288, 2)          // returns number 3.28
       *    math.floor(-4.212, 2)         // returns number -4.22
       *    math.floor(-4.782, 2)         // returns number -4.79
       *
       *    const c = math.complex(3.24, -2.71)
       *    math.floor(c)                 // returns Complex 3 - 3i
       *    math.floor(c, 1)              // returns Complex 3.2 - 2.8i
       *
       *    math.floor([3.2, 3.8, -4.7])       // returns Array [3, 3, -5]
       *    math.floor([3.21, 3.82, -4.71], 1)  // returns Array [3.2, 3.8, -4.8]
       *
       *    math.floor(math.tau, [2, 3])  // returns Array [6.28, 6.283]
       *
       *    // Note that floor(array, array) currently not implemented.
       *
       * See also:
       *
       *    ceil, fix, round
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
       * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
       */

      return typed('floor', {
        number: floorNumber.signatures.number,
        'number,number': floorNumber.signatures['number,number'],
        Complex: function Complex(x) {
          return x.floor();
        },
        'Complex, number': function ComplexNumber(x, n) {
          return x.floor(n);
        },
        'Complex, BigNumber': function ComplexBigNumber(x, n) {
          return x.floor(n.toNumber());
        },
        BigNumber: function BigNumber(x) {
          if (nearlyEqual(x, round(x), config.epsilon)) {
            return round(x);
          } else {
            return x.floor();
          }
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
          if (nearlyEqual(x, round(x, n), config.epsilon)) {
            return round(x, n);
          } else {
            return x.toDecimalPlaces(n.toNumber(), decimal.ROUND_FLOOR);
          }
        },
        Fraction: function Fraction(x) {
          return x.floor();
        },
        'Fraction, number': function FractionNumber(x, n) {
          return x.floor(n);
        },
        'Fraction, BigNumber': function FractionBigNumber(x, n) {
          return x.floor(n.toNumber());
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since floor(0) = 0
          return deepMap(x, this);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, n) {
          // deep map collection, skip zeros since ceil(0) = 0
          return deepMap(x, i => this(i, n));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, this, false);
        },
        'number | Complex | Fraction | BigNumber, Array': function numberComplexFractionBigNumberArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        },
        'number | Complex | Fraction | BigNumber, Matrix': function numberComplexFractionBigNumberMatrix(x, y) {
          if (equalScalar(x, 0)) return zeros(y.size(), y.storage());

          if (y.storage() === 'dense') {
            return algorithm14(y, x, this, true);
          }

          return algorithm12(y, x, this, true);
        }
      });
    });

    var name$3W = 'algorithm01';
    var dependencies$3W = ['typed'];
    var createAlgorithm01 = /* #__PURE__ */factory(name$3W, dependencies$3W, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
       * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
       *
       *
       *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  Dij          ; otherwise
       *
       *
       * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
       * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
       * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
       */
      return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {
        // dense matrix arrays
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype; // sparse matrix arrays

        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // sparse matrix cannot be a Pattern matrix


        if (!bvalues) {
          throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // process data types

        var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function

        var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars

        var i, j; // result (DenseMatrix)

        var cdata = []; // initialize c

        for (i = 0; i < rows; i++) {
          cdata[i] = [];
        } // workspace


        var x = []; // marks indicating we have a value in x for a given column

        var w = []; // loop columns in b

        for (j = 0; j < columns; j++) {
          // column mark
          var mark = j + 1; // values in column j

          for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = bindex[k]; // update workspace

            x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated

            w[i] = mark;
          } // loop rows


          for (i = 0; i < rows; i++) {
            // check row is in workspace
            if (w[i] === mark) {
              // c[i][j] was already calculated
              cdata[i][j] = x[i];
            } else {
              // item does not exist in S
              cdata[i][j] = adata[i][j];
            }
          }
        } // return dense matrix


        return denseMatrix.createDenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$3V = 'algorithm04';
    var dependencies$3V = ['typed', 'equalScalar'];
    var createAlgorithm04 = /* #__PURE__ */factory(name$3V, dependencies$3V, _ref => {
      var {
        typed,
        equalScalar
      } = _ref;

      /**
       * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
       * Callback function invoked MAX(NNZA, NNZB) times
       *
       *
       *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
       * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
       *          └  B(i,j)       ; B(i,j) !== 0
       *
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm04(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspace

        var xa = avalues && bvalues ? [] : undefined;
        var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column

        var wa = [];
        var wb = []; // vars

        var i, j, k, k0, k1; // loop columns

        for (j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // columns mark

          var mark = j + 1; // loop A(:,j)

          for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = aindex[k]; // update c

            cindex.push(i); // update workspace

            wa[i] = mark; // check we need to process values

            if (xa) {
              xa[i] = avalues[k];
            }
          } // loop B(:,j)


          for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = bindex[k]; // check row exists in A

            if (wa[i] === mark) {
              // update record in xa @ i
              if (xa) {
                // invoke callback
                var v = cf(xa[i], bvalues[k]); // check for zero

                if (!eq(v, zero)) {
                  // update workspace
                  xa[i] = v;
                } else {
                  // remove mark (index will be removed later)
                  wa[i] = null;
                }
              }
            } else {
              // update c
              cindex.push(i); // update workspace

              wb[i] = mark; // check we need to process values

              if (xb) {
                xb[i] = bvalues[k];
              }
            }
          } // check we need to process values (non pattern matrix)


          if (xa && xb) {
            // initialize first index in j
            k = cptr[j]; // loop index in j

            while (k < cindex.length) {
              // row
              i = cindex[k]; // check workspace has value @ i

              if (wa[i] === mark) {
                // push value (Aij != 0 || (Aij != 0 && Bij != 0))
                cvalues[k] = xa[i]; // increment pointer

                k++;
              } else if (wb[i] === mark) {
                // push value (bij != 0)
                cvalues[k] = xb[i]; // increment pointer

                k++;
              } else {
                // remove index @ k
                cindex.splice(k, 1);
              }
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$3U = 'algorithm10';
    var dependencies$3U = ['typed', 'DenseMatrix'];
    var createAlgorithm10 = /* #__PURE__ */factory(name$3U, dependencies$3U, _ref => {
      var {
        typed,
        DenseMatrix
      } = _ref;

      /**
       * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
       * Callback function invoked NZ times (number of nonzero items in S).
       *
       *
       *          ┌  f(Sij, b)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  b          ; otherwise
       *
       *
       * @param {Matrix}   s                 The SparseMatrix instance (S)
       * @param {Scalar}   b                 The Scalar value
       * @param {Function} callback          The f(Aij,b) operation to invoke
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
       */
      return function algorithm10(s, b, callback, inverse) {
        // sparse matrix arrays
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

        if (!avalues) {
          throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string') {
          // datatype
          dt = adt; // convert b to the same datatype

          b = typed.convert(b, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cdata = []; // workspaces

        var x = []; // marks indicating we have a value in x for a given column

        var w = []; // loop columns

        for (var j = 0; j < columns; j++) {
          // columns mark
          var mark = j + 1; // values in j

          for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            var r = aindex[k]; // update workspace

            x[r] = avalues[k];
            w[r] = mark;
          } // loop rows


          for (var i = 0; i < rows; i++) {
            // initialize C on first column
            if (j === 0) {
              // create row array
              cdata[i] = [];
            } // check sparse matrix has a value @ i,j


            if (w[i] === mark) {
              // invoke callback, update C
              cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
            } else {
              // dense matrix value @ i, j
              cdata[i][j] = b;
            }
          }
        } // return dense matrix


        return new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$3T = 'algorithm13';
    var dependencies$3T = ['typed'];
    var createAlgorithm13 = /* #__PURE__ */factory(name$3T, dependencies$3T, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
       * Callback function invoked MxN times.
       *
       * C(i,j,...z) = f(Aij..z, Bij..z)
       *
       * @param {Matrix}   a                 The DenseMatrix instance (A)
       * @param {Matrix}   b                 The DenseMatrix instance (B)
       * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
       */
      return function algorithm13(a, b, callback) {
        // a arrays
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b arrays

        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype; // c arrays

        var csize = []; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // validate each one of the dimension sizes


        for (var s = 0; s < asize.length; s++) {
          // must match
          if (asize[s] !== bsize[s]) {
            throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
          } // update dimension in c


          csize[s] = asize[s];
        } // datatype


        var dt; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // callback

          cf = typed.find(callback, [dt, dt]);
        } // populate cdata, iterate through dimensions


        var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix

        return a.createDenseMatrix({
          data: cdata,
          size: csize,
          datatype: dt
        });
      }; // recursive function

      function _iterate(f, level, s, n, av, bv) {
        // initialize array for this level
        var cv = []; // check we reach the last level

        if (level === s.length - 1) {
          // loop arrays in last level
          for (var i = 0; i < n; i++) {
            // invoke callback and store value
            cv[i] = f(av[i], bv[i]);
          }
        } else {
          // iterate current level
          for (var j = 0; j < n; j++) {
            // iterate next level
            cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
          }
        }

        return cv;
      }
    });

    var name$3S = 'gcd';
    var dependencies$3S = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
    var createGcd = /* #__PURE__ */factory(name$3S, dependencies$3S, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        BigNumber,
        DenseMatrix
      } = _ref;
      var algorithm01 = createAlgorithm01({
        typed
      });
      var algorithm04 = createAlgorithm04({
        typed,
        equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Calculate the greatest common divisor for two or more values or arrays.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.gcd(a, b)
       *    math.gcd(a, b, c, ...)
       *
       * Examples:
       *
       *    math.gcd(8, 12)              // returns 4
       *    math.gcd(-4, 6)              // returns 2
       *    math.gcd(25, 15, -10)        // returns 5
       *
       *    math.gcd([8, -4], [12, 6])   // returns [4, 2]
       *
       * See also:
       *
       *    lcm, xgcd
       *
       * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
       * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
       */

      return typed(name$3S, {
        'number, number': gcdNumber,
        'BigNumber, BigNumber': _gcdBigNumber,
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.gcd(y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm04(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm01(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm10(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          return algorithm10(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        },
        // TODO: need a smarter notation here
        'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
          var res = this(a, b);

          for (var i = 0; i < args.length; i++) {
            res = this(res, args[i]);
          }

          return res;
        }
      });
      /**
       * Calculate gcd for BigNumbers
       * @param {BigNumber} a
       * @param {BigNumber} b
       * @returns {BigNumber} Returns greatest common denominator of a and b
       * @private
       */

      function _gcdBigNumber(a, b) {
        if (!a.isInt() || !b.isInt()) {
          throw new Error('Parameters in function gcd must be integer numbers');
        } // https://en.wikipedia.org/wiki/Euclidean_algorithm


        var zero = new BigNumber(0);

        while (!b.isZero()) {
          var r = a.mod(b);
          a = b;
          b = r;
        }

        return a.lt(zero) ? a.neg() : a;
      }
    });

    var name$3R = 'algorithm02';
    var dependencies$3R = ['typed', 'equalScalar'];
    var createAlgorithm02 = /* #__PURE__ */factory(name$3R, dependencies$3R, _ref => {
      var {
        typed,
        equalScalar
      } = _ref;

      /**
       * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
       * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
       *
       *
       *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  0            ; otherwise
       *
       *
       * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
       * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
       * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
       */
      return function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
        // dense matrix arrays
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype; // sparse matrix arrays

        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // sparse matrix cannot be a Pattern matrix


        if (!bvalues) {
          throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result (SparseMatrix)


        var cvalues = [];
        var cindex = [];
        var cptr = []; // loop columns in b

        for (var j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // values in column j

          for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            var i = bindex[k]; // update C(i,j)

            var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero

            if (!eq(cij, zero)) {
              // push i & v
              cindex.push(i);
              cvalues.push(cij);
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return sparseMatrix.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$3Q = 'algorithm06';
    var dependencies$3Q = ['typed', 'equalScalar'];
    var createAlgorithm06 = /* #__PURE__ */factory(name$3Q, dependencies$3Q, _ref => {
      var {
        typed,
        equalScalar
      } = _ref;

      /**
       * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
       * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
       *
       *
       *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
       * C(i,j) = ┤
       *          └  0            ; otherwise
       *
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm06(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bvalues = b._values;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspaces

        var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

        var w = []; // marks indicating value in a given row has been updated

        var u = []; // loop columns

        for (var j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // columns mark

          var mark = j + 1; // scatter the values of A(:,j) into workspace

          scatter(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace

          scatter(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)

          if (x) {
            // initialize first index in j
            var k = cptr[j]; // loop index in j

            while (k < cindex.length) {
              // row
              var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)

              if (u[i] === mark) {
                // value @ i
                var v = x[i]; // check for zero value

                if (!eq(v, zero)) {
                  // push value
                  cvalues.push(v); // increment pointer

                  k++;
                } else {
                  // remove value @ i, do not increment pointer
                  cindex.splice(k, 1);
                }
              } else {
                // remove value @ i, do not increment pointer
                cindex.splice(k, 1);
              }
            }
          } else {
            // initialize first index in j
            var p = cptr[j]; // loop index in j

            while (p < cindex.length) {
              // row
              var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)

              if (u[r] !== mark) {
                // remove value @ i, do not increment pointer
                cindex.splice(p, 1);
              } else {
                // increment pointer
                p++;
              }
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$3P = 'lcm';
    var dependencies$3P = ['typed', 'matrix', 'equalScalar'];
    var createLcm = /* #__PURE__ */factory(name$3P, dependencies$3P, _ref => {
      var {
        typed,
        matrix,
        equalScalar
      } = _ref;
      var algorithm02 = createAlgorithm02({
        typed,
        equalScalar
      });
      var algorithm06 = createAlgorithm06({
        typed,
        equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Calculate the least common multiple for two or more values or arrays.
       *
       * lcm is defined as:
       *
       *     lcm(a, b) = abs(a * b) / gcd(a, b)
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.lcm(a, b)
       *    math.lcm(a, b, c, ...)
       *
       * Examples:
       *
       *    math.lcm(4, 6)               // returns 12
       *    math.lcm(6, 21)              // returns 42
       *    math.lcm(6, 21, 5)           // returns 210
       *
       *    math.lcm([4, 6], [6, 21])    // returns [12, 42]
       *
       * See also:
       *
       *    gcd, xgcd
       *
       * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
       * @return {number | BigNumber | Array | Matrix}                           The least common multiple
       */

      return typed(name$3P, {
        'number, number': lcmNumber,
        'BigNumber, BigNumber': _lcmBigNumber,
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.lcm(y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm06(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm02(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          return algorithm11(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        },
        // TODO: need a smarter notation here
        'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
          var res = this(a, b);

          for (var i = 0; i < args.length; i++) {
            res = this(res, args[i]);
          }

          return res;
        }
      });
      /**
       * Calculate lcm for two BigNumbers
       * @param {BigNumber} a
       * @param {BigNumber} b
       * @returns {BigNumber} Returns the least common multiple of a and b
       * @private
       */

      function _lcmBigNumber(a, b) {
        if (!a.isInt() || !b.isInt()) {
          throw new Error('Parameters in function lcm must be integer numbers');
        }

        if (a.isZero()) {
          return a;
        }

        if (b.isZero()) {
          return b;
        } // https://en.wikipedia.org/wiki/Euclidean_algorithm
        // evaluate lcm here inline to reduce overhead


        var prod = a.times(b);

        while (!b.isZero()) {
          var t = b;
          b = a.mod(t);
          a = t;
        }

        return prod.div(a).abs();
      }
    });

    var name$3O = 'log10';
    var dependencies$3O = ['typed', 'config', 'Complex'];
    var createLog10 = /* #__PURE__ */factory(name$3O, dependencies$3O, _ref => {
      var {
        typed,
        config,
        Complex: _Complex
      } = _ref;

      /**
       * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.log10(x)
       *
       * Examples:
       *
       *    math.log10(0.00001)            // returns -5
       *    math.log10(10000)              // returns 4
       *    math.log(10000) / math.log(10) // returns 4
       *    math.pow(10, 4)                // returns 10000
       *
       * See also:
       *
       *    exp, log, log1p, log2
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            Value for which to calculate the logarithm.
       * @return {number | BigNumber | Complex | Array | Matrix}
       *            Returns the 10-base logarithm of `x`
       */
      return typed(name$3O, {
        number: function number(x) {
          if (x >= 0 || config.predictable) {
            return log10Number(x);
          } else {
            // negative value -> complex value computation
            return new _Complex(x, 0).log().div(Math.LN10);
          }
        },
        Complex: function Complex(x) {
          return new _Complex(x).log().div(Math.LN10);
        },
        BigNumber: function BigNumber(x) {
          if (!x.isNegative() || config.predictable) {
            return x.log();
          } else {
            // downgrade to number, return Complex valued result
            return new _Complex(x.toNumber(), 0).log().div(Math.LN10);
          }
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$3N = 'log2';
    var dependencies$3N = ['typed', 'config', 'Complex'];
    var createLog2 = /* #__PURE__ */factory(name$3N, dependencies$3N, _ref => {
      var {
        typed,
        config,
        Complex
      } = _ref;

      /**
       * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.log2(x)
       *
       * Examples:
       *
       *    math.log2(0.03125)           // returns -5
       *    math.log2(16)                // returns 4
       *    math.log2(16) / math.log2(2) // returns 4
       *    math.pow(2, 4)               // returns 16
       *
       * See also:
       *
       *    exp, log, log1p, log10
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            Value for which to calculate the logarithm.
       * @return {number | BigNumber | Complex | Array | Matrix}
       *            Returns the 2-base logarithm of `x`
       */
      return typed(name$3N, {
        number: function number(x) {
          if (x >= 0 || config.predictable) {
            return log2Number(x);
          } else {
            // negative value -> complex value computation
            return _log2Complex(new Complex(x, 0));
          }
        },
        Complex: _log2Complex,
        BigNumber: function BigNumber(x) {
          if (!x.isNegative() || config.predictable) {
            return x.log(2);
          } else {
            // downgrade to number, return Complex valued result
            return _log2Complex(new Complex(x.toNumber(), 0));
          }
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
      /**
       * Calculate log2 for a complex value
       * @param {Complex} x
       * @returns {Complex}
       * @private
       */

      function _log2Complex(x) {
        var newX = Math.sqrt(x.re * x.re + x.im * x.im);
        return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);
      }
    });

    var name$3M = 'algorithm03';
    var dependencies$3M = ['typed'];
    var createAlgorithm03 = /* #__PURE__ */factory(name$3M, dependencies$3M, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
       * Callback function invoked M*N times.
       *
       *
       *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  f(Dij, 0)    ; otherwise
       *
       *
       * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
       * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
       * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
       */
      return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
        // dense matrix arrays
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype; // sparse matrix arrays

        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // sparse matrix cannot be a Pattern matrix


        if (!bvalues) {
          throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result (DenseMatrix)


        var cdata = []; // initialize dense matrix

        for (var z = 0; z < rows; z++) {
          // initialize row
          cdata[z] = [];
        } // workspace


        var x = []; // marks indicating we have a value in x for a given column

        var w = []; // loop columns in b

        for (var j = 0; j < columns; j++) {
          // column mark
          var mark = j + 1; // values in column j

          for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            var i = bindex[k]; // update workspace

            x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
            w[i] = mark;
          } // process workspace


          for (var y = 0; y < rows; y++) {
            // check we have a calculated value for current row
            if (w[y] === mark) {
              // use calculated value
              cdata[y][j] = x[y];
            } else {
              // calculate value
              cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
            }
          }
        } // return dense matrix


        return denseMatrix.createDenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$3L = 'algorithm05';
    var dependencies$3L = ['typed', 'equalScalar'];
    var createAlgorithm05 = /* #__PURE__ */factory(name$3L, dependencies$3L, _ref => {
      var {
        typed,
        equalScalar
      } = _ref;

      /**
       * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
       * Callback function invoked MAX(NNZA, NNZB) times
       *
       *
       *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
       * C(i,j) = ┤
       *          └  0            ; otherwise
       *
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm05(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspaces

        var xa = cvalues ? [] : undefined;
        var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

        var wa = [];
        var wb = []; // vars

        var i, j, k, k1; // loop columns

        for (j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // columns mark

          var mark = j + 1; // loop values A(:,j)

          for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
            // row
            i = aindex[k]; // push index

            cindex.push(i); // update workspace

            wa[i] = mark; // check we need to process values

            if (xa) {
              xa[i] = avalues[k];
            }
          } // loop values B(:,j)


          for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
            // row
            i = bindex[k]; // check row existed in A

            if (wa[i] !== mark) {
              // push index
              cindex.push(i);
            } // update workspace


            wb[i] = mark; // check we need to process values

            if (xb) {
              xb[i] = bvalues[k];
            }
          } // check we need to process values (non pattern matrix)


          if (cvalues) {
            // initialize first index in j
            k = cptr[j]; // loop index in j

            while (k < cindex.length) {
              // row
              i = cindex[k]; // marks

              var wai = wa[i];
              var wbi = wb[i]; // check Aij or Bij are nonzero

              if (wai === mark || wbi === mark) {
                // matrix values @ i,j
                var va = wai === mark ? xa[i] : zero;
                var vb = wbi === mark ? xb[i] : zero; // Cij

                var vc = cf(va, vb); // check for zero

                if (!eq(vc, zero)) {
                  // push value
                  cvalues.push(vc); // increment pointer

                  k++;
                } else {
                  // remove value @ i, do not increment pointer
                  cindex.splice(k, 1);
                }
              }
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$3K = 'mod';
    var dependencies$3K = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
    var createMod = /* #__PURE__ */factory(name$3K, dependencies$3K, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        DenseMatrix
      } = _ref;
      var algorithm02 = createAlgorithm02({
        typed,
        equalScalar
      });
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm05 = createAlgorithm05({
        typed,
        equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Calculates the modulus, the remainder of an integer division.
       *
       * For matrices, the function is evaluated element wise.
       *
       * The modulus is defined as:
       *
       *     x - y * floor(x / y)
       *
       * See https://en.wikipedia.org/wiki/Modulo_operation.
       *
       * Syntax:
       *
       *    math.mod(x, y)
       *
       * Examples:
       *
       *    math.mod(8, 3)                // returns 2
       *    math.mod(11, 2)               // returns 1
       *
       *    function isOdd(x) {
       *      return math.mod(x, 2) != 0
       *    }
       *
       *    isOdd(2)                      // returns false
       *    isOdd(3)                      // returns true
       *
       * See also:
       *
       *    divide
       *
       * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
       * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
       * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
       */

      return typed(name$3K, {
        'number, number': modNumber,
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          if (y.isNeg()) {
            throw new Error('Cannot calculate mod for a negative divisor');
          }

          return y.isZero() ? x : x.mod(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          if (y.compare(0) < 0) {
            throw new Error('Cannot calculate mod for a negative divisor');
          } // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend


          return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm05(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$3J = 'multiplyScalar';
    var dependencies$3J = ['typed'];
    var createMultiplyScalar = /* #__PURE__ */factory(name$3J, dependencies$3J, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Multiply two scalar values, `x * y`.
       * This function is meant for internal use: it is used by the public function
       * `multiply`
       *
       * This function does not support collections (Array or Matrix).
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
       * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
       * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`
       * @private
       */
      return typed('multiplyScalar', {
        'number, number': multiplyNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.mul(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.times(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.mul(y);
        },
        'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
          var res = y.clone();
          res.value = res.value === null ? res._normalize(x) : this(res.value, x);
          return res;
        },
        'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
          var res = x.clone();
          res.value = res.value === null ? res._normalize(y) : this(res.value, y);
          return res;
        },
        'Unit, Unit': function UnitUnit(x, y) {
          return x.multiply(y);
        }
      });
    });

    var name$3I = 'multiply';
    var dependencies$3I = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];
    var createMultiply = /* #__PURE__ */factory(name$3I, dependencies$3I, _ref => {
      var {
        typed,
        matrix,
        addScalar,
        multiplyScalar,
        equalScalar,
        dot
      } = _ref;
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm14 = createAlgorithm14({
        typed
      });

      function _validateMatrixDimensions(size1, size2) {
        // check left operand dimensions
        switch (size1.length) {
          case 1:
            // check size2
            switch (size2.length) {
              case 1:
                // Vector x Vector
                if (size1[0] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
                }

                break;

              case 2:
                // Vector x Matrix
                if (size1[0] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
                }

                break;

              default:
                throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
            }

            break;

          case 2:
            // check size2
            switch (size2.length) {
              case 1:
                // Matrix x Vector
                if (size1[1] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
                }

                break;

              case 2:
                // Matrix x Matrix
                if (size1[1] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
                }

                break;

              default:
                throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
        }
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            Dense Vector   (N)
       * @param {Matrix} b            Dense Vector   (N)
       *
       * @return {number}             Scalar value
       */


      function _multiplyVectorVector(a, b, n) {
        // check empty vector
        if (n === 0) {
          throw new Error('Cannot multiply two empty vectors');
        }

        return dot(a, b);
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            Dense Vector   (M)
       * @param {Matrix} b            Matrix         (MxN)
       *
       * @return {Matrix}             Dense Vector   (N)
       */


      function _multiplyVectorMatrix(a, b) {
        // process storage
        if (b.storage() !== 'dense') {
          throw new Error('Support for SparseMatrix not implemented');
        }

        return _multiplyVectorDenseMatrix(a, b);
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            Dense Vector   (M)
       * @param {Matrix} b            Dense Matrix   (MxN)
       *
       * @return {Matrix}             Dense Vector   (N)
       */


      function _multiplyVectorDenseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b dense

        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype; // rows & columns

        var alength = asize[0];
        var bcolumns = bsize[1]; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        } // result


        var c = []; // loop matrix columns

        for (var j = 0; j < bcolumns; j++) {
          // sum (do not initialize it with zero)
          var sum = mf(adata[0], bdata[0][j]); // loop vector

          for (var i = 1; i < alength; i++) {
            // multiply & accumulate
            sum = af(sum, mf(adata[i], bdata[i][j]));
          }

          c[j] = sum;
        } // return matrix


        return a.createDenseMatrix({
          data: c,
          size: [bcolumns],
          datatype: dt
        });
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            Matrix         (MxN)
       * @param {Matrix} b            Dense Vector   (N)
       *
       * @return {Matrix}             Dense Vector   (M)
       */


      var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
        'DenseMatrix, any': _multiplyDenseMatrixVector,
        'SparseMatrix, any': _multiplySparseMatrixVector
      });
      /**
       * C = A * B
       *
       * @param {Matrix} a            Matrix         (MxN)
       * @param {Matrix} b            Matrix         (NxC)
       *
       * @return {Matrix}             Matrix         (MxC)
       */


      var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
        'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
        'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
        'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
        'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
      });
      /**
       * C = A * B
       *
       * @param {Matrix} a            DenseMatrix  (MxN)
       * @param {Matrix} b            Dense Vector (N)
       *
       * @return {Matrix}             Dense Vector (M)
       */


      function _multiplyDenseMatrixVector(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b dense

        var bdata = b._data;
        var bdt = b._datatype; // rows & columns

        var arows = asize[0];
        var acolumns = asize[1]; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        } // result


        var c = []; // loop matrix a rows

        for (var i = 0; i < arows; i++) {
          // current row
          var row = adata[i]; // sum (do not initialize it with zero)

          var sum = mf(row[0], bdata[0]); // loop matrix a columns

          for (var j = 1; j < acolumns; j++) {
            // multiply & accumulate
            sum = af(sum, mf(row[j], bdata[j]));
          }

          c[i] = sum;
        } // return matrix


        return a.createDenseMatrix({
          data: c,
          size: [arows],
          datatype: dt
        });
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            DenseMatrix    (MxN)
       * @param {Matrix} b            DenseMatrix    (NxC)
       *
       * @return {Matrix}             DenseMatrix    (MxC)
       */


      function _multiplyDenseMatrixDenseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b dense

        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype; // rows & columns

        var arows = asize[0];
        var acolumns = asize[1];
        var bcolumns = bsize[1]; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        } // result


        var c = []; // loop matrix a rows

        for (var i = 0; i < arows; i++) {
          // current row
          var row = adata[i]; // initialize row array

          c[i] = []; // loop matrix b columns

          for (var j = 0; j < bcolumns; j++) {
            // sum (avoid initializing sum to zero)
            var sum = mf(row[0], bdata[0][j]); // loop matrix a columns

            for (var x = 1; x < acolumns; x++) {
              // multiply & accumulate
              sum = af(sum, mf(row[x], bdata[x][j]));
            }

            c[i][j] = sum;
          }
        } // return matrix


        return a.createDenseMatrix({
          data: c,
          size: [arows, bcolumns],
          datatype: dt
        });
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            DenseMatrix    (MxN)
       * @param {Matrix} b            SparseMatrix   (NxC)
       *
       * @return {Matrix}             SparseMatrix   (MxC)
       */


      function _multiplyDenseMatrixSparseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b sparse

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate b matrix

        if (!bvalues) {
          throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
        } // rows & columns


        var arows = asize[0];
        var bcolumns = bsize[1]; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // equalScalar signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt);
        } // result


        var cvalues = [];
        var cindex = [];
        var cptr = []; // c matrix

        var c = b.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        }); // loop b columns

        for (var jb = 0; jb < bcolumns; jb++) {
          // update ptr
          cptr[jb] = cindex.length; // indeces in column jb

          var kb0 = bptr[jb];
          var kb1 = bptr[jb + 1]; // do not process column jb if no data exists

          if (kb1 > kb0) {
            // last row mark processed
            var last = 0; // loop a rows

            for (var i = 0; i < arows; i++) {
              // column mark
              var mark = i + 1; // C[i, jb]

              var cij = void 0; // values in b column j

              for (var kb = kb0; kb < kb1; kb++) {
                // row
                var ib = bindex[kb]; // check value has been initialized

                if (last !== mark) {
                  // first value in column jb
                  cij = mf(adata[i][ib], bvalues[kb]); // update mark

                  last = mark;
                } else {
                  // accumulate value
                  cij = af(cij, mf(adata[i][ib], bvalues[kb]));
                }
              } // check column has been processed and value != 0


              if (last === mark && !eq(cij, zero)) {
                // push row & value
                cindex.push(i);
                cvalues.push(cij);
              }
            }
          }
        } // update ptr


        cptr[bcolumns] = cindex.length; // return sparse matrix

        return c;
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            SparseMatrix    (MxN)
       * @param {Matrix} b            Dense Vector (N)
       *
       * @return {Matrix}             SparseMatrix    (M, 1)
       */


      function _multiplySparseMatrixVector(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype; // validate a matrix

        if (!avalues) {
          throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
        } // b dense


        var bdata = b._data;
        var bdt = b._datatype; // rows & columns

        var arows = a._size[0];
        var brows = b._size[0]; // result

        var cvalues = [];
        var cindex = [];
        var cptr = []; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // equalScalar signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt);
        } // workspace


        var x = []; // vector with marks indicating a value x[i] exists in a given column

        var w = []; // update ptr

        cptr[0] = 0; // rows in b

        for (var ib = 0; ib < brows; ib++) {
          // b[ib]
          var vbi = bdata[ib]; // check b[ib] != 0, avoid loops

          if (!eq(vbi, zero)) {
            // A values & index in ib column
            for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
              // a row
              var ia = aindex[ka]; // check value exists in current j

              if (!w[ia]) {
                // ia is new entry in j
                w[ia] = true; // add i to pattern of C

                cindex.push(ia); // x(ia) = A

                x[ia] = mf(vbi, avalues[ka]);
              } else {
                // i exists in C already
                x[ia] = af(x[ia], mf(vbi, avalues[ka]));
              }
            }
          }
        } // copy values from x to column jb of c


        for (var p1 = cindex.length, p = 0; p < p1; p++) {
          // row
          var ic = cindex[p]; // copy value

          cvalues[p] = x[ic];
        } // update ptr


        cptr[1] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, 1],
          datatype: dt
        });
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            SparseMatrix      (MxN)
       * @param {Matrix} b            DenseMatrix       (NxC)
       *
       * @return {Matrix}             SparseMatrix      (MxC)
       */


      function _multiplySparseMatrixDenseMatrix(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype; // validate a matrix

        if (!avalues) {
          throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
        } // b dense


        var bdata = b._data;
        var bdt = b._datatype; // rows & columns

        var arows = a._size[0];
        var brows = b._size[0];
        var bcolumns = b._size[1]; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // equalScalar signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt);
        } // result


        var cvalues = [];
        var cindex = [];
        var cptr = []; // c matrix

        var c = a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        }); // workspace

        var x = []; // vector with marks indicating a value x[i] exists in a given column

        var w = []; // loop b columns

        for (var jb = 0; jb < bcolumns; jb++) {
          // update ptr
          cptr[jb] = cindex.length; // mark in workspace for current column

          var mark = jb + 1; // rows in jb

          for (var ib = 0; ib < brows; ib++) {
            // b[ib, jb]
            var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops

            if (!eq(vbij, zero)) {
              // A values & index in ib column
              for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                // a row
                var ia = aindex[ka]; // check value exists in current j

                if (w[ia] !== mark) {
                  // ia is new entry in j
                  w[ia] = mark; // add i to pattern of C

                  cindex.push(ia); // x(ia) = A

                  x[ia] = mf(vbij, avalues[ka]);
                } else {
                  // i exists in C already
                  x[ia] = af(x[ia], mf(vbij, avalues[ka]));
                }
              }
            }
          } // copy values from x to column jb of c


          for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
            // row
            var ic = cindex[p]; // copy value

            cvalues[p] = x[ic];
          }
        } // update ptr


        cptr[bcolumns] = cindex.length; // return sparse matrix

        return c;
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            SparseMatrix      (MxN)
       * @param {Matrix} b            SparseMatrix      (NxC)
       *
       * @return {Matrix}             SparseMatrix      (MxC)
       */


      function _multiplySparseMatrixSparseMatrix(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype; // b sparse

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bdt = b._datatype; // rows & columns

        var arows = a._size[0];
        var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data

        var values = avalues && bvalues; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        } // result


        var cvalues = values ? [] : undefined;
        var cindex = [];
        var cptr = []; // c matrix

        var c = a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        }); // workspace

        var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column

        var w = []; // variables

        var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns

        for (var jb = 0; jb < bcolumns; jb++) {
          // update ptr
          cptr[jb] = cindex.length; // mark in workspace for current column

          var mark = jb + 1; // B values & index in j

          for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
            // b row
            ib = bindex[kb]; // check we need to process values

            if (values) {
              // loop values in a[:,ib]
              for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                // row
                ia = aindex[ka]; // check value exists in current j

                if (w[ia] !== mark) {
                  // ia is new entry in j
                  w[ia] = mark; // add i to pattern of C

                  cindex.push(ia); // x(ia) = A

                  x[ia] = mf(bvalues[kb], avalues[ka]);
                } else {
                  // i exists in C already
                  x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
                }
              }
            } else {
              // loop values in a[:,ib]
              for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                // row
                ia = aindex[ka]; // check value exists in current j

                if (w[ia] !== mark) {
                  // ia is new entry in j
                  w[ia] = mark; // add i to pattern of C

                  cindex.push(ia);
                }
              }
            }
          } // check we need to process matrix values (pattern matrix)


          if (values) {
            // copy values from x to column jb of c
            for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
              // row
              var ic = cindex[p]; // copy value

              cvalues[p] = x[ic];
            }
          }
        } // update ptr


        cptr[bcolumns] = cindex.length; // return sparse matrix

        return c;
      }
      /**
       * Multiply two or more values, `x * y`.
       * For matrices, the matrix product is calculated.
       *
       * Syntax:
       *
       *    math.multiply(x, y)
       *    math.multiply(x, y, z, ...)
       *
       * Examples:
       *
       *    math.multiply(4, 5.2)        // returns number 20.8
       *    math.multiply(2, 3, 4)       // returns number 24
       *
       *    const a = math.complex(2, 3)
       *    const b = math.complex(4, 1)
       *    math.multiply(a, b)          // returns Complex 5 + 14i
       *
       *    const c = [[1, 2], [4, 3]]
       *    const d = [[1, 2, 3], [3, -4, 7]]
       *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
       *
       *    const e = math.unit('2.1 km')
       *    math.multiply(3, e)          // returns Unit 6.3 km
       *
       * See also:
       *
       *    divide, prod, cross, dot
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
       */


      return typed(name$3I, extend({
        // we extend the signatures of multiplyScalar with signatures dealing with matrices
        'Array, Array': function ArrayArray(x, y) {
          // check dimensions
          _validateMatrixDimensions(arraySize(x), arraySize(y)); // use dense matrix implementation


          var m = this(matrix(x), matrix(y)); // return array or scalar

          return isMatrix(m) ? m.valueOf() : m;
        },
        'Matrix, Matrix': function MatrixMatrix(x, y) {
          // dimensions
          var xsize = x.size();
          var ysize = y.size(); // check dimensions

          _validateMatrixDimensions(xsize, ysize); // process dimensions


          if (xsize.length === 1) {
            // process y dimensions
            if (ysize.length === 1) {
              // Vector * Vector
              return _multiplyVectorVector(x, y, xsize[0]);
            } // Vector * Matrix


            return _multiplyVectorMatrix(x, y);
          } // process y dimensions


          if (ysize.length === 1) {
            // Matrix * Vector
            return _multiplyMatrixVector(x, y);
          } // Matrix * Matrix


          return _multiplyMatrixMatrix(x, y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use Matrix * Matrix implementation
          return this(x, matrix(y));
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use Matrix * Matrix implementation
          return this(matrix(x, y.storage()), y);
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, multiplyScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, multiplyScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm11(y, x, multiplyScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, multiplyScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
        },
        'any, any': multiplyScalar,
        'any, any, ...any': function anyAnyAny(x, y, rest) {
          var result = this(x, y);

          for (var i = 0; i < rest.length; i++) {
            result = this(result, rest[i]);
          }

          return result;
        }
      }, multiplyScalar.signatures));
    });

    var name$3H = 'nthRoot';
    var dependencies$3H = ['typed', 'matrix', 'equalScalar', 'BigNumber'];
    var createNthRoot = /* #__PURE__ */factory(name$3H, dependencies$3H, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        BigNumber: _BigNumber
      } = _ref;
      var algorithm01 = createAlgorithm01({
        typed
      });
      var algorithm02 = createAlgorithm02({
        typed,
        equalScalar
      });
      var algorithm06 = createAlgorithm06({
        typed,
        equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Calculate the nth root of a value.
       * The principal nth root of a positive real number A, is the positive real
       * solution of the equation
       *
       *     x^root = A
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *     math.nthRoot(a)
       *     math.nthRoot(a, root)
       *
       * Examples:
       *
       *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9
       *     math.sqrt(9)          // returns 3, as 3^2 == 9
       *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64
       *
       * See also:
       *
       *     sqrt, pow
       *
       * @param {number | BigNumber | Array | Matrix | Complex} a
       *              Value for which to calculate the nth root
       * @param {number | BigNumber} [root=2]    The root.
       * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
       */

      var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';
      return typed(name$3H, {
        number: nthRootNumber,
        'number, number': nthRootNumber,
        BigNumber: function BigNumber(x) {
          return _bigNthRoot(x, new _BigNumber(2));
        },
        Complex: function Complex(x) {
          throw new Error(complexErr);
        },
        'Complex, number': function ComplexNumber(x, y) {
          throw new Error(complexErr);
        },
        'BigNumber, BigNumber': _bigNthRoot,
        'Array | Matrix': function ArrayMatrix(x) {
          return this(x, 2);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          // density must be one (no zeros in matrix)
          if (y.density() === 1) {
            // sparse + sparse
            return algorithm06(x, y, this);
          } else {
            // throw exception
            throw new Error('Root must be non-zero');
          }
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          // density must be one (no zeros in matrix)
          if (y.density() === 1) {
            // dense + sparse
            return algorithm01(x, y, this, false);
          } else {
            // throw exception
            throw new Error('Root must be non-zero');
          }
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          // density must be one (no zeros in matrix)
          if (y.density() === 1) {
            // sparse - scalar
            return algorithm11(y, x, this, true);
          } else {
            // throw exception
            throw new Error('Root must be non-zero');
          }
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return this(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y)).valueOf();
        }
      });
      /**
       * Calculate the nth root of a for BigNumbers, solve x^root == a
       * https://rosettacode.org/wiki/Nth_root#JavaScript
       * @param {BigNumber} a
       * @param {BigNumber} root
       * @private
       */

      function _bigNthRoot(a, root) {
        var precision = _BigNumber.precision;

        var Big = _BigNumber.clone({
          precision: precision + 2
        });

        var zero = new _BigNumber(0);
        var one = new Big(1);
        var inv = root.isNegative();

        if (inv) {
          root = root.neg();
        }

        if (root.isZero()) {
          throw new Error('Root must be non-zero');
        }

        if (a.isNegative() && !root.abs().mod(2).equals(1)) {
          throw new Error('Root must be odd when a is negative.');
        } // edge cases zero and infinity


        if (a.isZero()) {
          return inv ? new Big(Infinity) : 0;
        }

        if (!a.isFinite()) {
          return inv ? zero : a;
        }

        var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,
        // so (-1) ^ (1/root) = -1

        x = a.isNeg() ? x.neg() : x;
        return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));
      }
    });

    var name$3G = 'sign';
    var dependencies$3G = ['typed', 'BigNumber', 'Fraction', 'complex'];
    var createSign = /* #__PURE__ */factory(name$3G, dependencies$3G, _ref => {
      var {
        typed,
        BigNumber: _BigNumber,
        complex,
        Fraction: _Fraction
      } = _ref;

      /**
       * Compute the sign of a value. The sign of a value x is:
       *
       * -  1 when x > 0
       * - -1 when x < 0
       * -  0 when x == 0
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sign(x)
       *
       * Examples:
       *
       *    math.sign(3.5)               // returns 1
       *    math.sign(-4.2)              // returns -1
       *    math.sign(0)                 // returns 0
       *
       *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]
       *
       * See also:
       *
       *    abs
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
       *            The number for which to determine the sign
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
       *            The sign of `x`
       */
      return typed(name$3G, {
        number: signNumber,
        Complex: function Complex(x) {
          return x.im === 0 ? complex(signNumber(x.re)) : x.sign();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(x.cmp(0));
        },
        Fraction: function Fraction(x) {
          return new _Fraction(x.s, 1);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since sign(0) = 0
          return deepMap(x, this);
        },
        Unit: function Unit(x) {
          if (!x._isDerived() && x.units[0].unit.offset !== 0) {
            throw new TypeError('sign is ambiguous for units with offset');
          }

          return this(x.value);
        }
      });
    });

    var name$3F = 'sqrt';
    var dependencies$3F = ['config', 'typed', 'Complex'];
    var createSqrt = /* #__PURE__ */factory(name$3F, dependencies$3F, _ref => {
      var {
        config,
        typed,
        Complex
      } = _ref;

      /**
       * Calculate the square root of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sqrt(x)
       *
       * Examples:
       *
       *    math.sqrt(25)                // returns 5
       *    math.square(5)               // returns 25
       *    math.sqrt(-4)                // returns Complex 2i
       *
       * See also:
       *
       *    square, multiply, cube, cbrt, sqrtm
       *
       * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
       *            Value for which to calculate the square root.
       * @return {number | BigNumber | Complex | Array | Matrix | Unit}
       *            Returns the square root of `x`
       */
      return typed('sqrt', {
        number: _sqrtNumber,
        Complex: function Complex(x) {
          return x.sqrt();
        },
        BigNumber: function BigNumber(x) {
          if (!x.isNegative() || config.predictable) {
            return x.sqrt();
          } else {
            // negative value -> downgrade to number to do complex value computation
            return _sqrtNumber(x.toNumber());
          }
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since sqrt(0) = 0
          return deepMap(x, this);
        },
        Unit: function Unit(x) {
          // Someday will work for complex units when they are implemented
          return x.pow(0.5);
        }
      });
      /**
       * Calculate sqrt for a number
       * @param {number} x
       * @returns {number | Complex} Returns the square root of x
       * @private
       */

      function _sqrtNumber(x) {
        if (isNaN(x)) {
          return NaN;
        } else if (x >= 0 || config.predictable) {
          return Math.sqrt(x);
        } else {
          return new Complex(x, 0).sqrt();
        }
      }
    });

    var name$3E = 'square';
    var dependencies$3E = ['typed'];
    var createSquare = /* #__PURE__ */factory(name$3E, dependencies$3E, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Compute the square of a value, `x * x`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.square(x)
       *
       * Examples:
       *
       *    math.square(2)           // returns number 4
       *    math.square(3)           // returns number 9
       *    math.pow(3, 2)           // returns number 9
       *    math.multiply(3, 3)      // returns number 9
       *
       *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]
       *
       * See also:
       *
       *    multiply, cube, sqrt, pow
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
       *            Number for which to calculate the square
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
       *            Squared value
       */
      return typed(name$3E, {
        number: squareNumber,
        Complex: function Complex(x) {
          return x.mul(x);
        },
        BigNumber: function BigNumber(x) {
          return x.times(x);
        },
        Fraction: function Fraction(x) {
          return x.mul(x);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since square(0) = 0
          return deepMap(x, this);
        },
        Unit: function Unit(x) {
          return x.pow(2);
        }
      });
    });

    var name$3D = 'subtract';
    var dependencies$3D = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];
    var createSubtract = /* #__PURE__ */factory(name$3D, dependencies$3D, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        addScalar,
        unaryMinus,
        DenseMatrix
      } = _ref;
      // TODO: split function subtract in two: subtract and subtractScalar
      var algorithm01 = createAlgorithm01({
        typed
      });
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm05 = createAlgorithm05({
        typed,
        equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Subtract two values, `x - y`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.subtract(x, y)
       *
       * Examples:
       *
       *    math.subtract(5.3, 2)        // returns number 3.3
       *
       *    const a = math.complex(2, 3)
       *    const b = math.complex(4, 1)
       *    math.subtract(a, b)          // returns Complex -2 + 2i
       *
       *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
       *
       *    const c = math.unit('2.1 km')
       *    const d = math.unit('500m')
       *    math.subtract(c, d)          // returns Unit 1.6 km
       *
       * See also:
       *
       *    add
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
       *            Initial value
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
       *            Value to subtract from `x`
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
       *            Subtraction of `x` and `y`
       */

      return typed(name$3D, {
        'number, number': function numberNumber(x, y) {
          return x - y;
        },
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.sub(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.minus(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.sub(y);
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (x.value === null) {
            throw new Error('Parameter x contains a unit with undefined value');
          }

          if (y.value === null) {
            throw new Error('Parameter y contains a unit with undefined value');
          }

          if (!x.equalBase(y)) {
            throw new Error('Units do not match');
          }

          var res = x.clone();
          res.value = this(res.value, y.value);
          res.fixPrefix = false;
          return res;
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          checkEqualDimensions(x, y);
          return algorithm05(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          checkEqualDimensions(x, y);
          return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          checkEqualDimensions(x, y);
          return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          checkEqualDimensions(x, y);
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm10(x, unaryMinus(y), addScalar);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm10(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });
    /**
     * Check whether matrix x and y have the same number of dimensions.
     * Throws a DimensionError when dimensions are not equal
     * @param {Matrix} x
     * @param {Matrix} y
     */

    function checkEqualDimensions(x, y) {
      var xsize = x.size();
      var ysize = y.size();

      if (xsize.length !== ysize.length) {
        throw new DimensionError(xsize.length, ysize.length);
      }
    }

    var name$3C = 'xgcd';
    var dependencies$3C = ['typed', 'config', 'matrix', 'BigNumber'];
    var createXgcd = /* #__PURE__ */factory(name$3C, dependencies$3C, _ref => {
      var {
        typed,
        config,
        matrix,
        BigNumber
      } = _ref;

      /**
       * Calculate the extended greatest common divisor for two values.
       * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
       *
       * Syntax:
       *
       *    math.xgcd(a, b)
       *
       * Examples:
       *
       *    math.xgcd(8, 12)             // returns [4, -1, 1]
       *    math.gcd(8, 12)              // returns 4
       *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]
       *
       * See also:
       *
       *    gcd, lcm
       *
       * @param {number | BigNumber} a  An integer number
       * @param {number | BigNumber} b  An integer number
       * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
       *                              where `div = gcd(a, b)` and `a*m + b*n = div`
       */
      return typed(name$3C, {
        'number, number': function numberNumber(a, b) {
          var res = xgcdNumber(a, b);
          return config.matrix === 'Array' ? res : matrix(res);
        },
        'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction

      });
      /**
       * Calculate xgcd for two BigNumbers
       * @param {BigNumber} a
       * @param {BigNumber} b
       * @return {BigNumber[]} result
       * @private
       */

      function _xgcdBigNumber(a, b) {
        // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
        var // used to swap two variables
        t;
        var // quotient
        q;
        var // remainder
        r;
        var zero = new BigNumber(0);
        var one = new BigNumber(1);
        var x = zero;
        var lastx = one;
        var y = one;
        var lasty = zero;

        if (!a.isInt() || !b.isInt()) {
          throw new Error('Parameters in function xgcd must be integer numbers');
        }

        while (!b.isZero()) {
          q = a.div(b).floor();
          r = a.mod(b);
          t = x;
          x = lastx.minus(q.times(x));
          lastx = t;
          t = y;
          y = lasty.minus(q.times(y));
          lasty = t;
          a = b;
          b = r;
        }

        var res;

        if (a.lt(zero)) {
          res = [a.neg(), lastx.neg(), lasty.neg()];
        } else {
          res = [a, !a.isZero() ? lastx : 0, lasty];
        }

        return config.matrix === 'Array' ? res : matrix(res);
      }
    });

    var name$3B = 'invmod';
    var dependencies$3B = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];
    var createInvmod = /* #__PURE__ */factory(name$3B, dependencies$3B, _ref => {
      var {
        typed,
        config,
        BigNumber,
        xgcd,
        equal,
        smaller,
        mod,
        add,
        isInteger
      } = _ref;

      /**
       * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`
       * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.
       *
       * Syntax:
       *
       *    math.invmod(a, b)
       *
       * Examples:
       *
       *    math.invmod(8, 12)             // returns NaN
       *    math.invmod(7, 13)             // return 2
       *    math.invmod(15151, 15122)      // returns 10429
       *
       * See also:
       *
       *    gcd, xgcd
       *
       * @param {number | BigNumber} a  An integer number
       * @param {number | BigNumber} b  An integer number
       * @return {number | BigNumber }  Returns an integer number
       *                              where `invmod(a,b)*a ≣ 1 (mod b)`
       */
      return typed(name$3B, {
        'number, number': invmod,
        'BigNumber, BigNumber': invmod
      });

      function invmod(a, b) {
        if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');
        a = mod(a, b);
        if (equal(b, 0)) throw new Error('Divisor must be non zero');
        var res = xgcd(a, b);
        res = res.valueOf();
        var [gcd, inv] = res;
        if (!equal(gcd, BigNumber(1))) return NaN;
        inv = mod(inv, b);
        if (smaller(inv, BigNumber(0))) inv = add(inv, b);
        return inv;
      }
    });

    var name$3A = 'algorithm09';
    var dependencies$3A = ['typed', 'equalScalar'];
    var createAlgorithm09 = /* #__PURE__ */factory(name$3A, dependencies$3A, _ref => {
      var {
        typed,
        equalScalar
      } = _ref;

      /**
       * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).
       * Callback function invoked NZA times, number of nonzero elements in A.
       *
       *
       *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
       * C(i,j) = ┤
       *          └  0            ; otherwise
       *
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm09(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspaces

        var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

        var w = []; // vars

        var i, j, k, k0, k1; // loop columns

        for (j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // column mark

          var mark = j + 1; // check we need to process values

          if (x) {
            // loop B(:,j)
            for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
              // row
              i = bindex[k]; // update workspace

              w[i] = mark;
              x[i] = bvalues[k];
            }
          } // loop A(:,j)


          for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = aindex[k]; // check we need to process values

            if (x) {
              // b value @ i,j
              var vb = w[i] === mark ? x[i] : zero; // invoke f

              var vc = cf(avalues[k], vb); // check zero value

              if (!eq(vc, zero)) {
                // push index
                cindex.push(i); // push value

                cvalues.push(vc);
              }
            } else {
              // push index
              cindex.push(i);
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$3z = 'dotMultiply';
    var dependencies$3z = ['typed', 'matrix', 'equalScalar', 'multiplyScalar'];
    var createDotMultiply = /* #__PURE__ */factory(name$3z, dependencies$3z, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        multiplyScalar
      } = _ref;
      var algorithm02 = createAlgorithm02({
        typed,
        equalScalar
      });
      var algorithm09 = createAlgorithm09({
        typed,
        equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Multiply two matrices element wise. The function accepts both matrices and
       * scalar values.
       *
       * Syntax:
       *
       *    math.dotMultiply(x, y)
       *
       * Examples:
       *
       *    math.dotMultiply(2, 4) // returns 8
       *
       *    a = [[9, 5], [6, 1]]
       *    b = [[3, 2], [5, 2]]
       *
       *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]
       *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]
       *
       * See also:
       *
       *    multiply, divide, dotDivide
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
       */

      return typed(name$3z, {
        'any, any': multiplyScalar,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm09(x, y, multiplyScalar, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, multiplyScalar, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm02(x, y, multiplyScalar, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, multiplyScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, multiplyScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, multiplyScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm11(y, x, multiplyScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, multiplyScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
        }
      });
    });

    /**
     * Bitwise and for Bignumbers
     *
     * Special Cases:
     *   N &  n =  N
     *   n &  0 =  0
     *   n & -1 =  n
     *   n &  n =  n
     *   I &  I =  I
     *  -I & -I = -I
     *   I & -I =  0
     *   I &  n =  n
     *   I & -n =  I
     *  -I &  n =  0
     *  -I & -n = -I
     *
     * @param {BigNumber} x
     * @param {BigNumber} y
     * @return {BigNumber} Result of `x` & `y`, is fully precise
     * @private
     */
    function bitAndBigNumber(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error('Integers expected in function bitAnd');
      }

      var BigNumber = x.constructor;

      if (x.isNaN() || y.isNaN()) {
        return new BigNumber(NaN);
      }

      if (x.isZero() || y.eq(-1) || x.eq(y)) {
        return x;
      }

      if (y.isZero() || x.eq(-1)) {
        return y;
      }

      if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !y.isFinite()) {
          if (x.isNegative() === y.isNegative()) {
            return x;
          }

          return new BigNumber(0);
        }

        if (!x.isFinite()) {
          if (y.isNegative()) {
            return x;
          }

          if (x.isNegative()) {
            return new BigNumber(0);
          }

          return y;
        }

        if (!y.isFinite()) {
          if (x.isNegative()) {
            return y;
          }

          if (y.isNegative()) {
            return new BigNumber(0);
          }

          return x;
        }
      }

      return bitwise(x, y, function (a, b) {
        return a & b;
      });
    }
    /**
     * Bitwise not
     * @param {BigNumber} x
     * @return {BigNumber} Result of ~`x`, fully precise
     *
     */

    function bitNotBigNumber(x) {
      if (x.isFinite() && !x.isInteger()) {
        throw new Error('Integer expected in function bitNot');
      }

      var BigNumber = x.constructor;
      var prevPrec = BigNumber.precision;
      BigNumber.config({
        precision: 1E9
      });
      var result = x.plus(new BigNumber(1));
      result.s = -result.s || null;
      BigNumber.config({
        precision: prevPrec
      });
      return result;
    }
    /**
     * Bitwise OR for BigNumbers
     *
     * Special Cases:
     *   N |  n =  N
     *   n |  0 =  n
     *   n | -1 = -1
     *   n |  n =  n
     *   I |  I =  I
     *  -I | -I = -I
     *   I | -n = -1
     *   I | -I = -1
     *   I |  n =  I
     *  -I |  n = -I
     *  -I | -n = -n
     *
     * @param {BigNumber} x
     * @param {BigNumber} y
     * @return {BigNumber} Result of `x` | `y`, fully precise
     */

    function bitOrBigNumber(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error('Integers expected in function bitOr');
      }

      var BigNumber = x.constructor;

      if (x.isNaN() || y.isNaN()) {
        return new BigNumber(NaN);
      }

      var negOne = new BigNumber(-1);

      if (x.isZero() || y.eq(negOne) || x.eq(y)) {
        return y;
      }

      if (y.isZero() || x.eq(negOne)) {
        return x;
      }

      if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {
          return negOne;
        }

        if (x.isNegative() && y.isNegative()) {
          return x.isFinite() ? x : y;
        }

        return x.isFinite() ? y : x;
      }

      return bitwise(x, y, function (a, b) {
        return a | b;
      });
    }
    /**
     * Applies bitwise function to numbers
     * @param {BigNumber} x
     * @param {BigNumber} y
     * @param {function (a, b)} func
     * @return {BigNumber}
     */

    function bitwise(x, y, func) {
      var BigNumber = x.constructor;
      var xBits, yBits;
      var xSign = +(x.s < 0);
      var ySign = +(y.s < 0);

      if (xSign) {
        xBits = decCoefficientToBinaryString(bitNotBigNumber(x));

        for (var i = 0; i < xBits.length; ++i) {
          xBits[i] ^= 1;
        }
      } else {
        xBits = decCoefficientToBinaryString(x);
      }

      if (ySign) {
        yBits = decCoefficientToBinaryString(bitNotBigNumber(y));

        for (var _i = 0; _i < yBits.length; ++_i) {
          yBits[_i] ^= 1;
        }
      } else {
        yBits = decCoefficientToBinaryString(y);
      }

      var minBits, maxBits, minSign;

      if (xBits.length <= yBits.length) {
        minBits = xBits;
        maxBits = yBits;
        minSign = xSign;
      } else {
        minBits = yBits;
        maxBits = xBits;
        minSign = ySign;
      }

      var shortLen = minBits.length;
      var longLen = maxBits.length;
      var expFuncVal = func(xSign, ySign) ^ 1;
      var outVal = new BigNumber(expFuncVal ^ 1);
      var twoPower = new BigNumber(1);
      var two = new BigNumber(2);
      var prevPrec = BigNumber.precision;
      BigNumber.config({
        precision: 1E9
      });

      while (shortLen > 0) {
        if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {
          outVal = outVal.plus(twoPower);
        }

        twoPower = twoPower.times(two);
      }

      while (longLen > 0) {
        if (func(minSign, maxBits[--longLen]) === expFuncVal) {
          outVal = outVal.plus(twoPower);
        }

        twoPower = twoPower.times(two);
      }

      BigNumber.config({
        precision: prevPrec
      });

      if (expFuncVal === 0) {
        outVal.s = -outVal.s;
      }

      return outVal;
    }
    /* Extracted from decimal.js, and edited to specialize. */

    function decCoefficientToBinaryString(x) {
      // Convert to string
      var a = x.d; // array with digits

      var r = a[0] + '';

      for (var i = 1; i < a.length; ++i) {
        var s = a[i] + '';

        for (var z = 7 - s.length; z--;) {
          s = '0' + s;
        }

        r += s;
      }

      var j = r.length;

      while (r.charAt(j) === '0') {
        j--;
      }

      var xe = x.e;
      var str = r.slice(0, j + 1 || 1);
      var strL = str.length;

      if (xe > 0) {
        if (++xe > strL) {
          // Append zeros.
          xe -= strL;

          while (xe--) {
            str += '0';
          }
        } else if (xe < strL) {
          str = str.slice(0, xe) + '.' + str.slice(xe);
        }
      } // Convert from base 10 (decimal) to base 2


      var arr = [0];

      for (var _i2 = 0; _i2 < str.length;) {
        var arrL = arr.length;

        while (arrL--) {
          arr[arrL] *= 10;
        }

        arr[0] += parseInt(str.charAt(_i2++)); // convert to int

        for (var _j = 0; _j < arr.length; ++_j) {
          if (arr[_j] > 1) {
            if (arr[_j + 1] === null || arr[_j + 1] === undefined) {
              arr[_j + 1] = 0;
            }

            arr[_j + 1] += arr[_j] >> 1;
            arr[_j] &= 1;
          }
        }
      }

      return arr.reverse();
    }
    /**
     * Bitwise XOR for BigNumbers
     *
     * Special Cases:
     *   N ^  n =  N
     *   n ^  0 =  n
     *   n ^  n =  0
     *   n ^ -1 = ~n
     *   I ^  n =  I
     *   I ^ -n = -I
     *   I ^ -I = -1
     *  -I ^  n = -I
     *  -I ^ -n =  I
     *
     * @param {BigNumber} x
     * @param {BigNumber} y
     * @return {BigNumber} Result of `x` ^ `y`, fully precise
     *
     */


    function bitXor$1(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error('Integers expected in function bitXor');
      }

      var BigNumber = x.constructor;

      if (x.isNaN() || y.isNaN()) {
        return new BigNumber(NaN);
      }

      if (x.isZero()) {
        return y;
      }

      if (y.isZero()) {
        return x;
      }

      if (x.eq(y)) {
        return new BigNumber(0);
      }

      var negOne = new BigNumber(-1);

      if (x.eq(negOne)) {
        return bitNotBigNumber(y);
      }

      if (y.eq(negOne)) {
        return bitNotBigNumber(x);
      }

      if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !y.isFinite()) {
          return negOne;
        }

        return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);
      }

      return bitwise(x, y, function (a, b) {
        return a ^ b;
      });
    }
    /**
     * Bitwise left shift
     *
     * Special Cases:
     *  n << -n = N
     *  n <<  N = N
     *  N <<  n = N
     *  n <<  0 = n
     *  0 <<  n = 0
     *  I <<  I = N
     *  I <<  n = I
     *  n <<  I = I
     *
     * @param {BigNumber} x
     * @param {BigNumber} y
     * @return {BigNumber} Result of `x` << `y`
     *
     */

    function leftShiftBigNumber(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error('Integers expected in function leftShift');
      }

      var BigNumber = x.constructor;

      if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
        return new BigNumber(NaN);
      }

      if (x.isZero() || y.isZero()) {
        return x;
      }

      if (!x.isFinite() && !y.isFinite()) {
        return new BigNumber(NaN);
      } // Math.pow(2, y) is fully precise for y < 55, and fast


      if (y.lt(55)) {
        return x.times(Math.pow(2, y.toNumber()) + '');
      }

      return x.times(new BigNumber(2).pow(y));
    }
    /*
     * Special Cases:
     *   n >> -n =  N
     *   n >>  N =  N
     *   N >>  n =  N
     *   I >>  I =  N
     *   n >>  0 =  n
     *   I >>  n =  I
     *  -I >>  n = -I
     *  -I >>  I = -I
     *   n >>  I =  I
     *  -n >>  I = -1
     *   0 >>  n =  0
     *
     * @param {BigNumber} value
     * @param {BigNumber} value
     * @return {BigNumber} Result of `x` >> `y`
     *
     */

    function rightArithShiftBigNumber(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error('Integers expected in function rightArithShift');
      }

      var BigNumber = x.constructor;

      if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
        return new BigNumber(NaN);
      }

      if (x.isZero() || y.isZero()) {
        return x;
      }

      if (!y.isFinite()) {
        if (x.isNegative()) {
          return new BigNumber(-1);
        }

        if (!x.isFinite()) {
          return new BigNumber(NaN);
        }

        return new BigNumber(0);
      } // Math.pow(2, y) is fully precise for y < 55, and fast


      if (y.lt(55)) {
        return x.div(Math.pow(2, y.toNumber()) + '').floor();
      }

      return x.div(new BigNumber(2).pow(y)).floor();
    }

    var name$3y = 'bitAnd';
    var dependencies$3y = ['typed', 'matrix', 'equalScalar'];
    var createBitAnd = /* #__PURE__ */factory(name$3y, dependencies$3y, _ref => {
      var {
        typed,
        matrix,
        equalScalar
      } = _ref;
      var algorithm02 = createAlgorithm02({
        typed,
        equalScalar
      });
      var algorithm06 = createAlgorithm06({
        typed,
        equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Bitwise AND two values, `x & y`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.bitAnd(x, y)
       *
       * Examples:
       *
       *    math.bitAnd(53, 131)               // returns number 1
       *
       *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]
       *
       * See also:
       *
       *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x First value to and
       * @param  {number | BigNumber | Array | Matrix} y Second value to and
       * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
       */

      return typed(name$3y, {
        'number, number': bitAndNumber,
        'BigNumber, BigNumber': bitAndBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm06(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm02(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm11(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$3x = 'bitNot';
    var dependencies$3x = ['typed'];
    var createBitNot = /* #__PURE__ */factory(name$3x, dependencies$3x, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Bitwise NOT value, `~x`.
       * For matrices, the function is evaluated element wise.
       * For units, the function is evaluated on the best prefix base.
       *
       * Syntax:
       *
       *    math.bitNot(x)
       *
       * Examples:
       *
       *    math.bitNot(1)               // returns number -2
       *
       *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]
       *
       * See also:
       *
       *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x Value to not
       * @return {number | BigNumber | Array | Matrix} NOT of `x`
       */
      return typed(name$3x, {
        number: bitNotNumber,
        BigNumber: bitNotBigNumber,
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$3w = 'bitOr';
    var dependencies$3w = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
    var createBitOr = /* #__PURE__ */factory(name$3w, dependencies$3w, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        DenseMatrix
      } = _ref;
      var algorithm01 = createAlgorithm01({
        typed
      });
      var algorithm04 = createAlgorithm04({
        typed,
        equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Bitwise OR two values, `x | y`.
       * For matrices, the function is evaluated element wise.
       * For units, the function is evaluated on the lowest print base.
       *
       * Syntax:
       *
       *    math.bitOr(x, y)
       *
       * Examples:
       *
       *    math.bitOr(1, 2)               // returns number 3
       *
       *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]
       *
       * See also:
       *
       *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x First value to or
       * @param  {number | BigNumber | Array | Matrix} y Second value to or
       * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
       */

      return typed(name$3w, {
        'number, number': bitOrNumber,
        'BigNumber, BigNumber': bitOrBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm04(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm01(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm10(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm10(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$3v = 'algorithm07';
    var dependencies$3v = ['typed', 'DenseMatrix'];
    var createAlgorithm07 = /* #__PURE__ */factory(name$3v, dependencies$3v, _ref => {
      var {
        typed,
        DenseMatrix
      } = _ref;

      /**
       * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).
       * Callback function invoked MxN times.
       *
       * C(i,j) = f(Aij, Bij)
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm07(a, b, callback) {
        // sparse matrix arrays
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // vars


        var i, j; // result arrays

        var cdata = []; // initialize c

        for (i = 0; i < rows; i++) {
          cdata[i] = [];
        } // workspaces


        var xa = [];
        var xb = []; // marks indicating we have a value in x for a given column

        var wa = [];
        var wb = []; // loop columns

        for (j = 0; j < columns; j++) {
          // columns mark
          var mark = j + 1; // scatter the values of A(:,j) into workspace

          _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace


          _scatter(b, j, wb, xb, mark); // loop rows


          for (i = 0; i < rows; i++) {
            // matrix values @ i,j
            var va = wa[i] === mark ? xa[i] : zero;
            var vb = wb[i] === mark ? xb[i] : zero; // invoke callback

            cdata[i][j] = cf(va, vb);
          }
        } // return dense matrix


        return new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };

      function _scatter(m, j, w, x, mark) {
        // a arrays
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // loop values in column j

        for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
          // row
          var i = index[k]; // update workspace

          w[i] = mark;
          x[i] = values[k];
        }
      }
    });

    var name$3u = 'bitXor';
    var dependencies$3u = ['typed', 'matrix', 'DenseMatrix'];
    var createBitXor = /* #__PURE__ */factory(name$3u, dependencies$3u, _ref => {
      var {
        typed,
        matrix,
        DenseMatrix
      } = _ref;
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm07 = createAlgorithm07({
        typed,
        DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Bitwise XOR two values, `x ^ y`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.bitXor(x, y)
       *
       * Examples:
       *
       *    math.bitXor(1, 2)               // returns number 3
       *
       *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]
       *
       * See also:
       *
       *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x First value to xor
       * @param  {number | BigNumber | Array | Matrix} y Second value to xor
       * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
       */

      return typed(name$3u, {
        'number, number': bitXorNumber,
        'BigNumber, BigNumber': bitXor$1,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$3t = 'arg';
    var dependencies$3t = ['typed'];
    var createArg = /* #__PURE__ */factory(name$3t, dependencies$3t, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Compute the argument of a complex value.
       * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.arg(x)
       *
       * Examples:
       *
       *    const a = math.complex(2, 2)
       *    math.arg(a) / math.pi          // returns number 0.25
       *
       *    const b = math.complex('2 + 3i')
       *    math.arg(b)                    // returns number 0.982793723247329
       *    math.atan2(3, 2)               // returns number 0.982793723247329
       *
       * See also:
       *
       *    re, im, conj, abs
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            A complex number or array with complex numbers
       * @return {number | BigNumber | Array | Matrix} The argument of x
       */
      return typed(name$3t, {
        number: function number(x) {
          return Math.atan2(0, x);
        },
        BigNumber: function BigNumber(x) {
          return x.constructor.atan2(0, x);
        },
        Complex: function Complex(x) {
          return x.arg();
        },
        // TODO: implement BigNumber support for function arg
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$3s = 'conj';
    var dependencies$3s = ['typed'];
    var createConj = /* #__PURE__ */factory(name$3s, dependencies$3s, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Compute the complex conjugate of a complex value.
       * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.conj(x)
       *
       * Examples:
       *
       *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
       *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
       *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
       *
       * See also:
       *
       *    re, im, arg, abs
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            A complex number or array with complex numbers
       * @return {number | BigNumber | Complex | Array | Matrix}
       *            The complex conjugate of x
       */
      return typed(name$3s, {
        number: function number(x) {
          return x;
        },
        BigNumber: function BigNumber(x) {
          return x;
        },
        Complex: function Complex(x) {
          return x.conjugate();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$3r = 'im';
    var dependencies$3r = ['typed'];
    var createIm = /* #__PURE__ */factory(name$3r, dependencies$3r, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Get the imaginary part of a complex number.
       * For a complex number `a + bi`, the function returns `b`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.im(x)
       *
       * Examples:
       *
       *    const a = math.complex(2, 3)
       *    math.re(a)                     // returns number 2
       *    math.im(a)                     // returns number 3
       *
       *    math.re(math.complex('-5.2i')) // returns number -5.2
       *    math.re(math.complex(2.4))     // returns number 0
       *
       * See also:
       *
       *    re, conj, abs, arg
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            A complex number or array with complex numbers
       * @return {number | BigNumber | Array | Matrix} The imaginary part of x
       */
      return typed(name$3r, {
        number: function number(x) {
          return 0;
        },
        BigNumber: function BigNumber(x) {
          return x.mul(0);
        },
        Fraction: function Fraction(x) {
          return x.mul(0);
        },
        Complex: function Complex(x) {
          return x.im;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$3q = 're';
    var dependencies$3q = ['typed'];
    var createRe = /* #__PURE__ */factory(name$3q, dependencies$3q, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Get the real part of a complex number.
       * For a complex number `a + bi`, the function returns `a`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.re(x)
       *
       * Examples:
       *
       *    const a = math.complex(2, 3)
       *    math.re(a)                     // returns number 2
       *    math.im(a)                     // returns number 3
       *
       *    math.re(math.complex('-5.2i')) // returns number 0
       *    math.re(math.complex(2.4))     // returns number 2.4
       *
       * See also:
       *
       *    im, conj, abs, arg
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            A complex number or array with complex numbers
       * @return {number | BigNumber | Array | Matrix} The real part of x
       */
      return typed(name$3q, {
        number: function number(x) {
          return x;
        },
        BigNumber: function BigNumber(x) {
          return x;
        },
        Fraction: function Fraction(x) {
          return x;
        },
        Complex: function Complex(x) {
          return x.re;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$3p = 'not';
    var dependencies$3p = ['typed'];
    var createNot = /* #__PURE__ */factory(name$3p, dependencies$3p, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Logical `not`. Flips boolean value of a given parameter.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.not(x)
       *
       * Examples:
       *
       *    math.not(2)      // returns false
       *    math.not(0)      // returns true
       *    math.not(true)   // returns false
       *
       *    a = [2, -7, 0]
       *    math.not(a)      // returns [false, false, true]
       *
       * See also:
       *
       *    and, or, xor
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
       * @return {boolean | Array | Matrix}
       *            Returns true when input is a zero or empty value.
       */
      return typed(name$3p, {
        number: notNumber,
        Complex: function Complex(x) {
          return x.re === 0 && x.im === 0;
        },
        BigNumber: function BigNumber(x) {
          return x.isZero() || x.isNaN();
        },
        Unit: function Unit(x) {
          return x.value !== null ? this(x.value) : true;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$3o = 'or';
    var dependencies$3o = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
    var createOr = /* #__PURE__ */factory(name$3o, dependencies$3o, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        DenseMatrix
      } = _ref;
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm05 = createAlgorithm05({
        typed,
        equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.or(x, y)
       *
       * Examples:
       *
       *    math.or(2, 4)   // returns true
       *
       *    a = [2, 5, 0]
       *    b = [0, 22, 0]
       *    c = 0
       *
       *    math.or(a, b)   // returns [true, true, false]
       *    math.or(b, c)   // returns [false, true, false]
       *
       * See also:
       *
       *    and, not, xor
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
       * @return {boolean | Array | Matrix}
       *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
       */

      return typed(name$3o, {
        'number, number': orNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
        },
        'Unit, Unit': function UnitUnit(x, y) {
          return this(x.value || 0, y.value || 0);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm05(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$3n = 'xor';
    var dependencies$3n = ['typed', 'matrix', 'DenseMatrix'];
    var createXor = /* #__PURE__ */factory(name$3n, dependencies$3n, _ref => {
      var {
        typed,
        matrix,
        DenseMatrix
      } = _ref;
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm07 = createAlgorithm07({
        typed,
        DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.xor(x, y)
       *
       * Examples:
       *
       *    math.xor(2, 4)   // returns false
       *
       *    a = [2, 0, 0]
       *    b = [2, 7, 0]
       *    c = 0
       *
       *    math.xor(a, b)   // returns [false, true, false]
       *    math.xor(a, c)   // returns [true, false, false]
       *
       * See also:
       *
       *    and, not, or
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
       * @return {boolean | Array | Matrix}
       *            Returns true when one and only one input is defined with a nonzero/nonempty value.
       */

      return typed(name$3n, {
        'number, number': xorNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
        },
        'Unit, Unit': function UnitUnit(x, y) {
          return this(x.value || 0, y.value || 0);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$3m = 'concat';
    var dependencies$3m = ['typed', 'matrix', 'isInteger'];
    var createConcat = /* #__PURE__ */factory(name$3m, dependencies$3m, _ref => {
      var {
        typed,
        matrix,
        isInteger
      } = _ref;

      /**
       * Concatenate two or more matrices.
       *
       * Syntax:
       *
       *     math.concat(A, B, C, ...)
       *     math.concat(A, B, C, ..., dim)
       *
       * Where:
       *
       * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
       *   By default the last dimension of the matrices.
       *
       * Examples:
       *
       *    const A = [[1, 2], [5, 6]]
       *    const B = [[3, 4], [7, 8]]
       *
       *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
       *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
       *    math.concat('hello', ' ', 'world') // returns 'hello world'
       *
       * See also:
       *
       *    size, squeeze, subset, transpose
       *
       * @param {... Array | Matrix} args     Two or more matrices
       * @return {Array | Matrix} Concatenated matrix
       */
      return typed(name$3m, {
        // TODO: change signature to '...Array | Matrix, dim?' when supported
        '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
          var i;
          var len = args.length;
          var dim = -1; // zero-based dimension

          var prevDim;
          var asMatrix = false;
          var matrices = []; // contains multi dimensional arrays

          for (i = 0; i < len; i++) {
            var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)

            if (isMatrix(arg)) {
              asMatrix = true;
            }

            if (isNumber(arg) || isBigNumber(arg)) {
              if (i !== len - 1) {
                throw new Error('Dimension must be specified as last argument');
              } // last argument contains the dimension on which to concatenate


              prevDim = dim;
              dim = arg.valueOf(); // change BigNumber to number

              if (!isInteger(dim)) {
                throw new TypeError('Integer number expected for dimension');
              }

              if (dim < 0 || i > 0 && dim > prevDim) {
                // TODO: would be more clear when throwing a DimensionError here
                throw new IndexError(dim, prevDim + 1);
              }
            } else {
              // this is a matrix or array
              var m = clone$1(arg).valueOf();
              var size = arraySize(m);
              matrices[i] = m;
              prevDim = dim;
              dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions

              if (i > 0 && dim !== prevDim) {
                throw new DimensionError(prevDim + 1, dim + 1);
              }
            }
          }

          if (matrices.length === 0) {
            throw new SyntaxError('At least one matrix expected');
          }

          var res = matrices.shift();

          while (matrices.length) {
            res = _concat(res, matrices.shift(), dim, 0);
          }

          return asMatrix ? matrix(res) : res;
        },
        '...string': function string(args) {
          return args.join('');
        }
      });
    });
    /**
     * Recursively concatenate two matrices.
     * The contents of the matrices is not cloned.
     * @param {Array} a             Multi dimensional array
     * @param {Array} b             Multi dimensional array
     * @param {number} concatDim    The dimension on which to concatenate (zero-based)
     * @param {number} dim          The current dim (zero-based)
     * @return {Array} c            The concatenated matrix
     * @private
     */

    function _concat(a, b, concatDim, dim) {
      if (dim < concatDim) {
        // recurse into next dimension
        if (a.length !== b.length) {
          throw new DimensionError(a.length, b.length);
        }

        var c = [];

        for (var i = 0; i < a.length; i++) {
          c[i] = _concat(a[i], b[i], concatDim, dim + 1);
        }

        return c;
      } else {
        // concatenate this dimension
        return a.concat(b);
      }
    }

    var name$3l = 'column';
    var dependencies$3l = ['typed', 'Index', 'matrix', 'range'];
    var createColumn = /* #__PURE__ */factory(name$3l, dependencies$3l, _ref => {
      var {
        typed,
        Index,
        matrix,
        range
      } = _ref;

      /**
       * Return a column from a Matrix.
       *
       * Syntax:
       *
       *     math.column(value, index)
       *
       * Example:
       *
       *     // get a column
       *     const d = [[1, 2], [3, 4]]
       *     math.column(d, 1) // returns [[2], [4]]
       *
       * See also:
       *
       *     row
       *
       * @param {Array | Matrix } value   An array or matrix
       * @param {number} column           The index of the column
       * @return {Array | Matrix}         The retrieved column
       */
      return typed(name$3l, {
        'Matrix, number': _column,
        'Array, number': function ArrayNumber(value, column) {
          return _column(matrix(clone$1(value)), column).valueOf();
        }
      });
      /**
       * Retrieve a column of a matrix
       * @param {Matrix } value  A matrix
       * @param {number} column  The index of the column
       * @return {Matrix}        The retrieved column
       */

      function _column(value, column) {
        // check dimensions
        if (value.size().length !== 2) {
          throw new Error('Only two dimensional matrix is supported');
        }

        validateIndex(column, value.size()[1]);
        var rowRange = range(0, value.size()[0]);
        var index = new Index(rowRange, column);
        return value.subset(index);
      }
    });

    var name$3k = 'count';
    var dependencies$3k = ['typed', 'size', 'prod'];
    var createCount = /* #__PURE__ */factory(name$3k, dependencies$3k, _ref => {
      var {
        typed,
        size,
        prod
      } = _ref;

      /**
       * Count the number of elements of a matrix, array or string.
       *
       * Syntax:
       *
       *     math.count(x)
       *
       * Examples:
       *
       *     math.count('hello world')        // returns 11
       *     const A = [[1, 2, 3], [4, 5, 6]]
       *     math.count(A)                    // returns 6
       *     math.count(math.range(1,6))      // returns 5
       *
       * See also:
       *
       *     size
       *
       * @param {string | Array | Matrix} x  A matrix or string
       * @return {number} An integer with the elements in `x`.
       */
      return typed(name$3k, {
        string: function string(x) {
          return x.length;
        },
        'Matrix | Array': function MatrixArray(x) {
          return prod(size(x));
        }
      });
    });

    var name$3j = 'cross';
    var dependencies$3j = ['typed', 'matrix', 'subtract', 'multiply'];
    var createCross = /* #__PURE__ */factory(name$3j, dependencies$3j, _ref => {
      var {
        typed,
        matrix,
        subtract,
        multiply
      } = _ref;

      /**
       * Calculate the cross product for two vectors in three dimensional space.
       * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
       * as:
       *
       *    cross(A, B) = [
       *      a2 * b3 - a3 * b2,
       *      a3 * b1 - a1 * b3,
       *      a1 * b2 - a2 * b1
       *    ]
       *
       * If one of the input vectors has a dimension greater than 1, the output
       * vector will be a 1x3 (2-dimensional) matrix.
       *
       * Syntax:
       *
       *    math.cross(x, y)
       *
       * Examples:
       *
       *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]
       *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]
       *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]
       *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]
       *
       * See also:
       *
       *    dot, multiply
       *
       * @param  {Array | Matrix} x   First vector
       * @param  {Array | Matrix} y   Second vector
       * @return {Array | Matrix}     Returns the cross product of `x` and `y`
       */
      return typed(name$3j, {
        'Matrix, Matrix': function MatrixMatrix(x, y) {
          return matrix(_cross(x.toArray(), y.toArray()));
        },
        'Matrix, Array': function MatrixArray(x, y) {
          return matrix(_cross(x.toArray(), y));
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          return matrix(_cross(x, y.toArray()));
        },
        'Array, Array': _cross
      });
      /**
       * Calculate the cross product for two arrays
       * @param {Array} x  First vector
       * @param {Array} y  Second vector
       * @returns {Array} Returns the cross product of x and y
       * @private
       */

      function _cross(x, y) {
        var highestDimension = Math.max(arraySize(x).length, arraySize(y).length);
        x = squeeze$1(x);
        y = squeeze$1(y);
        var xSize = arraySize(x);
        var ySize = arraySize(y);

        if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {
          throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
        }

        var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];

        if (highestDimension > 1) {
          return [product];
        } else {
          return product;
        }
      }
    });

    var name$3i = 'diag';
    var dependencies$3i = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];
    var createDiag = /* #__PURE__ */factory(name$3i, dependencies$3i, _ref => {
      var {
        typed,
        matrix,
        DenseMatrix,
        SparseMatrix
      } = _ref;

      /**
       * Create a diagonal matrix or retrieve the diagonal of a matrix
       *
       * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
       * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
       * When k is positive, the values are placed on the super diagonal.
       * When k is negative, the values are placed on the sub diagonal.
       *
       * Syntax:
       *
       *     math.diag(X)
       *     math.diag(X, format)
       *     math.diag(X, k)
       *     math.diag(X, k, format)
       *
       * Examples:
       *
       *     // create a diagonal matrix
       *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
       *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
       *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
       *
       *    // retrieve the diagonal from a matrix
       *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
       *    math.diag(a)   // returns [1, 5, 9]
       *
       * See also:
       *
       *     ones, zeros, identity
       *
       * @param {Matrix | Array} x          A two dimensional matrix or a vector
       * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
       *                                    in or retrieved.
       * @param {string} [format='dense']   The matrix storage format.
       *
       * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
       */
      return typed(name$3i, {
        // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
        Array: function Array(x) {
          return _diag(x, 0, arraySize(x), null);
        },
        'Array, number': function ArrayNumber(x, k) {
          return _diag(x, k, arraySize(x), null);
        },
        'Array, BigNumber': function ArrayBigNumber(x, k) {
          return _diag(x, k.toNumber(), arraySize(x), null);
        },
        'Array, string': function ArrayString(x, format) {
          return _diag(x, 0, arraySize(x), format);
        },
        'Array, number, string': function ArrayNumberString(x, k, format) {
          return _diag(x, k, arraySize(x), format);
        },
        'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
          return _diag(x, k.toNumber(), arraySize(x), format);
        },
        Matrix: function Matrix(x) {
          return _diag(x, 0, x.size(), x.storage());
        },
        'Matrix, number': function MatrixNumber(x, k) {
          return _diag(x, k, x.size(), x.storage());
        },
        'Matrix, BigNumber': function MatrixBigNumber(x, k) {
          return _diag(x, k.toNumber(), x.size(), x.storage());
        },
        'Matrix, string': function MatrixString(x, format) {
          return _diag(x, 0, x.size(), format);
        },
        'Matrix, number, string': function MatrixNumberString(x, k, format) {
          return _diag(x, k, x.size(), format);
        },
        'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
          return _diag(x, k.toNumber(), x.size(), format);
        }
      });
      /**
       * Creeate diagonal matrix from a vector or vice versa
       * @param {Array | Matrix} x
       * @param {number} k
       * @param {string} format Storage format for matrix. If null,
       *                          an Array is returned
       * @returns {Array | Matrix}
       * @private
       */

      function _diag(x, k, size, format) {
        if (!isInteger$1(k)) {
          throw new TypeError('Second parameter in function diag must be an integer');
        }

        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // check dimensions

        switch (size.length) {
          case 1:
            return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);

          case 2:
            return _getDiagonal(x, k, format, size, kSub, kSuper);
        }

        throw new RangeError('Matrix for function diag must be 2 dimensional');
      }

      function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
        // matrix size
        var ms = [l + kSub, l + kSuper];

        if (format && format !== 'sparse' && format !== 'dense') {
          throw new TypeError("Unknown matrix type ".concat(format, "\""));
        } // create diagonal matrix


        var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k); // check we need to return a matrix

        return format !== null ? m : m.valueOf();
      }

      function _getDiagonal(x, k, format, s, kSub, kSuper) {
        // check x is a Matrix
        if (isMatrix(x)) {
          // get diagonal matrix
          var dm = x.diagonal(k); // check we need to return a matrix

          if (format !== null) {
            // check we need to change matrix format
            if (format !== dm.storage()) {
              return matrix(dm, format);
            }

            return dm;
          }

          return dm.valueOf();
        } // vector size


        var n = Math.min(s[0] - kSub, s[1] - kSuper); // diagonal values

        var vector = []; // loop diagonal

        for (var i = 0; i < n; i++) {
          vector[i] = x[i + kSub][i + kSuper];
        } // check we need to return a matrix


        return format !== null ? matrix(vector) : vector;
      }
    });

    // (c) 2018, Mariusz Nowak
    // SPDX-License-Identifier: ISC
    // Derived from https://github.com/medikoo/lru-queue
    function lruQueue(limit) {
      var size = 0;
      var base = 1;
      var queue = Object.create(null);
      var map = Object.create(null);
      var index = 0;

      var del = function del(id) {
        var oldIndex = map[id];
        if (!oldIndex) return;
        delete queue[oldIndex];
        delete map[id];
        --size;
        if (base !== oldIndex) return;

        if (!size) {
          index = 0;
          base = 1;
          return;
        }

        while (!hasOwnProperty.call(queue, ++base)) {
          continue;
        }
      };

      limit = Math.abs(limit);
      return {
        hit: function hit(id) {
          var oldIndex = map[id];
          var nuIndex = ++index;
          queue[nuIndex] = id;
          map[id] = nuIndex;

          if (!oldIndex) {
            ++size;
            if (size <= limit) return undefined;
            id = queue[base];
            del(id);
            return id;
          }

          delete queue[oldIndex];
          if (base !== oldIndex) return undefined;

          while (!hasOwnProperty.call(queue, ++base)) {
            continue;
          }

          return undefined;
        },
        delete: del,
        clear: function clear() {
          size = index = 0;
          base = 1;
          queue = Object.create(null);
          map = Object.create(null);
        }
      };
    }

    // function utils
    /**
     * Memoize a given function by caching the computed result.
     * The cache of a memoized function can be cleared by deleting the `cache`
     * property of the function.
     *
     * @param {function} fn                     The function to be memoized.
     *                                          Must be a pure function.
     * @param {Object} [options]
     * @param {function(args: Array): string} [options.hasher]
     *    A custom hash builder. Is JSON.stringify by default.
     * @param {number | undefined} [options.limit]
     *    Maximum number of values that may be cached. Undefined indicates
     *    unlimited (default)
     * @return {function}                       Returns the memoized function
     */

    function memoize(fn) {
      var {
        hasher,
        limit
      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      limit = limit == null ? Number.POSITIVE_INFINITY : limit;
      hasher = hasher == null ? JSON.stringify : hasher;
      return function memoize() {
        if (typeof memoize.cache !== 'object') {
          memoize.cache = {
            values: new Map(),
            lru: lruQueue(limit || Number.POSITIVE_INFINITY)
          };
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          args[i] = arguments[i];
        }

        var hash = hasher(args);

        if (memoize.cache.values.has(hash)) {
          memoize.cache.lru.hit(hash);
          return memoize.cache.values.get(hash);
        }

        var newVal = fn.apply(fn, args);
        memoize.cache.values.set(hash, newVal);
        memoize.cache.values.delete(memoize.cache.lru.hit(hash));
        return newVal;
      };
    }
    /**
     * Find the maximum number of arguments expected by a typed function.
     * @param {function} fn   A typed function
     * @return {number} Returns the maximum number of expected arguments.
     *                  Returns -1 when no signatures where found on the function.
     */

    function maxArgumentCount(fn) {
      return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
        var count = (signature.match(/,/g) || []).length + 1;
        return Math.max(args, count);
      }, -1);
    }

    var name$3h = 'filter';
    var dependencies$3h = ['typed'];
    var createFilter = /* #__PURE__ */factory(name$3h, dependencies$3h, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Filter the items in an array or one dimensional matrix.
       *
       * Syntax:
       *
       *    math.filter(x, test)
       *
       * Examples:
       *
       *    function isPositive (x) {
       *      return x > 0
       *    }
       *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]
       *
       *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/) // returns ["23", "100", "55"]
       *
       * See also:
       *
       *    forEach, map, sort
       *
       * @param {Matrix | Array} x    A one dimensional matrix or array to filter
       * @param {Function | RegExp} test
       *        A function or regular expression to test items.
       *        All entries for which `test` returns true are returned.
       *        When `test` is a function, it is invoked with three parameters:
       *        the value of the element, the index of the element, and the
       *        matrix/array being traversed. The function must return a boolean.
       * @return {Matrix | Array} Returns the filtered matrix.
       */
      return typed('filter', {
        'Array, function': _filterCallback,
        'Matrix, function': function MatrixFunction(x, test) {
          return x.create(_filterCallback(x.toArray(), test));
        },
        'Array, RegExp': filterRegExp,
        'Matrix, RegExp': function MatrixRegExp(x, test) {
          return x.create(filterRegExp(x.toArray(), test));
        }
      });
    });
    /**
     * Filter values in a callback given a callback function
     * @param {Array} x
     * @param {Function} callback
     * @return {Array} Returns the filtered array
     * @private
     */

    function _filterCallback(x, callback) {
      // figure out what number of arguments the callback function expects
      var args = maxArgumentCount(callback);
      return filter$1(x, function (value, index, array) {
        // invoke the callback function with the right number of arguments
        if (args === 1) {
          return callback(value);
        } else if (args === 2) {
          return callback(value, [index]);
        } else {
          // 3 or -1
          return callback(value, [index], array);
        }
      });
    }

    var name$3g = 'flatten';
    var dependencies$3g = ['typed', 'matrix'];
    var createFlatten = /* #__PURE__ */factory(name$3g, dependencies$3g, _ref => {
      var {
        typed,
        matrix
      } = _ref;

      /**
       * Flatten a multi dimensional matrix into a single dimensional matrix.
       * It is guaranteed to always return a clone of the argument.
       *
       * Syntax:
       *
       *    math.flatten(x)
       *
       * Examples:
       *
       *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]
       *
       * See also:
       *
       *    concat, resize, size, squeeze
       *
       * @param {Matrix | Array} x   Matrix to be flattened
       * @return {Matrix | Array} Returns the flattened matrix
       */
      return typed(name$3g, {
        Array: function Array(x) {
          return flatten$2(clone$1(x));
        },
        Matrix: function Matrix(x) {
          var flat = flatten$2(clone$1(x.toArray())); // TODO: return the same matrix type as x

          return matrix(flat);
        }
      });
    });

    var name$3f = 'forEach';
    var dependencies$3f = ['typed'];
    var createForEach = /* #__PURE__ */factory(name$3f, dependencies$3f, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Iterate over all elements of a matrix/array, and executes the given callback function.
       *
       * Syntax:
       *
       *    math.forEach(x, callback)
       *
       * Examples:
       *
       *    math.forEach([1, 2, 3], function(value) {
       *      console.log(value)
       *    })
       *    // outputs 1, 2, 3
       *
       * See also:
       *
       *    filter, map, sort
       *
       * @param {Matrix | Array} x    The matrix to iterate on.
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix/array being traversed.
       */
      return typed(name$3f, {
        'Array, function': _forEach,
        'Matrix, function': function MatrixFunction(x, callback) {
          return x.forEach(callback);
        }
      });
    });
    /**
     * forEach for a multi dimensional array
     * @param {Array} array
     * @param {Function} callback
     * @private
     */

    function _forEach(array, callback) {
      // figure out what number of arguments the callback function expects
      var args = maxArgumentCount(callback);

      var recurse = function recurse(value, index) {
        if (Array.isArray(value)) {
          forEach$1(value, function (child, i) {
            // we create a copy of the index array and append the new index value
            recurse(child, index.concat(i));
          });
        } else {
          // invoke the callback function with the right number of arguments
          if (args === 1) {
            callback(value);
          } else if (args === 2) {
            callback(value, index);
          } else {
            // 3 or -1
            callback(value, index, array);
          }
        }
      };

      recurse(array, []);
    }

    var name$3e = 'getMatrixDataType';
    var dependencies$3e = ['typed'];
    var createGetMatrixDataType = /* #__PURE__ */factory(name$3e, dependencies$3e, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Find the data type of all elements in a matrix or array,
       * for example 'number' if all items are a number and 'Complex' if all values
       * are complex numbers.
       * If a matrix contains more than one data type, it will return 'mixed'.
       *
       * Syntax:
       *
       *    math.getMatrixDataType(x)
       *
       * Examples:
       *
       *    const x = [ [1, 2, 3], [4, 5, 6] ]
       *    const mixedX = [ [1, true], [2, 3] ]
       *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]
       *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]
       *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]
       *    const sparse = math.sparse(x)
       *    const dense = math.matrix(x)
       *    math.getMatrixDataType(x)   // returns 'number'
       *    math.getMatrixDataType(sparse)   // returns 'number'
       *    math.getMatrixDataType(dense)   // returns 'number'
       *    math.getMatrixDataType(mixedX) // returns 'mixed'
       *    math.getMatrixDataType(fractionX) // returns 'Fraction'
       *    math.getMatrixDataType(unitX) // returns 'Unit'
       *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'
       *
       * See also:
       *  SparseMatrix, DenseMatrix
       *
       * @param {...Matrix | Array} x   The Matrix with values.
       *
       * @return {string} A string representation of the matrix type
       */
      return typed(name$3e, {
        Array: function Array(x) {
          return getArrayDataType(x, typeOf$1);
        },
        Matrix: function Matrix(x) {
          return x.getDataType();
        }
      });
    });

    var name$3d = 'identity';
    var dependencies$3d = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];
    var createIdentity = /* #__PURE__ */factory(name$3d, dependencies$3d, _ref => {
      var {
        typed,
        config,
        matrix,
        BigNumber,
        DenseMatrix,
        SparseMatrix
      } = _ref;

      /**
       * Create a 2-dimensional identity matrix with size m x n or n x n.
       * The matrix has ones on the diagonal and zeros elsewhere.
       *
       * Syntax:
       *
       *    math.identity(n)
       *    math.identity(n, format)
       *    math.identity(m, n)
       *    math.identity(m, n, format)
       *    math.identity([m, n])
       *    math.identity([m, n], format)
       *
       * Examples:
       *
       *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
       *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]
       *
       *    const A = [[1, 2, 3], [4, 5, 6]]
       *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]
       *
       * See also:
       *
       *    diag, ones, zeros, size, range
       *
       * @param {...number | Matrix | Array} size   The size for the matrix
       * @param {string} [format]                   The Matrix storage format
       *
       * @return {Matrix | Array | number} A matrix with ones on the diagonal.
       */
      return typed(name$3d, {
        '': function _() {
          return config.matrix === 'Matrix' ? matrix([]) : [];
        },
        string: function string(format) {
          return matrix(format);
        },
        'number | BigNumber': function numberBigNumber(rows) {
          return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);
        },
        'number | BigNumber, string': function numberBigNumberString(rows, format) {
          return _identity(rows, rows, format);
        },
        'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
          return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);
        },
        'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
          return _identity(rows, cols, format);
        },
        Array: function Array(size) {
          return _identityVector(size);
        },
        'Array, string': function ArrayString(size, format) {
          return _identityVector(size, format);
        },
        Matrix: function Matrix(size) {
          return _identityVector(size.valueOf(), size.storage());
        },
        'Matrix, string': function MatrixString(size, format) {
          return _identityVector(size.valueOf(), format);
        }
      });

      function _identityVector(size, format) {
        switch (size.length) {
          case 0:
            return format ? matrix(format) : [];

          case 1:
            return _identity(size[0], size[0], format);

          case 2:
            return _identity(size[0], size[1], format);

          default:
            throw new Error('Vector containing two values expected');
        }
      }
      /**
       * Create an identity matrix
       * @param {number | BigNumber} rows
       * @param {number | BigNumber} cols
       * @param {string} [format]
       * @returns {Matrix}
       * @private
       */


      function _identity(rows, cols, format) {
        // BigNumber constructor with the right precision
        var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;
        if (isBigNumber(rows)) rows = rows.toNumber();
        if (isBigNumber(cols)) cols = cols.toNumber();

        if (!isInteger$1(rows) || rows < 1) {
          throw new Error('Parameters in function identity must be positive integers');
        }

        if (!isInteger$1(cols) || cols < 1) {
          throw new Error('Parameters in function identity must be positive integers');
        }

        var one = Big ? new BigNumber(1) : 1;
        var defaultValue = Big ? new Big(0) : 0;
        var size = [rows, cols]; // check we need to return a matrix

        if (format) {
          // create diagonal matrix (use optimized implementation for storage format)
          if (format === 'sparse') {
            return SparseMatrix.diagonal(size, one, 0, defaultValue);
          }

          if (format === 'dense') {
            return DenseMatrix.diagonal(size, one, 0, defaultValue);
          }

          throw new TypeError("Unknown matrix type \"".concat(format, "\""));
        } // create and resize array


        var res = resize$1([], size, defaultValue); // fill in ones on the diagonal

        var minimum = rows < cols ? rows : cols; // fill diagonal

        for (var d = 0; d < minimum; d++) {
          res[d][d] = one;
        }

        return res;
      }
    });

    var name$3c = 'kron';
    var dependencies$3c = ['typed', 'matrix', 'multiplyScalar'];
    var createKron = /* #__PURE__ */factory(name$3c, dependencies$3c, _ref => {
      var {
        typed,
        matrix,
        multiplyScalar
      } = _ref;

      /**
         * Calculates the kronecker product of 2 matrices or vectors.
         *
         * NOTE: If a one dimensional vector / matrix is given, it will be
         * wrapped so its two dimensions.
         * See the examples.
         *
         * Syntax:
         *
         *    math.kron(x, y)
         *
         * Examples:
         *
         *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])
         *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
         *
         *    math.kron([1,1], [2,3,4])
         *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
         *
         * See also:
         *
         *    multiply, dot, cross
         *
         * @param  {Array | Matrix} x     First vector
         * @param  {Array | Matrix} y     Second vector
         * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
         */
      return typed(name$3c, {
        'Matrix, Matrix': function MatrixMatrix(x, y) {
          return matrix(_kron(x.toArray(), y.toArray()));
        },
        'Matrix, Array': function MatrixArray(x, y) {
          return matrix(_kron(x.toArray(), y));
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          return matrix(_kron(x, y.toArray()));
        },
        'Array, Array': _kron
      });
      /**
         * Calculate the kronecker product of two matrices / vectors
         * @param {Array} a  First vector
         * @param {Array} b  Second vector
         * @returns {Array} Returns the kronecker product of x and y
         * @private
         */

      function _kron(a, b) {
        // Deal with the dimensions of the matricies.
        if (arraySize(a).length === 1) {
          // Wrap it in a 2D Matrix
          a = [a];
        }

        if (arraySize(b).length === 1) {
          // Wrap it in a 2D Matrix
          b = [b];
        }

        if (arraySize(a).length > 2 || arraySize(b).length > 2) {
          throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
        }

        var t = [];
        var r = [];
        return a.map(function (a) {
          return b.map(function (b) {
            r = [];
            t.push(r);
            return a.map(function (y) {
              return b.map(function (x) {
                return r.push(multiplyScalar(y, x));
              });
            });
          });
        }) && t;
      }
    });

    var name$3b = 'map';
    var dependencies$3b = ['typed'];
    var createMap = /* #__PURE__ */factory(name$3b, dependencies$3b, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Create a new matrix or array with the results of a callback function executed on
       * each entry of a given matrix/array.
       *
       * For each entry of the input, the callback is invoked with three arguments:
       * the value of the entry, the index at which that entry occurs, and the full
       * matrix/array being traversed. Note that because the matrix/array might be
       * multidimensional, the "index" argument is always an array of numbers giving
       * the index in each dimension. This is true even for vectors: the "index"
       * argument is an array of length 1, rather than simply a number.
       *
       * Syntax:
       *
       *    math.map(x, callback)
       *
       * Examples:
       *
       *    math.map([1, 2, 3], function(value) {
       *      return value * value
       *    })  // returns [1, 4, 9]
       *
       *    // The calling convention for the callback can cause subtleties:
       *    math.map([1, 2, 3], math.format)
       *    // throws TypeError: map attempted to call 'format(1,[0])' but argument 2 of type Array does not match expected type number or function or Object or string or boolean
       *    // [This happens because `format` _can_ take a second argument,
       *    // but its semantics don't match that of the 2nd argument `map` provides]
       *
       *    // To avoid this error, use a function that takes exactly the
       *    // desired arguments:
       *    math.map([1, 2, 3], x => math.format(x)) // returns ['1', '2', '3']
       *
       * See also:
       *
       *    filter, forEach, sort
       *
       * @param {Matrix | Array} x    The input to iterate on.
       * @param {Function} callback
       *     The function to call (as described above) on each entry of the input
       * @return {Matrix | array}
       *     Transformed map of x; always has the same type and shape as x
       */
      return typed(name$3b, {
        'Array, function': _map$1,
        'Matrix, function': function MatrixFunction(x, callback) {
          return x.map(callback);
        }
      });
    });
    /**
     * Map for a multi dimensional array
     * @param {Array} array
     * @param {Function} callback
     * @return {Array}
     * @private
     */

    function _map$1(array, callback) {
      // figure out what number of arguments the callback function expects
      var args = maxArgumentCount(callback);

      var recurse = function recurse(value, index) {
        if (Array.isArray(value)) {
          return value.map(function (child, i) {
            // we create a copy of the index array and append the new index value
            return recurse(child, index.concat(i));
          });
        } else {
          try {
            // invoke the callback function with the right number of arguments
            if (args === 1) {
              return callback(value);
            } else if (args === 2) {
              return callback(value, index);
            } else {
              // 3 or -1
              return callback(value, index, array);
            }
          } catch (err) {
            // But maybe the arguments still weren't right
            if (err instanceof TypeError && 'data' in err && err.data.category === 'wrongType') {
              var newmsg = "map attempted to call '".concat(err.data.fn, "(").concat(value);
              var indexString = JSON.stringify(index);

              if (args === 2) {
                newmsg += ',' + indexString;
              } else if (args !== 1) {
                newmsg += ",".concat(indexString, ",").concat(array);
              }

              newmsg += ")' but argument ".concat(err.data.index + 1, " of type ");
              newmsg += "".concat(err.data.actual, " does not match expected type ");
              newmsg += err.data.expected.join(' or ');
              throw new TypeError(newmsg);
            }

            throw err;
          }
        }
      };

      return recurse(array, []);
    }

    var name$3a = 'diff';
    var dependencies$3a = ['typed', 'matrix', 'subtract', 'number'];
    var createDiff = /* #__PURE__ */factory(name$3a, dependencies$3a, _ref => {
      var {
        typed,
        matrix,
        subtract,
        number
      } = _ref;

      /**
       * Create a new matrix or array of the difference between elements of the given array
       * The optional dim parameter lets you specify the dimension to evaluate the difference of
       * If no dimension parameter is passed it is assumed as dimension 0
       *
       * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber
       * Arrays must be 'rectangular' meaning arrays like [1, 2]
       * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays
       *
       * Syntax:
       *
       *     math.diff(arr)
       *     math.diff(arr, dim)
       *
       * Examples:
       *
       *     const arr = [1, 2, 4, 7, 0]
       *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)
       *     math.diff(math.matrix(arr)) // returns math.matrix([1, 2, 3, -7])
       *
       *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]
       *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]
       *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]
       *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]
       *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]
       *
       *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3
       *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed
       *
       *     // These will all produce the same result
       *     math.diff([[1, 2], [3, 4]])
       *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])
       *     math.diff([[1, 2], math.matrix([3, 4])])
       *     math.diff([math.matrix([1, 2]), [3, 4]])
       *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix
       *
       * See Also:
       *
       *      sum
       *      subtract
       *      partitionSelect
       *
       * @param {Array | Matrix} arr    An array or matrix
       * @param {number} dim            Dimension
       * @return {Array | Matrix}       Difference between array elements in given dimension
       */
      return typed(name$3a, {
        'Array | Matrix': function ArrayMatrix(arr) {
          // No dimension specified => assume dimension 0
          if (isMatrix(arr)) {
            return matrix(_diff(arr.toArray()));
          } else {
            return _diff(arr);
          }
        },
        'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {
          if (!isInteger$1(dim)) throw new RangeError('Dimension must be a whole number');

          if (isMatrix(arr)) {
            return matrix(_recursive(arr.toArray(), dim));
          } else {
            return _recursive(arr, dim);
          }
        },
        'Array | Matrix, BigNumber': function ArrayMatrixBigNumber(arr, dim) {
          return this(arr, number(dim));
        }
      });
      /**
       * Recursively find the correct dimension in the array/matrix
       * Then Apply _diff to that dimension
       *
       * @param {Array} arr      The array
       * @param {number} dim     Dimension
       * @return {Array}         resulting array
       */

      function _recursive(arr, dim) {
        if (isMatrix(arr)) {
          arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly
        }

        if (!Array.isArray(arr)) {
          throw RangeError('Array/Matrix does not have that many dimensions');
        }

        if (dim > 0) {
          var result = [];
          arr.forEach(element => {
            result.push(_recursive(element, dim - 1));
          });
          return result;
        } else if (dim === 0) {
          return _diff(arr);
        } else {
          throw RangeError('Cannot have negative dimension');
        }
      }
      /**
       * Difference between elements in the array
       *
       * @param {Array} arr      An array
       * @return {Array}         resulting array
       */


      function _diff(arr) {
        var result = [];
        var size = arr.length;

        if (size < 2) {
          return arr;
        }

        for (var i = 1; i < size; i++) {
          result.push(_ElementDiff(arr[i - 1], arr[i]));
        }

        return result;
      }
      /**
       * Difference between 2 objects
       *
       * @param {Object} obj1    First object
       * @param {Object} obj2    Second object
       * @return {Array}         resulting array
       */


      function _ElementDiff(obj1, obj2) {
        // Convert matrices to arrays
        if (isMatrix(obj1)) obj1 = obj1.toArray();
        if (isMatrix(obj2)) obj2 = obj2.toArray();
        var obj1IsArray = Array.isArray(obj1);
        var obj2IsArray = Array.isArray(obj2);

        if (obj1IsArray && obj2IsArray) {
          return _ArrayDiff(obj1, obj2);
        }

        if (!obj1IsArray && !obj2IsArray) {
          return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)
        }

        throw TypeError('Cannot calculate difference between 1 array and 1 non-array');
      }
      /**
       * Difference of elements in 2 arrays
       *
       * @param {Array} arr1     Array 1
       * @param {Array} arr2     Array 2
       * @return {Array}         resulting array
       */


      function _ArrayDiff(arr1, arr2) {
        if (arr1.length !== arr2.length) {
          throw RangeError('Not all sub-arrays have the same length');
        }

        var result = [];
        var size = arr1.length;

        for (var i = 0; i < size; i++) {
          result.push(_ElementDiff(arr1[i], arr2[i]));
        }

        return result;
      }
    });

    var name$39 = 'ones';
    var dependencies$39 = ['typed', 'config', 'matrix', 'BigNumber'];
    var createOnes = /* #__PURE__ */factory(name$39, dependencies$39, _ref => {
      var {
        typed,
        config,
        matrix,
        BigNumber
      } = _ref;

      /**
       * Create a matrix filled with ones. The created matrix can have one or
       * multiple dimensions.
       *
       * Syntax:
       *
       *    math.ones(m)
       *    math.ones(m, format)
       *    math.ones(m, n)
       *    math.ones(m, n, format)
       *    math.ones([m, n])
       *    math.ones([m, n], format)
       *    math.ones([m, n, p, ...])
       *    math.ones([m, n, p, ...], format)
       *
       * Examples:
       *
       *    math.ones(3)                   // returns [1, 1, 1]
       *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]
       *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
       *
       *    const A = [[1, 2, 3], [4, 5, 6]]
       *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]
       *
       * See also:
       *
       *    zeros, identity, size, range
       *
       * @param {...number | Array} size    The size of each dimension of the matrix
       * @param {string} [format]           The Matrix storage format
       *
       * @return {Array | Matrix | number}  A matrix filled with ones
       */
      return typed('ones', {
        '': function _() {
          return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
        },
        // math.ones(m, n, p, ..., format)
        // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
        '...number | BigNumber | string': function numberBigNumberString(size) {
          var last = size[size.length - 1];

          if (typeof last === 'string') {
            var format = size.pop();
            return _ones(size, format);
          } else if (config.matrix === 'Array') {
            return _ones(size);
          } else {
            return _ones(size, 'default');
          }
        },
        Array: _ones,
        Matrix: function Matrix(size) {
          var format = size.storage();
          return _ones(size.valueOf(), format);
        },
        'Array | Matrix, string': function ArrayMatrixString(size, format) {
          return _ones(size.valueOf(), format);
        }
      });
      /**
       * Create an Array or Matrix with ones
       * @param {Array} size
       * @param {string} [format='default']
       * @return {Array | Matrix}
       * @private
       */

      function _ones(size, format) {
        var hasBigNumbers = _normalize(size);

        var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;

        _validate(size);

        if (format) {
          // return a matrix
          var m = matrix(format);

          if (size.length > 0) {
            return m.resize(size, defaultValue);
          }

          return m;
        } else {
          // return an Array
          var arr = [];

          if (size.length > 0) {
            return resize$1(arr, size, defaultValue);
          }

          return arr;
        }
      } // replace BigNumbers with numbers, returns true if size contained BigNumbers


      function _normalize(size) {
        var hasBigNumbers = false;
        size.forEach(function (value, index, arr) {
          if (isBigNumber(value)) {
            hasBigNumbers = true;
            arr[index] = value.toNumber();
          }
        });
        return hasBigNumbers;
      } // validate arguments


      function _validate(size) {
        size.forEach(function (value) {
          if (typeof value !== 'number' || !isInteger$1(value) || value < 0) {
            throw new Error('Parameters in function ones must be positive integers');
          }
        });
      }
    });

    function noBignumber() {
      throw new Error('No "bignumber" implementation available');
    }
    function noFraction() {
      throw new Error('No "fraction" implementation available');
    }
    function noMatrix() {
      throw new Error('No "matrix" implementation available');
    }

    var name$38 = 'range';
    var dependencies$38 = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
    var createRange = /* #__PURE__ */factory(name$38, dependencies$38, _ref => {
      var {
        typed,
        config,
        matrix,
        bignumber,
        smaller,
        smallerEq,
        larger,
        largerEq
      } = _ref;

      /**
       * Create an array from a range.
       * By default, the range end is excluded. This can be customized by providing
       * an extra parameter `includeEnd`.
       *
       * Syntax:
       *
       *     math.range(str [, includeEnd])               // Create a range from a string,
       *                                                  // where the string contains the
       *                                                  // start, optional step, and end,
       *                                                  // separated by a colon.
       *     math.range(start, end [, includeEnd])        // Create a range with start and
       *                                                  // end and a step size of 1.
       *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
       *                                                  // and end.
       *
       * Where:
       *
       * - `str: string`
       *   A string 'start:end' or 'start:step:end'
       * - `start: {number | BigNumber}`
       *   Start of the range
       * - `end: number | BigNumber`
       *   End of the range, excluded by default, included when parameter includeEnd=true
       * - `step: number | BigNumber`
       *   Step size. Default value is 1.
       * - `includeEnd: boolean`
       *   Option to specify whether to include the end or not. False by default.
       *
       * Examples:
       *
       *     math.range(2, 6)        // [2, 3, 4, 5]
       *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]
       *     math.range('2:1:6')     // [2, 3, 4, 5]
       *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]
       *
       * See also:
       *
       *     ones, zeros, size, subset
       *
       * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
       * @return {Array | Matrix} range
       */
      return typed(name$38, {
        // TODO: simplify signatures when typed-function supports default values and optional arguments
        // TODO: a number or boolean should not be converted to string here
        string: _strRange,
        'string, boolean': _strRange,
        'number, number': function numberNumber(start, end) {
          return _out(_rangeEx(start, end, 1));
        },
        'number, number, number': function numberNumberNumber(start, end, step) {
          return _out(_rangeEx(start, end, step));
        },
        'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
          return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
        },
        'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
          return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
          var BigNumber = start.constructor;
          return _out(_bigRangeEx(start, end, new BigNumber(1)));
        },
        'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
          return _out(_bigRangeEx(start, end, step));
        },
        'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
          var BigNumber = start.constructor;
          return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));
        },
        'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
          return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
        }
      });

      function _out(arr) {
        if (config.matrix === 'Matrix') {
          return matrix ? matrix(arr) : noMatrix();
        }

        return arr;
      }

      function _strRange(str, includeEnd) {
        var r = _parse(str);

        if (!r) {
          throw new SyntaxError('String "' + str + '" is no valid range');
        }

        var fn;

        if (config.number === 'BigNumber') {
          if (bignumber === undefined) {
            noBignumber();
          }

          fn = includeEnd ? _bigRangeInc : _bigRangeEx;
          return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));
        } else {
          fn = includeEnd ? _rangeInc : _rangeEx;
          return _out(fn(r.start, r.end, r.step));
        }
      }
      /**
       * Create a range with numbers. End is excluded
       * @param {number} start
       * @param {number} end
       * @param {number} step
       * @returns {Array} range
       * @private
       */


      function _rangeEx(start, end, step) {
        var array = [];
        var x = start;

        if (step > 0) {
          while (smaller(x, end)) {
            array.push(x);
            x += step;
          }
        } else if (step < 0) {
          while (larger(x, end)) {
            array.push(x);
            x += step;
          }
        }

        return array;
      }
      /**
       * Create a range with numbers. End is included
       * @param {number} start
       * @param {number} end
       * @param {number} step
       * @returns {Array} range
       * @private
       */


      function _rangeInc(start, end, step) {
        var array = [];
        var x = start;

        if (step > 0) {
          while (smallerEq(x, end)) {
            array.push(x);
            x += step;
          }
        } else if (step < 0) {
          while (largerEq(x, end)) {
            array.push(x);
            x += step;
          }
        }

        return array;
      }
      /**
       * Create a range with big numbers. End is excluded
       * @param {BigNumber} start
       * @param {BigNumber} end
       * @param {BigNumber} step
       * @returns {Array} range
       * @private
       */


      function _bigRangeEx(start, end, step) {
        var zero = bignumber(0);
        var array = [];
        var x = start;

        if (step.gt(zero)) {
          while (smaller(x, end)) {
            array.push(x);
            x = x.plus(step);
          }
        } else if (step.lt(zero)) {
          while (larger(x, end)) {
            array.push(x);
            x = x.plus(step);
          }
        }

        return array;
      }
      /**
       * Create a range with big numbers. End is included
       * @param {BigNumber} start
       * @param {BigNumber} end
       * @param {BigNumber} step
       * @returns {Array} range
       * @private
       */


      function _bigRangeInc(start, end, step) {
        var zero = bignumber(0);
        var array = [];
        var x = start;

        if (step.gt(zero)) {
          while (smallerEq(x, end)) {
            array.push(x);
            x = x.plus(step);
          }
        } else if (step.lt(zero)) {
          while (largerEq(x, end)) {
            array.push(x);
            x = x.plus(step);
          }
        }

        return array;
      }
      /**
       * Parse a string into a range,
       * The string contains the start, optional step, and end, separated by a colon.
       * If the string does not contain a valid range, null is returned.
       * For example str='0:2:11'.
       * @param {string} str
       * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
       * @private
       */


      function _parse(str) {
        var args = str.split(':'); // number

        var nums = args.map(function (arg) {
          // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
          return Number(arg);
        });
        var invalid = nums.some(function (num) {
          return isNaN(num);
        });

        if (invalid) {
          return null;
        }

        switch (nums.length) {
          case 2:
            return {
              start: nums[0],
              end: nums[1],
              step: 1
            };

          case 3:
            return {
              start: nums[0],
              end: nums[2],
              step: nums[1]
            };

          default:
            return null;
        }
      }
    });

    var name$37 = 'reshape';
    var dependencies$37 = ['typed', 'isInteger', 'matrix'];
    var createReshape = /* #__PURE__ */factory(name$37, dependencies$37, _ref => {
      var {
        typed,
        isInteger
      } = _ref;

      /**
       * Reshape a multi dimensional array to fit the specified dimensions
       *
       * Syntax:
       *
       *     math.reshape(x, sizes)
       *
       * Examples:
       *
       *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])
       *     // returns Array  [[1, 2, 3], [4, 5, 6]]
       *
       *     math.reshape([[1, 2], [3, 4]], [1, 4])
       *     // returns Array  [[1, 2, 3, 4]]
       *
       *     math.reshape([[1, 2], [3, 4]], [4])
       *     // returns Array [1, 2, 3, 4]
       *
       *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])
       *     math.reshape(x, [2, 2, 2])
       *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
       *
       *    math.reshape([1, 2, 3, 4], [-1, 2])
       *    // returns Matrix [[1, 2], [3, 4]]
       *
       * See also:
       *
       *     size, squeeze, resize
       *
       * @param {Array | Matrix | *} x  Matrix to be reshaped
       * @param {number[]} sizes        One dimensional array with integral sizes for
       *                                each dimension. One -1 is allowed as wildcard,
       *                                which calculates this dimension automatically.
       *
       * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
       *
       * @throws {TypeError}            If `sizes` does not contain solely integers
       * @throws {DimensionError}       If the product of the new dimension sizes does
       *                                not equal that of the old ones
       */
      return typed(name$37, {
        'Matrix, Array': function MatrixArray(x, sizes) {
          return x.reshape(sizes);
        },
        'Array, Array': function ArrayArray(x, sizes) {
          sizes.forEach(function (size) {
            if (!isInteger(size)) {
              throw new TypeError('Invalid size for dimension: ' + size);
            }
          });
          return reshape$1(x, sizes);
        }
      });
    });

    /**
     * Create a syntax error with the message:
     *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
     * @param {string} fn     Function name
     * @param {number} count  Actual argument count
     * @param {number} min    Minimum required argument count
     * @param {number} [max]  Maximum required argument count
     * @extends Error
     */
    function ArgumentsError(fn, count, min, max) {
      if (!(this instanceof ArgumentsError)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }

      this.fn = fn;
      this.count = count;
      this.min = min;
      this.max = max;
      this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';
      this.stack = new Error().stack;
    }
    ArgumentsError.prototype = new Error();
    ArgumentsError.prototype.constructor = Error;
    ArgumentsError.prototype.name = 'ArgumentsError';
    ArgumentsError.prototype.isArgumentsError = true;

    var name$36 = 'resize';
    var dependencies$36 = ['config', 'matrix'];
    var createResize = /* #__PURE__ */factory(name$36, dependencies$36, _ref => {
      var {
        config,
        matrix
      } = _ref;

      /**
       * Resize a matrix
       *
       * Syntax:
       *
       *     math.resize(x, size)
       *     math.resize(x, size, defaultValue)
       *
       * Examples:
       *
       *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]
       *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]
       *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]
       *     math.resize("hello", [8], "!")    // returns string 'hello!!!'
       *
       * See also:
       *
       *     size, squeeze, subset, reshape
       *
       * @param {Array | Matrix | *} x             Matrix to be resized
       * @param {Array | Matrix} size              One dimensional array with numbers
       * @param {number | string} [defaultValue=0] Zero by default, except in
       *                                           case of a string, in that case
       *                                           defaultValue = ' '
       * @return {* | Array | Matrix} A resized clone of matrix `x`
       */
      // TODO: rework resize to a typed-function
      return function resize(x, size, defaultValue) {
        if (arguments.length !== 2 && arguments.length !== 3) {
          throw new ArgumentsError('resize', arguments.length, 2, 3);
        }

        if (isMatrix(size)) {
          size = size.valueOf(); // get Array
        }

        if (isBigNumber(size[0])) {
          // convert bignumbers to numbers
          size = size.map(function (value) {
            return !isBigNumber(value) ? value : value.toNumber();
          });
        } // check x is a Matrix


        if (isMatrix(x)) {
          // use optimized matrix implementation, return copy
          return x.resize(size, defaultValue, true);
        }

        if (typeof x === 'string') {
          // resize string
          return _resizeString(x, size, defaultValue);
        } // check result should be a matrix


        var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';

        if (size.length === 0) {
          // output a scalar
          while (Array.isArray(x)) {
            x = x[0];
          }

          return clone$1(x);
        } else {
          // output an array/matrix
          if (!Array.isArray(x)) {
            x = [x];
          }

          x = clone$1(x);
          var res = resize$1(x, size, defaultValue);
          return asMatrix ? matrix(res) : res;
        }
      };
      /**
       * Resize a string
       * @param {string} str
       * @param {number[]} size
       * @param {string} [defaultChar=' ']
       * @private
       */

      function _resizeString(str, size, defaultChar) {
        if (defaultChar !== undefined) {
          if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
            throw new TypeError('Single character expected as defaultValue');
          }
        } else {
          defaultChar = ' ';
        }

        if (size.length !== 1) {
          throw new DimensionError(size.length, 1);
        }

        var len = size[0];

        if (typeof len !== 'number' || !isInteger$1(len)) {
          throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$1(size) + ')');
        }

        if (str.length > len) {
          return str.substring(0, len);
        } else if (str.length < len) {
          var res = str;

          for (var i = 0, ii = len - str.length; i < ii; i++) {
            res += defaultChar;
          }

          return res;
        } else {
          return str;
        }
      }
    });

    var name$35 = 'rotate';
    var dependencies$35 = ['typed', 'multiply', 'rotationMatrix'];
    var createRotate = /* #__PURE__ */factory(name$35, dependencies$35, _ref => {
      var {
        typed,
        multiply,
        rotationMatrix
      } = _ref;

      /**
         * Rotate a vector of size 1x2 counter-clockwise by a given angle
         * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis
         *
         * Syntax:
         *
         *    math.rotate(w, theta)
         *    math.rotate(w, theta, v)
         *
         * Examples:
         *
         *    math.rotate([11, 12], math.pi / 2)                           // returns matrix([-12, 11])
         *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns matrix([-12, 11])
         *
         *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns matrix([0, 1, 0])
         *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns matrix([0, 1, 0])
         *
         *    math.rotate([1, 0], math.complex(1 + i))                     // returns matrix([cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)])
         *
         * See also:
         *
         *    matrix, rotationMatrix
         *
         * @param {Array | Matrix} w                             Vector to rotate
         * @param {number | BigNumber | Complex | Unit} theta    Rotation angle
         * @param {Array | Matrix} [v]                           Rotation axis
         * @return {Array | Matrix}                              Multiplication of the rotation matrix and w
         */
      return typed(name$35, {
        'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {
          _validateSize(w, 2);

          var matrixRes = multiply(rotationMatrix(theta), w);
          return matrixRes.toArray();
        },
        'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {
          _validateSize(w, 2);

          return multiply(rotationMatrix(theta), w);
        },
        'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {
          _validateSize(w, 3);

          var matrixRes = multiply(rotationMatrix(theta, v), w);
          return matrixRes;
        },
        'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {
          _validateSize(w, 3);

          return multiply(rotationMatrix(theta, v), w);
        }
      });

      function _validateSize(v, expectedSize) {
        var actualSize = Array.isArray(v) ? arraySize(v) : v.size();

        if (actualSize.length > 2) {
          throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
        }

        if (actualSize.length === 2 && actualSize[1] !== 1) {
          throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
        }

        if (actualSize[0] !== expectedSize) {
          throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
        }
      }
    });

    var name$34 = 'rotationMatrix';
    var dependencies$34 = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];
    var createRotationMatrix = /* #__PURE__ */factory(name$34, dependencies$34, _ref => {
      var {
        typed,
        config,
        multiplyScalar,
        addScalar,
        unaryMinus,
        norm,
        BigNumber,
        matrix,
        DenseMatrix,
        SparseMatrix,
        cos,
        sin
      } = _ref;

      /**
       * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).
       * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).
       *
       * Syntax:
       *
       *    math.rotationMatrix(theta)
       *    math.rotationMatrix(theta, format)
       *    math.rotationMatrix(theta, [v])
       *    math.rotationMatrix(theta, [v], format)
       *
       * Examples:
       *
       *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]
       *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]
       *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]
       *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]
       *
       *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]
       *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])
       *
       *
       * See also:
       *
       *    matrix, cos, sin
       *
       *
       * @param {number | BigNumber | Complex | Unit} theta    Rotation angle
       * @param {Array | Matrix} [v]                           Rotation axis
       * @param {string} [format]                              Result Matrix storage format
       * @return {Array | Matrix}                              Rotation matrix
       */
      return typed(name$34, {
        '': function _() {
          return config.matrix === 'Matrix' ? matrix([]) : [];
        },
        string: function string(format) {
          return matrix(format);
        },
        'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {
          return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);
        },
        'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {
          return _rotationMatrix2x2(theta, format);
        },
        'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {
          var matrixV = matrix(v);

          _validateVector(matrixV);

          return _rotationMatrix3x3(theta, matrixV, undefined);
        },
        'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {
          _validateVector(v);

          var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);
          return _rotationMatrix3x3(theta, v, storageType);
        },
        'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {
          var matrixV = matrix(v);

          _validateVector(matrixV);

          return _rotationMatrix3x3(theta, matrixV, format);
        },
        'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {
          _validateVector(v);

          return _rotationMatrix3x3(theta, v, format);
        }
      });
      /**
       * Returns 2x2 matrix of 2D rotation of angle theta
       *
       * @param {number | BigNumber | Complex | Unit} theta  The rotation angle
       * @param {string} format                              The result Matrix storage format
       * @returns {Matrix}
       * @private
       */

      function _rotationMatrix2x2(theta, format) {
        var Big = isBigNumber(theta);
        var minusOne = Big ? new BigNumber(-1) : -1;
        var cosTheta = cos(theta);
        var sinTheta = sin(theta);
        var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];
        return _convertToFormat(data, format);
      }

      function _validateVector(v) {
        var size = v.size();

        if (size.length < 1 || size[0] !== 3) {
          throw new RangeError('Vector must be of dimensions 1x3');
        }
      }

      function _mul(array) {
        return array.reduce((p, curr) => multiplyScalar(p, curr));
      }

      function _convertToFormat(data, format) {
        if (format) {
          if (format === 'sparse') {
            return new SparseMatrix(data);
          }

          if (format === 'dense') {
            return new DenseMatrix(data);
          }

          throw new TypeError("Unknown matrix type \"".concat(format, "\""));
        }

        return data;
      }
      /**
       * Returns a 3x3 matrix of rotation of angle theta around vector v
       *
       * @param {number | BigNumber | Complex | Unit} theta The rotation angle
       * @param {Matrix} v                                  The rotation axis vector
       * @param {string} format                             The storage format of the resulting matrix
       * @returns {Matrix}
       * @private
       */


      function _rotationMatrix3x3(theta, v, format) {
        var normV = norm(v);

        if (normV === 0) {
          throw new RangeError('Rotation around zero vector');
        }

        var Big = isBigNumber(theta) ? BigNumber : null;
        var one = Big ? new Big(1) : 1;
        var minusOne = Big ? new Big(-1) : -1;
        var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;
        var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;
        var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;
        var c = cos(theta);
        var oneMinusC = addScalar(one, unaryMinus(c));
        var s = sin(theta);
        var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));
        var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));
        var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));
        var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));
        var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));
        var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));
        var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));
        var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));
        var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));
        var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];
        return _convertToFormat(data, format);
      }
    });

    var name$33 = 'row';
    var dependencies$33 = ['typed', 'Index', 'matrix', 'range'];
    var createRow = /* #__PURE__ */factory(name$33, dependencies$33, _ref => {
      var {
        typed,
        Index,
        matrix,
        range
      } = _ref;

      /**
       * Return a row from a Matrix.
       *
       * Syntax:
       *
       *     math.row(value, index)
       *
       * Example:
       *
       *     // get a row
       *     const d = [[1, 2], [3, 4]]
       *     math.row(d, 1) // returns [[3, 4]]
       *
       * See also:
       *
       *     column
       *
       * @param {Array | Matrix } value   An array or matrix
       * @param {number} row              The index of the row
       * @return {Array | Matrix}         The retrieved row
       */
      return typed(name$33, {
        'Matrix, number': _row,
        'Array, number': function ArrayNumber(value, row) {
          return _row(matrix(clone$1(value)), row).valueOf();
        }
      });
      /**
       * Retrieve a row of a matrix
       * @param {Matrix } value  A matrix
       * @param {number} row     The index of the row
       * @return {Matrix}        The retrieved row
       */

      function _row(value, row) {
        // check dimensions
        if (value.size().length !== 2) {
          throw new Error('Only two dimensional matrix is supported');
        }

        validateIndex(row, value.size()[0]);
        var columnRange = range(0, value.size()[1]);
        var index = new Index(row, columnRange);
        return value.subset(index);
      }
    });

    var name$32 = 'size';
    var dependencies$32 = ['typed', 'config', '?matrix'];
    var createSize = /* #__PURE__ */factory(name$32, dependencies$32, _ref => {
      var {
        typed,
        config,
        matrix
      } = _ref;

      /**
       * Calculate the size of a matrix or scalar.
       *
       * Syntax:
       *
       *     math.size(x)
       *
       * Examples:
       *
       *     math.size(2.3)                  // returns []
       *     math.size('hello world')        // returns [11]
       *
       *     const A = [[1, 2, 3], [4, 5, 6]]
       *     math.size(A)                    // returns [2, 3]
       *     math.size(math.range(1,6))      // returns [5]
       *
       * See also:
       *
       *     count, resize, squeeze, subset
       *
       * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
       * @return {Array | Matrix} A vector with size of `x`.
       */
      return typed(name$32, {
        Matrix: function Matrix(x) {
          return x.create(x.size());
        },
        Array: arraySize,
        string: function string(x) {
          return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
        },
        'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
          // scalar
          return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();
        }
      });
    });

    var name$31 = 'squeeze';
    var dependencies$31 = ['typed', 'matrix'];
    var createSqueeze = /* #__PURE__ */factory(name$31, dependencies$31, _ref => {
      var {
        typed,
        matrix
      } = _ref;

      /**
       * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
       *
       * Syntax:
       *
       *     math.squeeze(x)
       *
       * Examples:
       *
       *     math.squeeze([3])           // returns 3
       *     math.squeeze([[3]])         // returns 3
       *
       *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)
       *     math.squeeze(A)             // returns [0, 0, 0] (size 3)
       *
       *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)
       *     math.squeeze(B)             // returns [0, 0, 0] (size 3)
       *
       *     // only inner and outer dimensions are removed
       *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
       *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
       *
       * See also:
       *
       *     subset
       *
       * @param {Matrix | Array} x      Matrix to be squeezed
       * @return {Matrix | Array} Squeezed matrix
       */
      return typed(name$31, {
        Array: function Array(x) {
          return squeeze$1(clone$1(x));
        },
        Matrix: function Matrix(x) {
          var res = squeeze$1(x.toArray()); // FIXME: return the same type of matrix as the input

          return Array.isArray(res) ? matrix(res) : res;
        },
        any: function any(x) {
          // scalar
          return clone$1(x);
        }
      });
    });

    var name$30 = 'subset';
    var dependencies$30 = ['typed', 'matrix'];
    var createSubset = /* #__PURE__ */factory(name$30, dependencies$30, _ref => {
      var {
        typed,
        matrix
      } = _ref;

      /**
       * Get or set a subset of a matrix or string.
       *
       * Syntax:
       *     math.subset(value, index)                                // retrieve a subset
       *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
       *
       * Examples:
       *
       *     // get a subset
       *     const d = [[1, 2], [3, 4]]
       *     math.subset(d, math.index(1, 0))        // returns 3
       *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]
       *
       *     // replace a subset
       *     const e = []
       *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]] and e = [[5, 0, 6]]
       *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]
       *
       *     // get submatrix using ranges
       *     const M = [
       *       [1,2,3],
       *       [4,5,6],
       *       [7,8,9]
       *     ]
       *     math.subset(M, math.index(math.range(0,2), math.range(0,3))) // [[1,2,3],[4,5,6]]
       *
       * See also:
       *
       *     size, resize, squeeze, index
       *
       * @param {Array | Matrix | string} matrix  An array, matrix, or string
       * @param {Index} index
       *    For each dimension of the target, specifies an index or a list of
       *    indices to fetch or set. `subset` uses the cartesian product of
       *    the indices specified in each dimension.
       * @param {*} [replacement]                 An array, matrix, or scalar.
       *                                          If provided, the subset is replaced with replacement.
       *                                          If not provided, the subset is returned
       * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
       *                                          the matrix is resized. If not provided,
       *                                          math.matrix elements will be left undefined.
       * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
       */
      return typed(name$30, {
        // get subset
        'Array, Index': function ArrayIndex(value, index) {
          var m = matrix(value);
          var subset = m.subset(index); // returns a Matrix

          return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)
        },
        'Matrix, Index': function MatrixIndex(value, index) {
          return value.subset(index);
        },
        'Object, Index': _getObjectProperty,
        'string, Index': _getSubstring,
        // set subset
        'Array, Index, any': function ArrayIndexAny(value, index, replacement) {
          return matrix(clone$1(value)).subset(index, replacement, undefined).valueOf();
        },
        'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {
          return matrix(clone$1(value)).subset(index, replacement, defaultValue).valueOf();
        },
        'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {
          return value.clone().subset(index, replacement);
        },
        'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {
          return value.clone().subset(index, replacement, defaultValue);
        },
        'string, Index, string': _setSubstring,
        'string, Index, string, string': _setSubstring,
        'Object, Index, any': _setObjectProperty
      });
    });
    /**
     * Retrieve a subset of a string
     * @param {string} str            string from which to get a substring
     * @param {Index} index           An index or list of indices (character positions)
     * @returns {string} substring
     * @private
     */

    function _getSubstring(str, index) {
      if (!isIndex(index)) {
        // TODO: better error message
        throw new TypeError('Index expected');
      }

      if (index.size().length !== 1) {
        throw new DimensionError(index.size().length, 1);
      } // validate whether the range is out of range


      var strLen = str.length;
      validateIndex(index.min()[0], strLen);
      validateIndex(index.max()[0], strLen);
      var range = index.dimension(0);
      var substr = '';
      range.forEach(function (v) {
        substr += str.charAt(v);
      });
      return substr;
    }
    /**
     * Replace a substring in a string
     * @param {string} str            string to be replaced
     * @param {Index} index           An index or list of indices (character positions)
     * @param {string} replacement    Replacement string
     * @param {string} [defaultValue] Default value to be uses when resizing
     *                                the string. is ' ' by default
     * @returns {string} result
     * @private
     */


    function _setSubstring(str, index, replacement, defaultValue) {
      if (!index || index.isIndex !== true) {
        // TODO: better error message
        throw new TypeError('Index expected');
      }

      if (index.size().length !== 1) {
        throw new DimensionError(index.size().length, 1);
      }

      if (defaultValue !== undefined) {
        if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
          throw new TypeError('Single character expected as defaultValue');
        }
      } else {
        defaultValue = ' ';
      }

      var range = index.dimension(0);
      var len = range.size()[0];

      if (len !== replacement.length) {
        throw new DimensionError(range.size()[0], replacement.length);
      } // validate whether the range is out of range


      var strLen = str.length;
      validateIndex(index.min()[0]);
      validateIndex(index.max()[0]); // copy the string into an array with characters

      var chars = [];

      for (var i = 0; i < strLen; i++) {
        chars[i] = str.charAt(i);
      }

      range.forEach(function (v, i) {
        chars[v] = replacement.charAt(i[0]);
      }); // initialize undefined characters with a space

      if (chars.length > strLen) {
        for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {
          if (!chars[_i]) {
            chars[_i] = defaultValue;
          }
        }
      }

      return chars.join('');
    }
    /**
     * Retrieve a property from an object
     * @param {Object} object
     * @param {Index} index
     * @return {*} Returns the value of the property
     * @private
     */


    function _getObjectProperty(object, index) {
      if (index.size().length !== 1) {
        throw new DimensionError(index.size(), 1);
      }

      var key = index.dimension(0);

      if (typeof key !== 'string') {
        throw new TypeError('String expected as index to retrieve an object property');
      }

      return getSafeProperty(object, key);
    }
    /**
     * Set a property on an object
     * @param {Object} object
     * @param {Index} index
     * @param {*} replacement
     * @return {*} Returns the updated object
     * @private
     */


    function _setObjectProperty(object, index, replacement) {
      if (index.size().length !== 1) {
        throw new DimensionError(index.size(), 1);
      }

      var key = index.dimension(0);

      if (typeof key !== 'string') {
        throw new TypeError('String expected as index to retrieve an object property');
      } // clone the object, and apply the property to the clone


      var updated = clone$1(object);
      setSafeProperty(updated, key, replacement);
      return updated;
    }

    var name$2$ = 'transpose';
    var dependencies$2$ = ['typed', 'matrix'];
    var createTranspose = /* #__PURE__ */factory(name$2$, dependencies$2$, _ref => {
      var {
        typed,
        matrix
      } = _ref;

      /**
       * Transpose a matrix. All values of the matrix are reflected over its
       * main diagonal. Only applicable to two dimensional matrices containing
       * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
       * vectors and scalars return the input unchanged.
       *
       * Syntax:
       *
       *     math.transpose(x)
       *
       * Examples:
       *
       *     const A = [[1, 2, 3], [4, 5, 6]]
       *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]
       *
       * See also:
       *
       *     diag, inv, subset, squeeze
       *
       * @param {Array | Matrix} x  Matrix to be transposed
       * @return {Array | Matrix}   The transposed matrix
       */
      return typed('transpose', {
        Array: function Array(x) {
          // use dense matrix implementation
          return this(matrix(x)).valueOf();
        },
        Matrix: function Matrix(x) {
          // matrix size
          var size = x.size(); // result

          var c; // process dimensions

          switch (size.length) {
            case 1:
              // vector
              c = x.clone();
              break;

            case 2:
              {
                // rows and columns
                var rows = size[0];
                var columns = size[1]; // check columns

                if (columns === 0) {
                  // throw exception
                  throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format$1(size) + ')');
                } // process storage format


                switch (x.storage()) {
                  case 'dense':
                    c = _denseTranspose(x, rows, columns);
                    break;

                  case 'sparse':
                    c = _sparseTranspose(x, rows, columns);
                    break;
                }
              }
              break;

            default:
              // multi dimensional
              throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format$1(this._size) + ')');
          }

          return c;
        },
        // scalars
        any: function any(x) {
          return clone$1(x);
        }
      });

      function _denseTranspose(m, rows, columns) {
        // matrix array
        var data = m._data; // transposed matrix data

        var transposed = [];
        var transposedRow; // loop columns

        for (var j = 0; j < columns; j++) {
          // initialize row
          transposedRow = transposed[j] = []; // loop rows

          for (var i = 0; i < rows; i++) {
            // set data
            transposedRow[i] = clone$1(data[i][j]);
          }
        } // return matrix


        return m.createDenseMatrix({
          data: transposed,
          size: [columns, rows],
          datatype: m._datatype
        });
      }

      function _sparseTranspose(m, rows, columns) {
        // matrix arrays
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // result matrices

        var cvalues = values ? [] : undefined;
        var cindex = [];
        var cptr = []; // row counts

        var w = [];

        for (var x = 0; x < rows; x++) {
          w[x] = 0;
        } // vars


        var p, l, j; // loop values in matrix

        for (p = 0, l = index.length; p < l; p++) {
          // number of values in row
          w[index[p]]++;
        } // cumulative sum


        var sum = 0; // initialize cptr with the cummulative sum of row counts

        for (var i = 0; i < rows; i++) {
          // update cptr
          cptr.push(sum); // update sum

          sum += w[i]; // update w

          w[i] = cptr[i];
        } // update cptr


        cptr.push(sum); // loop columns

        for (j = 0; j < columns; j++) {
          // values & index in column
          for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
            // C values & index
            var q = w[index[k]]++; // C[j, i] = A[i, j]

            cindex[q] = j; // check we need to process values (pattern matrix)

            if (values) {
              cvalues[q] = clone$1(values[k]);
            }
          }
        } // return matrix


        return m.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [columns, rows],
          datatype: m._datatype
        });
      }
    });

    var name$2_ = 'ctranspose';
    var dependencies$2_ = ['typed', 'transpose', 'conj'];
    var createCtranspose = /* #__PURE__ */factory(name$2_, dependencies$2_, _ref => {
      var {
        typed,
        transpose,
        conj
      } = _ref;

      /**
       * Transpose and complex conjugate a matrix. All values of the matrix are
       * reflected over its main diagonal and then the complex conjugate is
       * taken. This is equivalent to complex conjugation for scalars and
       * vectors.
       *
       * Syntax:
       *
       *     math.ctranspose(x)
       *
       * Examples:
       *
       *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]
       *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]
       *
       * See also:
       *
       *     transpose, diag, inv, subset, squeeze
       *
       * @param {Array | Matrix} x  Matrix to be ctransposed
       * @return {Array | Matrix}   The ctransposed matrix
       */
      return typed(name$2_, {
        any: function any(x) {
          return conj(transpose(x));
        }
      });
    });

    var name$2Z = 'zeros';
    var dependencies$2Z = ['typed', 'config', 'matrix', 'BigNumber'];
    var createZeros = /* #__PURE__ */factory(name$2Z, dependencies$2Z, _ref => {
      var {
        typed,
        config,
        matrix,
        BigNumber
      } = _ref;

      /**
       * Create a matrix filled with zeros. The created matrix can have one or
       * multiple dimensions.
       *
       * Syntax:
       *
       *    math.zeros(m)
       *    math.zeros(m, format)
       *    math.zeros(m, n)
       *    math.zeros(m, n, format)
       *    math.zeros([m, n])
       *    math.zeros([m, n], format)
       *
       * Examples:
       *
       *    math.zeros(3)                  // returns [0, 0, 0]
       *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]
       *    math.zeros(3, 'dense')         // returns [0, 0, 0]
       *
       *    const A = [[1, 2, 3], [4, 5, 6]]
       *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]
       *
       * See also:
       *
       *    ones, identity, size, range
       *
       * @param {...number | Array} size    The size of each dimension of the matrix
       * @param {string} [format]           The Matrix storage format
       *
       * @return {Array | Matrix}           A matrix filled with zeros
       */
      return typed(name$2Z, {
        '': function _() {
          return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
        },
        // math.zeros(m, n, p, ..., format)
        // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
        '...number | BigNumber | string': function numberBigNumberString(size) {
          var last = size[size.length - 1];

          if (typeof last === 'string') {
            var format = size.pop();
            return _zeros(size, format);
          } else if (config.matrix === 'Array') {
            return _zeros(size);
          } else {
            return _zeros(size, 'default');
          }
        },
        Array: _zeros,
        Matrix: function Matrix(size) {
          var format = size.storage();
          return _zeros(size.valueOf(), format);
        },
        'Array | Matrix, string': function ArrayMatrixString(size, format) {
          return _zeros(size.valueOf(), format);
        }
      });
      /**
       * Create an Array or Matrix with zeros
       * @param {Array} size
       * @param {string} [format='default']
       * @return {Array | Matrix}
       * @private
       */

      function _zeros(size, format) {
        var hasBigNumbers = _normalize(size);

        var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;

        _validate(size);

        if (format) {
          // return a matrix
          var m = matrix(format);

          if (size.length > 0) {
            return m.resize(size, defaultValue);
          }

          return m;
        } else {
          // return an Array
          var arr = [];

          if (size.length > 0) {
            return resize$1(arr, size, defaultValue);
          }

          return arr;
        }
      } // replace BigNumbers with numbers, returns true if size contained BigNumbers


      function _normalize(size) {
        var hasBigNumbers = false;
        size.forEach(function (value, index, arr) {
          if (isBigNumber(value)) {
            hasBigNumbers = true;
            arr[index] = value.toNumber();
          }
        });
        return hasBigNumbers;
      } // validate arguments


      function _validate(size) {
        size.forEach(function (value) {
          if (typeof value !== 'number' || !isInteger$1(value) || value < 0) {
            throw new Error('Parameters in function zeros must be positive integers');
          }
        });
      }
    }); // TODO: zeros contains almost the same code as ones. Reuse this?

    var name$2Y = 'fft';
    var dependencies$2Y = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'divideScalar', 'exp', 'tau', 'i'];
    var createFft = /* #__PURE__ */factory(name$2Y, dependencies$2Y, _ref => {
      var {
        typed,
        matrix,
        addScalar,
        multiplyScalar,
        divideScalar,
        exp,
        tau,
        i: I
      } = _ref;

      /**
       * Calculate N-dimensional fourier transform
       *
       * Syntax:
       *
       *     math.fft(arr)
       *
       * Examples:
       *
       *    math.fft([[1, 0], [1, 0]]) // returns [[{re:2, im:0}, {re:2, im:0}], [{re:0, im:0}, {re:0, im:0}]]
       *
       *
       * See Also:
       *
       *      ifft
       *
       * @param {Array | Matrix} arr    An array or matrix
       * @return {Array | Matrix}       N-dimensional fourier transformation of the array
       */
      return typed(name$2Y, {
        Array: _ndFft,
        Matrix: function Matrix(matrix) {
          return matrix.create(_ndFft(matrix.toArray()));
        }
      });
      /**
       * Perform an N-dimensional Fourier transform
       *
       * @param {Array} arr      The array
       * @return {Array}         resulting array
       */

      function _ndFft(arr) {
        var size = arraySize(arr);
        if (size.length === 1) return _fft(arr, size[0]); // ndFft along dimension 1,...,N-1 then 1dFft along dimension 0

        return _1dFft(arr.map(slice => _ndFft(slice, size.slice(1))), 0);
      }
      /**
       * Perform an 1-dimensional Fourier transform
       *
       * @param {Array} arr      The array
       * @param {number} dim     dimension of the array to perform on
       * @return {Array}         resulting array
       */


      function _1dFft(arr, dim) {
        var size = arraySize(arr);
        if (dim !== 0) return new Array(size[0]).fill(0).map((_, i) => _1dFft(arr[i], dim - 1));
        if (size.length === 1) return _fft(arr);

        function _transpose(arr) {
          // Swap first 2 dimensions
          var size = arraySize(arr);
          return new Array(size[1]).fill(0).map((_, j) => new Array(size[0]).fill(0).map((_, i) => arr[i][j]));
        }

        return _transpose(_1dFft(_transpose(arr), 1));
      }
      /**
       * Perform an 1-dimensional Fourier transform
       *
       * @param {Array} arr      The array
       * @return {Array}         resulting array
       */


      function _fft(arr) {
        var len = arr.length;
        if (len === 1) return [arr[0]];

        if (len % 2 === 0) {
          var ret = [..._fft(arr.filter((_, i) => i % 2 === 0)), ..._fft(arr.filter((_, i) => i % 2 === 1))];

          for (var k = 0; k < len / 2; k++) {
            var p = ret[k];
            var q = multiplyScalar(ret[k + len / 2], exp(multiplyScalar(multiplyScalar(tau, I), divideScalar(-k, len))));
            ret[k] = addScalar(p, q);
            ret[k + len / 2] = addScalar(p, multiplyScalar(-1, q));
          }

          return ret;
        }

        throw new Error('Can only calculate FFT of power-of-two size');
      }
    });

    var name$2X = 'ifft';
    var dependencies$2X = ['typed', 'fft', 'dotDivide', 'conj'];
    var createIfft = /* #__PURE__ */factory(name$2X, dependencies$2X, _ref => {
      var {
        typed,
        fft,
        dotDivide,
        conj
      } = _ref;

      /**
       * Calculate N-dimensional inverse fourier transform
       *
       * Syntax:
       *
       *     math.ifft(arr)
       *
       * Examples:
       *
       *    math.ifft([[2, 2], [0, 0]]) // returns [[{re:1, im:0}, {re:0, im:0}], [{re:1, im:0}, {re:0, im:0}]]
       *
       * See Also:
       *
       *      fft
       *
       * @param {Array | Matrix} arr    An array or matrix
       * @return {Array | Matrix}       N-dimensional fourier transformation of the array
       */
      return typed(name$2X, {
        'Array | Matrix': function ArrayMatrix(arr) {
          var size = isMatrix(arr) ? arr.size() : arraySize(arr);
          return dotDivide(conj(fft(conj(arr))), size.reduce((acc, curr) => acc * curr, 1));
        }
      });
    });

    /* eslint-disable no-loss-of-precision */
    var name$2W = 'erf';
    var dependencies$2W = ['typed'];
    var createErf = /* #__PURE__ */factory(name$2W, dependencies$2W, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Compute the erf function of a value using a rational Chebyshev
       * approximations for different intervals of x.
       *
       * This is a translation of W. J. Cody's Fortran implementation from 1987
       * ( https://www.netlib.org/specfun/erf ). See the AMS publication
       * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
       * for an explanation of this process.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.erf(x)
       *
       * Examples:
       *
       *    math.erf(0.2)    // returns 0.22270258921047847
       *    math.erf(-0.5)   // returns -0.5204998778130465
       *    math.erf(4)      // returns 0.9999999845827421
       *
       * @param {number | Array | Matrix} x   A real number
       * @return {number | Array | Matrix}    The erf of `x`
       */
      return typed('name', {
        number: function number(x) {
          var y = Math.abs(x);

          if (y >= MAX_NUM) {
            return sign$1(x);
          }

          if (y <= THRESH) {
            return sign$1(x) * erf1(y);
          }

          if (y <= 4.0) {
            return sign$1(x) * (1 - erfc2(y));
          }

          return sign$1(x) * (1 - erfc3(y));
        },
        'Array | Matrix': function ArrayMatrix(n) {
          return deepMap(n, this);
        } // TODO: For complex numbers, use the approximation for the Faddeeva function
        //  from "More Efficient Computation of the Complex Error Function" (AMS)

      });
      /**
       * Approximates the error function erf() for x <= 0.46875 using this function:
       *               n
       * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
       *              j=0
       */

      function erf1(y) {
        var ysq = y * y;
        var xnum = P[0][4] * ysq;
        var xden = ysq;
        var i;

        for (i = 0; i < 3; i += 1) {
          xnum = (xnum + P[0][i]) * ysq;
          xden = (xden + Q[0][i]) * ysq;
        }

        return y * (xnum + P[0][3]) / (xden + Q[0][3]);
      }
      /**
       * Approximates the complement of the error function erfc() for
       * 0.46875 <= x <= 4.0 using this function:
       *                       n
       * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
       *                      j=0
       */


      function erfc2(y) {
        var xnum = P[1][8] * y;
        var xden = y;
        var i;

        for (i = 0; i < 7; i += 1) {
          xnum = (xnum + P[1][i]) * y;
          xden = (xden + Q[1][i]) * y;
        }

        var result = (xnum + P[1][7]) / (xden + Q[1][7]);
        var ysq = parseInt(y * 16) / 16;
        var del = (y - ysq) * (y + ysq);
        return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
      }
      /**
       * Approximates the complement of the error function erfc() for x > 4.0 using
       * this function:
       *
       * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
       *               n
       *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
       *              j=0
       */


      function erfc3(y) {
        var ysq = 1 / (y * y);
        var xnum = P[2][5] * ysq;
        var xden = ysq;
        var i;

        for (i = 0; i < 4; i += 1) {
          xnum = (xnum + P[2][i]) * ysq;
          xden = (xden + Q[2][i]) * ysq;
        }

        var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
        result = (SQRPI - result) / y;
        ysq = parseInt(y * 16) / 16;
        var del = (y - ysq) * (y + ysq);
        return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
      }
    });
    /**
     * Upper bound for the first approximation interval, 0 <= x <= THRESH
     * @constant
     */

    var THRESH = 0.46875;
    /**
     * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
     * @constant
     */

    var SQRPI = 5.6418958354775628695e-1;
    /**
     * Coefficients for each term of the numerator sum (p_j) for each approximation
     * interval (see W. J. Cody's paper for more details)
     * @constant
     */

    var P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];
    /**
     * Coefficients for each term of the denominator sum (q_j) for each approximation
     * interval (see W. J. Cody's paper for more details)
     * @constant
     */

    var Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];
    /**
     * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
     * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
     * return 1
     */

    var MAX_NUM = Math.pow(2, 53);

    var name$2V = 'mode';
    var dependencies$2V = ['typed', 'isNaN', 'isNumeric'];
    var createMode = /* #__PURE__ */factory(name$2V, dependencies$2V, _ref => {
      var {
        typed,
        isNaN,
        isNumeric
      } = _ref;

      /**
      * Computes the mode of a set of numbers or a list with values(numbers or characters).
      * If there are more than one modes, it returns a list of those values.
      *
      * Syntax:
      *
      *     math.mode(a, b, c, ...)
      *     math.mode(A)
      *
      * Examples:
      *
      *     math.mode(2, 1, 4, 3, 1)                            // returns [1]
      *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]
      *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
      *     math.mode('a','a','b','c')                           // returns ["a"]
      *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
      *
      * See also:
      *
      *     median,
      *     mean
      *
      * @param {... *} args  A single matrix
      * @return {*} The mode of all values
      */
      return typed(name$2V, {
        'Array | Matrix': _mode,
        '...': function _(args) {
          return _mode(args);
        }
      });
      /**
       * Calculates the mode in an 1-dimensional array
       * @param {Array} values
       * @return {Array} mode
       * @private
       */

      function _mode(values) {
        values = flatten$2(values.valueOf());
        var num = values.length;

        if (num === 0) {
          throw new Error('Cannot calculate mode of an empty array');
        }

        var count = {};
        var mode = [];
        var max = 0;

        for (var i = 0; i < values.length; i++) {
          var value = values[i];

          if (isNumeric(value) && isNaN(value)) {
            throw new Error('Cannot calculate mode of an array containing NaN values');
          }

          if (!(value in count)) {
            count[value] = 0;
          }

          count[value]++;

          if (count[value] === max) {
            mode.push(value);
          } else if (count[value] > max) {
            max = count[value];
            mode = [value];
          }
        }

        return mode;
      }
    });

    /**
     * Improve error messages for statistics functions. Errors are typically
     * thrown in an internally used function like larger, causing the error
     * not to mention the function (like max) which is actually used by the user.
     *
     * @param {Error} err
     * @param {String} fnName
     * @param {*} [value]
     * @return {Error}
     */

    function improveErrorMessage(err, fnName, value) {
      // TODO: add information with the index (also needs transform in expression parser)
      var details;

      if (String(err).indexOf('Unexpected type') !== -1) {
        details = arguments.length > 2 ? ' (type: ' + typeOf$1(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';
        return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);
      }

      if (String(err).indexOf('complex numbers') !== -1) {
        details = arguments.length > 2 ? ' (type: ' + typeOf$1(value) + ', value: ' + JSON.stringify(value) + ')' : '';
        return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);
      }

      return err;
    }

    var name$2U = 'prod';
    var dependencies$2U = ['typed', 'config', 'multiplyScalar', 'numeric'];
    var createProd = /* #__PURE__ */factory(name$2U, dependencies$2U, _ref => {
      var {
        typed,
        config,
        multiplyScalar,
        numeric
      } = _ref;

      /**
       * Compute the product of a matrix or a list with values.
       * In case of a (multi dimensional) array or matrix, the sum of all
       * elements will be calculated.
       *
       * Syntax:
       *
       *     math.prod(a, b, c, ...)
       *     math.prod(A)
       *
       * Examples:
       *
       *     math.multiply(2, 3)           // returns 6
       *     math.prod(2, 3)               // returns 6
       *     math.prod(2, 3, 4)            // returns 24
       *     math.prod([2, 3, 4])          // returns 24
       *     math.prod([[2, 5], [4, 3]])   // returns 120
       *
       * See also:
       *
       *    mean, median, min, max, sum, std, variance
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The product of all values
       */
      return typed(name$2U, {
        // prod([a, b, c, d, ...])
        'Array | Matrix': _prod,
        // prod([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
          // TODO: implement prod(A, dim)
          throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)
        },
        // prod(a, b, c, d, ...)
        '...': function _(args) {
          return _prod(args);
        }
      });
      /**
       * Recursively calculate the product of an n-dimensional array
       * @param {Array} array
       * @return {number} prod
       * @private
       */

      function _prod(array) {
        var prod;
        deepForEach(array, function (value) {
          try {
            prod = prod === undefined ? value : multiplyScalar(prod, value);
          } catch (err) {
            throw improveErrorMessage(err, 'prod', value);
          }
        }); // make sure returning numeric value: parse a string into a numeric value

        if (typeof prod === 'string') {
          prod = numeric(prod, config.number);
        }

        if (prod === undefined) {
          throw new Error('Cannot calculate prod of an empty array');
        }

        return prod;
      }
    });

    var name$2T = 'format';
    var dependencies$2T = ['typed'];
    var createFormat = /* #__PURE__ */factory(name$2T, dependencies$2T, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Format a value of any type into a string.
       *
       * Syntax:
       *
       *    math.format(value)
       *    math.format(value, options)
       *    math.format(value, precision)
       *    math.format(value, callback)
       *
       * Where:
       *
       *  - `value: *`
       *    The value to be formatted
       *  - `options: Object`
       *    An object with formatting options. Available options:
       *    - `notation: string`
       *      Number notation. Choose from:
       *      - 'fixed'
       *        Always use regular number notation.
       *        For example '123.40' and '14000000'
       *      - 'exponential'
       *        Always use exponential notation.
       *        For example '1.234e+2' and '1.4e+7'
       *      - 'engineering'
       *        Always use engineering notation: always have exponential notation,
       *        and select the exponent to be a multiple of 3.
       *        For example '123.4e+0' and '14.0e+6'
       *      - 'auto' (default)
       *        Regular number notation for numbers having an absolute value between
       *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
       *        Lower bound is included, upper bound is excluded.
       *        For example '123.4' and '1.4e7'.
       *      - 'bin', 'oct, or 'hex'
       *        Format the number using binary, octal, or hexadecimal notation.
       *        For example '0b1101' and '0x10fe'.
       *    - `wordSize: number`
       *      The word size in bits to use for formatting in binary, octal, or
       *      hexadecimal notation. To be used only with 'bin', 'oct', or 'hex'
       *      values for 'notation' option. When this option is defined the value
       *      is formatted as a signed twos complement integer of the given word
       *      size and the size suffix is appended to the output.
       *      For example format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
       *      Default value is undefined.
       *    - `precision: number`
       *      Limit the number of digits of the formatted value.
       *      For regular numbers, must be a number between 0 and 16.
       *      For bignumbers, the maximum depends on the configured precision,
       *      see function `config()`.
       *      In case of notations 'exponential', 'engineering', and 'auto', `precision`
       *      defines the total number of significant digits returned.
       *      In case of notation 'fixed', `precision` defines the number of
       *      significant digits after the decimal point.
       *      `precision` is undefined by default.
       *    - `lowerExp: number`
       *      Exponent determining the lower boundary for formatting a value with
       *      an exponent when `notation='auto`. Default value is `-3`.
       *    - `upperExp: number`
       *      Exponent determining the upper boundary for formatting a value with
       *      an exponent when `notation='auto`. Default value is `5`.
       *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
       *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
       *      configured, and will output `0.(3)` when 'decimal' is configured.
       *    - `truncate: number`. Specifies the maximum allowed length of the
       *      returned string. If it would have been longer, the excess characters
       *      are deleted and replaced with `'...'`.
       * - `callback: function`
       *   A custom formatting function, invoked for all numeric elements in `value`,
       *   for example all elements of a matrix, or the real and imaginary
       *   parts of a complex number. This callback can be used to override the
       *   built-in numeric notation with any type of formatting. Function `callback`
       *   is called with `value` as parameter and must return a string.
       *
       * When `value` is an Object:
       *
       * - When the object contains a property `format` being a function, this function
       *   is invoked as `value.format(options)` and the result is returned.
       * - When the object has its own `toString` method, this method is invoked
       *   and the result is returned.
       * - In other cases the function will loop over all object properties and
       *   return JSON object notation like '{"a": 2, "b": 3}'.
       *
       * When value is a function:
       *
       * - When the function has a property `syntax`, it returns this
       *   syntax description.
       * - In other cases, a string `'function'` is returned.
       *
       * Examples:
       *
       *    math.format(6.4)                                        // returns '6.4'
       *    math.format(1240000)                                    // returns '1.24e6'
       *    math.format(1/3)                                        // returns '0.3333333333333333'
       *    math.format(1/3, 3)                                     // returns '0.333'
       *    math.format(21385, 2)                                   // returns '21000'
       *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'
       *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'
       *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'
       *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'
       *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'
       *
       *    function formatCurrency(value) {
       *      // return currency notation with two digits:
       *      return '$' + value.toFixed(2)
       *
       *      // you could also use math.format inside the callback:
       *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})
       *    }
       *    math.format([2.1, 3, 0.016], formatCurrency)            // returns '[$2.10, $3.00, $0.02]'
       *
       * See also:
       *
       *    print
       *
       * @param {*} value                               Value to be stringified
       * @param {Object | Function | number} [options]  Formatting options
       * @return {string} The formatted value
       */
      return typed(name$2T, {
        any: format$1,
        'any, Object | function | number': format$1
      });
    });

    var name$2S = 'bin';
    var dependencies$2S = ['typed', 'format'];
    /**
     * Format a number as binary.
     *
     * Syntax:
     *
     *    math.bin(value)
     *
     * Examples:
     *
     *    //the following outputs "0b10"
     *    math.bin(2)
     *
     * See also:
     *
     *    oct
     *    hex
     *
     * @param {number} value    Value to be stringified
     * @param {number} wordSize Optional word size (see `format`)
     * @return {string}         The formatted value
     */

    var createBin = factory(name$2S, dependencies$2S, _ref => {
      var {
        typed,
        format
      } = _ref;
      return typed(name$2S, {
        'number | BigNumber': function numberBigNumber(n) {
          return format(n, {
            notation: 'bin'
          });
        },
        'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
          return format(n, {
            notation: 'bin',
            wordSize
          });
        }
      });
    });

    var name$2R = 'oct';
    var dependencies$2R = ['typed', 'format'];
    /**
     * Format a number as octal.
     *
     * Syntax:
     *
     *    math.oct(value)
     *
     * Examples:
     *
     *    //the following outputs "0o70"
     *    math.oct(56)
     *
     * See also:
     *
     *    bin
     *    hex
     *
     * @param {number} value    Value to be stringified
     * @param {number} wordSize Optional word size (see `format`)
     * @return {string}         The formatted value
     */

    var createOct = factory(name$2R, dependencies$2R, _ref => {
      var {
        typed,
        format
      } = _ref;
      return typed(name$2R, {
        'number | BigNumber': function numberBigNumber(n) {
          return format(n, {
            notation: 'oct'
          });
        },
        'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
          return format(n, {
            notation: 'oct',
            wordSize
          });
        }
      });
    });

    var name$2Q = 'hex';
    var dependencies$2Q = ['typed', 'format'];
    /**
     * Format a number as hexadecimal.
     *
     * Syntax:
     *
     *    math.hex(value)
     *
     * Examples:
     *
     *    //the following outputs "0xF0"
     *    math.hex(240)
     *
     * See also:
     *
     *    oct
     *    bin
     *
     * @param {number} value    Value to be stringified
     * @param {number} wordSize Optional word size (see `format`)
     * @return {string}         The formatted value
     */

    var createHex = factory(name$2Q, dependencies$2Q, _ref => {
      var {
        typed,
        format
      } = _ref;
      return typed(name$2Q, {
        'number | BigNumber': function numberBigNumber(n) {
          return format(n, {
            notation: 'hex'
          });
        },
        'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
          return format(n, {
            notation: 'hex',
            wordSize
          });
        }
      });
    });

    var name$2P = 'print';
    var dependencies$2P = ['typed'];
    var createPrint = /* #__PURE__ */factory(name$2P, dependencies$2P, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Interpolate values into a string template.
       *
       * Syntax:
       *
       *     math.print(template, values)
       *     math.print(template, values, precision)
       *     math.print(template, values, options)
       *
       * Example usage:
       *
       *     // the following outputs: 'Lucy is 5 years old'
       *     math.print('Lucy is $age years old', {age: 5})
       *
       *     // the following outputs: 'The value of pi is 3.141592654'
       *     math.print('The value of pi is $pi', {pi: math.pi}, 10)
       *
       *     // the following outputs: 'hello Mary! The date is 2013-03-23'
       *     math.print('Hello $user.name! The date is $date', {
       *       user: {
       *         name: 'Mary',
       *       },
       *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
       *     })
       *
       *     // the following outputs: 'My favorite fruits are apples and bananas !'
       *     math.print('My favorite fruits are $0 and $1 !', [
       *       'apples',
       *       'bananas'
       *     ])
       *
       * See also:
       *
       *     format
       *
       * @param {string} template           A string containing variable placeholders.
       * @param {Object | Array | Matrix}   values An object or array containing variables
       *                                    which will be filled in in the template.
       * @param {number | Object} [options] Formatting options,
       *                                    or the number of digits to format numbers.
       *                                    See function math.format for a description
       *                                    of all options.
       * @return {string} Interpolated string
       */
      return typed(name$2P, {
        // note: Matrix will be converted automatically to an Array
        'string, Object | Array': _print,
        'string, Object | Array, number | Object': _print
      });
    });
    /**
     * Interpolate values into a string template.
     * @param {string} template
     * @param {Object} values
     * @param {number | Object} [options]
     * @returns {string} Interpolated string
     * @private
     */

    function _print(template, values, options) {
      return template.replace(/\$([\w.]+)/g, function (original, key) {
        var keys = key.split('.');
        var value = values[keys.shift()];

        while (keys.length && value !== undefined) {
          var k = keys.shift();
          value = k ? value[k] : value + '.';
        }

        if (value !== undefined) {
          if (!isString(value)) {
            return format$1(value, options);
          } else {
            return value;
          }
        }

        return original;
      });
    }

    var name$2O = 'to';
    var dependencies$2O = ['typed', 'matrix'];
    var createTo = /* #__PURE__ */factory(name$2O, dependencies$2O, _ref => {
      var {
        typed,
        matrix
      } = _ref;
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Change the unit of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.to(x, unit)
       *
       * Examples:
       *
       *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm
       *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm
       *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits
       *
       * See also:
       *
       *    unit
       *
       * @param {Unit | Array | Matrix} x     The unit to be converted.
       * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
       *                                      or a unit without value.
       * @return {Unit | Array | Matrix} value with changed, fixed unit.
       */

      return typed(name$2O, {
        'Unit, Unit | string': function UnitUnitString(x, unit) {
          return x.to(unit);
        },
        'Matrix, Matrix': function MatrixMatrix(x, y) {
          // SparseMatrix does not support Units
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'Matrix, any': function MatrixAny(x, y) {
          // SparseMatrix does not support Units
          return algorithm14(x, y, this, false);
        },
        'any, Matrix': function anyMatrix(x, y) {
          // SparseMatrix does not support Units
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$2N = 'isPrime';
    var dependencies$2N = ['typed'];
    var createIsPrime = /* #__PURE__ */factory(name$2N, dependencies$2N, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Test whether a value is prime: has no divisors other than itself and one.
       * The function supports type `number`, `bignumber`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isPrime(x)
       *
       * Examples:
       *
       *    math.isPrime(3)                     // returns true
       *    math.isPrime(-2)                    // returns false
       *    math.isPrime(0)                     // returns false
       *    math.isPrime(-0)                    // returns false
       *    math.isPrime(0.5)                   // returns false
       *    math.isPrime('2')                   // returns true
       *    math.isPrime([2, 17, 100])           // returns [true, true, false]
       *
       * See also:
       *
       *    isNumeric, isZero, isNegative, isInteger
       *
       * @param {number | BigNumber | Array | Matrix} x  Value to be tested
       * @return {boolean}  Returns true when `x` is larger than zero.
       *                    Throws an error in case of an unknown data type.
       */
      return typed(name$2N, {
        number: function number(x) {
          if (x * 0 !== 0) {
            return false;
          }

          if (x <= 3) {
            return x > 1;
          }

          if (x % 2 === 0 || x % 3 === 0) {
            return false;
          }

          for (var i = 5; i * i <= x; i += 6) {
            if (x % i === 0 || x % (i + 2) === 0) {
              return false;
            }
          }

          return true;
        },
        BigNumber: function BigNumber(n) {
          if (n.toNumber() * 0 !== 0) {
            return false;
          }

          if (n.lte(3)) return n.gt(1);
          if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;

          if (n.lt(Math.pow(2, 32))) {
            var x = n.toNumber();

            for (var i = 5; i * i <= x; i += 6) {
              if (x % i === 0 || x % (i + 2) === 0) {
                return false;
              }
            }

            return true;
          }

          function modPow(base, exponent, modulus) {
            // exponent can be huge, use non-recursive variant
            var accumulator = 1;

            while (!exponent.eq(0)) {
              if (exponent.mod(2).eq(0)) {
                exponent = exponent.div(2);
                base = base.mul(base).mod(modulus);
              } else {
                exponent = exponent.sub(1);
                accumulator = base.mul(accumulator).mod(modulus);
              }
            }

            return accumulator;
          } // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants


          var Decimal = n.constructor.clone({
            precision: n.toFixed(0).length * 2
          });
          n = new Decimal(n);
          var r = 0;
          var d = n.sub(1);

          while (d.mod(2).eq(0)) {
            d = d.div(2);
            r += 1;
          }

          var bases = null; // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases

          if (n.lt('3317044064679887385961981')) {
            bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(x => x < n);
          } else {
            var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));
            bases = [];

            for (var _i = 2; _i <= max; _i += 1) {
              bases.push(max);
            }
          }

          for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {
            var a = bases[_i2];
            var adn = modPow(n.sub(n).add(a), d, n);

            if (!adn.eq(1)) {
              for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {
                if (_i3 === r - 1) {
                  return false;
                }
              }
            }
          }

          return true;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$2M = 'numeric';
    var dependencies$2M = ['number', '?bignumber', '?fraction'];
    var createNumeric = /* #__PURE__ */factory(name$2M, dependencies$2M, _ref => {
      var {
        number: _number,
        bignumber,
        fraction
      } = _ref;
      var validInputTypes = {
        string: true,
        number: true,
        BigNumber: true,
        Fraction: true
      }; // Load the conversion functions for each output type

      var validOutputTypes = {
        number: x => _number(x),
        BigNumber: bignumber ? x => bignumber(x) : noBignumber,
        Fraction: fraction ? x => fraction(x) : noFraction
      };
      /**
       * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.
       *
       * Syntax:
       *
       *    math.numeric(x)
       *
       * Examples:
       *
       *    math.numeric('4')                           // returns number 4
       *    math.numeric('4', 'number')                 // returns number 4
       *    math.numeric('4', 'BigNumber')              // returns BigNumber 4
       *    math.numeric('4', 'Fraction')               // returns Fraction 4
       *    math.numeric(4, 'Fraction')                 // returns Fraction 4
       *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4
       *
       * See also:
       *
       *    number, fraction, bignumber, string, format
       *
       * @param {string | number | BigNumber | Fraction } value
       *              A numeric value or a string containing a numeric value
       * @param {string} outputType
       *              Desired numeric output type.
       *              Available values: 'number', 'BigNumber', or 'Fraction'
       * @return {number | BigNumber | Fraction}
       *              Returns an instance of the numeric in the requested type
       */

      return function numeric(value, outputType) {
        var inputType = typeOf$1(value);

        if (!(inputType in validInputTypes)) {
          throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
        }

        if (!(outputType in validOutputTypes)) {
          throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
        }

        if (outputType === inputType) {
          return value;
        } else {
          return validOutputTypes[outputType](value);
        }
      };
    });

    var name$2L = 'divideScalar';
    var dependencies$2L = ['typed', 'numeric'];
    var createDivideScalar = /* #__PURE__ */factory(name$2L, dependencies$2L, _ref => {
      var {
        typed,
        numeric
      } = _ref;

      /**
       * Divide two scalar values, `x / y`.
       * This function is meant for internal use: it is used by the public functions
       * `divide` and `inv`.
       *
       * This function does not support collections (Array or Matrix).
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
       * @param  {number | BigNumber | Fraction | Complex} y          Denominator
       * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`
       * @private
       */
      return typed(name$2L, {
        'number, number': function numberNumber(x, y) {
          return x / y;
        },
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.div(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.div(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.div(y);
        },
        'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
          var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit

          var one = numeric(1, typeOf$1(y));
          res.value = this(res.value === null ? res._normalize(one) : res.value, y);
          return res;
        },
        'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
          var res = y.clone();
          res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit

          var one = numeric(1, typeOf$1(x));
          res.value = this(x, y.value === null ? y._normalize(one) : y.value);
          return res;
        },
        'Unit, Unit': function UnitUnit(x, y) {
          return x.divide(y);
        }
      });
    });

    var name$2K = 'pow';
    var dependencies$2K = ['typed', 'config', 'identity', 'multiply', 'matrix', 'inv', 'fraction', 'number', 'Complex'];
    var createPow = /* #__PURE__ */factory(name$2K, dependencies$2K, _ref => {
      var {
        typed,
        config,
        identity,
        multiply,
        matrix,
        inv,
        number,
        fraction,
        Complex
      } = _ref;

      /**
       * Calculates the power of x to y, `x ^ y`.
       *
       * Matrix exponentiation is supported for square matrices `x` and integers `y`:
       * when `y` is nonnegative, `x` may be any square matrix; and when `y` is
       * negative, `x` must be invertible, and then this function returns
       * inv(x)^(-y).
       *
       * For cubic roots of negative numbers, the function returns the principal
       * root by default. In order to let the function return the real root,
       * math.js can be configured with `math.config({predictable: true})`.
       * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
       *
       * Syntax:
       *
       *    math.pow(x, y)
       *
       * Examples:
       *
       *    math.pow(2, 3)               // returns number 8
       *
       *    const a = math.complex(2, 3)
       *    math.pow(a, 2)                // returns Complex -5 + 12i
       *
       *    const b = [[1, 2], [4, 3]]
       *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]
       *
       *    const c = [[1, 2], [4, 3]]
       *    math.pow(c, -1)               // returns Array [[-0.6, 0.4], [0.8, -0.2]]
       *
       * See also:
       *
       *    multiply, sqrt, cbrt, nthRoot
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
       * @param  {number | BigNumber | Complex} y                          The exponent
       * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
       */
      return typed(name$2K, {
        'number, number': _pow,
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.pow(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          if (y.isInteger() || x >= 0 || config.predictable) {
            return x.pow(y);
          } else {
            return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
          }
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          var result = x.pow(y);

          if (result != null) {
            return result;
          }

          if (config.predictable) {
            throw new Error('Result of pow is non-rational and cannot be expressed as a fraction');
          } else {
            return _pow(x.valueOf(), y.valueOf());
          }
        },
        'Array, number': _powArray,
        'Array, BigNumber': function ArrayBigNumber(x, y) {
          return _powArray(x, y.toNumber());
        },
        'Matrix, number': _powMatrix,
        'Matrix, BigNumber': function MatrixBigNumber(x, y) {
          return _powMatrix(x, y.toNumber());
        },
        'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {
          return x.pow(y);
        }
      });
      /**
       * Calculates the power of x to y, x^y, for two numbers.
       * @param {number} x
       * @param {number} y
       * @return {number | Complex} res
       * @private
       */

      function _pow(x, y) {
        // Alternatively could define a 'realmode' config option or something, but
        // 'predictable' will work for now
        if (config.predictable && !isInteger$1(y) && x < 0) {
          // Check to see if y can be represented as a fraction
          try {
            var yFrac = fraction(y);
            var yNum = number(yFrac);

            if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
              if (yFrac.d % 2 === 1) {
                return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
              }
            }
          } catch (ex) {// fraction() throws an error if y is Infinity, etc.
          } // Unable to express y as a fraction, so continue on

        } // **for predictable mode** x^Infinity === NaN if x < -1
        // N.B. this behavour is different from `Math.pow` which gives
        // (-2)^Infinity === Infinity


        if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
          return NaN;
        }

        if (isInteger$1(y) || x >= 0 || config.predictable) {
          return powNumber(x, y);
        } else {
          // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow
          // x^Infinity === 0 if -1 < x < 1
          // A real number 0 is returned instead of complex(0)
          if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
            return 0;
          }

          return new Complex(x, 0).pow(y, 0);
        }
      }
      /**
       * Calculate the power of a 2d array
       * @param {Array} x     must be a 2 dimensional, square matrix
       * @param {number} y    a integer value (positive if `x` is not invertible)
       * @returns {Array}
       * @private
       */


      function _powArray(x, y) {
        if (!isInteger$1(y)) {
          throw new TypeError('For A^b, b must be an integer (value is ' + y + ')');
        } // verify that A is a 2 dimensional square matrix


        var s = arraySize(x);

        if (s.length !== 2) {
          throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
        }

        if (s[0] !== s[1]) {
          throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
        }

        if (y < 0) {
          try {
            return _powArray(inv(x), -y);
          } catch (error) {
            if (error.message === 'Cannot calculate inverse, determinant is zero') {
              throw new TypeError('For A^b, when A is not invertible, b must be a positive integer (value is ' + y + ')');
            }

            throw error;
          }
        }

        var res = identity(s[0]).valueOf();
        var px = x;

        while (y >= 1) {
          if ((y & 1) === 1) {
            res = multiply(px, res);
          }

          y >>= 1;
          px = multiply(px, px);
        }

        return res;
      }
      /**
       * Calculate the power of a 2d matrix
       * @param {Matrix} x     must be a 2 dimensional, square matrix
       * @param {number} y    a positive, integer value
       * @returns {Matrix}
       * @private
       */


      function _powMatrix(x, y) {
        return matrix(_powArray(x.valueOf(), y));
      }
    });

    var NO_INT = 'Number of decimals in function round must be an integer';
    var name$2J = 'round';
    var dependencies$2J = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];
    var createRound = /* #__PURE__ */factory(name$2J, dependencies$2J, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        zeros,
        BigNumber,
        DenseMatrix
      } = _ref;
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Round a value towards the nearest integer.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.round(x)
       *    math.round(x, n)
       *
       * Examples:
       *
       *    math.round(3.22)             // returns number 3
       *    math.round(3.82)             // returns number 4
       *    math.round(-4.2)             // returns number -4
       *    math.round(-4.7)             // returns number -5
       *    math.round(3.22, 1)          // returns number 3.2
       *    math.round(3.88, 1)          // returns number 3.9
       *    math.round(-4.21, 1)         // returns number -4.2
       *    math.round(-4.71, 1)         // returns number -4.7
       *    math.round(math.pi, 3)       // returns number 3.142
       *    math.round(123.45678, 2)     // returns number 123.46
       *
       *    const c = math.complex(3.2, -2.7)
       *    math.round(c)                // returns Complex 3 - 3i
       *
       *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]
       *
       * See also:
       *
       *    ceil, fix, floor
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
       * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
       */

      return typed(name$2J, {
        number: roundNumber,
        'number, number': roundNumber,
        'number, BigNumber': function numberBigNumber(x, n) {
          if (!n.isInteger()) {
            throw new TypeError(NO_INT);
          }

          return new BigNumber(x).toDecimalPlaces(n.toNumber());
        },
        Complex: function Complex(x) {
          return x.round();
        },
        'Complex, number': function ComplexNumber(x, n) {
          if (n % 1) {
            throw new TypeError(NO_INT);
          }

          return x.round(n);
        },
        'Complex, BigNumber': function ComplexBigNumber(x, n) {
          if (!n.isInteger()) {
            throw new TypeError(NO_INT);
          }

          var _n = n.toNumber();

          return x.round(_n);
        },
        BigNumber: function BigNumber(x) {
          return x.toDecimalPlaces(0);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
          if (!n.isInteger()) {
            throw new TypeError(NO_INT);
          }

          return x.toDecimalPlaces(n.toNumber());
        },
        Fraction: function Fraction(x) {
          return x.round();
        },
        'Fraction, number': function FractionNumber(x, n) {
          if (n % 1) {
            throw new TypeError(NO_INT);
          }

          return x.round(n);
        },
        'Fraction, BigNumber': function FractionBigNumber(x, n) {
          if (!n.isInteger()) {
            throw new TypeError(NO_INT);
          }

          return x.round(n.toNumber());
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since round(0) = 0
          return deepMap(x, this);
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, this, false);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'number | Complex | BigNumber | Fraction, SparseMatrix': function numberComplexBigNumberFractionSparseMatrix(x, y) {
          // check scalar is zero
          if (equalScalar(x, 0)) {
            // do not execute algorithm, result will be a zero matrix
            return zeros(y.size(), y.storage());
          }

          return algorithm12(y, x, this, true);
        },
        'number | Complex | BigNumber | Fraction, DenseMatrix': function numberComplexBigNumberFractionDenseMatrix(x, y) {
          // check scalar is zero
          if (equalScalar(x, 0)) {
            // do not execute algorithm, result will be a zero matrix
            return zeros(y.size(), y.storage());
          }

          return algorithm14(y, x, this, true);
        },
        'number | Complex | BigNumber | Fraction, Array': function numberComplexBigNumberFractionArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$2I = 'log';
    var dependencies$2I = ['config', 'typed', 'divideScalar', 'Complex'];
    var createLog = /* #__PURE__ */factory(name$2I, dependencies$2I, _ref => {
      var {
        typed,
        config,
        divideScalar,
        Complex
      } = _ref;

      /**
       * Calculate the logarithm of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.log(x)
       *    math.log(x, base)
       *
       * Examples:
       *
       *    math.log(3.5)                  // returns 1.252762968495368
       *    math.exp(math.log(2.4))        // returns 2.4
       *
       *    math.pow(10, 4)                // returns 10000
       *    math.log(10000, 10)            // returns 4
       *    math.log(10000) / math.log(10) // returns 4
       *
       *    math.log(1024, 2)              // returns 10
       *    math.pow(2, 10)                // returns 1024
       *
       * See also:
       *
       *    exp, log2, log10, log1p
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            Value for which to calculate the logarithm.
       * @param {number | BigNumber | Complex} [base=e]
       *            Optional base for the logarithm. If not provided, the natural
       *            logarithm of `x` is calculated.
       * @return {number | BigNumber | Complex | Array | Matrix}
       *            Returns the logarithm of `x`
       */
      return typed(name$2I, {
        number: function number(x) {
          if (x >= 0 || config.predictable) {
            return logNumber(x);
          } else {
            // negative value -> complex value computation
            return new Complex(x, 0).log();
          }
        },
        Complex: function Complex(x) {
          return x.log();
        },
        BigNumber: function BigNumber(x) {
          if (!x.isNegative() || config.predictable) {
            return x.ln();
          } else {
            // downgrade to number, return Complex valued result
            return new Complex(x.toNumber(), 0).log();
          }
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        },
        'any, any': function anyAny(x, base) {
          // calculate logarithm for a specified base, log(x, base)
          return divideScalar(this(x), this(base));
        }
      });
    });

    var name$2H = 'log1p';
    var dependencies$2H = ['typed', 'config', 'divideScalar', 'log', 'Complex'];
    var createLog1p = /* #__PURE__ */factory(name$2H, dependencies$2H, _ref => {
      var {
        typed,
        config,
        divideScalar,
        log,
        Complex
      } = _ref;

      /**
       * Calculate the logarithm of a `value+1`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.log1p(x)
       *    math.log1p(x, base)
       *
       * Examples:
       *
       *    math.log1p(2.5)                 // returns 1.252762968495368
       *    math.exp(math.log1p(1.4))       // returns 2.4
       *
       *    math.pow(10, 4)                 // returns 10000
       *    math.log1p(9999, 10)            // returns 4
       *    math.log1p(9999) / math.log(10) // returns 4
       *
       * See also:
       *
       *    exp, log, log2, log10
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            Value for which to calculate the logarithm of `x+1`.
       * @param {number | BigNumber | Complex} [base=e]
       *            Optional base for the logarithm. If not provided, the natural
       *            logarithm of `x+1` is calculated.
       * @return {number | BigNumber | Complex | Array | Matrix}
       *            Returns the logarithm of `x+1`
       */
      return typed(name$2H, {
        number: function number(x) {
          if (x >= -1 || config.predictable) {
            return log1p$1(x);
          } else {
            // negative value -> complex value computation
            return _log1pComplex(new Complex(x, 0));
          }
        },
        Complex: _log1pComplex,
        BigNumber: function BigNumber(x) {
          var y = x.plus(1);

          if (!y.isNegative() || config.predictable) {
            return y.ln();
          } else {
            // downgrade to number, return Complex valued result
            return _log1pComplex(new Complex(x.toNumber(), 0));
          }
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        },
        'any, any': function anyAny(x, base) {
          // calculate logarithm for a specified base, log1p(x, base)
          return divideScalar(this(x), log(base));
        }
      });
      /**
       * Calculate the natural logarithm of a complex number + 1
       * @param {Complex} x
       * @returns {Complex}
       * @private
       */

      function _log1pComplex(x) {
        var xRe1p = x.re + 1;
        return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));
      }
    });

    var name$2G = 'nthRoots';
    var dependencies$2G = ['config', 'typed', 'divideScalar', 'Complex'];
    var createNthRoots = /* #__PURE__ */factory(name$2G, dependencies$2G, _ref => {
      var {
        typed,
        config,
        divideScalar,
        Complex
      } = _ref;

      /**
       * Each function here returns a real multiple of i as a Complex value.
       * @param  {number} val
       * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3
       */
      // This is used to fix float artifacts for zero-valued components.
      var _calculateExactResult = [function realPos(val) {
        return new Complex(val, 0);
      }, function imagPos(val) {
        return new Complex(0, val);
      }, function realNeg(val) {
        return new Complex(-val, 0);
      }, function imagNeg(val) {
        return new Complex(0, -val);
      }];
      /**
       * Calculate the nth root of a Complex Number a using De Movire's Theorem.
       * @param  {Complex} a
       * @param  {number} root
       * @return {Array} array of n Complex Roots
       */

      function _nthComplexRoots(a, root) {
        if (root < 0) throw new Error('Root must be greater than zero');
        if (root === 0) throw new Error('Root must be non-zero');
        if (root % 1 !== 0) throw new Error('Root must be an integer');
        if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];
        var aIsNumeric = typeof a === 'number';
        var offset; // determine the offset (argument of a)/(pi/2)

        if (aIsNumeric || a.re === 0 || a.im === 0) {
          if (aIsNumeric) {
            offset = 2 * +(a < 0); // numeric value on the real axis
          } else if (a.im === 0) {
            offset = 2 * +(a.re < 0); // complex value on the real axis
          } else {
            offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis
          }
        }

        var arg = a.arg();
        var abs = a.abs();
        var roots = [];
        var r = Math.pow(abs, 1 / root);

        for (var k = 0; k < root; k++) {
          var halfPiFactor = (offset + 4 * k) / root;
          /**
           * If (offset + 4*k)/root is an integral multiple of pi/2
           * then we can produce a more exact result.
           */

          if (halfPiFactor === Math.round(halfPiFactor)) {
            roots.push(_calculateExactResult[halfPiFactor % 4](r));
            continue;
          }

          roots.push(new Complex({
            r,
            phi: (arg + 2 * Math.PI * k) / root
          }));
        }

        return roots;
      }
      /**
       * Calculate the nth roots of a value.
       * An nth root of a positive real number A,
       * is a positive real solution of the equation "x^root = A".
       * This function returns an array of complex values.
       *
       * Syntax:
       *
       *    math.nthRoots(x)
       *    math.nthRoots(x, root)
       *
       * Examples:
       *
       *    math.nthRoots(1)
       *    // returns [
       *    //   {re: 1, im: 0},
       *    //   {re: -1, im: 0}
       *    // ]
       *    nthRoots(1, 3)
       *    // returns [
       *    //   { re: 1, im: 0 },
       *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },
       *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }
       *    ]
       *
       * See also:
       *
       *    nthRoot, pow, sqrt
       *
       * @param {number | BigNumber | Fraction | Complex} x Number to be rounded
       * @return {number | BigNumber | Fraction | Complex}            Rounded value
       */


      return typed(name$2G, {
        Complex: function Complex(x) {
          return _nthComplexRoots(x, 2);
        },
        'Complex, number': _nthComplexRoots
      });
    });

    var name$2F = 'dotPow';
    var dependencies$2F = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];
    var createDotPow = /* #__PURE__ */factory(name$2F, dependencies$2F, _ref => {
      var {
        typed,
        equalScalar,
        matrix,
        pow,
        DenseMatrix
      } = _ref;
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm07 = createAlgorithm07({
        typed,
        DenseMatrix
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Calculates the power of x to y element wise.
       *
       * Syntax:
       *
       *    math.dotPow(x, y)
       *
       * Examples:
       *
       *    math.dotPow(2, 3)            // returns number 8
       *
       *    const a = [[1, 2], [4, 3]]
       *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]
       *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]
       *
       * See also:
       *
       *    pow, sqrt, multiply
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
       * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
       */

      return typed(name$2F, {
        'any, any': pow,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, pow, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, pow, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, pow, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, pow);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$2E = 'dotDivide';
    var dependencies$2E = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];
    var createDotDivide = /* #__PURE__ */factory(name$2E, dependencies$2E, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        divideScalar,
        DenseMatrix
      } = _ref;
      var algorithm02 = createAlgorithm02({
        typed,
        equalScalar
      });
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm07 = createAlgorithm07({
        typed,
        DenseMatrix
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Divide two matrices element wise. The function accepts both matrices and
       * scalar values.
       *
       * Syntax:
       *
       *    math.dotDivide(x, y)
       *
       * Examples:
       *
       *    math.dotDivide(2, 4)   // returns 0.5
       *
       *    a = [[9, 5], [6, 1]]
       *    b = [[3, 2], [5, 2]]
       *
       *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]
       *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]
       *
       * See also:
       *
       *    divide, multiply, dotMultiply
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
       */

      return typed(name$2E, {
        'any, any': divideScalar,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, divideScalar, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, divideScalar, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, divideScalar, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, divideScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, divideScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, divideScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, divideScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, divideScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, divideScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, divideScalar, true).valueOf();
        }
      });
    });

    function createSolveValidation(_ref) {
      var {
        DenseMatrix
      } = _ref;

      /**
       * Validates matrix and column vector b for backward/forward substitution algorithms.
       *
       * @param {Matrix} m            An N x N matrix
       * @param {Array | Matrix} b    A column vector
       * @param {Boolean} copy        Return a copy of vector b
       *
       * @return {DenseMatrix}        Dense column vector b
       */
      return function solveValidation(m, b, copy) {
        var mSize = m.size();

        if (mSize.length !== 2) {
          throw new RangeError('Matrix must be two dimensional (size: ' + format$1(mSize) + ')');
        }

        var rows = mSize[0];
        var columns = mSize[1];

        if (rows !== columns) {
          throw new RangeError('Matrix must be square (size: ' + format$1(mSize) + ')');
        }

        var data = [];

        if (isMatrix(b)) {
          var bSize = b.size();
          var bdata = b._data; // 1-dim vector

          if (bSize.length === 1) {
            if (bSize[0] !== rows) {
              throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
            }

            for (var i = 0; i < rows; i++) {
              data[i] = [bdata[i]];
            }

            return new DenseMatrix({
              data,
              size: [rows, 1],
              datatype: b._datatype
            });
          } // 2-dim column


          if (bSize.length === 2) {
            if (bSize[0] !== rows || bSize[1] !== 1) {
              throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
            }

            if (isDenseMatrix(b)) {
              if (copy) {
                data = [];

                for (var _i = 0; _i < rows; _i++) {
                  data[_i] = [bdata[_i][0]];
                }

                return new DenseMatrix({
                  data,
                  size: [rows, 1],
                  datatype: b._datatype
                });
              }

              return b;
            }

            if (isSparseMatrix(b)) {
              for (var _i2 = 0; _i2 < rows; _i2++) {
                data[_i2] = [0];
              }

              var values = b._values;
              var index = b._index;
              var ptr = b._ptr;

              for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
                var _i3 = index[k];
                data[_i3][0] = values[k];
              }

              return new DenseMatrix({
                data,
                size: [rows, 1],
                datatype: b._datatype
              });
            }
          }

          throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
        }

        if (isArray(b)) {
          var bsize = arraySize(b);

          if (bsize.length === 1) {
            if (bsize[0] !== rows) {
              throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
            }

            for (var _i4 = 0; _i4 < rows; _i4++) {
              data[_i4] = [b[_i4]];
            }

            return new DenseMatrix({
              data,
              size: [rows, 1]
            });
          }

          if (bsize.length === 2) {
            if (bsize[0] !== rows || bsize[1] !== 1) {
              throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
            }

            for (var _i5 = 0; _i5 < rows; _i5++) {
              data[_i5] = [b[_i5][0]];
            }

            return new DenseMatrix({
              data,
              size: [rows, 1]
            });
          }

          throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
        }
      };
    }

    var name$2D = 'lsolve';
    var dependencies$2D = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
    var createLsolve = /* #__PURE__ */factory(name$2D, dependencies$2D, _ref => {
      var {
        typed,
        matrix,
        divideScalar,
        multiplyScalar,
        subtract,
        equalScalar,
        DenseMatrix
      } = _ref;
      var solveValidation = createSolveValidation({
        DenseMatrix
      });
      /**
       * Finds one solution of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix. Throws an error if there's no solution.
       *
       * `L * x = b`
       *
       * Syntax:
       *
       *    math.lsolve(L, b)
       *
       * Examples:
       *
       *    const a = [[-2, 3], [2, 1]]
       *    const b = [11, 9]
       *    const x = lsolve(a, b)  // [[-5.5], [20]]
       *
       * See also:
       *
       *    lsolveAll, lup, slu, usolve, lusolve
       *
       * @param {Matrix, Array} L       A N x N matrix or array (L)
       * @param {Matrix, Array} b       A column vector with the b values
       *
       * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
       */

      return typed(name$2D, {
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
          return _sparseForwardSubstitution(m, b);
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
          return _denseForwardSubstitution(m, b);
        },
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
          var m = matrix(a);

          var r = _denseForwardSubstitution(m, b);

          return r.valueOf();
        }
      });

      function _denseForwardSubstitution(m, b) {
        // validate matrix and vector, return copy of column vector b
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1]; // result

        var x = [];
        var mdata = m._data; // loop columns

        for (var j = 0; j < columns; j++) {
          var bj = bdata[j][0] || 0;
          var xj = void 0;

          if (!equalScalar(bj, 0)) {
            // non-degenerate row, find solution
            var vjj = mdata[j][j];

            if (equalScalar(vjj, 0)) {
              throw new Error('Linear system cannot be solved since matrix is singular');
            }

            xj = divideScalar(bj, vjj); // loop rows

            for (var i = j + 1; i < rows; i++) {
              bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];
            }
          } else {
            // degenerate row, we can choose any value
            xj = 0;
          }

          x[j] = [xj];
        }

        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      }

      function _sparseForwardSubstitution(m, b) {
        // validate matrix and vector, return copy of column vector b
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1];
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // result

        var x = []; // loop columns

        for (var j = 0; j < columns; j++) {
          var bj = bdata[j][0] || 0;

          if (!equalScalar(bj, 0)) {
            // non-degenerate row, find solution
            var vjj = 0; // matrix values & indices (column j)

            var jValues = [];
            var jIndices = []; // first and last index in the column

            var firstIndex = ptr[j];
            var lastIndex = ptr[j + 1]; // values in column, find value at [j, j]

            for (var k = firstIndex; k < lastIndex; k++) {
              var i = index[k]; // check row (rows are not sorted!)

              if (i === j) {
                vjj = values[k];
              } else if (i > j) {
                // store lower triangular
                jValues.push(values[k]);
                jIndices.push(i);
              }
            } // at this point we must have a value in vjj


            if (equalScalar(vjj, 0)) {
              throw new Error('Linear system cannot be solved since matrix is singular');
            }

            var xj = divideScalar(bj, vjj);

            for (var _k = 0, l = jIndices.length; _k < l; _k++) {
              var _i = jIndices[_k];
              bdata[_i] = [subtract(bdata[_i][0] || 0, multiplyScalar(xj, jValues[_k]))];
            }

            x[j] = [xj];
          } else {
            // degenerate row, we can choose any value
            x[j] = [0];
          }
        }

        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      }
    });

    var name$2C = 'usolve';
    var dependencies$2C = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
    var createUsolve = /* #__PURE__ */factory(name$2C, dependencies$2C, _ref => {
      var {
        typed,
        matrix,
        divideScalar,
        multiplyScalar,
        subtract,
        equalScalar,
        DenseMatrix
      } = _ref;
      var solveValidation = createSolveValidation({
        DenseMatrix
      });
      /**
       * Finds one solution of a linear equation system by backward substitution. Matrix must be an upper triangular matrix. Throws an error if there's no solution.
       *
       * `U * x = b`
       *
       * Syntax:
       *
       *    math.usolve(U, b)
       *
       * Examples:
       *
       *    const a = [[-2, 3], [2, 1]]
       *    const b = [11, 9]
       *    const x = usolve(a, b)  // [[8], [9]]
       *
       * See also:
       *
       *    usolveAll, lup, slu, usolve, lusolve
       *
       * @param {Matrix, Array} U       A N x N matrix or array (U)
       * @param {Matrix, Array} b       A column vector with the b values
       *
       * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
       */

      return typed(name$2C, {
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
          return _sparseBackwardSubstitution(m, b);
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
          return _denseBackwardSubstitution(m, b);
        },
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
          var m = matrix(a);

          var r = _denseBackwardSubstitution(m, b);

          return r.valueOf();
        }
      });

      function _denseBackwardSubstitution(m, b) {
        // make b into a column vector
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1]; // result

        var x = [];
        var mdata = m._data; // loop columns backwards

        for (var j = columns - 1; j >= 0; j--) {
          // b[j]
          var bj = bdata[j][0] || 0; // x[j]

          var xj = void 0;

          if (!equalScalar(bj, 0)) {
            // value at [j, j]
            var vjj = mdata[j][j];

            if (equalScalar(vjj, 0)) {
              // system cannot be solved
              throw new Error('Linear system cannot be solved since matrix is singular');
            }

            xj = divideScalar(bj, vjj); // loop rows

            for (var i = j - 1; i >= 0; i--) {
              // update copy of b
              bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];
            }
          } else {
            // zero value at j
            xj = 0;
          } // update x


          x[j] = [xj];
        }

        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      }

      function _sparseBackwardSubstitution(m, b) {
        // make b into a column vector
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1];
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // result

        var x = []; // loop columns backwards

        for (var j = columns - 1; j >= 0; j--) {
          var bj = bdata[j][0] || 0;

          if (!equalScalar(bj, 0)) {
            // non-degenerate row, find solution
            var vjj = 0; // upper triangular matrix values & index (column j)

            var jValues = [];
            var jIndices = []; // first & last indeces in column

            var firstIndex = ptr[j];
            var lastIndex = ptr[j + 1]; // values in column, find value at [j, j], loop backwards

            for (var k = lastIndex - 1; k >= firstIndex; k--) {
              var i = index[k]; // check row (rows are not sorted!)

              if (i === j) {
                vjj = values[k];
              } else if (i < j) {
                // store upper triangular
                jValues.push(values[k]);
                jIndices.push(i);
              }
            } // at this point we must have a value in vjj


            if (equalScalar(vjj, 0)) {
              throw new Error('Linear system cannot be solved since matrix is singular');
            }

            var xj = divideScalar(bj, vjj);

            for (var _k = 0, _lastIndex = jIndices.length; _k < _lastIndex; _k++) {
              var _i = jIndices[_k];
              bdata[_i] = [subtract(bdata[_i][0], multiplyScalar(xj, jValues[_k]))];
            }

            x[j] = [xj];
          } else {
            // degenerate row, we can choose any value
            x[j] = [0];
          }
        }

        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      }
    });

    var name$2B = 'lsolveAll';
    var dependencies$2B = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
    var createLsolveAll = /* #__PURE__ */factory(name$2B, dependencies$2B, _ref => {
      var {
        typed,
        matrix,
        divideScalar,
        multiplyScalar,
        subtract,
        equalScalar,
        DenseMatrix
      } = _ref;
      var solveValidation = createSolveValidation({
        DenseMatrix
      });
      /**
       * Finds all solutions of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
       *
       * `L * x = b`
       *
       * Syntax:
       *
       *    math.lsolveAll(L, b)
       *
       * Examples:
       *
       *    const a = [[-2, 3], [2, 1]]
       *    const b = [11, 9]
       *    const x = lsolveAll(a, b)  // [ [[-5.5], [20]] ]
       *
       * See also:
       *
       *    lsolve, lup, slu, usolve, lusolve
       *
       * @param {Matrix, Array} L       A N x N matrix or array (L)
       * @param {Matrix, Array} b       A column vector with the b values
       *
       * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system
       */

      return typed(name$2B, {
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
          return _sparseForwardSubstitution(m, b);
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
          return _denseForwardSubstitution(m, b);
        },
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
          var m = matrix(a);

          var R = _denseForwardSubstitution(m, b);

          return R.map(r => r.valueOf());
        }
      });

      function _denseForwardSubstitution(m, b_) {
        // the algorithm is derived from
        // https://www.overleaf.com/read/csvgqdxggyjv
        // array of right-hand sides
        var B = [solveValidation(m, b_, true)._data.map(e => e[0])];
        var M = m._data;
        var rows = m._size[0];
        var columns = m._size[1]; // loop columns

        for (var i = 0; i < columns; i++) {
          var L = B.length; // loop right-hand sides

          for (var k = 0; k < L; k++) {
            var b = B[k];

            if (!equalScalar(M[i][i], 0)) {
              // non-singular row
              b[i] = divideScalar(b[i], M[i][i]);

              for (var j = i + 1; j < columns; j++) {
                // b[j] -= b[i] * M[j,i]
                b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));
              }
            } else if (!equalScalar(b[i], 0)) {
              // singular row, nonzero RHS
              if (k === 0) {
                // There is no valid solution
                return [];
              } else {
                // This RHS is invalid but other solutions may still exist
                B.splice(k, 1);
                k -= 1;
                L -= 1;
              }
            } else if (k === 0) {
              // singular row, RHS is zero
              var bNew = [...b];
              bNew[i] = 1;

              for (var _j = i + 1; _j < columns; _j++) {
                bNew[_j] = subtract(bNew[_j], M[_j][i]);
              }

              B.push(bNew);
            }
          }
        }

        return B.map(x => new DenseMatrix({
          data: x.map(e => [e]),
          size: [rows, 1]
        }));
      }

      function _sparseForwardSubstitution(m, b_) {
        // array of right-hand sides
        var B = [solveValidation(m, b_, true)._data.map(e => e[0])];
        var rows = m._size[0];
        var columns = m._size[1];
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // loop columns

        for (var i = 0; i < columns; i++) {
          var L = B.length; // loop right-hand sides

          for (var k = 0; k < L; k++) {
            var b = B[k]; // values & indices (column i)

            var iValues = [];
            var iIndices = []; // first & last indeces in column

            var firstIndex = ptr[i];
            var lastIndex = ptr[i + 1]; // find the value at [i, i]

            var Mii = 0;

            for (var j = firstIndex; j < lastIndex; j++) {
              var J = index[j]; // check row

              if (J === i) {
                Mii = values[j];
              } else if (J > i) {
                // store lower triangular
                iValues.push(values[j]);
                iIndices.push(J);
              }
            }

            if (!equalScalar(Mii, 0)) {
              // non-singular row
              b[i] = divideScalar(b[i], Mii);

              for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {
                var _J = iIndices[_j2];
                b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));
              }
            } else if (!equalScalar(b[i], 0)) {
              // singular row, nonzero RHS
              if (k === 0) {
                // There is no valid solution
                return [];
              } else {
                // This RHS is invalid but other solutions may still exist
                B.splice(k, 1);
                k -= 1;
                L -= 1;
              }
            } else if (k === 0) {
              // singular row, RHS is zero
              var bNew = [...b];
              bNew[i] = 1;

              for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {
                var _J2 = iIndices[_j3];
                bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);
              }

              B.push(bNew);
            }
          }
        }

        return B.map(x => new DenseMatrix({
          data: x.map(e => [e]),
          size: [rows, 1]
        }));
      }
    });

    var name$2A = 'usolveAll';
    var dependencies$2A = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
    var createUsolveAll = /* #__PURE__ */factory(name$2A, dependencies$2A, _ref => {
      var {
        typed,
        matrix,
        divideScalar,
        multiplyScalar,
        subtract,
        equalScalar,
        DenseMatrix
      } = _ref;
      var solveValidation = createSolveValidation({
        DenseMatrix
      });
      /**
       * Finds all solutions of a linear equation system by backward substitution. Matrix must be an upper triangular matrix.
       *
       * `U * x = b`
       *
       * Syntax:
       *
       *    math.usolveAll(U, b)
       *
       * Examples:
       *
       *    const a = [[-2, 3], [2, 1]]
       *    const b = [11, 9]
       *    const x = usolveAll(a, b)  // [ [[8], [9]] ]
       *
       * See also:
       *
       *    usolve, lup, slu, usolve, lusolve
       *
       * @param {Matrix, Array} U       A N x N matrix or array (U)
       * @param {Matrix, Array} b       A column vector with the b values
       *
       * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system
       */

      return typed(name$2A, {
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
          return _sparseBackwardSubstitution(m, b);
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
          return _denseBackwardSubstitution(m, b);
        },
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
          var m = matrix(a);

          var R = _denseBackwardSubstitution(m, b);

          return R.map(r => r.valueOf());
        }
      });

      function _denseBackwardSubstitution(m, b_) {
        // the algorithm is derived from
        // https://www.overleaf.com/read/csvgqdxggyjv
        // array of right-hand sides
        var B = [solveValidation(m, b_, true)._data.map(e => e[0])];
        var M = m._data;
        var rows = m._size[0];
        var columns = m._size[1]; // loop columns backwards

        for (var i = columns - 1; i >= 0; i--) {
          var L = B.length; // loop right-hand sides

          for (var k = 0; k < L; k++) {
            var b = B[k];

            if (!equalScalar(M[i][i], 0)) {
              // non-singular row
              b[i] = divideScalar(b[i], M[i][i]);

              for (var j = i - 1; j >= 0; j--) {
                // b[j] -= b[i] * M[j,i]
                b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));
              }
            } else if (!equalScalar(b[i], 0)) {
              // singular row, nonzero RHS
              if (k === 0) {
                // There is no valid solution
                return [];
              } else {
                // This RHS is invalid but other solutions may still exist
                B.splice(k, 1);
                k -= 1;
                L -= 1;
              }
            } else if (k === 0) {
              // singular row, RHS is zero
              var bNew = [...b];
              bNew[i] = 1;

              for (var _j = i - 1; _j >= 0; _j--) {
                bNew[_j] = subtract(bNew[_j], M[_j][i]);
              }

              B.push(bNew);
            }
          }
        }

        return B.map(x => new DenseMatrix({
          data: x.map(e => [e]),
          size: [rows, 1]
        }));
      }

      function _sparseBackwardSubstitution(m, b_) {
        // array of right-hand sides
        var B = [solveValidation(m, b_, true)._data.map(e => e[0])];
        var rows = m._size[0];
        var columns = m._size[1];
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // loop columns backwards

        for (var i = columns - 1; i >= 0; i--) {
          var L = B.length; // loop right-hand sides

          for (var k = 0; k < L; k++) {
            var b = B[k]; // values & indices (column i)

            var iValues = [];
            var iIndices = []; // first & last indeces in column

            var firstIndex = ptr[i];
            var lastIndex = ptr[i + 1]; // find the value at [i, i]

            var Mii = 0;

            for (var j = lastIndex - 1; j >= firstIndex; j--) {
              var J = index[j]; // check row

              if (J === i) {
                Mii = values[j];
              } else if (J < i) {
                // store upper triangular
                iValues.push(values[j]);
                iIndices.push(J);
              }
            }

            if (!equalScalar(Mii, 0)) {
              // non-singular row
              b[i] = divideScalar(b[i], Mii); // loop upper triangular

              for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {
                var _J = iIndices[_j2];
                b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));
              }
            } else if (!equalScalar(b[i], 0)) {
              // singular row, nonzero RHS
              if (k === 0) {
                // There is no valid solution
                return [];
              } else {
                // This RHS is invalid but other solutions may still exist
                B.splice(k, 1);
                k -= 1;
                L -= 1;
              }
            } else if (k === 0) {
              // singular row, RHS is zero
              var bNew = [...b];
              bNew[i] = 1; // loop upper triangular

              for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {
                var _J2 = iIndices[_j3];
                bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);
              }

              B.push(bNew);
            }
          }
        }

        return B.map(x => new DenseMatrix({
          data: x.map(e => [e]),
          size: [rows, 1]
        }));
      }
    });

    var name$2z = 'algorithm08';
    var dependencies$2z = ['typed', 'equalScalar'];
    var createAlgorithm08 = /* #__PURE__ */factory(name$2z, dependencies$2z, _ref => {
      var {
        typed,
        equalScalar
      } = _ref;

      /**
       * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
       * Callback function invoked MAX(NNZA, NNZB) times
       *
       *
       *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
       * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
       *          └  0            ; otherwise
       *
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm08(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // sparse matrix cannot be a Pattern matrix


        if (!avalues || !bvalues) {
          throw new Error('Cannot perform operation on Pattern Sparse Matrices');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = [];
        var cindex = [];
        var cptr = []; // workspace

        var x = []; // marks indicating we have a value in x for a given column

        var w = []; // vars

        var k, k0, k1, i; // loop columns

        for (var j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // columns mark

          var mark = j + 1; // loop values in a

          for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = aindex[k]; // mark workspace

            w[i] = mark; // set value

            x[i] = avalues[k]; // add index

            cindex.push(i);
          } // loop values in b


          for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = bindex[k]; // check value exists in workspace

            if (w[i] === mark) {
              // evaluate callback
              x[i] = cf(x[i], bvalues[k]);
            }
          } // initialize first index in j


          k = cptr[j]; // loop index in j

          while (k < cindex.length) {
            // row
            i = cindex[k]; // value @ i

            var v = x[i]; // check for zero value

            if (!eq(v, zero)) {
              // push value
              cvalues.push(v); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$2y = 'leftShift';
    var dependencies$2y = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
    var createLeftShift = /* #__PURE__ */factory(name$2y, dependencies$2y, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        zeros,
        DenseMatrix
      } = _ref;
      var algorithm01 = createAlgorithm01({
        typed
      });
      var algorithm02 = createAlgorithm02({
        typed,
        equalScalar
      });
      var algorithm08 = createAlgorithm08({
        typed,
        equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed,
        DenseMatrix
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Bitwise left logical shift of a value x by y number of bits, `x << y`.
       * For matrices, the function is evaluated element wise.
       * For units, the function is evaluated on the best prefix base.
       *
       * Syntax:
       *
       *    math.leftShift(x, y)
       *
       * Examples:
       *
       *    math.leftShift(1, 2)               // returns number 4
       *
       *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]
       *
       * See also:
       *
       *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
       * @param  {number | BigNumber} y Amount of shifts
       * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
       */

      return typed(name$2y, {
        'number, number': leftShiftNumber,
        'BigNumber, BigNumber': leftShiftBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm08(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm10(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return this(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y)).valueOf();
        }
      });
    });

    var name$2x = 'rightArithShift';
    var dependencies$2x = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
    var createRightArithShift = /* #__PURE__ */factory(name$2x, dependencies$2x, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        zeros,
        DenseMatrix
      } = _ref;
      var algorithm01 = createAlgorithm01({
        typed
      });
      var algorithm02 = createAlgorithm02({
        typed,
        equalScalar
      });
      var algorithm08 = createAlgorithm08({
        typed,
        equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed,
        DenseMatrix
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
       * For matrices, the function is evaluated element wise.
       * For units, the function is evaluated on the best prefix base.
       *
       * Syntax:
       *
       *    math.rightArithShift(x, y)
       *
       * Examples:
       *
       *    math.rightArithShift(4, 2)               // returns number 1
       *
       *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 3]
       *
       * See also:
       *
       *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
       * @param  {number | BigNumber} y Amount of shifts
       * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
       */

      return typed(name$2x, {
        'number, number': rightArithShiftNumber,
        'BigNumber, BigNumber': rightArithShiftBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm08(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm10(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return this(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y)).valueOf();
        }
      });
    });

    var name$2w = 'rightLogShift';
    var dependencies$2w = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
    var createRightLogShift = /* #__PURE__ */factory(name$2w, dependencies$2w, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        zeros,
        DenseMatrix
      } = _ref;
      var algorithm01 = createAlgorithm01({
        typed
      });
      var algorithm02 = createAlgorithm02({
        typed,
        equalScalar
      });
      var algorithm08 = createAlgorithm08({
        typed,
        equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed,
        DenseMatrix
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
       * For matrices, the function is evaluated element wise.
       * For units, the function is evaluated on the best prefix base.
       *
       * Syntax:
       *
       *    math.rightLogShift(x, y)
       *
       * Examples:
       *
       *    math.rightLogShift(4, 2)               // returns number 1
       *
       *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]
       *
       * See also:
       *
       *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
       *
       * @param  {number | Array | Matrix} x Value to be shifted
       * @param  {number} y Amount of shifts
       * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
       */

      return typed(name$2w, {
        'number, number': rightLogShiftNumber,
        // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm08(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm10(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return this(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y)).valueOf();
        }
      });
    });

    var name$2v = 'and';
    var dependencies$2v = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];
    var createAnd = /* #__PURE__ */factory(name$2v, dependencies$2v, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        zeros,
        not
      } = _ref;
      var algorithm02 = createAlgorithm02({
        typed,
        equalScalar
      });
      var algorithm06 = createAlgorithm06({
        typed,
        equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.and(x, y)
       *
       * Examples:
       *
       *    math.and(2, 4)   // returns true
       *
       *    a = [2, 0, 0]
       *    b = [3, 7, 0]
       *    c = 0
       *
       *    math.and(a, b)   // returns [true, false, false]
       *    math.and(a, c)   // returns [false, false, false]
       *
       * See also:
       *
       *    not, or, xor
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
       * @return {boolean | Array | Matrix}
       *            Returns true when both inputs are defined with a nonzero/nonempty value.
       */

      return typed(name$2v, {
        'number, number': andNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
        },
        'Unit, Unit': function UnitUnit(x, y) {
          return this(x.value || 0, y.value || 0);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm06(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm02(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          // check scalar
          if (not(y)) {
            // return zero matrix
            return zeros(x.size(), x.storage());
          }

          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          // check scalar
          if (not(y)) {
            // return zero matrix
            return zeros(x.size(), x.storage());
          }

          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          // check scalar
          if (not(x)) {
            // return zero matrix
            return zeros(x.size(), x.storage());
          }

          return algorithm11(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          // check scalar
          if (not(x)) {
            // return zero matrix
            return zeros(x.size(), x.storage());
          }

          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return this(matrix(x), y).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y)).valueOf();
        }
      });
    });

    var name$2u = 'compare';
    var dependencies$2u = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];
    var createCompare = /* #__PURE__ */factory(name$2u, dependencies$2u, _ref => {
      var {
        typed,
        config,
        equalScalar,
        matrix,
        BigNumber,
        Fraction,
        DenseMatrix
      } = _ref;
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm05 = createAlgorithm05({
        typed,
        equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
       *
       * x and y are considered equal when the relative difference between x and y
       * is smaller than the configured epsilon. The function cannot be used to
       * compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.compare(x, y)
       *
       * Examples:
       *
       *    math.compare(6, 1)           // returns 1
       *    math.compare(2, 3)           // returns -1
       *    math.compare(7, 7)           // returns 0
       *    math.compare('10', '2')      // returns 1
       *    math.compare('1000', '1e3')  // returns 0
       *
       *    const a = math.unit('5 cm')
       *    const b = math.unit('40 mm')
       *    math.compare(a, b)           // returns 1
       *
       *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]
       *
       * See also:
       *
       *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText
       *
       * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
       * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:
       *                                                          1 when x > y, -1 when x < y, and 0 when x == y.
       */

      return typed(name$2u, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x === y ? 0 : x > y ? 1 : -1;
        },
        'number, number': function numberNumber(x, y) {
          return nearlyEqual$1(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return nearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return new Fraction(x.compare(y));
        },
        'Complex, Complex': function ComplexComplex() {
          throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return this(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm05(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    /*
     * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
     * Author: Jim Palmer (based on chunking idea from Dave Koelle)
     */
    /*jshint unused:false */
    var naturalSort = function naturalSort (a, b) {
    	var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
    		sre = /(^[ ]*|[ ]*$)/g,
    		dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
    		hre = /^0x[0-9a-f]+$/i,
    		ore = /^0/,
    		i = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },
    		// convert all to strings strip whitespace
    		x = i(a).replace(sre, '') || '',
    		y = i(b).replace(sre, '') || '',
    		// chunk/tokenize
    		xN = x.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
    		yN = y.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
    		// numeric, hex or date detection
    		xD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),
    		yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
    		oFxNcL, oFyNcL;
    	// first try and sort Hex codes or Dates
    	if (yD) {
    		if ( xD < yD ) { return -1; }
    		else if ( xD > yD ) { return 1; }
    	}
    	// natural sorting through split numeric strings and default strings
    	for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
    		// find floats not starting with '0', string or 0 if not defined (Clint Priest)
    		oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
    		oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
    		// handle numeric vs string comparison - number < string - (Kyle Adams)
    		if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }
    		// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
    		else if (typeof oFxNcL !== typeof oFyNcL) {
    			oFxNcL += '';
    			oFyNcL += '';
    		}
    		if (oFxNcL < oFyNcL) { return -1; }
    		if (oFxNcL > oFyNcL) { return 1; }
    	}
    	return 0;
    };

    var name$2t = 'compareNatural';
    var dependencies$2t = ['typed', 'compare'];
    var createCompareNatural = /* #__PURE__ */factory(name$2t, dependencies$2t, _ref => {
      var {
        typed,
        compare
      } = _ref;
      var compareBooleans = compare.signatures['boolean,boolean'];
      /**
       * Compare two values of any type in a deterministic, natural way.
       *
       * For numeric values, the function works the same as `math.compare`.
       * For types of values that can't be compared mathematically,
       * the function compares in a natural way.
       *
       * For numeric values, x and y are considered equal when the relative
       * difference between x and y is smaller than the configured epsilon.
       * The function cannot be used to compare values smaller than
       * approximately 2.22e-16.
       *
       * For Complex numbers, first the real parts are compared. If equal,
       * the imaginary parts are compared.
       *
       * Strings are compared with a natural sorting algorithm, which
       * orders strings in a "logic" way following some heuristics.
       * This differs from the function `compare`, which converts the string
       * into a numeric value and compares that. The function `compareText`
       * on the other hand compares text lexically.
       *
       * Arrays and Matrices are compared value by value until there is an
       * unequal pair of values encountered. Objects are compared by sorted
       * keys until the keys or their values are unequal.
       *
       * Syntax:
       *
       *    math.compareNatural(x, y)
       *
       * Examples:
       *
       *    math.compareNatural(6, 1)              // returns 1
       *    math.compareNatural(2, 3)              // returns -1
       *    math.compareNatural(7, 7)              // returns 0
       *
       *    math.compareNatural('10', '2')         // returns 1
       *    math.compareText('10', '2')            // returns -1
       *    math.compare('10', '2')                // returns 1
       *
       *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1
       *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1
       *    math.compare('Answer: 10', 'Answer: 2')
       *        // Error: Cannot convert "Answer: 10" to a number
       *
       *    const a = math.unit('5 cm')
       *    const b = math.unit('40 mm')
       *    math.compareNatural(a, b)              // returns 1
       *
       *    const c = math.complex('2 + 3i')
       *    const d = math.complex('2 + 4i')
       *    math.compareNatural(c, d)              // returns -1
       *
       *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1
       *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1
       *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1
       *    math.compareNatural([1, 2], [1, 2])       // returns 0
       *
       *    math.compareNatural({a: 2}, {a: 4})       // returns -1
       *
       * See also:
       *
       *    compare, compareText
       *
       * @param  {*} x First value to compare
       * @param  {*} y Second value to compare
       * @return {number} Returns the result of the comparison:
       *                  1 when x > y, -1 when x < y, and 0 when x == y.
       */

      return typed(name$2t, {
        'any, any': function anyAny(x, y) {
          var typeX = typeOf$1(x);
          var typeY = typeOf$1(y);
          var c; // numeric types

          if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
            c = compare(x, y);

            if (c.toString() !== '0') {
              // c can be number, BigNumber, or Fraction
              return c > 0 ? 1 : -1; // return a number
            } else {
              return naturalSort(typeX, typeY);
            }
          } // matrix types


          if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {
            c = compareMatricesAndArrays(this, x, y);

            if (c !== 0) {
              return c;
            } else {
              return naturalSort(typeX, typeY);
            }
          } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'


          if (typeX !== typeY) {
            return naturalSort(typeX, typeY);
          }

          if (typeX === 'Complex') {
            return compareComplexNumbers(x, y);
          }

          if (typeX === 'Unit') {
            if (x.equalBase(y)) {
              return this(x.value, y.value);
            } // compare by units


            return compareArrays(this, x.formatUnits(), y.formatUnits());
          }

          if (typeX === 'boolean') {
            return compareBooleans(x, y);
          }

          if (typeX === 'string') {
            return naturalSort(x, y);
          }

          if (typeX === 'Object') {
            return compareObjects(this, x, y);
          }

          if (typeX === 'null') {
            return 0;
          }

          if (typeX === 'undefined') {
            return 0;
          } // this should not occur...


          throw new TypeError('Unsupported type of value "' + typeX + '"');
        }
      });
      /**
       * Compare mixed matrix/array types, by converting to same-shaped array.
       * This comparator is non-deterministic regarding input types.
       * @param {Array | SparseMatrix | DenseMatrix | *} x
       * @param {Array | SparseMatrix | DenseMatrix | *} y
       * @returns {number} Returns the comparison result: -1, 0, or 1
       */

      function compareMatricesAndArrays(compareNatural, x, y) {
        if (isSparseMatrix(x) && isSparseMatrix(y)) {
          return compareArrays(compareNatural, x.toJSON().values, y.toJSON().values);
        }

        if (isSparseMatrix(x)) {
          // note: convert to array is expensive
          return compareMatricesAndArrays(compareNatural, x.toArray(), y);
        }

        if (isSparseMatrix(y)) {
          // note: convert to array is expensive
          return compareMatricesAndArrays(compareNatural, x, y.toArray());
        } // convert DenseArray into Array


        if (isDenseMatrix(x)) {
          return compareMatricesAndArrays(compareNatural, x.toJSON().data, y);
        }

        if (isDenseMatrix(y)) {
          return compareMatricesAndArrays(compareNatural, x, y.toJSON().data);
        } // convert scalars to array


        if (!Array.isArray(x)) {
          return compareMatricesAndArrays(compareNatural, [x], y);
        }

        if (!Array.isArray(y)) {
          return compareMatricesAndArrays(compareNatural, x, [y]);
        }

        return compareArrays(compareNatural, x, y);
      }
      /**
       * Compare two Arrays
       *
       * - First, compares value by value
       * - Next, if all corresponding values are equal,
       *   look at the length: longest array will be considered largest
       *
       * @param {Array} x
       * @param {Array} y
       * @returns {number} Returns the comparison result: -1, 0, or 1
       */


      function compareArrays(compareNatural, x, y) {
        // compare each value
        for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
          var v = compareNatural(x[i], y[i]);

          if (v !== 0) {
            return v;
          }
        } // compare the size of the arrays


        if (x.length > y.length) {
          return 1;
        }

        if (x.length < y.length) {
          return -1;
        } // both Arrays have equal size and content


        return 0;
      }
      /**
       * Compare two objects
       *
       * - First, compare sorted property names
       * - Next, compare the property values
       *
       * @param {Object} x
       * @param {Object} y
       * @returns {number} Returns the comparison result: -1, 0, or 1
       */


      function compareObjects(compareNatural, x, y) {
        var keysX = Object.keys(x);
        var keysY = Object.keys(y); // compare keys

        keysX.sort(naturalSort);
        keysY.sort(naturalSort);
        var c = compareArrays(compareNatural, keysX, keysY);

        if (c !== 0) {
          return c;
        } // compare values


        for (var i = 0; i < keysX.length; i++) {
          var v = compareNatural(x[keysX[i]], y[keysY[i]]);

          if (v !== 0) {
            return v;
          }
        }

        return 0;
      }
    });
    /**
     * Compare two complex numbers, `x` and `y`:
     *
     * - First, compare the real values of `x` and `y`
     * - If equal, compare the imaginary values of `x` and `y`
     *
     * @params {Complex} x
     * @params {Complex} y
     * @returns {number} Returns the comparison result: -1, 0, or 1
     */

    function compareComplexNumbers(x, y) {
      if (x.re > y.re) {
        return 1;
      }

      if (x.re < y.re) {
        return -1;
      }

      if (x.im > y.im) {
        return 1;
      }

      if (x.im < y.im) {
        return -1;
      }

      return 0;
    }

    var name$2s = 'compareText';
    var dependencies$2s = ['typed', 'matrix'];
    var createCompareText = /* #__PURE__ */factory(name$2s, dependencies$2s, _ref => {
      var {
        typed,
        matrix
      } = _ref;
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Compare two strings lexically. Comparison is case sensitive.
       * Returns 1 when x > y, -1 when x < y, and 0 when x == y.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.compareText(x, y)
       *
       * Examples:
       *
       *    math.compareText('B', 'A')     // returns 1
       *    math.compareText('2', '10')    // returns 1
       *    math.compare('2', '10')        // returns -1
       *    math.compareNatural('2', '10') // returns -1
       *
       *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]
       *
       * See also:
       *
       *    equal, equalText, compare, compareNatural
       *
       * @param  {string | Array | DenseMatrix} x First string to compare
       * @param  {string | Array | DenseMatrix} y Second string to compare
       * @return {number | Array | DenseMatrix} Returns the result of the comparison:
       *                                        1 when x > y, -1 when x < y, and 0 when x == y.
       */

      return typed(name$2s, {
        'any, any': compareText$1,
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, compareText$1);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, compareText$1, false);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, compareText$1, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, compareText$1, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, compareText$1, true).valueOf();
        }
      });
    });

    var name$2r = 'equal';
    var dependencies$2r = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
    var createEqual = /* #__PURE__ */factory(name$2r, dependencies$2r, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        DenseMatrix
      } = _ref;
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm07 = createAlgorithm07({
        typed,
        DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Test whether two values are equal.
       *
       * The function tests whether the relative difference between x and y is
       * smaller than the configured epsilon. The function cannot be used to
       * compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
       *
       * Values `null` and `undefined` are compared strictly, thus `null` is only
       * equal to `null` and nothing else, and `undefined` is only equal to
       * `undefined` and nothing else. Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.equal(x, y)
       *
       * Examples:
       *
       *    math.equal(2 + 2, 3)         // returns false
       *    math.equal(2 + 2, 4)         // returns true
       *
       *    const a = math.unit('50 cm')
       *    const b = math.unit('5 m')
       *    math.equal(a, b)             // returns true
       *
       *    const c = [2, 5, 1]
       *    const d = [2, 7, 1]
       *
       *    math.equal(c, d)             // returns [true, false, true]
       *    math.deepEqual(c, d)         // returns false
       *
       *    math.equal("1000", "1e3")    // returns true
       *    math.equal(0, null)          // returns false
       *
       * See also:
       *
       *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
       *
       * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
       */

      return typed(name$2r, {
        'any, any': function anyAny(x, y) {
          // strict equality for null and undefined?
          if (x === null) {
            return y === null;
          }

          if (y === null) {
            return x === null;
          }

          if (x === undefined) {
            return y === undefined;
          }

          if (y === undefined) {
            return x === undefined;
          }

          return equalScalar(x, y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, equalScalar);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, equalScalar, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, equalScalar, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, equalScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, equalScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, equalScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, equalScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, equalScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, equalScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, equalScalar, true).valueOf();
        }
      });
    });
    factory(name$2r, ['typed', 'equalScalar'], _ref2 => {
      var {
        typed,
        equalScalar
      } = _ref2;
      return typed(name$2r, {
        'any, any': function anyAny(x, y) {
          // strict equality for null and undefined?
          if (x === null) {
            return y === null;
          }

          if (y === null) {
            return x === null;
          }

          if (x === undefined) {
            return y === undefined;
          }

          if (y === undefined) {
            return x === undefined;
          }

          return equalScalar(x, y);
        }
      });
    });

    var name$2q = 'equalText';
    var dependencies$2q = ['typed', 'compareText', 'isZero'];
    var createEqualText = /* #__PURE__ */factory(name$2q, dependencies$2q, _ref => {
      var {
        typed,
        compareText,
        isZero
      } = _ref;

      /**
       * Check equality of two strings. Comparison is case sensitive.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.equalText(x, y)
       *
       * Examples:
       *
       *    math.equalText('Hello', 'Hello')     // returns true
       *    math.equalText('a', 'A')             // returns false
       *    math.equal('2e3', '2000')            // returns true
       *    math.equalText('2e3', '2000')        // returns false
       *
       *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]
       *
       * See also:
       *
       *    equal, compareText, compare, compareNatural
       *
       * @param  {string | Array | DenseMatrix} x First string to compare
       * @param  {string | Array | DenseMatrix} y Second string to compare
       * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.
       */
      return typed(name$2q, {
        'any, any': function anyAny(x, y) {
          return isZero(compareText(x, y));
        }
      });
    });

    var name$2p = 'smaller';
    var dependencies$2p = ['typed', 'config', 'matrix', 'DenseMatrix'];
    var createSmaller = /* #__PURE__ */factory(name$2p, dependencies$2p, _ref => {
      var {
        typed,
        config,
        matrix,
        DenseMatrix
      } = _ref;
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm07 = createAlgorithm07({
        typed,
        DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Test whether value x is smaller than y.
       *
       * The function returns true when x is smaller than y and the relative
       * difference between x and y is smaller than the configured epsilon. The
       * function cannot be used to compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.smaller(x, y)
       *
       * Examples:
       *
       *    math.smaller(2, 3)            // returns true
       *    math.smaller(5, 2 * 2)        // returns false
       *
       *    const a = math.unit('5 cm')
       *    const b = math.unit('2 inch')
       *    math.smaller(a, b)            // returns true
       *
       * See also:
       *
       *    equal, unequal, smallerEq, smaller, smallerEq, compare
       *
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
       */

      return typed(name$2p, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x < y;
        },
        'number, number': function numberNumber(x, y) {
          return x < y && !nearlyEqual$1(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.lt(y) && !nearlyEqual(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.compare(y) === -1;
        },
        'Complex, Complex': function ComplexComplex(x, y) {
          throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return this(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$2o = 'smallerEq';
    var dependencies$2o = ['typed', 'config', 'matrix', 'DenseMatrix'];
    var createSmallerEq = /* #__PURE__ */factory(name$2o, dependencies$2o, _ref => {
      var {
        typed,
        config,
        matrix,
        DenseMatrix
      } = _ref;
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm07 = createAlgorithm07({
        typed,
        DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Test whether value x is smaller or equal to y.
       *
       * The function returns true when x is smaller than y or the relative
       * difference between x and y is smaller than the configured epsilon. The
       * function cannot be used to compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.smallerEq(x, y)
       *
       * Examples:
       *
       *    math.smaller(1 + 2, 3)        // returns false
       *    math.smallerEq(1 + 2, 3)      // returns true
       *
       * See also:
       *
       *    equal, unequal, smaller, larger, largerEq, compare
       *
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
       */

      return typed(name$2o, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x <= y;
        },
        'number, number': function numberNumber(x, y) {
          return x <= y || nearlyEqual$1(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.lte(y) || nearlyEqual(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.compare(y) !== 1;
        },
        'Complex, Complex': function ComplexComplex() {
          throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return this(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$2n = 'larger';
    var dependencies$2n = ['typed', 'config', 'matrix', 'DenseMatrix'];
    var createLarger = /* #__PURE__ */factory(name$2n, dependencies$2n, _ref => {
      var {
        typed,
        config,
        matrix,
        DenseMatrix
      } = _ref;
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm07 = createAlgorithm07({
        typed,
        DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Test whether value x is larger than y.
       *
       * The function returns true when x is larger than y and the relative
       * difference between x and y is larger than the configured epsilon. The
       * function cannot be used to compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.larger(x, y)
       *
       * Examples:
       *
       *    math.larger(2, 3)             // returns false
       *    math.larger(5, 2 + 2)         // returns true
       *
       *    const a = math.unit('5 cm')
       *    const b = math.unit('2 inch')
       *    math.larger(a, b)             // returns false
       *
       * See also:
       *
       *    equal, unequal, smaller, smallerEq, largerEq, compare
       *
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
       */

      return typed(name$2n, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x > y;
        },
        'number, number': function numberNumber(x, y) {
          return x > y && !nearlyEqual$1(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.gt(y) && !nearlyEqual(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.compare(y) === 1;
        },
        'Complex, Complex': function ComplexComplex() {
          throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return this(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$2m = 'largerEq';
    var dependencies$2m = ['typed', 'config', 'matrix', 'DenseMatrix'];
    var createLargerEq = /* #__PURE__ */factory(name$2m, dependencies$2m, _ref => {
      var {
        typed,
        config,
        matrix,
        DenseMatrix
      } = _ref;
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm07 = createAlgorithm07({
        typed,
        DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Test whether value x is larger or equal to y.
       *
       * The function returns true when x is larger than y or the relative
       * difference between x and y is smaller than the configured epsilon. The
       * function cannot be used to compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.largerEq(x, y)
       *
       * Examples:
       *
       *    math.larger(2, 1 + 1)         // returns false
       *    math.largerEq(2, 1 + 1)       // returns true
       *
       * See also:
       *
       *    equal, unequal, smaller, smallerEq, larger, compare
       *
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
       */

      return typed(name$2m, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x >= y;
        },
        'number, number': function numberNumber(x, y) {
          return x >= y || nearlyEqual$1(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.gte(y) || nearlyEqual(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.compare(y) !== -1;
        },
        'Complex, Complex': function ComplexComplex() {
          throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return this(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$2l = 'deepEqual';
    var dependencies$2l = ['typed', 'equal'];
    var createDeepEqual = /* #__PURE__ */factory(name$2l, dependencies$2l, _ref => {
      var {
        typed,
        equal
      } = _ref;

      /**
       * Test element wise whether two matrices are equal.
       * The function accepts both matrices and scalar values.
       *
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.deepEqual(x, y)
       *
       * Examples:
       *
       *    math.deepEqual(2, 4)   // returns false
       *
       *    a = [2, 5, 1]
       *    b = [2, 7, 1]
       *
       *    math.deepEqual(a, b)   // returns false
       *    math.equal(a, b)       // returns [true, false, true]
       *
       * See also:
       *
       *    equal, unequal
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
       *            Returns true when the input matrices have the same size and each of their elements is equal.
       */
      return typed(name$2l, {
        'any, any': function anyAny(x, y) {
          return _deepEqual(x.valueOf(), y.valueOf());
        }
      });
      /**
       * Test whether two arrays have the same size and all elements are equal
       * @param {Array | *} x
       * @param {Array | *} y
       * @return {boolean} Returns true if both arrays are deep equal
       */

      function _deepEqual(x, y) {
        if (Array.isArray(x)) {
          if (Array.isArray(y)) {
            var len = x.length;

            if (len !== y.length) {
              return false;
            }

            for (var i = 0; i < len; i++) {
              if (!_deepEqual(x[i], y[i])) {
                return false;
              }
            }

            return true;
          } else {
            return false;
          }
        } else {
          if (Array.isArray(y)) {
            return false;
          } else {
            return equal(x, y);
          }
        }
      }
    });

    var name$2k = 'unequal';
    var dependencies$2k = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix'];
    var createUnequal = /* #__PURE__ */factory(name$2k, dependencies$2k, _ref => {
      var {
        typed,
        config,
        equalScalar,
        matrix,
        DenseMatrix
      } = _ref;
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm07 = createAlgorithm07({
        typed,
        DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Test whether two values are unequal.
       *
       * The function tests whether the relative difference between x and y is
       * larger than the configured epsilon. The function cannot be used to compare
       * values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
       * Strings are compared by their numerical value.
       *
       * Values `null` and `undefined` are compared strictly, thus `null` is unequal
       * with everything except `null`, and `undefined` is unequal with everything
       * except `undefined`.
       *
       * Syntax:
       *
       *    math.unequal(x, y)
       *
       * Examples:
       *
       *    math.unequal(2 + 2, 3)       // returns true
       *    math.unequal(2 + 2, 4)       // returns false
       *
       *    const a = math.unit('50 cm')
       *    const b = math.unit('5 m')
       *    math.unequal(a, b)           // returns false
       *
       *    const c = [2, 5, 1]
       *    const d = [2, 7, 1]
       *
       *    math.unequal(c, d)           // returns [false, true, false]
       *    math.deepEqual(c, d)         // returns false
       *
       *    math.unequal(0, null)        // returns true
       * See also:
       *
       *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
       *
       * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
       */

      return typed('unequal', {
        'any, any': function anyAny(x, y) {
          // strict equality for null and undefined?
          if (x === null) {
            return y !== null;
          }

          if (y === null) {
            return x !== null;
          }

          if (x === undefined) {
            return y !== undefined;
          }

          if (y === undefined) {
            return x !== undefined;
          }

          return _unequal(x, y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, _unequal);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, _unequal, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, _unequal, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, _unequal);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, _unequal, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, _unequal, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, _unequal, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, _unequal, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, _unequal, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, _unequal, true).valueOf();
        }
      });

      function _unequal(x, y) {
        return !equalScalar(x, y);
      }
    });
    factory(name$2k, ['typed', 'equalScalar'], _ref2 => {
      var {
        typed,
        equalScalar
      } = _ref2;
      return typed(name$2k, {
        'any, any': function anyAny(x, y) {
          // strict equality for null and undefined?
          if (x === null) {
            return y !== null;
          }

          if (y === null) {
            return x !== null;
          }

          if (x === undefined) {
            return y !== undefined;
          }

          if (y === undefined) {
            return x !== undefined;
          }

          return !equalScalar(x, y);
        }
      });
    });

    var name$2j = 'partitionSelect';
    var dependencies$2j = ['typed', 'isNumeric', 'isNaN', 'compare'];
    var createPartitionSelect = /* #__PURE__ */factory(name$2j, dependencies$2j, _ref => {
      var {
        typed,
        isNumeric,
        isNaN,
        compare
      } = _ref;
      var asc = compare;

      var desc = (a, b) => -compare(a, b);
      /**
       * Partition-based selection of an array or 1D matrix.
       * Will find the kth smallest value, and mutates the input array.
       * Uses Quickselect.
       *
       * Syntax:
       *
       *    math.partitionSelect(x, k)
       *    math.partitionSelect(x, k, compare)
       *
       * Examples:
       *
       *    math.partitionSelect([5, 10, 1], 2)           // returns 10
       *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'
       *
       *    function sortByLength (a, b) {
       *      return a.length - b.length
       *    }
       *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'
       *
       * See also:
       *
       *    sort
       *
       * @param {Matrix | Array} x    A one dimensional matrix or array to sort
       * @param {Number} k            The kth smallest value to be retrieved zero-based index
       * @param {Function | 'asc' | 'desc'} [compare='asc']
       *        An optional comparator function. The function is called as
       *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
       *        and 0 when a == b.
       * @return {*} Returns the kth lowest value.
       */


      return typed(name$2j, {
        'Array | Matrix, number': function ArrayMatrixNumber(x, k) {
          return _partitionSelect(x, k, asc);
        },
        'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {
          if (compare === 'asc') {
            return _partitionSelect(x, k, asc);
          } else if (compare === 'desc') {
            return _partitionSelect(x, k, desc);
          } else {
            throw new Error('Compare string must be "asc" or "desc"');
          }
        },
        'Array | Matrix, number, function': _partitionSelect
      });

      function _partitionSelect(x, k, compare) {
        if (!isInteger$1(k) || k < 0) {
          throw new Error('k must be a non-negative integer');
        }

        if (isMatrix(x)) {
          var size = x.size();

          if (size.length > 1) {
            throw new Error('Only one dimensional matrices supported');
          }

          return quickSelect(x.valueOf(), k, compare);
        }

        if (Array.isArray(x)) {
          return quickSelect(x, k, compare);
        }
      }
      /**
       * Quickselect algorithm.
       * Code adapted from:
       * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
       *
       * @param {Array} arr
       * @param {Number} k
       * @param {Function} compare
       * @private
       */


      function quickSelect(arr, k, compare) {
        if (k >= arr.length) {
          throw new Error('k out of bounds');
        } // check for NaN values since these can cause an infinite while loop


        for (var i = 0; i < arr.length; i++) {
          if (isNumeric(arr[i]) && isNaN(arr[i])) {
            return arr[i]; // return NaN
          }
        }

        var from = 0;
        var to = arr.length - 1; // if from == to we reached the kth element

        while (from < to) {
          var r = from;
          var w = to;
          var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets

          while (r < w) {
            // arr[r] >= pivot
            if (compare(arr[r], pivot) >= 0) {
              // put the large values at the end
              var tmp = arr[w];
              arr[w] = arr[r];
              arr[r] = tmp;
              --w;
            } else {
              // the value is smaller than the pivot, skip
              ++r;
            }
          } // if we stepped up (r++) we need to step one down (arr[r] > pivot)


          if (compare(arr[r], pivot) > 0) {
            --r;
          } // the r pointer is on the end of the first k elements


          if (k <= r) {
            to = r;
          } else {
            from = r + 1;
          }
        }

        return arr[k];
      }
    });

    var name$2i = 'sort';
    var dependencies$2i = ['typed', 'matrix', 'compare', 'compareNatural'];
    var createSort = /* #__PURE__ */factory(name$2i, dependencies$2i, _ref => {
      var {
        typed,
        matrix,
        compare,
        compareNatural
      } = _ref;
      var compareAsc = compare;

      var compareDesc = (a, b) => -compare(a, b);
      /**
       * Sort the items in a matrix.
       *
       * Syntax:
       *
       *    math.sort(x)
       *    math.sort(x, compare)
       *
       * Examples:
       *
       *    math.sort([5, 10, 1]) // returns [1, 5, 10]
       *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)
       *    // returns ['A', 'B', 'C', 'D']
       *
       *    function sortByLength (a, b) {
       *      return a.length - b.length
       *    }
       *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)
       *    // returns ['Tom', 'Sara', 'Langdon']
       *
       * See also:
       *
       *    filter, forEach, map, compare, compareNatural
       *
       * @param {Matrix | Array} x    A one dimensional matrix or array to sort
       * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
       *        An optional _comparator function or name. The function is called as
       *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
       *        and 0 when a == b.
       * @return {Matrix | Array} Returns the sorted matrix.
       */


      return typed(name$2i, {
        Array: function Array(x) {
          _arrayIsVector(x);

          return x.sort(compareAsc);
        },
        Matrix: function Matrix(x) {
          _matrixIsVector(x);

          return matrix(x.toArray().sort(compareAsc), x.storage());
        },
        'Array, function': function ArrayFunction(x, _comparator) {
          _arrayIsVector(x);

          return x.sort(_comparator);
        },
        'Matrix, function': function MatrixFunction(x, _comparator) {
          _matrixIsVector(x);

          return matrix(x.toArray().sort(_comparator), x.storage());
        },
        'Array, string': function ArrayString(x, order) {
          _arrayIsVector(x);

          return x.sort(_comparator(order));
        },
        'Matrix, string': function MatrixString(x, order) {
          _matrixIsVector(x);

          return matrix(x.toArray().sort(_comparator(order)), x.storage());
        }
      });
      /**
       * Get the comparator for given order ('asc', 'desc', 'natural')
       * @param {'asc' | 'desc' | 'natural'} order
       * @return {Function} Returns a _comparator function
       */

      function _comparator(order) {
        if (order === 'asc') {
          return compareAsc;
        } else if (order === 'desc') {
          return compareDesc;
        } else if (order === 'natural') {
          return compareNatural;
        } else {
          throw new Error('String "asc", "desc", or "natural" expected');
        }
      }
      /**
       * Validate whether an array is one dimensional
       * Throws an error when this is not the case
       * @param {Array} array
       * @private
       */


      function _arrayIsVector(array) {
        if (arraySize(array).length !== 1) {
          throw new Error('One dimensional array expected');
        }
      }
      /**
       * Validate whether a matrix is one dimensional
       * Throws an error when this is not the case
       * @param {Matrix} matrix
       * @private
       */


      function _matrixIsVector(matrix) {
        if (matrix.size().length !== 1) {
          throw new Error('One dimensional matrix expected');
        }
      }
    });

    var name$2h = 'max';
    var dependencies$2h = ['typed', 'config', 'numeric', 'larger'];
    var createMax = /* #__PURE__ */factory(name$2h, dependencies$2h, _ref => {
      var {
        typed,
        config,
        numeric,
        larger
      } = _ref;

      /**
       * Compute the maximum value of a matrix or a  list with values.
       * In case of a multi dimensional array, the maximum of the flattened array
       * will be calculated. When `dim` is provided, the maximum over the selected
       * dimension will be calculated. Parameter `dim` is zero-based.
       *
       * Syntax:
       *
       *     math.max(a, b, c, ...)
       *     math.max(A)
       *     math.max(A, dim)
       *
       * Examples:
       *
       *     math.max(2, 1, 4, 3)                  // returns 4
       *     math.max([2, 1, 4, 3])                // returns 4
       *
       *     // maximum over a specified dimension (zero-based)
       *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]
       *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]
       *
       *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
       *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
       *
       * See also:
       *
       *    mean, median, min, prod, std, sum, variance
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The maximum value
       */
      return typed(name$2h, {
        // max([a, b, c, d, ...])
        'Array | Matrix': _max,
        // max([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
          return reduce(array, dim.valueOf(), _largest);
        },
        // max(a, b, c, d, ...)
        '...': function _(args) {
          if (containsCollections(args)) {
            throw new TypeError('Scalar values expected in function max');
          }

          return _max(args);
        }
      });
      /**
       * Return the largest of two values
       * @param {*} x
       * @param {*} y
       * @returns {*} Returns x when x is largest, or y when y is largest
       * @private
       */

      function _largest(x, y) {
        try {
          return larger(x, y) ? x : y;
        } catch (err) {
          throw improveErrorMessage(err, 'max', y);
        }
      }
      /**
       * Recursively calculate the maximum value in an n-dimensional array
       * @param {Array} array
       * @return {number} max
       * @private
       */


      function _max(array) {
        var res;
        deepForEach(array, function (value) {
          try {
            if (isNaN(value) && typeof value === 'number') {
              res = NaN;
            } else if (res === undefined || larger(value, res)) {
              res = value;
            }
          } catch (err) {
            throw improveErrorMessage(err, 'max', value);
          }
        });

        if (res === undefined) {
          throw new Error('Cannot calculate max of an empty array');
        } // make sure returning numeric value: parse a string into a numeric value


        if (typeof res === 'string') {
          res = numeric(res, config.number);
        }

        return res;
      }
    });

    var name$2g = 'min';
    var dependencies$2g = ['typed', 'config', 'numeric', 'smaller'];
    var createMin = /* #__PURE__ */factory(name$2g, dependencies$2g, _ref => {
      var {
        typed,
        config,
        numeric,
        smaller
      } = _ref;

      /**
       * Compute the minimum value of a matrix or a  list of values.
       * In case of a multi dimensional array, the minimum of the flattened array
       * will be calculated. When `dim` is provided, the minimum over the selected
       * dimension will be calculated. Parameter `dim` is zero-based.
       *
       * Syntax:
       *
       *     math.min(a, b, c, ...)
       *     math.min(A)
       *     math.min(A, dim)
       *
       * Examples:
       *
       *     math.min(2, 1, 4, 3)                  // returns 1
       *     math.min([2, 1, 4, 3])                // returns 1
       *
       *     // minimum over a specified dimension (zero-based)
       *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]
       *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]
       *
       *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
       *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
       *
       * See also:
       *
       *    mean, median, max, prod, std, sum, variance
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The minimum value
       */
      return typed(name$2g, {
        // min([a, b, c, d, ...])
        'Array | Matrix': _min,
        // min([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
          return reduce(array, dim.valueOf(), _smallest);
        },
        // min(a, b, c, d, ...)
        '...': function _(args) {
          if (containsCollections(args)) {
            throw new TypeError('Scalar values expected in function min');
          }

          return _min(args);
        }
      });
      /**
       * Return the smallest of two values
       * @param {*} x
       * @param {*} y
       * @returns {*} Returns x when x is smallest, or y when y is smallest
       * @private
       */

      function _smallest(x, y) {
        try {
          return smaller(x, y) ? x : y;
        } catch (err) {
          throw improveErrorMessage(err, 'min', y);
        }
      }
      /**
       * Recursively calculate the minimum value in an n-dimensional array
       * @param {Array} array
       * @return {number} min
       * @private
       */


      function _min(array) {
        var min;
        deepForEach(array, function (value) {
          try {
            if (isNaN(value) && typeof value === 'number') {
              min = NaN;
            } else if (min === undefined || smaller(value, min)) {
              min = value;
            }
          } catch (err) {
            throw improveErrorMessage(err, 'min', value);
          }
        });

        if (min === undefined) {
          throw new Error('Cannot calculate min of an empty array');
        } // make sure returning numeric value: parse a string into a numeric value


        if (typeof min === 'string') {
          min = numeric(min, config.number);
        }

        return min;
      }
    });

    var name$2f = 'ImmutableDenseMatrix';
    var dependencies$2f = ['smaller', 'DenseMatrix'];
    var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name$2f, dependencies$2f, _ref => {
      var {
        smaller,
        DenseMatrix
      } = _ref;

      function ImmutableDenseMatrix(data, datatype) {
        if (!(this instanceof ImmutableDenseMatrix)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (datatype && !isString(datatype)) {
          throw new Error('Invalid datatype: ' + datatype);
        }

        if (isMatrix(data) || isArray(data)) {
          // use DenseMatrix implementation
          var matrix = new DenseMatrix(data, datatype); // internal structures

          this._data = matrix._data;
          this._size = matrix._size;
          this._datatype = matrix._datatype;
          this._min = null;
          this._max = null;
        } else if (data && isArray(data.data) && isArray(data.size)) {
          // initialize fields from JSON representation
          this._data = data.data;
          this._size = data.size;
          this._datatype = data.datatype;
          this._min = typeof data.min !== 'undefined' ? data.min : null;
          this._max = typeof data.max !== 'undefined' ? data.max : null;
        } else if (data) {
          // unsupported type
          throw new TypeError('Unsupported type of data (' + typeOf$1(data) + ')');
        } else {
          // nothing provided
          this._data = [];
          this._size = [0];
          this._datatype = datatype;
          this._min = null;
          this._max = null;
        }
      }

      ImmutableDenseMatrix.prototype = new DenseMatrix();
      /**
       * Attach type information
       */

      ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
      ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
      /**
       * Get a subset of the matrix, or replace a subset of the matrix.
       *
       * Usage:
       *     const subset = matrix.subset(index)               // retrieve subset
       *     const value = matrix.subset(index, replacement)   // replace subset
       *
       * @param {Index} index
       * @param {Array | ImmutableDenseMatrix | *} [replacement]
       * @param {*} [defaultValue=0]      Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be filled with zeros.
       */

      ImmutableDenseMatrix.prototype.subset = function (index) {
        switch (arguments.length) {
          case 1:
            {
              // use base implementation
              var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix

              if (isMatrix(m)) {
                // return immutable matrix
                return new ImmutableDenseMatrix({
                  data: m._data,
                  size: m._size,
                  datatype: m._datatype
                });
              }

              return m;
            }
          // intentional fall through

          case 2:
          case 3:
            throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

          default:
            throw new SyntaxError('Wrong number of arguments');
        }
      };
      /**
       * Replace a single element in the matrix.
       * @param {Number[]} index   Zero-based index
       * @param {*} value
       * @param {*} [defaultValue]        Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be left undefined.
       * @return {ImmutableDenseMatrix} self
       */


      ImmutableDenseMatrix.prototype.set = function () {
        throw new Error('Cannot invoke set on an Immutable Matrix instance');
      };
      /**
       * Resize the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (resize in place).
       *
       * @param {Number[]} size           The new size the matrix should have.
       * @param {*} [defaultValue=0]      Default value, filled in on new entries.
       *                                  If not provided, the matrix elements will
       *                                  be filled with zeros.
       * @param {boolean} [copy]          Return a resized copy of the matrix
       *
       * @return {Matrix}                 The resized matrix
       */


      ImmutableDenseMatrix.prototype.resize = function () {
        throw new Error('Cannot invoke resize on an Immutable Matrix instance');
      };
      /**
       * Disallows reshaping in favor of immutability.
       *
       * @throws {Error} Operation not allowed
       */


      ImmutableDenseMatrix.prototype.reshape = function () {
        throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
      };
      /**
       * Create a clone of the matrix
       * @return {ImmutableDenseMatrix} clone
       */


      ImmutableDenseMatrix.prototype.clone = function () {
        return new ImmutableDenseMatrix({
          data: clone$1(this._data),
          size: clone$1(this._size),
          datatype: this._datatype
        });
      };
      /**
       * Get a JSON representation of the matrix
       * @returns {Object}
       */


      ImmutableDenseMatrix.prototype.toJSON = function () {
        return {
          mathjs: 'ImmutableDenseMatrix',
          data: this._data,
          size: this._size,
          datatype: this._datatype
        };
      };
      /**
       * Generate a matrix from a JSON object
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
       *                       where mathjs is optional
       * @returns {ImmutableDenseMatrix}
       */


      ImmutableDenseMatrix.fromJSON = function (json) {
        return new ImmutableDenseMatrix(json);
      };
      /**
       * Swap rows i and j in Matrix.
       *
       * @param {Number} i       Matrix row index 1
       * @param {Number} j       Matrix row index 2
       *
       * @return {Matrix}        The matrix reference
       */


      ImmutableDenseMatrix.prototype.swapRows = function () {
        throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
      };
      /**
       * Calculate the minimum value in the set
       * @return {Number | undefined} min
       */


      ImmutableDenseMatrix.prototype.min = function () {
        // check min has been calculated before
        if (this._min === null) {
          // minimum
          var m = null; // compute min

          this.forEach(function (v) {
            if (m === null || smaller(v, m)) {
              m = v;
            }
          });
          this._min = m !== null ? m : undefined;
        }

        return this._min;
      };
      /**
       * Calculate the maximum value in the set
       * @return {Number | undefined} max
       */


      ImmutableDenseMatrix.prototype.max = function () {
        // check max has been calculated before
        if (this._max === null) {
          // maximum
          var m = null; // compute max

          this.forEach(function (v) {
            if (m === null || smaller(m, v)) {
              m = v;
            }
          });
          this._max = m !== null ? m : undefined;
        }

        return this._max;
      };

      return ImmutableDenseMatrix;
    }, {
      isClass: true
    });

    var name$2e = 'Index';
    var dependencies$2e = ['ImmutableDenseMatrix'];
    var createIndexClass = /* #__PURE__ */factory(name$2e, dependencies$2e, _ref => {
      var {
        ImmutableDenseMatrix
      } = _ref;

      /**
       * Create an index. An Index can store ranges and sets for multiple dimensions.
       * Matrix.get, Matrix.set, and math.subset accept an Index as input.
       *
       * Usage:
       *     const index = new Index(range1, range2, matrix1, array1, ...)
       *
       * Where each parameter can be any of:
       *     A number
       *     A string (containing a name of an object property)
       *     An instance of Range
       *     An Array with the Set values
       *     A Matrix with the Set values
       *
       * The parameters start, end, and step must be integer numbers.
       *
       * @class Index
       * @Constructor Index
       * @param {...*} ranges
       */
      function Index(ranges) {
        if (!(this instanceof Index)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this._dimensions = [];
        this._isScalar = true;

        for (var i = 0, ii = arguments.length; i < ii; i++) {
          var arg = arguments[i];

          if (isRange(arg)) {
            this._dimensions.push(arg);

            this._isScalar = false;
          } else if (Array.isArray(arg) || isMatrix(arg)) {
            // create matrix
            var m = _createImmutableMatrix(arg.valueOf());

            this._dimensions.push(m); // size


            var size = m.size(); // scalar

            if (size.length !== 1 || size[0] !== 1) {
              this._isScalar = false;
            }
          } else if (typeof arg === 'number') {
            this._dimensions.push(_createImmutableMatrix([arg]));
          } else if (typeof arg === 'string') {
            // object property (arguments.count should be 1)
            this._dimensions.push(arg);
          } else {
            throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
          } // TODO: implement support for wildcard '*'

        }
      }
      /**
       * Attach type information
       */


      Index.prototype.type = 'Index';
      Index.prototype.isIndex = true;

      function _createImmutableMatrix(arg) {
        // loop array elements
        for (var i = 0, l = arg.length; i < l; i++) {
          if (typeof arg[i] !== 'number' || !isInteger$1(arg[i])) {
            throw new TypeError('Index parameters must be positive integer numbers');
          }
        } // create matrix


        return new ImmutableDenseMatrix(arg);
      }
      /**
       * Create a clone of the index
       * @memberof Index
       * @return {Index} clone
       */


      Index.prototype.clone = function () {
        var index = new Index();
        index._dimensions = clone$1(this._dimensions);
        index._isScalar = this._isScalar;
        return index;
      };
      /**
       * Create an index from an array with ranges/numbers
       * @memberof Index
       * @param {Array.<Array | number>} ranges
       * @return {Index} index
       * @private
       */


      Index.create = function (ranges) {
        var index = new Index();
        Index.apply(index, ranges);
        return index;
      };
      /**
       * Retrieve the size of the index, the number of elements for each dimension.
       * @memberof Index
       * @returns {number[]} size
       */


      Index.prototype.size = function () {
        var size = [];

        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var d = this._dimensions[i];
          size[i] = typeof d === 'string' ? 1 : d.size()[0];
        }

        return size;
      };
      /**
       * Get the maximum value for each of the indexes ranges.
       * @memberof Index
       * @returns {number[]} max
       */


      Index.prototype.max = function () {
        var values = [];

        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var range = this._dimensions[i];
          values[i] = typeof range === 'string' ? range : range.max();
        }

        return values;
      };
      /**
       * Get the minimum value for each of the indexes ranges.
       * @memberof Index
       * @returns {number[]} min
       */


      Index.prototype.min = function () {
        var values = [];

        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var range = this._dimensions[i];
          values[i] = typeof range === 'string' ? range : range.min();
        }

        return values;
      };
      /**
       * Loop over each of the ranges of the index
       * @memberof Index
       * @param {Function} callback   Called for each range with a Range as first
       *                              argument, the dimension as second, and the
       *                              index object as third.
       */


      Index.prototype.forEach = function (callback) {
        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          callback(this._dimensions[i], i, this);
        }
      };
      /**
       * Retrieve the dimension for the given index
       * @memberof Index
       * @param {Number} dim                  Number of the dimension
       * @returns {Range | null} range
       */


      Index.prototype.dimension = function (dim) {
        return this._dimensions[dim] || null;
      };
      /**
       * Test whether this index contains an object property
       * @returns {boolean} Returns true if the index is an object property
       */


      Index.prototype.isObjectProperty = function () {
        return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
      };
      /**
       * Returns the object property name when the Index holds a single object property,
       * else returns null
       * @returns {string | null}
       */


      Index.prototype.getObjectProperty = function () {
        return this.isObjectProperty() ? this._dimensions[0] : null;
      };
      /**
       * Test whether this index contains only a single value.
       *
       * This is the case when the index is created with only scalar values as ranges,
       * not for ranges resolving into a single value.
       * @memberof Index
       * @return {boolean} isScalar
       */


      Index.prototype.isScalar = function () {
        return this._isScalar;
      };
      /**
       * Expand the Index into an array.
       * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
       * @memberof Index
       * @returns {Array} array
       */


      Index.prototype.toArray = function () {
        var array = [];

        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var dimension = this._dimensions[i];
          array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
        }

        return array;
      };
      /**
       * Get the primitive value of the Index, a two dimensional array.
       * Equivalent to Index.toArray().
       * @memberof Index
       * @returns {Array} array
       */


      Index.prototype.valueOf = Index.prototype.toArray;
      /**
       * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
       * @memberof Index
       * @returns {String} str
       */

      Index.prototype.toString = function () {
        var strings = [];

        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var dimension = this._dimensions[i];

          if (typeof dimension === 'string') {
            strings.push(JSON.stringify(dimension));
          } else {
            strings.push(dimension.toString());
          }
        }

        return '[' + strings.join(', ') + ']';
      };
      /**
       * Get a JSON representation of the Index
       * @memberof Index
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
       */


      Index.prototype.toJSON = function () {
        return {
          mathjs: 'Index',
          dimensions: this._dimensions
        };
      };
      /**
       * Instantiate an Index from a JSON object
       * @memberof Index
       * @param {Object} json A JSON object structured as:
       *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
       * @return {Index}
       */


      Index.fromJSON = function (json) {
        return Index.create(json.dimensions);
      };

      return Index;
    }, {
      isClass: true
    });

    var name$2d = 'FibonacciHeap';
    var dependencies$2d = ['smaller', 'larger'];
    var createFibonacciHeapClass = /* #__PURE__ */factory(name$2d, dependencies$2d, _ref => {
      var {
        smaller,
        larger
      } = _ref;
      var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
      /**
       * Fibonacci Heap implementation, used interally for Matrix math.
       * @class FibonacciHeap
       * @constructor FibonacciHeap
       */

      function FibonacciHeap() {
        if (!(this instanceof FibonacciHeap)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // initialize fields


        this._minimum = null;
        this._size = 0;
      }
      /**
       * Attach type information
       */


      FibonacciHeap.prototype.type = 'FibonacciHeap';
      FibonacciHeap.prototype.isFibonacciHeap = true;
      /**
       * Inserts a new data element into the heap. No heap consolidation is
       * performed at this time, the new node is simply inserted into the root
       * list of this heap. Running time: O(1) actual.
       * @memberof FibonacciHeap
       */

      FibonacciHeap.prototype.insert = function (key, value) {
        // create node
        var node = {
          key,
          value,
          degree: 0
        }; // check we have a node in the minimum

        if (this._minimum) {
          // minimum node
          var minimum = this._minimum; // update left & right of node

          node.left = minimum;
          node.right = minimum.right;
          minimum.right = node;
          node.right.left = node; // update minimum node in heap if needed

          if (smaller(key, minimum.key)) {
            // node has a smaller key, use it as minimum
            this._minimum = node;
          }
        } else {
          // set left & right
          node.left = node;
          node.right = node; // this is the first node

          this._minimum = node;
        } // increment number of nodes in heap


        this._size++; // return node

        return node;
      };
      /**
       * Returns the number of nodes in heap. Running time: O(1) actual.
       * @memberof FibonacciHeap
       */


      FibonacciHeap.prototype.size = function () {
        return this._size;
      };
      /**
       * Removes all elements from this heap.
       * @memberof FibonacciHeap
       */


      FibonacciHeap.prototype.clear = function () {
        this._minimum = null;
        this._size = 0;
      };
      /**
       * Returns true if the heap is empty, otherwise false.
       * @memberof FibonacciHeap
       */


      FibonacciHeap.prototype.isEmpty = function () {
        return this._size === 0;
      };
      /**
       * Extracts the node with minimum key from heap. Amortized running
       * time: O(log n).
       * @memberof FibonacciHeap
       */


      FibonacciHeap.prototype.extractMinimum = function () {
        // node to remove
        var node = this._minimum; // check we have a minimum

        if (node === null) {
          return node;
        } // current minimum


        var minimum = this._minimum; // get number of children

        var numberOfChildren = node.degree; // pointer to the first child

        var x = node.child; // for each child of node do...

        while (numberOfChildren > 0) {
          // store node in right side
          var tempRight = x.right; // remove x from child list

          x.left.right = x.right;
          x.right.left = x.left; // add x to root list of heap

          x.left = minimum;
          x.right = minimum.right;
          minimum.right = x;
          x.right.left = x; // set Parent[x] to null

          x.parent = null;
          x = tempRight;
          numberOfChildren--;
        } // remove node from root list of heap


        node.left.right = node.right;
        node.right.left = node.left; // update minimum

        if (node === node.right) {
          // empty
          minimum = null;
        } else {
          // update minimum
          minimum = node.right; // we need to update the pointer to the root with minimum key

          minimum = _findMinimumNode(minimum, this._size);
        } // decrement size of heap


        this._size--; // update minimum

        this._minimum = minimum; // return node

        return node;
      };
      /**
       * Removes a node from the heap given the reference to the node. The trees
       * in the heap will be consolidated, if necessary. This operation may fail
       * to remove the correct element if there are nodes with key value -Infinity.
       * Running time: O(log n) amortized.
       * @memberof FibonacciHeap
       */


      FibonacciHeap.prototype.remove = function (node) {
        // decrease key value
        this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest

        this.extractMinimum();
      };
      /**
       * Decreases the key value for a heap node, given the new value to take on.
       * The structure of the heap may be changed and will not be consolidated.
       * Running time: O(1) amortized.
       * @memberof FibonacciHeap
       */


      function _decreaseKey(minimum, node, key) {
        // set node key
        node.key = key; // get parent node

        var parent = node.parent;

        if (parent && smaller(node.key, parent.key)) {
          // remove node from parent
          _cut(minimum, node, parent); // remove all nodes from parent to the root parent


          _cascadingCut(minimum, parent);
        } // update minimum node if needed


        if (smaller(node.key, minimum.key)) {
          minimum = node;
        } // return minimum


        return minimum;
      }
      /**
       * The reverse of the link operation: removes node from the child list of parent.
       * This method assumes that min is non-null. Running time: O(1).
       * @memberof FibonacciHeap
       */


      function _cut(minimum, node, parent) {
        // remove node from parent children and decrement Degree[parent]
        node.left.right = node.right;
        node.right.left = node.left;
        parent.degree--; // reset y.child if necessary

        if (parent.child === node) {
          parent.child = node.right;
        } // remove child if degree is 0


        if (parent.degree === 0) {
          parent.child = null;
        } // add node to root list of heap


        node.left = minimum;
        node.right = minimum.right;
        minimum.right = node;
        node.right.left = node; // set parent[node] to null

        node.parent = null; // set mark[node] to false

        node.mark = false;
      }
      /**
       * Performs a cascading cut operation. This cuts node from its parent and then
       * does the same for its parent, and so on up the tree.
       * Running time: O(log n); O(1) excluding the recursion.
       * @memberof FibonacciHeap
       */


      function _cascadingCut(minimum, node) {
        // store parent node
        var parent = node.parent; // if there's a parent...

        if (!parent) {
          return;
        } // if node is unmarked, set it marked


        if (!node.mark) {
          node.mark = true;
        } else {
          // it's marked, cut it from parent
          _cut(minimum, node, parent); // cut its parent as well


          _cascadingCut(parent);
        }
      }
      /**
       * Make the first node a child of the second one. Running time: O(1) actual.
       * @memberof FibonacciHeap
       */


      var _linkNodes = function _linkNodes(node, parent) {
        // remove node from root list of heap
        node.left.right = node.right;
        node.right.left = node.left; // make node a Child of parent

        node.parent = parent;

        if (!parent.child) {
          parent.child = node;
          node.right = node;
          node.left = node;
        } else {
          node.left = parent.child;
          node.right = parent.child.right;
          parent.child.right = node;
          node.right.left = node;
        } // increase degree[parent]


        parent.degree++; // set mark[node] false

        node.mark = false;
      };

      function _findMinimumNode(minimum, size) {
        // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
        var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity

        var array = new Array(arraySize); // find the number of root nodes.

        var numRoots = 0;
        var x = minimum;

        if (x) {
          numRoots++;
          x = x.right;

          while (x !== minimum) {
            numRoots++;
            x = x.right;
          }
        } // vars


        var y; // For each node in root list do...

        while (numRoots > 0) {
          // access this node's degree..
          var d = x.degree; // get next node

          var next = x.right; // check if there is a node already in array with the same degree

          while (true) {
            // get node with the same degree is any
            y = array[d];

            if (!y) {
              break;
            } // make one node with the same degree a child of the other, do this based on the key value.


            if (larger(x.key, y.key)) {
              var temp = y;
              y = x;
              x = temp;
            } // make y a child of x


            _linkNodes(y, x); // we have handled this degree, go to next one.


            array[d] = null;
            d++;
          } // save this node for later when we might encounter another of the same degree.


          array[d] = x; // move forward through list.

          x = next;
          numRoots--;
        } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].


        minimum = null; // loop nodes in array

        for (var i = 0; i < arraySize; i++) {
          // get current node
          y = array[i];

          if (!y) {
            continue;
          } // check if we have a linked list


          if (minimum) {
            // First remove node from root list.
            y.left.right = y.right;
            y.right.left = y.left; // now add to root list, again.

            y.left = minimum;
            y.right = minimum.right;
            minimum.right = y;
            y.right.left = y; // check if this is a new min.

            if (smaller(y.key, minimum.key)) {
              minimum = y;
            }
          } else {
            minimum = y;
          }
        }

        return minimum;
      }

      return FibonacciHeap;
    }, {
      isClass: true
    });

    var name$2c = 'Spa';
    var dependencies$2c = ['addScalar', 'equalScalar', 'FibonacciHeap'];
    var createSpaClass = /* #__PURE__ */factory(name$2c, dependencies$2c, _ref => {
      var {
        addScalar,
        equalScalar,
        FibonacciHeap
      } = _ref;

      /**
       * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array
       * of the vector elements and an ordered list of non-zero elements.
       */
      function Spa() {
        if (!(this instanceof Spa)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // allocate vector, TODO use typed arrays


        this._values = [];
        this._heap = new FibonacciHeap();
      }
      /**
       * Attach type information
       */


      Spa.prototype.type = 'Spa';
      Spa.prototype.isSpa = true;
      /**
       * Set the value for index i.
       *
       * @param {number} i                       The index
       * @param {number | BigNumber | Complex}   The value at index i
       */

      Spa.prototype.set = function (i, v) {
        // check we have a value @ i
        if (!this._values[i]) {
          // insert in heap
          var node = this._heap.insert(i, v); // set the value @ i


          this._values[i] = node;
        } else {
          // update the value @ i
          this._values[i].value = v;
        }
      };

      Spa.prototype.get = function (i) {
        var node = this._values[i];

        if (node) {
          return node.value;
        }

        return 0;
      };

      Spa.prototype.accumulate = function (i, v) {
        // node @ i
        var node = this._values[i];

        if (!node) {
          // insert in heap
          node = this._heap.insert(i, v); // initialize value

          this._values[i] = node;
        } else {
          // accumulate value
          node.value = addScalar(node.value, v);
        }
      };

      Spa.prototype.forEach = function (from, to, callback) {
        // references
        var heap = this._heap;
        var values = this._values; // nodes

        var nodes = []; // node with minimum key, save it

        var node = heap.extractMinimum();

        if (node) {
          nodes.push(node);
        } // extract nodes from heap (ordered)


        while (node && node.key <= to) {
          // check it is in range
          if (node.key >= from) {
            // check value is not zero
            if (!equalScalar(node.value, 0)) {
              // invoke callback
              callback(node.key, node.value, this);
            }
          } // extract next node, save it


          node = heap.extractMinimum();

          if (node) {
            nodes.push(node);
          }
        } // reinsert all nodes in heap


        for (var i = 0; i < nodes.length; i++) {
          // current node
          var n = nodes[i]; // insert node in heap

          node = heap.insert(n.key, n.value); // update values

          values[node.key] = node;
        }
      };

      Spa.prototype.swap = function (i, j) {
        // node @ i and j
        var nodei = this._values[i];
        var nodej = this._values[j]; // check we need to insert indeces

        if (!nodei && nodej) {
          // insert in heap
          nodei = this._heap.insert(i, nodej.value); // remove from heap

          this._heap.remove(nodej); // set values


          this._values[i] = nodei;
          this._values[j] = undefined;
        } else if (nodei && !nodej) {
          // insert in heap
          nodej = this._heap.insert(j, nodei.value); // remove from heap

          this._heap.remove(nodei); // set values


          this._values[j] = nodej;
          this._values[i] = undefined;
        } else if (nodei && nodej) {
          // swap values
          var v = nodei.value;
          nodei.value = nodej.value;
          nodej.value = v;
        }
      };

      return Spa;
    }, {
      isClass: true
    });

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    /**
     * Calculate BigNumber e
     * @param {function} BigNumber   BigNumber constructor
     * @returns {BigNumber} Returns e
     */

    var createBigNumberE = memoize(function (BigNumber) {
      return new BigNumber(1).exp();
    }, {
      hasher
    });
    /**
     * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
     * @param {function} BigNumber   BigNumber constructor
     * @returns {BigNumber} Returns phi
     */

    var createBigNumberPhi = memoize(function (BigNumber) {
      return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
    }, {
      hasher
    });
    /**
     * Calculate BigNumber pi.
     * @param {function} BigNumber   BigNumber constructor
     * @returns {BigNumber} Returns pi
     */

    var createBigNumberPi = memoize(function (BigNumber) {
      return BigNumber.acos(-1);
    }, {
      hasher
    });
    /**
     * Calculate BigNumber tau, tau = 2 * pi
     * @param {function} BigNumber   BigNumber constructor
     * @returns {BigNumber} Returns tau
     */

    var createBigNumberTau = memoize(function (BigNumber) {
      return createBigNumberPi(BigNumber).times(2);
    }, {
      hasher
    });
    /**
     * Create a hash for a BigNumber constructor function. The created has is
     * the configured precision
     * @param {Array} args         Supposed to contain a single entry with
     *                             a BigNumber constructor
     * @return {number} precision
     * @private
     */

    function hasher(args) {
      return args[0].precision;
    }

    function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
    var name$2b = 'Unit';
    var dependencies$2b = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];
    var createUnitClass = /* #__PURE__ */factory(name$2b, dependencies$2b, _ref => {
      var {
        on,
        config,
        addScalar,
        subtract,
        multiplyScalar,
        divideScalar,
        pow,
        abs,
        fix,
        round,
        equal,
        isNumeric,
        format,
        number,
        Complex,
        BigNumber: _BigNumber,
        Fraction: _Fraction
      } = _ref;
      var toNumber = number;
      /**
       * A unit can be constructed in the following ways:
       *
       *     const a = new Unit(value, name)
       *     const b = new Unit(null, name)
       *     const c = Unit.parse(str)
       *
       * Example usage:
       *
       *     const a = new Unit(5, 'cm')               // 50 mm
       *     const b = Unit.parse('23 kg')             // 23 kg
       *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m
       *     const d = new Unit(9.81, "m/s^2")         // 9.81 m/s^2
       *
       * @class Unit
       * @constructor Unit
       * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
       * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
       */

      function Unit(value, name) {
        if (!(this instanceof Unit)) {
          throw new Error('Constructor must be called with the new operator');
        }

        if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {
          throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
        }

        if (name !== undefined && (typeof name !== 'string' || name === '')) {
          throw new TypeError('Second parameter in Unit constructor must be a string');
        }

        if (name !== undefined) {
          var u = Unit.parse(name);
          this.units = u.units;
          this.dimensions = u.dimensions;
        } else {
          this.units = [{
            unit: UNIT_NONE,
            prefix: PREFIXES.NONE,
            // link to a list with supported prefixes
            power: 0
          }];
          this.dimensions = [];

          for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
            this.dimensions[i] = 0;
          }
        }

        this.value = value !== undefined && value !== null ? this._normalize(value) : null;
        this.fixPrefix = false; // if true, function format will not search for the
        // best prefix but leave it as initially provided.
        // fixPrefix is set true by the method Unit.to
        // The justification behind this is that if the constructor is explicitly called,
        // the caller wishes the units to be returned exactly as he supplied.

        this.skipAutomaticSimplification = true;
      }
      /**
       * Attach type information
       */


      Unit.prototype.type = 'Unit';
      Unit.prototype.isUnit = true; // private variables and functions for the Unit parser

      var text, index, c;

      function skipWhitespace() {
        while (c === ' ' || c === '\t') {
          next();
        }
      }

      function isDigitDot(c) {
        return c >= '0' && c <= '9' || c === '.';
      }

      function isDigit(c) {
        return c >= '0' && c <= '9';
      }

      function next() {
        index++;
        c = text.charAt(index);
      }

      function revert(oldIndex) {
        index = oldIndex;
        c = text.charAt(index);
      }

      function parseNumber() {
        var number = '';
        var oldIndex = index;

        if (c === '+') {
          next();
        } else if (c === '-') {
          number += c;
          next();
        }

        if (!isDigitDot(c)) {
          // a + or - must be followed by a digit
          revert(oldIndex);
          return null;
        } // get number, can have a single dot


        if (c === '.') {
          number += c;
          next();

          if (!isDigit(c)) {
            // this is no legal number, it is just a dot
            revert(oldIndex);
            return null;
          }
        } else {
          while (isDigit(c)) {
            number += c;
            next();
          }

          if (c === '.') {
            number += c;
            next();
          }
        }

        while (isDigit(c)) {
          number += c;
          next();
        } // check for exponential notation like "2.3e-4" or "1.23e50"


        if (c === 'E' || c === 'e') {
          // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"
          var tentativeNumber = '';
          var tentativeIndex = index;
          tentativeNumber += c;
          next();

          if (c === '+' || c === '-') {
            tentativeNumber += c;
            next();
          } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)


          if (!isDigit(c)) {
            // The e or E must belong to something else, so return the number without the e or E.
            revert(tentativeIndex);
            return number;
          } // We can now safely say that this is scientific notation.


          number = number + tentativeNumber;

          while (isDigit(c)) {
            number += c;
            next();
          }
        }

        return number;
      }

      function parseUnit() {
        var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]

        while (isDigit(c) || Unit.isValidAlpha(c)) {
          unitName += c;
          next();
        } // Must begin with [a-zA-Z]


        var firstC = unitName.charAt(0);

        if (Unit.isValidAlpha(firstC)) {
          return unitName;
        } else {
          return null;
        }
      }

      function parseCharacter(toFind) {
        if (c === toFind) {
          next();
          return toFind;
        } else {
          return null;
        }
      }
      /**
       * Parse a string into a unit. The value of the unit is parsed as number,
       * BigNumber, or Fraction depending on the math.js config setting `number`.
       *
       * Throws an exception if the provided string does not contain a valid unit or
       * cannot be parsed.
       * @memberof Unit
       * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
       * @return {Unit} unit
       */


      Unit.parse = function (str, options) {
        options = options || {};
        text = str;
        index = -1;
        c = '';

        if (typeof text !== 'string') {
          throw new TypeError('Invalid argument in Unit.parse, string expected');
        }

        var unit = new Unit();
        unit.units = [];
        var powerMultiplierCurrent = 1;
        var expectingUnit = false; // A unit should follow this pattern:
        // [number] ...[ [*/] unit[^number] ]
        // unit[^number] ... [ [*/] unit[^number] ]
        // Rules:
        // number is any floating point number.
        // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
        // The string may optionally begin with a number.
        // Each unit may optionally be followed by ^number.
        // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
        //   2m^2kg/s^2
        // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
        //   4erg

        next();
        skipWhitespace(); // Optional number at the start of the string

        var valueStr = parseNumber();
        var value = null;

        if (valueStr) {
          if (config.number === 'BigNumber') {
            value = new _BigNumber(valueStr);
          } else if (config.number === 'Fraction') {
            try {
              // not all numbers can be turned in Fractions, for example very small numbers not
              value = new _Fraction(valueStr);
            } catch (err) {
              value = parseFloat(valueStr);
            }
          } else {
            // number
            value = parseFloat(valueStr);
          }

          skipWhitespace(); // Whitespace is not required here
          // handle multiplication or division right after the value, like '1/s'

          if (parseCharacter('*')) {
            powerMultiplierCurrent = 1;
            expectingUnit = true;
          } else if (parseCharacter('/')) {
            powerMultiplierCurrent = -1;
            expectingUnit = true;
          }
        } // Stack to keep track of powerMultipliers applied to each parentheses group


        var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack

        var powerMultiplierStackProduct = 1;

        while (true) {
          skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
          // A '(' will always appear directly before a unit.

          while (c === '(') {
            powerMultiplierStack.push(powerMultiplierCurrent);
            powerMultiplierStackProduct *= powerMultiplierCurrent;
            powerMultiplierCurrent = 1;
            next();
            skipWhitespace();
          } // Is there something here?


          var uStr = void 0;

          if (c) {
            var oldC = c;
            uStr = parseUnit();

            if (uStr === null) {
              throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
            }
          } else {
            // End of input.
            break;
          } // Verify the unit exists and get the prefix (if any)


          var res = _findUnit(uStr);

          if (res === null) {
            // Unit not found.
            throw new SyntaxError('Unit "' + uStr + '" not found.');
          }

          var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a "^ number"?

          skipWhitespace();

          if (parseCharacter('^')) {
            skipWhitespace();
            var p = parseNumber();

            if (p === null) {
              // No valid number found for the power!
              throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
            }

            power *= p;
          } // Add the unit to the list


          unit.units.push({
            unit: res.unit,
            prefix: res.prefix,
            power
          });

          for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
            unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
          } // Check for and consume closing parentheses, popping from the stack.
          // A ')' will always follow a unit.


          skipWhitespace();

          while (c === ')') {
            if (powerMultiplierStack.length === 0) {
              throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
            }

            powerMultiplierStackProduct /= powerMultiplierStack.pop();
            next();
            skipWhitespace();
          } // "*" and "/" should mean we are expecting something to come next.
          // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.


          expectingUnit = false;

          if (parseCharacter('*')) {
            // explicit multiplication
            powerMultiplierCurrent = 1;
            expectingUnit = true;
          } else if (parseCharacter('/')) {
            // division
            powerMultiplierCurrent = -1;
            expectingUnit = true;
          } else {
            // implicit multiplication
            powerMultiplierCurrent = 1;
          } // Replace the unit into the auto unit system


          if (res.unit.base) {
            var baseDim = res.unit.base.key;
            UNIT_SYSTEMS.auto[baseDim] = {
              unit: res.unit,
              prefix: res.prefix
            };
          }
        } // Has the string been entirely consumed?


        skipWhitespace();

        if (c) {
          throw new SyntaxError('Could not parse: "' + str + '"');
        } // Is there a trailing slash?


        if (expectingUnit) {
          throw new SyntaxError('Trailing characters: "' + str + '"');
        } // Is the parentheses stack empty?


        if (powerMultiplierStack.length !== 0) {
          throw new SyntaxError('Unmatched "(" in "' + text + '"');
        } // Are there any units at all?


        if (unit.units.length === 0 && !options.allowNoUnits) {
          throw new SyntaxError('"' + str + '" contains no units');
        }

        unit.value = value !== undefined ? unit._normalize(value) : null;
        return unit;
      };
      /**
       * create a copy of this unit
       * @memberof Unit
       * @return {Unit} Returns a cloned version of the unit
       */


      Unit.prototype.clone = function () {
        var unit = new Unit();
        unit.fixPrefix = this.fixPrefix;
        unit.skipAutomaticSimplification = this.skipAutomaticSimplification;
        unit.value = clone$1(this.value);
        unit.dimensions = this.dimensions.slice(0);
        unit.units = [];

        for (var i = 0; i < this.units.length; i++) {
          unit.units[i] = {};

          for (var p in this.units[i]) {
            if (hasOwnProperty$1(this.units[i], p)) {
              unit.units[i][p] = this.units[i][p];
            }
          }
        }

        return unit;
      };
      /**
       * Return whether the unit is derived (such as m/s, or cm^2, but not N)
       * @memberof Unit
       * @return {boolean} True if the unit is derived
       */


      Unit.prototype._isDerived = function () {
        if (this.units.length === 0) {
          return false;
        }

        return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
      };
      /**
       * Normalize a value, based on its currently set unit(s)
       * @memberof Unit
       * @param {number | BigNumber | Fraction | boolean} value
       * @return {number | BigNumber | Fraction | boolean} normalized value
       * @private
       */


      Unit.prototype._normalize = function (value) {
        if (value === null || value === undefined || this.units.length === 0) {
          return value;
        }

        var res = value;

        var convert = Unit._getNumberConverter(typeOf$1(value)); // convert to Fraction or BigNumber if needed


        for (var i = 0; i < this.units.length; i++) {
          var unitValue = convert(this.units[i].unit.value);
          var unitPrefixValue = convert(this.units[i].prefix.value);
          var unitPower = convert(this.units[i].power);
          res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
        }

        return res;
      };
      /**
       * Denormalize a value, based on its currently set unit(s)
       * @memberof Unit
       * @param {number} value
       * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
       * @return {number} denormalized value
       * @private
       */


      Unit.prototype._denormalize = function (value, prefixValue) {
        if (value === null || value === undefined || this.units.length === 0) {
          return value;
        }

        var res = value;

        var convert = Unit._getNumberConverter(typeOf$1(value)); // convert to Fraction or BigNumber if needed


        for (var i = 0; i < this.units.length; i++) {
          var unitValue = convert(this.units[i].unit.value);
          var unitPrefixValue = convert(this.units[i].prefix.value);
          var unitPower = convert(this.units[i].power);
          res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
        }

        return res;
      };
      /**
       * Find a unit from a string
       * @memberof Unit
       * @param {string} str              A string like 'cm' or 'inch'
       * @returns {Object | null} result  When found, an object with fields unit and
       *                                  prefix is returned. Else, null is returned.
       * @private
       */


      var _findUnit = memoize(str => {
        // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
        if (hasOwnProperty$1(UNITS, str)) {
          var unit = UNITS[str];
          var prefix = unit.prefixes[''];
          return {
            unit,
            prefix
          };
        }

        for (var _name in UNITS) {
          if (hasOwnProperty$1(UNITS, _name)) {
            if (endsWith(str, _name)) {
              var _unit = UNITS[_name];
              var prefixLen = str.length - _name.length;
              var prefixName = str.substring(0, prefixLen);

              var _prefix = hasOwnProperty$1(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;

              if (_prefix !== undefined) {
                // store unit, prefix, and value
                return {
                  unit: _unit,
                  prefix: _prefix
                };
              }
            }
          }
        }

        return null;
      }, {
        hasher: args => args[0],
        limit: 100
      });
      /**
       * Test if the given expression is a unit.
       * The unit can have a prefix but cannot have a value.
       * @memberof Unit
       * @param {string} name   A string to be tested whether it is a value less unit.
       *                        The unit can have prefix, like "cm"
       * @return {boolean}      true if the given string is a unit
       */


      Unit.isValuelessUnit = function (name) {
        return _findUnit(name) !== null;
      };
      /**
       * check if this unit has given base unit
       * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
       * @memberof Unit
       * @param {BASE_UNITS | string | undefined} base
       */


      Unit.prototype.hasBase = function (base) {
        if (typeof base === 'string') {
          base = BASE_UNITS[base];
        }

        if (!base) {
          return false;
        } // All dimensions must be the same


        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
            return false;
          }
        }

        return true;
      };
      /**
       * Check if this unit has a base or bases equal to another base or bases
       * For derived units, the exponent on each base also must match
       * @memberof Unit
       * @param {Unit} other
       * @return {boolean} true if equal base
       */


      Unit.prototype.equalBase = function (other) {
        // All dimensions must be the same
        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
            return false;
          }
        }

        return true;
      };
      /**
       * Check if this unit equals another unit
       * @memberof Unit
       * @param {Unit} other
       * @return {boolean} true if both units are equal
       */


      Unit.prototype.equals = function (other) {
        return this.equalBase(other) && equal(this.value, other.value);
      };
      /**
       * Multiply this unit with another one
       * @memberof Unit
       * @param {Unit} other
       * @return {Unit} product of this unit and the other unit
       */


      Unit.prototype.multiply = function (other) {
        var res = this.clone();

        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          // Dimensions arrays may be of different lengths. Default to 0.
          res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
        } // Append other's units list onto res


        for (var _i = 0; _i < other.units.length; _i++) {
          // Make a shallow copy of every unit
          var inverted = _objectSpread$1({}, other.units[_i]);

          res.units.push(inverted);
        } // If at least one operand has a value, then the result should also have a value


        if (this.value !== null || other.value !== null) {
          var valThis = this.value === null ? this._normalize(1) : this.value;
          var valOther = other.value === null ? other._normalize(1) : other.value;
          res.value = multiplyScalar(valThis, valOther);
        } else {
          res.value = null;
        }

        res.skipAutomaticSimplification = false;
        return getNumericIfUnitless(res);
      };
      /**
       * Divide this unit by another one
       * @memberof Unit
       * @param {Unit} other
       * @return {Unit} result of dividing this unit by the other unit
       */


      Unit.prototype.divide = function (other) {
        var res = this.clone();

        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          // Dimensions arrays may be of different lengths. Default to 0.
          res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
        } // Invert and append other's units list onto res


        for (var _i2 = 0; _i2 < other.units.length; _i2++) {
          // Make a shallow copy of every unit
          var inverted = _objectSpread$1(_objectSpread$1({}, other.units[_i2]), {}, {
            power: -other.units[_i2].power
          });

          res.units.push(inverted);
        } // If at least one operand has a value, the result should have a value


        if (this.value !== null || other.value !== null) {
          var valThis = this.value === null ? this._normalize(1) : this.value;
          var valOther = other.value === null ? other._normalize(1) : other.value;
          res.value = divideScalar(valThis, valOther);
        } else {
          res.value = null;
        }

        res.skipAutomaticSimplification = false;
        return getNumericIfUnitless(res);
      };
      /**
       * Calculate the power of a unit
       * @memberof Unit
       * @param {number | Fraction | BigNumber} p
       * @returns {Unit}      The result: this^p
       */


      Unit.prototype.pow = function (p) {
        var res = this.clone();

        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          // Dimensions arrays may be of different lengths. Default to 0.
          res.dimensions[i] = (this.dimensions[i] || 0) * p;
        } // Adjust the power of each unit in the list


        for (var _i3 = 0; _i3 < res.units.length; _i3++) {
          res.units[_i3].power *= p;
        }

        if (res.value !== null) {
          res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number
          // if (!isNumeric(res.value)) {
          //  res.value = NaN
          // }
          // Update: Complex supported now
        } else {
          res.value = null;
        }

        res.skipAutomaticSimplification = false;
        return getNumericIfUnitless(res);
      };
      /**
       * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
       * @param {Unit} unit
       * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
       */


      function getNumericIfUnitless(unit) {
        if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
          return unit.value;
        } else {
          return unit;
        }
      }
      /**
       * Calculate the absolute value of a unit
       * @memberof Unit
       * @param {number | Fraction | BigNumber} x
       * @returns {Unit}      The result: |x|, absolute value of x
       */


      Unit.prototype.abs = function () {
        var ret = this.clone();

        if (ret.value !== null) {
          if (ret._isDerived() || ret.units[0].unit.offset === 0) {
            ret.value = abs(ret.value);
          } else {
            // To give the correct, but unexpected, results for units with an offset.
            // For example, abs(-283.15 degC) = -263.15 degC !!!
            // We must take the offset into consideration here
            var convert = Unit._getNumberConverter(typeOf$1(ret.value)); // convert to Fraction or BigNumber if needed


            var unitValue = convert(ret.units[0].unit.value);
            var nominalOffset = convert(ret.units[0].unit.offset);
            var unitOffset = multiplyScalar(unitValue, nominalOffset);
            ret.value = subtract(abs(addScalar(ret.value, unitOffset)), unitOffset);
          }
        }

        for (var i in ret.units) {
          if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
            ret.units[i].unit = UNITS.W;
          }
        }

        return ret;
      };
      /**
       * Convert the unit to a specific unit name.
       * @memberof Unit
       * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
       * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
       */


      Unit.prototype.to = function (valuelessUnit) {
        var value = this.value === null ? this._normalize(1) : this.value;
        var other;

        if (typeof valuelessUnit === 'string') {
          other = Unit.parse(valuelessUnit);
        } else if (isUnit(valuelessUnit)) {
          other = valuelessUnit.clone();
        } else {
          throw new Error('String or Unit expected as parameter');
        }

        if (!this.equalBase(other)) {
          throw new Error("Units do not match ('".concat(other.toString(), "' != '").concat(this.toString(), "')"));
        }

        if (other.value !== null) {
          throw new Error('Cannot convert to a unit with a value');
        }

        if (this.value === null || this._isDerived() || this.units[0].unit.offset === other.units[0].unit.offset) {
          other.value = clone$1(value);
        } else {
          /* Need to adjust value by difference in offset to convert */
          var convert = Unit._getNumberConverter(typeOf$1(value)); // convert to Fraction or BigNumber if needed


          var thisUnitValue = convert(this.units[0].unit.value);
          var thisNominalOffset = convert(this.units[0].unit.offset);
          var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);
          var otherUnitValue = convert(other.units[0].unit.value);
          var otherNominalOffset = convert(other.units[0].unit.offset);
          var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);
          other.value = subtract(addScalar(value, thisUnitOffset), otherUnitOffset);
        }

        other.fixPrefix = true;
        other.skipAutomaticSimplification = true;
        return other;
      };
      /**
       * Return the value of the unit when represented with given valueless unit
       * @memberof Unit
       * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
       * @return {number} Returns the unit value as number.
       */
      // TODO: deprecate Unit.toNumber? It's always better to use toNumeric


      Unit.prototype.toNumber = function (valuelessUnit) {
        return toNumber(this.toNumeric(valuelessUnit));
      };
      /**
       * Return the value of the unit in the original numeric type
       * @memberof Unit
       * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
       * @return {number | BigNumber | Fraction} Returns the unit value
       */


      Unit.prototype.toNumeric = function (valuelessUnit) {
        var other;

        if (valuelessUnit) {
          // Allow getting the numeric value without converting to a different unit
          other = this.to(valuelessUnit);
        } else {
          other = this.clone();
        }

        if (other._isDerived() || other.units.length === 0) {
          return other._denormalize(other.value);
        } else {
          return other._denormalize(other.value, other.units[0].prefix.value);
        }
      };
      /**
       * Get a string representation of the unit.
       * @memberof Unit
       * @return {string}
       */


      Unit.prototype.toString = function () {
        return this.format();
      };
      /**
       * Get a JSON representation of the unit
       * @memberof Unit
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
       */


      Unit.prototype.toJSON = function () {
        return {
          mathjs: 'Unit',
          value: this._denormalize(this.value),
          unit: this.formatUnits(),
          fixPrefix: this.fixPrefix
        };
      };
      /**
       * Instantiate a Unit from a JSON object
       * @memberof Unit
       * @param {Object} json  A JSON object structured as:
       *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
       * @return {Unit}
       */


      Unit.fromJSON = function (json) {
        var unit = new Unit(json.value, json.unit);
        unit.fixPrefix = json.fixPrefix || false;
        return unit;
      };
      /**
       * Returns the string representation of the unit.
       * @memberof Unit
       * @return {string}
       */


      Unit.prototype.valueOf = Unit.prototype.toString;
      /**
       * Simplify this Unit's unit list and return a new Unit with the simplified list.
       * The returned Unit will contain a list of the "best" units for formatting.
       */

      Unit.prototype.simplify = function () {
        var ret = this.clone();
        var proposedUnitList = []; // Search for a matching base

        var matchingBase;

        for (var key in currentUnitSystem) {
          if (hasOwnProperty$1(currentUnitSystem, key)) {
            if (ret.hasBase(BASE_UNITS[key])) {
              matchingBase = key;
              break;
            }
          }
        }

        if (matchingBase === 'NONE') {
          ret.units = [];
        } else {
          var matchingUnit;

          if (matchingBase) {
            // Does the unit system have a matching unit?
            if (hasOwnProperty$1(currentUnitSystem, matchingBase)) {
              matchingUnit = currentUnitSystem[matchingBase];
            }
          }

          if (matchingUnit) {
            ret.units = [{
              unit: matchingUnit.unit,
              prefix: matchingUnit.prefix,
              power: 1.0
            }];
          } else {
            // Multiple units or units with powers are formatted like this:
            // 5 (kg m^2) / (s^3 mol)
            // Build an representation from the base units of the current unit system
            var missingBaseDim = false;

            for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
              var baseDim = BASE_DIMENSIONS[i];

              if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
                if (hasOwnProperty$1(currentUnitSystem, baseDim)) {
                  proposedUnitList.push({
                    unit: currentUnitSystem[baseDim].unit,
                    prefix: currentUnitSystem[baseDim].prefix,
                    power: ret.dimensions[i] || 0
                  });
                } else {
                  missingBaseDim = true;
                }
              }
            } // Is the proposed unit list "simpler" than the existing one?


            if (proposedUnitList.length < ret.units.length && !missingBaseDim) {
              // Replace this unit list with the proposed list
              ret.units = proposedUnitList;
            }
          }
        }

        return ret;
      };
      /**
       * Returns a new Unit in the SI system with the same value as this one
       */


      Unit.prototype.toSI = function () {
        var ret = this.clone();
        var proposedUnitList = []; // Multiple units or units with powers are formatted like this:
        // 5 (kg m^2) / (s^3 mol)
        // Build an representation from the base units of the SI unit system

        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          var baseDim = BASE_DIMENSIONS[i];

          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
            if (hasOwnProperty$1(UNIT_SYSTEMS.si, baseDim)) {
              proposedUnitList.push({
                unit: UNIT_SYSTEMS.si[baseDim].unit,
                prefix: UNIT_SYSTEMS.si[baseDim].prefix,
                power: ret.dimensions[i] || 0
              });
            } else {
              throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');
            }
          }
        } // Replace this unit list with the proposed list


        ret.units = proposedUnitList;
        ret.fixPrefix = true;
        ret.skipAutomaticSimplification = true;
        return ret;
      };
      /**
       * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.
       * @memberof Unit
       * @return {string}
       */


      Unit.prototype.formatUnits = function () {
        var strNum = '';
        var strDen = '';
        var nNum = 0;
        var nDen = 0;

        for (var i = 0; i < this.units.length; i++) {
          if (this.units[i].power > 0) {
            nNum++;
            strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;

            if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
              strNum += '^' + this.units[i].power;
            }
          } else if (this.units[i].power < 0) {
            nDen++;
          }
        }

        if (nDen > 0) {
          for (var _i4 = 0; _i4 < this.units.length; _i4++) {
            if (this.units[_i4].power < 0) {
              if (nNum > 0) {
                strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;

                if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {
                  strDen += '^' + -this.units[_i4].power;
                }
              } else {
                strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
                strDen += '^' + this.units[_i4].power;
              }
            }
          }
        } // Remove leading " "


        strNum = strNum.substr(1);
        strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting

        if (nNum > 1 && nDen > 0) {
          strNum = '(' + strNum + ')';
        }

        if (nDen > 1 && nNum > 0) {
          strDen = '(' + strDen + ')';
        }

        var str = strNum;

        if (nNum > 0 && nDen > 0) {
          str += ' / ';
        }

        str += strDen;
        return str;
      };
      /**
       * Get a string representation of the Unit, with optional formatting options.
       * @memberof Unit
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @return {string}
       */


      Unit.prototype.format = function (options) {
        // Simplfy the unit list, unless it is valueless or was created directly in the
        // constructor or as the result of to or toSI
        var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.

        var isImaginary = false;

        if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {
          // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
          isImaginary = Math.abs(simp.value.re) < 1e-14;
        }

        for (var i in simp.units) {
          if (hasOwnProperty$1(simp.units, i)) {
            if (simp.units[i].unit) {
              if (simp.units[i].unit.name === 'VA' && isImaginary) {
                simp.units[i].unit = UNITS.VAR;
              } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {
                simp.units[i].unit = UNITS.VA;
              }
            }
          }
        } // Now apply the best prefix
        // Units must have only one unit and not have the fixPrefix flag set


        if (simp.units.length === 1 && !simp.fixPrefix) {
          // Units must have integer powers, otherwise the prefix will change the
          // outputted value by not-an-integer-power-of-ten
          if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {
            // Apply the best prefix
            simp.units[0].prefix = simp._bestPrefix();
          }
        }

        var value = simp._denormalize(simp.value);

        var str = simp.value !== null ? format(value, options || {}) : '';
        var unitStr = simp.formatUnits();

        if (simp.value && isComplex(simp.value)) {
          str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing
        }

        if (unitStr.length > 0 && str.length > 0) {
          str += ' ';
        }

        str += unitStr;
        return str;
      };
      /**
       * Calculate the best prefix using current value.
       * @memberof Unit
       * @returns {Object} prefix
       * @private
       */


      Unit.prototype._bestPrefix = function () {
        if (this.units.length !== 1) {
          throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
        }

        if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
          throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
        } // find the best prefix value (resulting in the value of which
        // the absolute value of the log10 is closest to zero,
        // though with a little offset of 1.2 for nicer values: you get a
        // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...
        // Note: the units value can be any numeric type, but to find the best
        // prefix it's enough to work with limited precision of a regular number
        // Update: using mathjs abs since we also allow complex numbers


        var absValue = this.value !== null ? abs(this.value) : 0;
        var absUnitValue = abs(this.units[0].unit.value);
        var bestPrefix = this.units[0].prefix;

        if (absValue === 0) {
          return bestPrefix;
        }

        var power = this.units[0].power;
        var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
        if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix

        bestDiff = Math.abs(bestDiff);
        var prefixes = this.units[0].unit.prefixes;

        for (var p in prefixes) {
          if (hasOwnProperty$1(prefixes, p)) {
            var prefix = prefixes[p];

            if (prefix.scientific) {
              var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

              if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
                // choose the prefix with the smallest diff, or if equal, choose the one
                // with the shortest name (can happen with SHORTLONG for example)
                bestPrefix = prefix;
                bestDiff = diff;
              }
            }
          }
        }

        return bestPrefix;
      };
      /**
       * Returns an array of units whose sum is equal to this unit
       * @memberof Unit
       * @param {Array} [parts] An array of strings or valueless units.
       *
       *   Example:
       *
       *   const u = new Unit(1, 'm')
       *   u.splitUnit(['feet', 'inch'])
       *     [ 3 feet, 3.3700787401575 inch ]
       *
       * @return {Array} An array of units.
       */


      Unit.prototype.splitUnit = function (parts) {
        var x = this.clone();
        var ret = [];

        for (var i = 0; i < parts.length; i++) {
          // Convert x to the requested unit
          x = x.to(parts[i]);
          if (i === parts.length - 1) break; // Get the numeric value of this unit

          var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,
          // since fix can incorrectly round down if there is round-off error

          var xRounded = round(xNumeric);
          var xFixed = void 0;
          var isNearlyEqual = equal(xRounded, xNumeric);

          if (isNearlyEqual) {
            xFixed = xRounded;
          } else {
            xFixed = fix(x.toNumeric());
          }

          var y = new Unit(xFixed, parts[i].toString());
          ret.push(y);
          x = subtract(x, y);
        } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.
        // But instead of comparing x, the remainder, with zero--we will compare the sum of
        // all the parts so far with the original value. If they are nearly equal,
        // we set the remainder to 0.


        var testSum = 0;

        for (var _i5 = 0; _i5 < ret.length; _i5++) {
          testSum = addScalar(testSum, ret[_i5].value);
        }

        if (equal(testSum, this.value)) {
          x.value = 0;
        }

        ret.push(x);
        return ret;
      };

      var PREFIXES = {
        NONE: {
          '': {
            name: '',
            value: 1,
            scientific: true
          }
        },
        SHORT: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          da: {
            name: 'da',
            value: 1e1,
            scientific: false
          },
          h: {
            name: 'h',
            value: 1e2,
            scientific: false
          },
          k: {
            name: 'k',
            value: 1e3,
            scientific: true
          },
          M: {
            name: 'M',
            value: 1e6,
            scientific: true
          },
          G: {
            name: 'G',
            value: 1e9,
            scientific: true
          },
          T: {
            name: 'T',
            value: 1e12,
            scientific: true
          },
          P: {
            name: 'P',
            value: 1e15,
            scientific: true
          },
          E: {
            name: 'E',
            value: 1e18,
            scientific: true
          },
          Z: {
            name: 'Z',
            value: 1e21,
            scientific: true
          },
          Y: {
            name: 'Y',
            value: 1e24,
            scientific: true
          },
          d: {
            name: 'd',
            value: 1e-1,
            scientific: false
          },
          c: {
            name: 'c',
            value: 1e-2,
            scientific: false
          },
          m: {
            name: 'm',
            value: 1e-3,
            scientific: true
          },
          u: {
            name: 'u',
            value: 1e-6,
            scientific: true
          },
          n: {
            name: 'n',
            value: 1e-9,
            scientific: true
          },
          p: {
            name: 'p',
            value: 1e-12,
            scientific: true
          },
          f: {
            name: 'f',
            value: 1e-15,
            scientific: true
          },
          a: {
            name: 'a',
            value: 1e-18,
            scientific: true
          },
          z: {
            name: 'z',
            value: 1e-21,
            scientific: true
          },
          y: {
            name: 'y',
            value: 1e-24,
            scientific: true
          }
        },
        LONG: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          deca: {
            name: 'deca',
            value: 1e1,
            scientific: false
          },
          hecto: {
            name: 'hecto',
            value: 1e2,
            scientific: false
          },
          kilo: {
            name: 'kilo',
            value: 1e3,
            scientific: true
          },
          mega: {
            name: 'mega',
            value: 1e6,
            scientific: true
          },
          giga: {
            name: 'giga',
            value: 1e9,
            scientific: true
          },
          tera: {
            name: 'tera',
            value: 1e12,
            scientific: true
          },
          peta: {
            name: 'peta',
            value: 1e15,
            scientific: true
          },
          exa: {
            name: 'exa',
            value: 1e18,
            scientific: true
          },
          zetta: {
            name: 'zetta',
            value: 1e21,
            scientific: true
          },
          yotta: {
            name: 'yotta',
            value: 1e24,
            scientific: true
          },
          deci: {
            name: 'deci',
            value: 1e-1,
            scientific: false
          },
          centi: {
            name: 'centi',
            value: 1e-2,
            scientific: false
          },
          milli: {
            name: 'milli',
            value: 1e-3,
            scientific: true
          },
          micro: {
            name: 'micro',
            value: 1e-6,
            scientific: true
          },
          nano: {
            name: 'nano',
            value: 1e-9,
            scientific: true
          },
          pico: {
            name: 'pico',
            value: 1e-12,
            scientific: true
          },
          femto: {
            name: 'femto',
            value: 1e-15,
            scientific: true
          },
          atto: {
            name: 'atto',
            value: 1e-18,
            scientific: true
          },
          zepto: {
            name: 'zepto',
            value: 1e-21,
            scientific: true
          },
          yocto: {
            name: 'yocto',
            value: 1e-24,
            scientific: true
          }
        },
        SQUARED: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          da: {
            name: 'da',
            value: 1e2,
            scientific: false
          },
          h: {
            name: 'h',
            value: 1e4,
            scientific: false
          },
          k: {
            name: 'k',
            value: 1e6,
            scientific: true
          },
          M: {
            name: 'M',
            value: 1e12,
            scientific: true
          },
          G: {
            name: 'G',
            value: 1e18,
            scientific: true
          },
          T: {
            name: 'T',
            value: 1e24,
            scientific: true
          },
          P: {
            name: 'P',
            value: 1e30,
            scientific: true
          },
          E: {
            name: 'E',
            value: 1e36,
            scientific: true
          },
          Z: {
            name: 'Z',
            value: 1e42,
            scientific: true
          },
          Y: {
            name: 'Y',
            value: 1e48,
            scientific: true
          },
          d: {
            name: 'd',
            value: 1e-2,
            scientific: false
          },
          c: {
            name: 'c',
            value: 1e-4,
            scientific: false
          },
          m: {
            name: 'm',
            value: 1e-6,
            scientific: true
          },
          u: {
            name: 'u',
            value: 1e-12,
            scientific: true
          },
          n: {
            name: 'n',
            value: 1e-18,
            scientific: true
          },
          p: {
            name: 'p',
            value: 1e-24,
            scientific: true
          },
          f: {
            name: 'f',
            value: 1e-30,
            scientific: true
          },
          a: {
            name: 'a',
            value: 1e-36,
            scientific: true
          },
          z: {
            name: 'z',
            value: 1e-42,
            scientific: true
          },
          y: {
            name: 'y',
            value: 1e-48,
            scientific: true
          }
        },
        CUBIC: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          da: {
            name: 'da',
            value: 1e3,
            scientific: false
          },
          h: {
            name: 'h',
            value: 1e6,
            scientific: false
          },
          k: {
            name: 'k',
            value: 1e9,
            scientific: true
          },
          M: {
            name: 'M',
            value: 1e18,
            scientific: true
          },
          G: {
            name: 'G',
            value: 1e27,
            scientific: true
          },
          T: {
            name: 'T',
            value: 1e36,
            scientific: true
          },
          P: {
            name: 'P',
            value: 1e45,
            scientific: true
          },
          E: {
            name: 'E',
            value: 1e54,
            scientific: true
          },
          Z: {
            name: 'Z',
            value: 1e63,
            scientific: true
          },
          Y: {
            name: 'Y',
            value: 1e72,
            scientific: true
          },
          d: {
            name: 'd',
            value: 1e-3,
            scientific: false
          },
          c: {
            name: 'c',
            value: 1e-6,
            scientific: false
          },
          m: {
            name: 'm',
            value: 1e-9,
            scientific: true
          },
          u: {
            name: 'u',
            value: 1e-18,
            scientific: true
          },
          n: {
            name: 'n',
            value: 1e-27,
            scientific: true
          },
          p: {
            name: 'p',
            value: 1e-36,
            scientific: true
          },
          f: {
            name: 'f',
            value: 1e-45,
            scientific: true
          },
          a: {
            name: 'a',
            value: 1e-54,
            scientific: true
          },
          z: {
            name: 'z',
            value: 1e-63,
            scientific: true
          },
          y: {
            name: 'y',
            value: 1e-72,
            scientific: true
          }
        },
        BINARY_SHORT_SI: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          k: {
            name: 'k',
            value: 1e3,
            scientific: true
          },
          M: {
            name: 'M',
            value: 1e6,
            scientific: true
          },
          G: {
            name: 'G',
            value: 1e9,
            scientific: true
          },
          T: {
            name: 'T',
            value: 1e12,
            scientific: true
          },
          P: {
            name: 'P',
            value: 1e15,
            scientific: true
          },
          E: {
            name: 'E',
            value: 1e18,
            scientific: true
          },
          Z: {
            name: 'Z',
            value: 1e21,
            scientific: true
          },
          Y: {
            name: 'Y',
            value: 1e24,
            scientific: true
          }
        },
        BINARY_SHORT_IEC: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          Ki: {
            name: 'Ki',
            value: 1024,
            scientific: true
          },
          Mi: {
            name: 'Mi',
            value: Math.pow(1024, 2),
            scientific: true
          },
          Gi: {
            name: 'Gi',
            value: Math.pow(1024, 3),
            scientific: true
          },
          Ti: {
            name: 'Ti',
            value: Math.pow(1024, 4),
            scientific: true
          },
          Pi: {
            name: 'Pi',
            value: Math.pow(1024, 5),
            scientific: true
          },
          Ei: {
            name: 'Ei',
            value: Math.pow(1024, 6),
            scientific: true
          },
          Zi: {
            name: 'Zi',
            value: Math.pow(1024, 7),
            scientific: true
          },
          Yi: {
            name: 'Yi',
            value: Math.pow(1024, 8),
            scientific: true
          }
        },
        BINARY_LONG_SI: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          kilo: {
            name: 'kilo',
            value: 1e3,
            scientific: true
          },
          mega: {
            name: 'mega',
            value: 1e6,
            scientific: true
          },
          giga: {
            name: 'giga',
            value: 1e9,
            scientific: true
          },
          tera: {
            name: 'tera',
            value: 1e12,
            scientific: true
          },
          peta: {
            name: 'peta',
            value: 1e15,
            scientific: true
          },
          exa: {
            name: 'exa',
            value: 1e18,
            scientific: true
          },
          zetta: {
            name: 'zetta',
            value: 1e21,
            scientific: true
          },
          yotta: {
            name: 'yotta',
            value: 1e24,
            scientific: true
          }
        },
        BINARY_LONG_IEC: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          kibi: {
            name: 'kibi',
            value: 1024,
            scientific: true
          },
          mebi: {
            name: 'mebi',
            value: Math.pow(1024, 2),
            scientific: true
          },
          gibi: {
            name: 'gibi',
            value: Math.pow(1024, 3),
            scientific: true
          },
          tebi: {
            name: 'tebi',
            value: Math.pow(1024, 4),
            scientific: true
          },
          pebi: {
            name: 'pebi',
            value: Math.pow(1024, 5),
            scientific: true
          },
          exi: {
            name: 'exi',
            value: Math.pow(1024, 6),
            scientific: true
          },
          zebi: {
            name: 'zebi',
            value: Math.pow(1024, 7),
            scientific: true
          },
          yobi: {
            name: 'yobi',
            value: Math.pow(1024, 8),
            scientific: true
          }
        },
        BTU: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          MM: {
            name: 'MM',
            value: 1e6,
            scientific: true
          }
        }
      };
      PREFIXES.SHORTLONG = _extends$1({}, PREFIXES.SHORT, PREFIXES.LONG);
      PREFIXES.BINARY_SHORT = _extends$1({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);
      PREFIXES.BINARY_LONG = _extends$1({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);
      /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
       * Index  Dimension
       * -----  ---------
       *   0    Length
       *   1    Mass
       *   2    Time
       *   3    Current
       *   4    Temperature
       *   5    Luminous intensity
       *   6    Amount of substance
       *   7    Angle
       *   8    Bit (digital)
       * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
       *
       */

      var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];
      var BASE_UNITS = {
        NONE: {
          dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
        },
        MASS: {
          dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
        },
        LENGTH: {
          dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
        },
        TIME: {
          dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
        },
        CURRENT: {
          dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
        },
        TEMPERATURE: {
          dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
        },
        LUMINOUS_INTENSITY: {
          dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
        },
        AMOUNT_OF_SUBSTANCE: {
          dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
        },
        FORCE: {
          dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
        },
        SURFACE: {
          dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
        },
        VOLUME: {
          dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
        },
        ENERGY: {
          dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
        },
        POWER: {
          dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
        },
        PRESSURE: {
          dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
        },
        ELECTRIC_CHARGE: {
          dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
        },
        ELECTRIC_CAPACITANCE: {
          dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
        },
        ELECTRIC_POTENTIAL: {
          dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
        },
        ELECTRIC_RESISTANCE: {
          dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
        },
        ELECTRIC_INDUCTANCE: {
          dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
        },
        ELECTRIC_CONDUCTANCE: {
          dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
        },
        MAGNETIC_FLUX: {
          dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
        },
        MAGNETIC_FLUX_DENSITY: {
          dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
        },
        FREQUENCY: {
          dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
        },
        ANGLE: {
          dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
        },
        BIT: {
          dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
        }
      };

      for (var key in BASE_UNITS) {
        if (hasOwnProperty$1(BASE_UNITS, key)) {
          BASE_UNITS[key].key = key;
        }
      }

      var BASE_UNIT_NONE = {};
      var UNIT_NONE = {
        name: '',
        base: BASE_UNIT_NONE,
        value: 1,
        offset: 0,
        dimensions: BASE_DIMENSIONS.map(x => 0)
      };
      var UNITS = {
        // length
        meter: {
          name: 'meter',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        inch: {
          name: 'inch',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.0254,
          offset: 0
        },
        foot: {
          name: 'foot',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.3048,
          offset: 0
        },
        yard: {
          name: 'yard',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.9144,
          offset: 0
        },
        mile: {
          name: 'mile',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 1609.344,
          offset: 0
        },
        link: {
          name: 'link',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.201168,
          offset: 0
        },
        rod: {
          name: 'rod',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 5.0292,
          offset: 0
        },
        chain: {
          name: 'chain',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 20.1168,
          offset: 0
        },
        angstrom: {
          name: 'angstrom',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 1e-10,
          offset: 0
        },
        m: {
          name: 'm',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        in: {
          name: 'in',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.0254,
          offset: 0
        },
        ft: {
          name: 'ft',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.3048,
          offset: 0
        },
        yd: {
          name: 'yd',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.9144,
          offset: 0
        },
        mi: {
          name: 'mi',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 1609.344,
          offset: 0
        },
        li: {
          name: 'li',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.201168,
          offset: 0
        },
        rd: {
          name: 'rd',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 5.029210,
          offset: 0
        },
        ch: {
          name: 'ch',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 20.1168,
          offset: 0
        },
        mil: {
          name: 'mil',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.0000254,
          offset: 0
        },
        // 1/1000 inch
        // Surface
        m2: {
          name: 'm2',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.SQUARED,
          value: 1,
          offset: 0
        },
        sqin: {
          name: 'sqin',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 0.00064516,
          offset: 0
        },
        // 645.16 mm2
        sqft: {
          name: 'sqft',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 0.09290304,
          offset: 0
        },
        // 0.09290304 m2
        sqyd: {
          name: 'sqyd',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 0.83612736,
          offset: 0
        },
        // 0.83612736 m2
        sqmi: {
          name: 'sqmi',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 2589988.110336,
          offset: 0
        },
        // 2.589988110336 km2
        sqrd: {
          name: 'sqrd',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 25.29295,
          offset: 0
        },
        // 25.29295 m2
        sqch: {
          name: 'sqch',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 404.6873,
          offset: 0
        },
        // 404.6873 m2
        sqmil: {
          name: 'sqmil',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 6.4516e-10,
          offset: 0
        },
        // 6.4516 * 10^-10 m2
        acre: {
          name: 'acre',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 4046.86,
          offset: 0
        },
        // 4046.86 m2
        hectare: {
          name: 'hectare',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 10000,
          offset: 0
        },
        // 10000 m2
        // Volume
        m3: {
          name: 'm3',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.CUBIC,
          value: 1,
          offset: 0
        },
        L: {
          name: 'L',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.SHORT,
          value: 0.001,
          offset: 0
        },
        // litre
        l: {
          name: 'l',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.SHORT,
          value: 0.001,
          offset: 0
        },
        // litre
        litre: {
          name: 'litre',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.LONG,
          value: 0.001,
          offset: 0
        },
        cuin: {
          name: 'cuin',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 1.6387064e-5,
          offset: 0
        },
        // 1.6387064e-5 m3
        cuft: {
          name: 'cuft',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.028316846592,
          offset: 0
        },
        // 28.316 846 592 L
        cuyd: {
          name: 'cuyd',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.764554857984,
          offset: 0
        },
        // 764.554 857 984 L
        teaspoon: {
          name: 'teaspoon',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.000005,
          offset: 0
        },
        // 5 mL
        tablespoon: {
          name: 'tablespoon',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.000015,
          offset: 0
        },
        // 15 mL
        // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
        drop: {
          name: 'drop',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 5e-8,
          offset: 0
        },
        // 0.05 mL = 5e-8 m3
        gtt: {
          name: 'gtt',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 5e-8,
          offset: 0
        },
        // 0.05 mL = 5e-8 m3
        // Liquid volume
        minim: {
          name: 'minim',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.00000006161152,
          offset: 0
        },
        // 0.06161152 mL
        fluiddram: {
          name: 'fluiddram',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0000036966911,
          offset: 0
        },
        // 3.696691 mL
        fluidounce: {
          name: 'fluidounce',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.00002957353,
          offset: 0
        },
        // 29.57353 mL
        gill: {
          name: 'gill',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0001182941,
          offset: 0
        },
        // 118.2941 mL
        cc: {
          name: 'cc',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 1e-6,
          offset: 0
        },
        // 1e-6 L
        cup: {
          name: 'cup',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0002365882,
          offset: 0
        },
        // 236.5882 mL
        pint: {
          name: 'pint',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0004731765,
          offset: 0
        },
        // 473.1765 mL
        quart: {
          name: 'quart',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0009463529,
          offset: 0
        },
        // 946.3529 mL
        gallon: {
          name: 'gallon',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.003785412,
          offset: 0
        },
        // 3.785412 L
        beerbarrel: {
          name: 'beerbarrel',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1173478,
          offset: 0
        },
        // 117.3478 L
        oilbarrel: {
          name: 'oilbarrel',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1589873,
          offset: 0
        },
        // 158.9873 L
        hogshead: {
          name: 'hogshead',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.2384810,
          offset: 0
        },
        // 238.4810 L
        // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
        fldr: {
          name: 'fldr',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0000036966911,
          offset: 0
        },
        // 3.696691 mL
        floz: {
          name: 'floz',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.00002957353,
          offset: 0
        },
        // 29.57353 mL
        gi: {
          name: 'gi',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0001182941,
          offset: 0
        },
        // 118.2941 mL
        cp: {
          name: 'cp',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0002365882,
          offset: 0
        },
        // 236.5882 mL
        pt: {
          name: 'pt',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0004731765,
          offset: 0
        },
        // 473.1765 mL
        qt: {
          name: 'qt',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0009463529,
          offset: 0
        },
        // 946.3529 mL
        gal: {
          name: 'gal',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.003785412,
          offset: 0
        },
        // 3.785412 L
        bbl: {
          name: 'bbl',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1173478,
          offset: 0
        },
        // 117.3478 L
        obl: {
          name: 'obl',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1589873,
          offset: 0
        },
        // 158.9873 L
        // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
        // Mass
        g: {
          name: 'g',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.SHORT,
          value: 0.001,
          offset: 0
        },
        gram: {
          name: 'gram',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.LONG,
          value: 0.001,
          offset: 0
        },
        ton: {
          name: 'ton',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.SHORT,
          value: 907.18474,
          offset: 0
        },
        t: {
          name: 't',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.SHORT,
          value: 1000,
          offset: 0
        },
        tonne: {
          name: 'tonne',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.LONG,
          value: 1000,
          offset: 0
        },
        grain: {
          name: 'grain',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 64.79891e-6,
          offset: 0
        },
        dram: {
          name: 'dram',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 1.7718451953125e-3,
          offset: 0
        },
        ounce: {
          name: 'ounce',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 28.349523125e-3,
          offset: 0
        },
        poundmass: {
          name: 'poundmass',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 453.59237e-3,
          offset: 0
        },
        hundredweight: {
          name: 'hundredweight',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 45.359237,
          offset: 0
        },
        stick: {
          name: 'stick',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 115e-3,
          offset: 0
        },
        stone: {
          name: 'stone',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 6.35029318,
          offset: 0
        },
        gr: {
          name: 'gr',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 64.79891e-6,
          offset: 0
        },
        dr: {
          name: 'dr',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 1.7718451953125e-3,
          offset: 0
        },
        oz: {
          name: 'oz',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 28.349523125e-3,
          offset: 0
        },
        lbm: {
          name: 'lbm',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 453.59237e-3,
          offset: 0
        },
        cwt: {
          name: 'cwt',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 45.359237,
          offset: 0
        },
        // Time
        s: {
          name: 's',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        min: {
          name: 'min',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 60,
          offset: 0
        },
        h: {
          name: 'h',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 3600,
          offset: 0
        },
        second: {
          name: 'second',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        sec: {
          name: 'sec',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        minute: {
          name: 'minute',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 60,
          offset: 0
        },
        hour: {
          name: 'hour',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 3600,
          offset: 0
        },
        day: {
          name: 'day',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 86400,
          offset: 0
        },
        week: {
          name: 'week',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 7 * 86400,
          offset: 0
        },
        month: {
          name: 'month',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 2629800,
          // 1/12th of Julian year
          offset: 0
        },
        year: {
          name: 'year',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 31557600,
          // Julian year
          offset: 0
        },
        decade: {
          name: 'decade',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 315576000,
          // Julian decade
          offset: 0
        },
        century: {
          name: 'century',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 3155760000,
          // Julian century
          offset: 0
        },
        millennium: {
          name: 'millennium',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 31557600000,
          // Julian millennium
          offset: 0
        },
        // Frequency
        hertz: {
          name: 'Hertz',
          base: BASE_UNITS.FREQUENCY,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0,
          reciprocal: true
        },
        Hz: {
          name: 'Hz',
          base: BASE_UNITS.FREQUENCY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0,
          reciprocal: true
        },
        // Angle
        rad: {
          name: 'rad',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        radian: {
          name: 'radian',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
        deg: {
          name: 'deg',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.SHORT,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        degree: {
          name: 'degree',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.LONG,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
        grad: {
          name: 'grad',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.SHORT,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        gradian: {
          name: 'gradian',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.LONG,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
        cycle: {
          name: 'cycle',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.NONE,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
        arcsec: {
          name: 'arcsec',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.NONE,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
        arcmin: {
          name: 'arcmin',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.NONE,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // Electric current
        A: {
          name: 'A',
          base: BASE_UNITS.CURRENT,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        ampere: {
          name: 'ampere',
          base: BASE_UNITS.CURRENT,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        // Temperature
        // K(C) = °C + 273.15
        // K(F) = (°F + 459.67) / 1.8
        // K(R) = °R / 1.8
        K: {
          name: 'K',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 0
        },
        degC: {
          name: 'degC',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 273.15
        },
        degF: {
          name: 'degF',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 459.67
        },
        degR: {
          name: 'degR',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 0
        },
        kelvin: {
          name: 'kelvin',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 0
        },
        celsius: {
          name: 'celsius',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 273.15
        },
        fahrenheit: {
          name: 'fahrenheit',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 459.67
        },
        rankine: {
          name: 'rankine',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 0
        },
        // amount of substance
        mol: {
          name: 'mol',
          base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        mole: {
          name: 'mole',
          base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        // luminous intensity
        cd: {
          name: 'cd',
          base: BASE_UNITS.LUMINOUS_INTENSITY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        candela: {
          name: 'candela',
          base: BASE_UNITS.LUMINOUS_INTENSITY,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        // TODO: units STERADIAN
        // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
        // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
        // Force
        N: {
          name: 'N',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        newton: {
          name: 'newton',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        dyn: {
          name: 'dyn',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.SHORT,
          value: 0.00001,
          offset: 0
        },
        dyne: {
          name: 'dyne',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.LONG,
          value: 0.00001,
          offset: 0
        },
        lbf: {
          name: 'lbf',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.NONE,
          value: 4.4482216152605,
          offset: 0
        },
        poundforce: {
          name: 'poundforce',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.NONE,
          value: 4.4482216152605,
          offset: 0
        },
        kip: {
          name: 'kip',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.LONG,
          value: 4448.2216,
          offset: 0
        },
        kilogramforce: {
          name: 'kilogramforce',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.NONE,
          value: 9.80665,
          offset: 0
        },
        // Energy
        J: {
          name: 'J',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        joule: {
          name: 'joule',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        erg: {
          name: 'erg',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.NONE,
          value: 1e-7,
          offset: 0
        },
        Wh: {
          name: 'Wh',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 3600,
          offset: 0
        },
        BTU: {
          name: 'BTU',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.BTU,
          value: 1055.05585262,
          offset: 0
        },
        eV: {
          name: 'eV',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 1.602176565e-19,
          offset: 0
        },
        electronvolt: {
          name: 'electronvolt',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.LONG,
          value: 1.602176565e-19,
          offset: 0
        },
        // Power
        W: {
          name: 'W',
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        watt: {
          name: 'watt',
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        hp: {
          name: 'hp',
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.NONE,
          value: 745.6998715386,
          offset: 0
        },
        // Electrical power units
        VAR: {
          name: 'VAR',
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.SHORT,
          value: Complex.I,
          offset: 0
        },
        VA: {
          name: 'VA',
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Pressure
        Pa: {
          name: 'Pa',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        psi: {
          name: 'psi',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 6894.75729276459,
          offset: 0
        },
        atm: {
          name: 'atm',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 101325,
          offset: 0
        },
        bar: {
          name: 'bar',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.SHORTLONG,
          value: 100000,
          offset: 0
        },
        torr: {
          name: 'torr',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 133.322,
          offset: 0
        },
        mmHg: {
          name: 'mmHg',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 133.322,
          offset: 0
        },
        mmH2O: {
          name: 'mmH2O',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 9.80665,
          offset: 0
        },
        cmH2O: {
          name: 'cmH2O',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 98.0665,
          offset: 0
        },
        // Electric charge
        coulomb: {
          name: 'coulomb',
          base: BASE_UNITS.ELECTRIC_CHARGE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        C: {
          name: 'C',
          base: BASE_UNITS.ELECTRIC_CHARGE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric capacitance
        farad: {
          name: 'farad',
          base: BASE_UNITS.ELECTRIC_CAPACITANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        F: {
          name: 'F',
          base: BASE_UNITS.ELECTRIC_CAPACITANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric potential
        volt: {
          name: 'volt',
          base: BASE_UNITS.ELECTRIC_POTENTIAL,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        V: {
          name: 'V',
          base: BASE_UNITS.ELECTRIC_POTENTIAL,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric resistance
        ohm: {
          name: 'ohm',
          base: BASE_UNITS.ELECTRIC_RESISTANCE,
          prefixes: PREFIXES.SHORTLONG,
          // Both Mohm and megaohm are acceptable
          value: 1,
          offset: 0
        },

        /*
         * Unicode breaks in browsers if charset is not specified
        Ω: {
          name: 'Ω',
          base: BASE_UNITS.ELECTRIC_RESISTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        */
        // Electric inductance
        henry: {
          name: 'henry',
          base: BASE_UNITS.ELECTRIC_INDUCTANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        H: {
          name: 'H',
          base: BASE_UNITS.ELECTRIC_INDUCTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric conductance
        siemens: {
          name: 'siemens',
          base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        S: {
          name: 'S',
          base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Magnetic flux
        weber: {
          name: 'weber',
          base: BASE_UNITS.MAGNETIC_FLUX,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        Wb: {
          name: 'Wb',
          base: BASE_UNITS.MAGNETIC_FLUX,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Magnetic flux density
        tesla: {
          name: 'tesla',
          base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        T: {
          name: 'T',
          base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Binary
        b: {
          name: 'b',
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_SHORT,
          value: 1,
          offset: 0
        },
        bits: {
          name: 'bits',
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_LONG,
          value: 1,
          offset: 0
        },
        B: {
          name: 'B',
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_SHORT,
          value: 8,
          offset: 0
        },
        bytes: {
          name: 'bytes',
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_LONG,
          value: 8,
          offset: 0
        }
      }; // aliases (formerly plurals)

      var ALIASES = {
        meters: 'meter',
        inches: 'inch',
        feet: 'foot',
        yards: 'yard',
        miles: 'mile',
        links: 'link',
        rods: 'rod',
        chains: 'chain',
        angstroms: 'angstrom',
        lt: 'l',
        litres: 'litre',
        liter: 'litre',
        liters: 'litre',
        teaspoons: 'teaspoon',
        tablespoons: 'tablespoon',
        minims: 'minim',
        fluiddrams: 'fluiddram',
        fluidounces: 'fluidounce',
        gills: 'gill',
        cups: 'cup',
        pints: 'pint',
        quarts: 'quart',
        gallons: 'gallon',
        beerbarrels: 'beerbarrel',
        oilbarrels: 'oilbarrel',
        hogsheads: 'hogshead',
        gtts: 'gtt',
        grams: 'gram',
        tons: 'ton',
        tonnes: 'tonne',
        grains: 'grain',
        drams: 'dram',
        ounces: 'ounce',
        poundmasses: 'poundmass',
        hundredweights: 'hundredweight',
        sticks: 'stick',
        lb: 'lbm',
        lbs: 'lbm',
        kips: 'kip',
        kgf: 'kilogramforce',
        acres: 'acre',
        hectares: 'hectare',
        sqfeet: 'sqft',
        sqyard: 'sqyd',
        sqmile: 'sqmi',
        sqmiles: 'sqmi',
        mmhg: 'mmHg',
        mmh2o: 'mmH2O',
        cmh2o: 'cmH2O',
        seconds: 'second',
        secs: 'second',
        minutes: 'minute',
        mins: 'minute',
        hours: 'hour',
        hr: 'hour',
        hrs: 'hour',
        days: 'day',
        weeks: 'week',
        months: 'month',
        years: 'year',
        decades: 'decade',
        centuries: 'century',
        millennia: 'millennium',
        hertz: 'hertz',
        radians: 'radian',
        degrees: 'degree',
        gradians: 'gradian',
        cycles: 'cycle',
        arcsecond: 'arcsec',
        arcseconds: 'arcsec',
        arcminute: 'arcmin',
        arcminutes: 'arcmin',
        BTUs: 'BTU',
        watts: 'watt',
        joules: 'joule',
        amperes: 'ampere',
        coulombs: 'coulomb',
        volts: 'volt',
        ohms: 'ohm',
        farads: 'farad',
        webers: 'weber',
        teslas: 'tesla',
        electronvolts: 'electronvolt',
        moles: 'mole',
        bit: 'bits',
        byte: 'bytes'
      };
      /**
       * Calculate the values for the angle units.
       * Value is calculated as number or BigNumber depending on the configuration
       * @param {{number: 'number' | 'BigNumber'}} config
       */

      function calculateAngleValues(config) {
        if (config.number === 'BigNumber') {
          var pi = createBigNumberPi(_BigNumber);
          UNITS.rad.value = new _BigNumber(1);
          UNITS.deg.value = pi.div(180); // 2 * pi / 360

          UNITS.grad.value = pi.div(200); // 2 * pi / 400

          UNITS.cycle.value = pi.times(2); // 2 * pi

          UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600

          UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60
        } else {
          // number
          UNITS.rad.value = 1;
          UNITS.deg.value = Math.PI / 180; // 2 * pi / 360

          UNITS.grad.value = Math.PI / 200; // 2 * pi / 400

          UNITS.cycle.value = Math.PI * 2; // 2 * pi

          UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600

          UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60
        } // copy to the full names of the angles


        UNITS.radian.value = UNITS.rad.value;
        UNITS.degree.value = UNITS.deg.value;
        UNITS.gradian.value = UNITS.grad.value;
      } // apply the angle values now


      calculateAngleValues(config);

      if (on) {
        // recalculate the values on change of configuration
        on('config', function (curr, prev) {
          if (curr.number !== prev.number) {
            calculateAngleValues(curr);
          }
        });
      }
      /**
       * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
       * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
       * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
       */


      var UNIT_SYSTEMS = {
        si: {
          // Base units
          NONE: {
            unit: UNIT_NONE,
            prefix: PREFIXES.NONE['']
          },
          LENGTH: {
            unit: UNITS.m,
            prefix: PREFIXES.SHORT['']
          },
          MASS: {
            unit: UNITS.g,
            prefix: PREFIXES.SHORT.k
          },
          TIME: {
            unit: UNITS.s,
            prefix: PREFIXES.SHORT['']
          },
          CURRENT: {
            unit: UNITS.A,
            prefix: PREFIXES.SHORT['']
          },
          TEMPERATURE: {
            unit: UNITS.K,
            prefix: PREFIXES.SHORT['']
          },
          LUMINOUS_INTENSITY: {
            unit: UNITS.cd,
            prefix: PREFIXES.SHORT['']
          },
          AMOUNT_OF_SUBSTANCE: {
            unit: UNITS.mol,
            prefix: PREFIXES.SHORT['']
          },
          ANGLE: {
            unit: UNITS.rad,
            prefix: PREFIXES.SHORT['']
          },
          BIT: {
            unit: UNITS.bits,
            prefix: PREFIXES.SHORT['']
          },
          // Derived units
          FORCE: {
            unit: UNITS.N,
            prefix: PREFIXES.SHORT['']
          },
          ENERGY: {
            unit: UNITS.J,
            prefix: PREFIXES.SHORT['']
          },
          POWER: {
            unit: UNITS.W,
            prefix: PREFIXES.SHORT['']
          },
          PRESSURE: {
            unit: UNITS.Pa,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_CHARGE: {
            unit: UNITS.C,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_CAPACITANCE: {
            unit: UNITS.F,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_POTENTIAL: {
            unit: UNITS.V,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_RESISTANCE: {
            unit: UNITS.ohm,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_INDUCTANCE: {
            unit: UNITS.H,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_CONDUCTANCE: {
            unit: UNITS.S,
            prefix: PREFIXES.SHORT['']
          },
          MAGNETIC_FLUX: {
            unit: UNITS.Wb,
            prefix: PREFIXES.SHORT['']
          },
          MAGNETIC_FLUX_DENSITY: {
            unit: UNITS.T,
            prefix: PREFIXES.SHORT['']
          },
          FREQUENCY: {
            unit: UNITS.Hz,
            prefix: PREFIXES.SHORT['']
          }
        }
      }; // Clone to create the other unit systems

      UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
      UNIT_SYSTEMS.cgs.LENGTH = {
        unit: UNITS.m,
        prefix: PREFIXES.SHORT.c
      };
      UNIT_SYSTEMS.cgs.MASS = {
        unit: UNITS.g,
        prefix: PREFIXES.SHORT['']
      };
      UNIT_SYSTEMS.cgs.FORCE = {
        unit: UNITS.dyn,
        prefix: PREFIXES.SHORT['']
      };
      UNIT_SYSTEMS.cgs.ENERGY = {
        unit: UNITS.erg,
        prefix: PREFIXES.NONE['']
      }; // there are wholly 4 unique cgs systems for electricity and magnetism,
      // so let's not worry about it unless somebody complains

      UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
      UNIT_SYSTEMS.us.LENGTH = {
        unit: UNITS.ft,
        prefix: PREFIXES.NONE['']
      };
      UNIT_SYSTEMS.us.MASS = {
        unit: UNITS.lbm,
        prefix: PREFIXES.NONE['']
      };
      UNIT_SYSTEMS.us.TEMPERATURE = {
        unit: UNITS.degF,
        prefix: PREFIXES.NONE['']
      };
      UNIT_SYSTEMS.us.FORCE = {
        unit: UNITS.lbf,
        prefix: PREFIXES.NONE['']
      };
      UNIT_SYSTEMS.us.ENERGY = {
        unit: UNITS.BTU,
        prefix: PREFIXES.BTU['']
      };
      UNIT_SYSTEMS.us.POWER = {
        unit: UNITS.hp,
        prefix: PREFIXES.NONE['']
      };
      UNIT_SYSTEMS.us.PRESSURE = {
        unit: UNITS.psi,
        prefix: PREFIXES.NONE['']
      }; // Add additional unit systems here.
      // Choose a unit system to seed the auto unit system.

      UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system

      var currentUnitSystem = UNIT_SYSTEMS.auto;
      /**
       * Set a unit system for formatting derived units.
       * @param {string} [name] The name of the unit system.
       */

      Unit.setUnitSystem = function (name) {
        if (hasOwnProperty$1(UNIT_SYSTEMS, name)) {
          currentUnitSystem = UNIT_SYSTEMS[name];
        } else {
          throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
        }
      };
      /**
       * Return the current unit system.
       * @return {string} The current unit system.
       */


      Unit.getUnitSystem = function () {
        for (var _key in UNIT_SYSTEMS) {
          if (hasOwnProperty$1(UNIT_SYSTEMS, _key)) {
            if (UNIT_SYSTEMS[_key] === currentUnitSystem) {
              return _key;
            }
          }
        }
      };
      /**
       * Converters to convert from number to an other numeric type like BigNumber
       * or Fraction
       */


      Unit.typeConverters = {
        BigNumber: function BigNumber(x) {
          return new _BigNumber(x + ''); // stringify to prevent constructor error
        },
        Fraction: function Fraction(x) {
          return new _Fraction(x);
        },
        Complex: function Complex(x) {
          return x;
        },
        number: function number(x) {
          return x;
        }
      };
      /**
       * Retrieve the right convertor function corresponding with the type
       * of provided exampleValue.
       *
       * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
       *                        In case of an unknown type,
       * @return {Function}
       */

      Unit._getNumberConverter = function (type) {
        if (!Unit.typeConverters[type]) {
          throw new TypeError('Unsupported type "' + type + '"');
        }

        return Unit.typeConverters[type];
      }; // Add dimensions to each built-in unit


      for (var _key2 in UNITS) {
        if (hasOwnProperty$1(UNITS, _key2)) {
          var unit = UNITS[_key2];
          unit.dimensions = unit.base.dimensions;
        }
      } // Create aliases


      for (var _name2 in ALIASES) {
        if (hasOwnProperty$1(ALIASES, _name2)) {
          var _unit2 = UNITS[ALIASES[_name2]];
          var alias = {};

          for (var _key3 in _unit2) {
            if (hasOwnProperty$1(_unit2, _key3)) {
              alias[_key3] = _unit2[_key3];
            }
          }

          alias.name = _name2;
          UNITS[_name2] = alias;
        }
      }
      /**
       * Checks if a character is a valid latin letter (upper or lower case).
       * Note that this function can be overridden, for example to allow support of other alphabets.
       * @param {string} c Tested character
       */


      Unit.isValidAlpha = function isValidAlpha(c) {
        return /^[a-zA-Z]$/.test(c);
      };

      function assertUnitNameIsValid(name) {
        for (var i = 0; i < name.length; i++) {
          c = name.charAt(i);

          if (i === 0 && !Unit.isValidAlpha(c)) {
            throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
          }

          if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {
            throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
          }
        }
      }
      /**
       * Wrapper around createUnitSingle.
       * Example:
       *  createUnit({
       *    foo: { },
       *    bar: {
       *      definition: 'kg/foo',
       *      aliases: ['ba', 'barr', 'bars'],
       *      offset: 200
       *    },
       *    baz: '4 bar'
       *  },
       *  {
       *    override: true
       *  })
       * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
       * @param {object} options
       */


      Unit.createUnit = function (obj, options) {
        if (typeof obj !== 'object') {
          throw new TypeError("createUnit expects first parameter to be of type 'Object'");
        } // Remove all units and aliases we are overriding


        if (options && options.override) {
          for (var _key4 in obj) {
            if (hasOwnProperty$1(obj, _key4)) {
              Unit.deleteUnit(_key4);
            }

            if (obj[_key4].aliases) {
              for (var i = 0; i < obj[_key4].aliases.length; i++) {
                Unit.deleteUnit(obj[_key4].aliases[i]);
              }
            }
          }
        } // TODO: traverse multiple times until all units have been added


        var lastUnit;

        for (var _key5 in obj) {
          if (hasOwnProperty$1(obj, _key5)) {
            lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);
          }
        }

        return lastUnit;
      };
      /**
       * Create a user-defined unit and register it with the Unit type.
       * Example:
       *  createUnitSingle('knot', '0.514444444 m/s')
       *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
       *
       * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
       * @param {string, Unit, Object} definition      Definition of the unit in terms
       * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,
       * or an Object. If an Object, may have the following properties:
       *   - definition {string|Unit} The definition of this unit.
       *   - prefixes {string} "none", "short", "long", "binary_short", or "binary_long".
       *     The default is "none".
       *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
       *   - offset {Numeric} An offset to apply when converting from the unit. For
       *     example, the offset for celsius is 273.15 and the offset for farhenheit
       *     is 459.67. Default is 0.
       *   - baseName {string} If the unit's dimension does not match that of any other
       *     base unit, the name of the newly create base unit. Otherwise, this property
       *     has no effect.
       *
       * @param {Object} options   (optional) An object containing any of the following
       * properties:
       *   - override {boolean} Whether this unit should be allowed to override existing
       *     units.
       *
       * @return {Unit}
       */


      Unit.createUnitSingle = function (name, obj, options) {
        if (typeof obj === 'undefined' || obj === null) {
          obj = {};
        }

        if (typeof name !== 'string') {
          throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
        } // Check collisions with existing units


        if (hasOwnProperty$1(UNITS, name)) {
          throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
        } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.


        assertUnitNameIsValid(name);
        var defUnit = null; // The Unit from which the new unit will be created.

        var aliases = [];
        var offset = 0;
        var definition;
        var prefixes;
        var baseName;

        if (obj && obj.type === 'Unit') {
          defUnit = obj.clone();
        } else if (typeof obj === 'string') {
          if (obj !== '') {
            definition = obj;
          }
        } else if (typeof obj === 'object') {
          definition = obj.definition;
          prefixes = obj.prefixes;
          offset = obj.offset;
          baseName = obj.baseName;

          if (obj.aliases) {
            aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array
          }
        } else {
          throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
        }

        if (aliases) {
          for (var i = 0; i < aliases.length; i++) {
            if (hasOwnProperty$1(UNITS, aliases[i])) {
              throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
            }
          }
        }

        if (definition && typeof definition === 'string' && !defUnit) {
          try {
            defUnit = Unit.parse(definition, {
              allowNoUnits: true
            });
          } catch (ex) {
            ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
            throw ex;
          }
        } else if (definition && definition.type === 'Unit') {
          defUnit = definition.clone();
        }

        aliases = aliases || [];
        offset = offset || 0;

        if (prefixes && prefixes.toUpperCase) {
          prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
        } else {
          prefixes = PREFIXES.NONE;
        } // If defUnit is null, it is because the user did not
        // specify a defintion. So create a new base dimension.


        var newUnit = {};

        if (!defUnit) {
          // Add a new base dimension
          baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo

          if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
            throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
          }

          BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units

          for (var b in BASE_UNITS) {
            if (hasOwnProperty$1(BASE_UNITS, b)) {
              BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
            }
          } // Add the new base unit


          var newBaseUnit = {
            dimensions: []
          };

          for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {
            newBaseUnit.dimensions[_i6] = 0;
          }

          newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
          newBaseUnit.key = baseName;
          BASE_UNITS[baseName] = newBaseUnit;
          newUnit = {
            name,
            value: 1,
            dimensions: BASE_UNITS[baseName].dimensions.slice(0),
            prefixes,
            offset,
            base: BASE_UNITS[baseName]
          };
          currentUnitSystem[baseName] = {
            unit: newUnit,
            prefix: PREFIXES.NONE['']
          };
        } else {
          newUnit = {
            name,
            value: defUnit.value,
            dimensions: defUnit.dimensions.slice(0),
            prefixes,
            offset
          }; // Create a new base if no matching base exists

          var anyMatch = false;

          for (var _i7 in BASE_UNITS) {
            if (hasOwnProperty$1(BASE_UNITS, _i7)) {
              var match = true;

              for (var j = 0; j < BASE_DIMENSIONS.length; j++) {
                if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {
                  match = false;
                  break;
                }
              }

              if (match) {
                anyMatch = true;
                newUnit.base = BASE_UNITS[_i7];
                break;
              }
            }
          }

          if (!anyMatch) {
            baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
            // Add the new base unit

            var _newBaseUnit = {
              dimensions: defUnit.dimensions.slice(0)
            };
            _newBaseUnit.key = baseName;
            BASE_UNITS[baseName] = _newBaseUnit;
            currentUnitSystem[baseName] = {
              unit: newUnit,
              prefix: PREFIXES.NONE['']
            };
            newUnit.base = BASE_UNITS[baseName];
          }
        }

        Unit.UNITS[name] = newUnit;

        for (var _i8 = 0; _i8 < aliases.length; _i8++) {
          var aliasName = aliases[_i8];
          var _alias = {};

          for (var _key6 in newUnit) {
            if (hasOwnProperty$1(newUnit, _key6)) {
              _alias[_key6] = newUnit[_key6];
            }
          }

          _alias.name = aliasName;
          Unit.UNITS[aliasName] = _alias;
        } // delete the memoization cache, since adding a new unit to the array
        // invalidates all old results


        delete _findUnit.cache;
        return new Unit(null, name);
      };

      Unit.deleteUnit = function (name) {
        delete Unit.UNITS[name];
      }; // expose arrays with prefixes, dimensions, units, systems


      Unit.PREFIXES = PREFIXES;
      Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
      Unit.BASE_UNITS = BASE_UNITS;
      Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
      Unit.UNITS = UNITS;
      return Unit;
    }, {
      isClass: true
    });

    var name$2a = 'unit';
    var dependencies$2a = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit

    var createUnitFunction = /* #__PURE__ */factory(name$2a, dependencies$2a, _ref => {
      var {
        typed,
        Unit
      } = _ref;

      /**
       * Create a unit. Depending on the passed arguments, the function
       * will create and return a new math.Unit object.
       * When a matrix is provided, all elements will be converted to units.
       *
       * Syntax:
       *
       *     math.unit(unit : string)
       *     math.unit(value : number, unit : string)
       *
       * Examples:
       *
       *    const a = math.unit(5, 'cm')    // returns Unit 50 mm
       *    const b = math.unit('23 kg')    // returns Unit 23 kg
       *    a.to('m')                       // returns Unit 0.05 m
       *
       * See also:
       *
       *    bignumber, boolean, complex, index, matrix, number, string, createUnit
       *
       * @param {* | Array | Matrix} args   A number and unit.
       * @return {Unit | Array | Matrix}    The created unit
       */
      return typed(name$2a, {
        Unit: function Unit(x) {
          return x.clone();
        },
        string: function string(x) {
          if (Unit.isValuelessUnit(x)) {
            return new Unit(null, x); // a pure unit
          }

          return Unit.parse(x, {
            allowNoUnits: true
          }); // a unit with value, like '5cm'
        },
        'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {
          return new Unit(value, unit);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$29 = 'sparse';
    var dependencies$29 = ['typed', 'SparseMatrix'];
    var createSparse = /* #__PURE__ */factory(name$29, dependencies$29, _ref => {
      var {
        typed,
        SparseMatrix
      } = _ref;

      /**
       * Create a Sparse Matrix. The function creates a new `math.Matrix` object from
       * an `Array`. A Matrix has utility functions to manipulate the data in the
       * matrix, like getting the size and getting or setting values in the matrix.
       * Note that a Sparse Matrix is always 2-dimensional, so for example if
       * you create one from a plain array of _n_ numbers, you get an _n_ by 1
       * Sparse "column vector".
       *
       * Syntax:
       *
       *    math.sparse()               // creates an empty sparse matrix.
       *    math.sparse(data)           // creates a sparse matrix with initial data.
       *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
       *
       * Examples:
       *
       *    let m = math.sparse([[1, 2], [3, 4]])
       *    m.size()                        // Array [2, 2]
       *    m.resize([3, 2], 5)
       *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
       *    m.get([1, 0])                    // number 3
       *    let v = math.sparse([0, 0, 1])
       *    v.size()                        // Array [3, 1]
       *    v.get([2, 0])                   // number 1
       *
       * See also:
       *
       *    bignumber, boolean, complex, index, number, string, unit, matrix
       *
       * @param {Array | Matrix} [data]    A two dimensional array
       *
       * @return {Matrix} The created matrix
       */
      return typed(name$29, {
        '': function _() {
          return new SparseMatrix([]);
        },
        string: function string(datatype) {
          return new SparseMatrix([], datatype);
        },
        'Array | Matrix': function ArrayMatrix(data) {
          return new SparseMatrix(data);
        },
        'Array | Matrix, string': function ArrayMatrixString(data, datatype) {
          return new SparseMatrix(data, datatype);
        }
      });
    });

    var name$28 = 'createUnit';
    var dependencies$28 = ['typed', 'Unit'];
    var createCreateUnit = /* #__PURE__ */factory(name$28, dependencies$28, _ref => {
      var {
        typed,
        Unit
      } = _ref;

      /**
       * Create a user-defined unit and register it with the Unit type.
       *
       * Syntax:
       *
       *     math.createUnit({
       *       baseUnit1: {
       *         aliases: [string, ...]
       *         prefixes: object
       *       },
       *       unit2: {
       *         definition: string,
       *         aliases: [string, ...]
       *         prefixes: object,
       *         offset: number
       *       },
       *       unit3: string    // Shortcut
       *     })
       *
       *     // Another shortcut:
       *     math.createUnit(string, unit : string, [object])
       *
       * Examples:
       *
       *     math.createUnit('foo')
       *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})
       *     math.createUnit('mph', '1 mile/hour')
       *
       * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
       * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
       * @param {Object} options   (optional) An object containing any of the following properties:
       *     - `prefixes {string}` "none", "short", "long", "binary_short", or "binary_long". The default is "none".
       *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']
       *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
       *
       * See also:
       *
       *     unit
       *
       * @return {Unit} The new unit
       */
      return typed(name$28, {
        // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
        'Object, Object': function ObjectObject(obj, options) {
          return Unit.createUnit(obj, options);
        },
        // Same as above but without the options.
        Object: function Object(obj) {
          return Unit.createUnit(obj, {});
        },
        // Shortcut method for creating one unit.
        'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {
          var obj = {};
          obj[name] = def;
          return Unit.createUnit(obj, options);
        },
        // Same as above but without the options.
        'string, Unit | string | Object': function stringUnitStringObject(name, def) {
          var obj = {};
          obj[name] = def;
          return Unit.createUnit(obj, {});
        },
        // Without a definition, creates a base unit.
        string: function string(name) {
          var obj = {};
          obj[name] = {};
          return Unit.createUnit(obj, {});
        }
      });
    });

    var name$27 = 'acos';
    var dependencies$27 = ['typed', 'config', 'Complex'];
    var createAcos = /* #__PURE__ */factory(name$27, dependencies$27, _ref => {
      var {
        typed,
        config,
        Complex
      } = _ref;

      /**
       * Calculate the inverse cosine of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acos(x)
       *
       * Examples:
       *
       *    math.acos(0.5)           // returns number 1.0471975511965979
       *    math.acos(math.cos(1.5)) // returns number 1.5
       *
       *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i
       *
       * See also:
       *
       *    cos, atan, asin
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
       */
      return typed(name$27, {
        number: function number(x) {
          if (x >= -1 && x <= 1 || config.predictable) {
            return Math.acos(x);
          } else {
            return new Complex(x, 0).acos();
          }
        },
        Complex: function Complex(x) {
          return x.acos();
        },
        BigNumber: function BigNumber(x) {
          return x.acos();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$26 = 'acosh';
    var dependencies$26 = ['typed', 'config', 'Complex'];
    var createAcosh = /* #__PURE__ */factory(name$26, dependencies$26, _ref => {
      var {
        typed,
        config,
        Complex
      } = _ref;

      /**
       * Calculate the hyperbolic arccos of a value,
       * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acosh(x)
       *
       * Examples:
       *
       *    math.acosh(1.5)       // returns 0.9624236501192069
       *
       * See also:
       *
       *    cosh, asinh, atanh
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
       */
      return typed(name$26, {
        number: function number(x) {
          if (x >= 1 || config.predictable) {
            return acoshNumber(x);
          }

          if (x <= -1) {
            return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
          }

          return new Complex(x, 0).acosh();
        },
        Complex: function Complex(x) {
          return x.acosh();
        },
        BigNumber: function BigNumber(x) {
          return x.acosh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$25 = 'acot';
    var dependencies$25 = ['typed', 'BigNumber'];
    var createAcot = /* #__PURE__ */factory(name$25, dependencies$25, _ref => {
      var {
        typed,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acot(x)
       *
       * Examples:
       *
       *    math.acot(0.5)           // returns number 0.4636476090008061
       *    math.acot(math.cot(1.5)) // returns number 1.5
       *
       *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
       *
       * See also:
       *
       *    cot, atan
       *
       * @param {number | Complex | Array | Matrix} x   Function input
       * @return {number | Complex | Array | Matrix} The arc cotangent of x
       */
      return typed(name$25, {
        number: acotNumber,
        Complex: function Complex(x) {
          return x.acot();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).atan();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$24 = 'acoth';
    var dependencies$24 = ['typed', 'config', 'Complex', 'BigNumber'];
    var createAcoth = /* #__PURE__ */factory(name$24, dependencies$24, _ref => {
      var {
        typed,
        config,
        Complex,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the hyperbolic arccotangent of a value,
       * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acoth(x)
       *
       * Examples:
       *
       *    math.acoth(0.5)       // returns 0.8047189562170503
       *
       * See also:
       *
       *    acsch, asech
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
       */
      return typed(name$24, {
        number: function number(x) {
          if (x >= 1 || x <= -1 || config.predictable) {
            return acothNumber(x);
          }

          return new Complex(x, 0).acoth();
        },
        Complex: function Complex(x) {
          return x.acoth();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).atanh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$23 = 'acsc';
    var dependencies$23 = ['typed', 'config', 'Complex', 'BigNumber'];
    var createAcsc = /* #__PURE__ */factory(name$23, dependencies$23, _ref => {
      var {
        typed,
        config,
        Complex,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acsc(x)
       *
       * Examples:
       *
       *    math.acsc(0.5)           // returns number 0.5235987755982989
       *    math.acsc(math.csc(1.5)) // returns number ~1.5
       *
       *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
       *
       * See also:
       *
       *    csc, asin, asec
       *
       * @param {number | Complex | Array | Matrix} x   Function input
       * @return {number | Complex | Array | Matrix} The arc cosecant of x
       */
      return typed(name$23, {
        number: function number(x) {
          if (x <= -1 || x >= 1 || config.predictable) {
            return acscNumber(x);
          }

          return new Complex(x, 0).acsc();
        },
        Complex: function Complex(x) {
          return x.acsc();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).asin();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$22 = 'acsch';
    var dependencies$22 = ['typed', 'BigNumber'];
    var createAcsch = /* #__PURE__ */factory(name$22, dependencies$22, _ref => {
      var {
        typed,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the hyperbolic arccosecant of a value,
       * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acsch(x)
       *
       * Examples:
       *
       *    math.acsch(0.5)       // returns 1.4436354751788103
       *
       * See also:
       *
       *    asech, acoth
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
       */
      return typed(name$22, {
        number: acschNumber,
        Complex: function Complex(x) {
          return x.acsch();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).asinh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$21 = 'asec';
    var dependencies$21 = ['typed', 'config', 'Complex', 'BigNumber'];
    var createAsec = /* #__PURE__ */factory(name$21, dependencies$21, _ref => {
      var {
        typed,
        config,
        Complex,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.asec(x)
       *
       * Examples:
       *
       *    math.asec(0.5)           // returns 1.0471975511965979
       *    math.asec(math.sec(1.5)) // returns 1.5
       *
       *    math.asec(2)             // returns 0 + 1.3169578969248166 i
       *
       * See also:
       *
       *    acos, acot, acsc
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} The arc secant of x
       */
      return typed(name$21, {
        number: function number(x) {
          if (x <= -1 || x >= 1 || config.predictable) {
            return asecNumber(x);
          }

          return new Complex(x, 0).asec();
        },
        Complex: function Complex(x) {
          return x.asec();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).acos();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$20 = 'asech';
    var dependencies$20 = ['typed', 'config', 'Complex', 'BigNumber'];
    var createAsech = /* #__PURE__ */factory(name$20, dependencies$20, _ref => {
      var {
        typed,
        config,
        Complex,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the hyperbolic arcsecant of a value,
       * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.asech(x)
       *
       * Examples:
       *
       *    math.asech(0.5)       // returns 1.3169578969248166
       *
       * See also:
       *
       *    acsch, acoth
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
       */
      return typed(name$20, {
        number: function number(x) {
          if (x <= 1 && x >= -1 || config.predictable) {
            var xInv = 1 / x;

            if (xInv > 0 || config.predictable) {
              return asechNumber(x);
            }

            var ret = Math.sqrt(xInv * xInv - 1);
            return new Complex(Math.log(ret - xInv), Math.PI);
          }

          return new Complex(x, 0).asech();
        },
        Complex: function Complex(x) {
          return x.asech();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).acosh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$1$ = 'asin';
    var dependencies$1$ = ['typed', 'config', 'Complex'];
    var createAsin = /* #__PURE__ */factory(name$1$, dependencies$1$, _ref => {
      var {
        typed,
        config,
        Complex
      } = _ref;

      /**
       * Calculate the inverse sine of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.asin(x)
       *
       * Examples:
       *
       *    math.asin(0.5)           // returns number 0.5235987755982989
       *    math.asin(math.sin(1.5)) // returns number ~1.5
       *
       *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
       *
       * See also:
       *
       *    sin, atan, acos
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
       * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
       */
      return typed(name$1$, {
        number: function number(x) {
          if (x >= -1 && x <= 1 || config.predictable) {
            return Math.asin(x);
          } else {
            return new Complex(x, 0).asin();
          }
        },
        Complex: function Complex(x) {
          return x.asin();
        },
        BigNumber: function BigNumber(x) {
          return x.asin();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since asin(0) = 0
          return deepMap(x, this);
        }
      });
    });

    var name$1_ = 'asinh';
    var dependencies$1_ = ['typed'];
    var createAsinh = /* #__PURE__ */factory(name$1_, dependencies$1_, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Calculate the hyperbolic arcsine of a value,
       * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.asinh(x)
       *
       * Examples:
       *
       *    math.asinh(0.5)       // returns 0.48121182505960347
       *
       * See also:
       *
       *    acosh, atanh
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
       */
      return typed('asinh', {
        number: asinhNumber,
        Complex: function Complex(x) {
          return x.asinh();
        },
        BigNumber: function BigNumber(x) {
          return x.asinh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since asinh(0) = 0
          return deepMap(x, this);
        }
      });
    });

    var name$1Z = 'atan';
    var dependencies$1Z = ['typed'];
    var createAtan = /* #__PURE__ */factory(name$1Z, dependencies$1Z, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Calculate the inverse tangent of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.atan(x)
       *
       * Examples:
       *
       *    math.atan(0.5)           // returns number 0.4636476090008061
       *    math.atan(math.tan(1.5)) // returns number 1.5
       *
       *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
       *
       * See also:
       *
       *    tan, asin, acos
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
       * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
       */
      return typed('atan', {
        number: function number(x) {
          return Math.atan(x);
        },
        Complex: function Complex(x) {
          return x.atan();
        },
        BigNumber: function BigNumber(x) {
          return x.atan();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since atan(0) = 0
          return deepMap(x, this);
        }
      });
    });

    var name$1Y = 'atan2';
    var dependencies$1Y = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
    var createAtan2 = /* #__PURE__ */factory(name$1Y, dependencies$1Y, _ref => {
      var {
        typed,
        matrix,
        equalScalar,
        BigNumber,
        DenseMatrix
      } = _ref;
      var algorithm02 = createAlgorithm02({
        typed,
        equalScalar
      });
      var algorithm03 = createAlgorithm03({
        typed
      });
      var algorithm09 = createAlgorithm09({
        typed,
        equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Calculate the inverse tangent function with two arguments, y/x.
       * By providing two arguments, the right quadrant of the computed angle can be
       * determined.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.atan2(y, x)
       *
       * Examples:
       *
       *    math.atan2(2, 2) / math.pi       // returns number 0.25
       *
       *    const angle = math.unit(60, 'deg') // returns Unit 60 deg
       *    const x = math.cos(angle)
       *    const y = math.sin(angle)
       *
       *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
       *
       * See also:
       *
       *    tan, atan, sin, cos
       *
       * @param {number | Array | Matrix} y  Second dimension
       * @param {number | Array | Matrix} x  First dimension
       * @return {number | Array | Matrix} Four-quadrant inverse tangent
       */

      return typed(name$1Y, {
        'number, number': Math.atan2,
        // Complex numbers doesn't seem to have a reasonable implementation of
        // atan2(). Even Matlab removed the support, after they only calculated
        // the atan only on base of the real part of the numbers and ignored the imaginary.
        'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {
          return BigNumber.atan2(y, x);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm09(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          // mind the order of y and x!
          return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          // mind the order of y and x
          return algorithm12(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          // mind the order of y and x
          return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          return algorithm14(matrix(y), x, this, true).valueOf();
        }
      });
    });

    var name$1X = 'atanh';
    var dependencies$1X = ['typed', 'config', 'Complex'];
    var createAtanh = /* #__PURE__ */factory(name$1X, dependencies$1X, _ref => {
      var {
        typed,
        config,
        Complex
      } = _ref;

      /**
       * Calculate the hyperbolic arctangent of a value,
       * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.atanh(x)
       *
       * Examples:
       *
       *    math.atanh(0.5)       // returns 0.5493061443340549
       *
       * See also:
       *
       *    acosh, asinh
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
       */
      return typed(name$1X, {
        number: function number(x) {
          if (x <= 1 && x >= -1 || config.predictable) {
            return atanhNumber(x);
          }

          return new Complex(x, 0).atanh();
        },
        Complex: function Complex(x) {
          return x.atanh();
        },
        BigNumber: function BigNumber(x) {
          return x.atanh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since atanh(0) = 0
          return deepMap(x, this);
        }
      });
    });

    var name$1W = 'cos';
    var dependencies$1W = ['typed'];
    var createCos = /* #__PURE__ */factory(name$1W, dependencies$1W, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Calculate the cosine of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.cos(x)
       *
       * Examples:
       *
       *    math.cos(2)                      // returns number -0.4161468365471422
       *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
       *    math.cos(math.unit(180, 'deg'))  // returns number -1
       *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
       *
       *    const angle = 0.2
       *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
       *
       * See also:
       *
       *    cos, tan
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
       */
      return typed(name$1W, {
        number: Math.cos,
        Complex: function Complex(x) {
          return x.cos();
        },
        BigNumber: function BigNumber(x) {
          return x.cos();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function cos is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$1V = 'cosh';
    var dependencies$1V = ['typed'];
    var createCosh = /* #__PURE__ */factory(name$1V, dependencies$1V, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Calculate the hyperbolic cosine of a value,
       * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.cosh(x)
       *
       * Examples:
       *
       *    math.cosh(0.5)       // returns number 1.1276259652063807
       *
       * See also:
       *
       *    sinh, tanh
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
       */
      return typed(name$1V, {
        number: cosh$1,
        Complex: function Complex(x) {
          return x.cosh();
        },
        BigNumber: function BigNumber(x) {
          return x.cosh();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function cosh is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$1U = 'cot';
    var dependencies$1U = ['typed', 'BigNumber'];
    var createCot = /* #__PURE__ */factory(name$1U, dependencies$1U, _ref => {
      var {
        typed,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.cot(x)
       *
       * Examples:
       *
       *    math.cot(2)      // returns number -0.45765755436028577
       *    1 / math.tan(2)  // returns number -0.45765755436028577
       *
       * See also:
       *
       *    tan, sec, csc
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Cotangent of x
       */
      return typed(name$1U, {
        number: cotNumber,
        Complex: function Complex(x) {
          return x.cot();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.tan());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function cot is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$1T = 'coth';
    var dependencies$1T = ['typed', 'BigNumber'];
    var createCoth = /* #__PURE__ */factory(name$1T, dependencies$1T, _ref => {
      var {
        typed,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the hyperbolic cotangent of a value,
       * defined as `coth(x) = 1 / tanh(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.coth(x)
       *
       * Examples:
       *
       *    // coth(x) = 1 / tanh(x)
       *    math.coth(2)         // returns 1.0373147207275482
       *    1 / math.tanh(2)     // returns 1.0373147207275482
       *
       * See also:
       *
       *    sinh, tanh, cosh
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
       */
      return typed(name$1T, {
        number: cothNumber,
        Complex: function Complex(x) {
          return x.coth();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.tanh());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function coth is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$1S = 'csc';
    var dependencies$1S = ['typed', 'BigNumber'];
    var createCsc = /* #__PURE__ */factory(name$1S, dependencies$1S, _ref => {
      var {
        typed,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.csc(x)
       *
       * Examples:
       *
       *    math.csc(2)      // returns number 1.099750170294617
       *    1 / math.sin(2)  // returns number 1.099750170294617
       *
       * See also:
       *
       *    sin, sec, cot
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Cosecant of x
       */
      return typed(name$1S, {
        number: cscNumber,
        Complex: function Complex(x) {
          return x.csc();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.sin());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function csc is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$1R = 'csch';
    var dependencies$1R = ['typed', 'BigNumber'];
    var createCsch = /* #__PURE__ */factory(name$1R, dependencies$1R, _ref => {
      var {
        typed,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the hyperbolic cosecant of a value,
       * defined as `csch(x) = 1 / sinh(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.csch(x)
       *
       * Examples:
       *
       *    // csch(x) = 1/ sinh(x)
       *    math.csch(0.5)       // returns 1.9190347513349437
       *    1 / math.sinh(0.5)   // returns 1.9190347513349437
       *
       * See also:
       *
       *    sinh, sech, coth
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
       */
      return typed(name$1R, {
        number: cschNumber,
        Complex: function Complex(x) {
          return x.csch();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.sinh());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function csch is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$1Q = 'sec';
    var dependencies$1Q = ['typed', 'BigNumber'];
    var createSec = /* #__PURE__ */factory(name$1Q, dependencies$1Q, _ref => {
      var {
        typed,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sec(x)
       *
       * Examples:
       *
       *    math.sec(2)      // returns number -2.4029979617223822
       *    1 / math.cos(2)  // returns number -2.4029979617223822
       *
       * See also:
       *
       *    cos, csc, cot
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Secant of x
       */
      return typed(name$1Q, {
        number: secNumber,
        Complex: function Complex(x) {
          return x.sec();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.cos());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function sec is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$1P = 'sech';
    var dependencies$1P = ['typed', 'BigNumber'];
    var createSech = /* #__PURE__ */factory(name$1P, dependencies$1P, _ref => {
      var {
        typed,
        BigNumber: _BigNumber
      } = _ref;

      /**
       * Calculate the hyperbolic secant of a value,
       * defined as `sech(x) = 1 / cosh(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sech(x)
       *
       * Examples:
       *
       *    // sech(x) = 1/ cosh(x)
       *    math.sech(0.5)       // returns 0.886818883970074
       *    1 / math.cosh(0.5)   // returns 0.886818883970074
       *
       * See also:
       *
       *    cosh, csch, coth
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
       */
      return typed(name$1P, {
        number: sechNumber,
        Complex: function Complex(x) {
          return x.sech();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.cosh());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function sech is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, this);
        }
      });
    });

    var name$1O = 'sin';
    var dependencies$1O = ['typed'];
    var createSin = /* #__PURE__ */factory(name$1O, dependencies$1O, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Calculate the sine of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sin(x)
       *
       * Examples:
       *
       *    math.sin(2)                      // returns number 0.9092974268256813
       *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
       *    math.sin(math.unit(90, 'deg'))   // returns number 1
       *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
       *
       *    const angle = 0.2
       *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
       *
       * See also:
       *
       *    cos, tan
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
       */
      return typed(name$1O, {
        number: Math.sin,
        Complex: function Complex(x) {
          return x.sin();
        },
        BigNumber: function BigNumber(x) {
          return x.sin();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function sin is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since sin(0) = 0
          return deepMap(x, this);
        }
      });
    });

    var name$1N = 'sinh';
    var dependencies$1N = ['typed'];
    var createSinh = /* #__PURE__ */factory(name$1N, dependencies$1N, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Calculate the hyperbolic sine of a value,
       * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sinh(x)
       *
       * Examples:
       *
       *    math.sinh(0.5)       // returns number 0.5210953054937474
       *
       * See also:
       *
       *    cosh, tanh
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
       */
      return typed(name$1N, {
        number: sinhNumber,
        Complex: function Complex(x) {
          return x.sinh();
        },
        BigNumber: function BigNumber(x) {
          return x.sinh();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function sinh is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since sinh(0) = 0
          return deepMap(x, this);
        }
      });
    });

    var name$1M = 'tan';
    var dependencies$1M = ['typed'];
    var createTan = /* #__PURE__ */factory(name$1M, dependencies$1M, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.tan(x)
       *
       * Examples:
       *
       *    math.tan(0.5)                    // returns number 0.5463024898437905
       *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905
       *    math.tan(math.pi / 4)            // returns number 1
       *    math.tan(math.unit(45, 'deg'))   // returns number 1
       *
       * See also:
       *
       *    atan, sin, cos
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
       */
      return typed(name$1M, {
        number: Math.tan,
        Complex: function Complex(x) {
          return x.tan();
        },
        BigNumber: function BigNumber(x) {
          return x.tan();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function tan is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since tan(0) = 0
          return deepMap(x, this);
        }
      });
    });

    var name$1L = 'tanh';
    var dependencies$1L = ['typed'];
    var createTanh = /* #__PURE__ */factory(name$1L, dependencies$1L, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Calculate the hyperbolic tangent of a value,
       * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.tanh(x)
       *
       * Examples:
       *
       *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
       *    math.tanh(0.5)                   // returns 0.46211715726000974
       *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974
       *    1 / math.coth(0.5)               // returns 0.46211715726000974
       *
       * See also:
       *
       *    sinh, cosh, coth
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
       */
      return typed('tanh', {
        number: tanh$1,
        Complex: function Complex(x) {
          return x.tanh();
        },
        BigNumber: function BigNumber(x) {
          return x.tanh();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function tanh is no angle');
          }

          return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since tanh(0) = 0
          return deepMap(x, this);
        }
      });
    });

    var name$1K = 'setCartesian';
    var dependencies$1K = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
    var createSetCartesian = /* #__PURE__ */factory(name$1K, dependencies$1K, _ref => {
      var {
        typed,
        size,
        subset,
        compareNatural,
        Index,
        DenseMatrix
      } = _ref;

      /**
       * Create the cartesian product of two (multi)sets.
       * Multi-dimension arrays will be converted to single-dimension arrays
       * and the values will be sorted in ascending order before the operation.
       *
       * Syntax:
       *
       *    math.setCartesian(set1, set2)
       *
       * Examples:
       *
       *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
       *    math.setCartesian([4, 3], [2, 1])        // returns [[3, 1], [3, 2], [4, 1], [4, 2]]
       *
       * See also:
       *
       *    setUnion, setIntersect, setDifference, setPowerset
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {Array | Matrix}    The cartesian product of two (multi)sets
       */
      return typed(name$1K, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          var result = [];

          if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {
            // if any of them is empty, return empty
            var b1 = flatten$2(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);
            var b2 = flatten$2(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);
            result = [];

            for (var i = 0; i < b1.length; i++) {
              for (var j = 0; j < b2.length; j++) {
                result.push([b1[i], b2[j]]);
              }
            }
          } // return an array, if both inputs were arrays


          if (Array.isArray(a1) && Array.isArray(a2)) {
            return result;
          } // return a matrix otherwise


          return new DenseMatrix(result);
        }
      });
    });

    var name$1J = 'setDifference';
    var dependencies$1J = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
    var createSetDifference = /* #__PURE__ */factory(name$1J, dependencies$1J, _ref => {
      var {
        typed,
        size,
        subset,
        compareNatural,
        Index,
        DenseMatrix
      } = _ref;

      /**
       * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
       * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
       *
       * Syntax:
       *
       *    math.setDifference(set1, set2)
       *
       * Examples:
       *
       *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]
       *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]
       *
       * See also:
       *
       *    setUnion, setIntersect, setSymDifference
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {Array | Matrix}    The difference of two (multi)sets
       */
      return typed(name$1J, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          var result;

          if (subset(size(a1), new Index(0)) === 0) {
            // empty-anything=empty
            result = [];
          } else if (subset(size(a2), new Index(0)) === 0) {
            // anything-empty=anything
            return flatten$2(a1.toArray());
          } else {
            var b1 = identify(flatten$2(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
            var b2 = identify(flatten$2(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
            result = [];
            var inb2;

            for (var i = 0; i < b1.length; i++) {
              inb2 = false;

              for (var j = 0; j < b2.length; j++) {
                if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                  // the identifier is always a decimal int
                  inb2 = true;
                  break;
                }
              }

              if (!inb2) {
                result.push(b1[i]);
              }
            }
          } // return an array, if both inputs were arrays


          if (Array.isArray(a1) && Array.isArray(a2)) {
            return generalize(result);
          } // return a matrix otherwise


          return new DenseMatrix(generalize(result));
        }
      });
    });

    var name$1I = 'setDistinct';
    var dependencies$1I = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
    var createSetDistinct = /* #__PURE__ */factory(name$1I, dependencies$1I, _ref => {
      var {
        typed,
        size,
        subset,
        compareNatural,
        Index,
        DenseMatrix
      } = _ref;

      /**
       * Collect the distinct elements of a multiset.
       * A multi-dimension array will be converted to a single-dimension array before the operation.
       *
       * Syntax:
       *
       *    math.setDistinct(set)
       *
       * Examples:
       *
       *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]
       *
       * See also:
       *
       *    setMultiplicity
       *
       * @param {Array | Matrix}    a  A multiset
       * @return {Array | Matrix}    A set containing the distinc elements of the multiset
       */
      return typed(name$1I, {
        'Array | Matrix': function ArrayMatrix(a) {
          var result;

          if (subset(size(a), new Index(0)) === 0) {
            // if empty, return empty
            result = [];
          } else {
            var b = flatten$2(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
            result = [];
            result.push(b[0]);

            for (var i = 1; i < b.length; i++) {
              if (compareNatural(b[i], b[i - 1]) !== 0) {
                result.push(b[i]);
              }
            }
          } // return an array, if the input was an array


          if (Array.isArray(a)) {
            return result;
          } // return a matrix otherwise


          return new DenseMatrix(result);
        }
      });
    });

    var name$1H = 'setIntersect';
    var dependencies$1H = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
    var createSetIntersect = /* #__PURE__ */factory(name$1H, dependencies$1H, _ref => {
      var {
        typed,
        size,
        subset,
        compareNatural,
        Index,
        DenseMatrix
      } = _ref;

      /**
       * Create the intersection of two (multi)sets.
       * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
       *
       * Syntax:
       *
       *    math.setIntersect(set1, set2)
       *
       * Examples:
       *
       *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]
       *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]
       *
       * See also:
       *
       *    setUnion, setDifference
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {Array | Matrix}    The intersection of two (multi)sets
       */
      return typed(name$1H, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          var result;

          if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {
            // of any of them is empty, return empty
            result = [];
          } else {
            var b1 = identify(flatten$2(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
            var b2 = identify(flatten$2(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
            result = [];

            for (var i = 0; i < b1.length; i++) {
              for (var j = 0; j < b2.length; j++) {
                if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                  // the identifier is always a decimal int
                  result.push(b1[i]);
                  break;
                }
              }
            }
          } // return an array, if both inputs were arrays


          if (Array.isArray(a1) && Array.isArray(a2)) {
            return generalize(result);
          } // return a matrix otherwise


          return new DenseMatrix(generalize(result));
        }
      });
    });

    var name$1G = 'setIsSubset';
    var dependencies$1G = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
    var createSetIsSubset = /* #__PURE__ */factory(name$1G, dependencies$1G, _ref => {
      var {
        typed,
        size,
        subset,
        compareNatural,
        Index
      } = _ref;

      /**
       * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
       * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
       *
       * Syntax:
       *
       *    math.setIsSubset(set1, set2)
       *
       * Examples:
       *
       *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false
       *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true
       *
       * See also:
       *
       *    setUnion, setIntersect, setDifference
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {boolean}            true | false
       */
      return typed(name$1G, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          if (subset(size(a1), new Index(0)) === 0) {
            // empty is a subset of anything
            return true;
          } else if (subset(size(a2), new Index(0)) === 0) {
            // anything is not a subset of empty
            return false;
          }

          var b1 = identify(flatten$2(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
          var b2 = identify(flatten$2(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
          var inb2;

          for (var i = 0; i < b1.length; i++) {
            inb2 = false;

            for (var j = 0; j < b2.length; j++) {
              if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                // the identifier is always a decimal int
                inb2 = true;
                break;
              }
            }

            if (inb2 === false) {
              return false;
            }
          }

          return true;
        }
      });
    });

    var name$1F = 'setMultiplicity';
    var dependencies$1F = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
    var createSetMultiplicity = /* #__PURE__ */factory(name$1F, dependencies$1F, _ref => {
      var {
        typed,
        size,
        subset,
        compareNatural,
        Index
      } = _ref;

      /**
       * Count the multiplicity of an element in a multiset.
       * A multi-dimension array will be converted to a single-dimension array before the operation.
       *
       * Syntax:
       *
       *    math.setMultiplicity(element, set)
       *
       * Examples:
       *
       *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1
       *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2
       *
       * See also:
       *
       *    setDistinct, setSize
       *
       * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
       * @param {Array | Matrix}     a  A multiset
       * @return {number}            The number of how many times the multiset contains the element
       */
      return typed(name$1F, {
        'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {
          if (subset(size(a), new Index(0)) === 0) {
            // if empty, return 0
            return 0;
          }

          var b = flatten$2(Array.isArray(a) ? a : a.toArray());
          var count = 0;

          for (var i = 0; i < b.length; i++) {
            if (compareNatural(b[i], e) === 0) {
              count++;
            }
          }

          return count;
        }
      });
    });

    var name$1E = 'setPowerset';
    var dependencies$1E = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
    var createSetPowerset = /* #__PURE__ */factory(name$1E, dependencies$1E, _ref => {
      var {
        typed,
        size,
        subset,
        compareNatural,
        Index
      } = _ref;

      /**
       * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
       * A multi-dimension array will be converted to a single-dimension array before the operation.
       *
       * Syntax:
       *
       *    math.setPowerset(set)
       *
       * Examples:
       *
       *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
       *
       * See also:
       *
       *    setCartesian
       *
       * @param {Array | Matrix}    a  A (multi)set
       * @return {Array}    The powerset of the (multi)set
       */
      return typed(name$1E, {
        'Array | Matrix': function ArrayMatrix(a) {
          if (subset(size(a), new Index(0)) === 0) {
            // if empty, return empty
            return [];
          }

          var b = flatten$2(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
          var result = [];
          var number = 0;

          while (number.toString(2).length <= b.length) {
            result.push(_subset(b, number.toString(2).split('').reverse()));
            number++;
          } // can not return a matrix, because of the different size of the subarrays


          return _sort(result);
        }
      }); // create subset

      function _subset(array, bitarray) {
        var result = [];

        for (var i = 0; i < bitarray.length; i++) {
          if (bitarray[i] === '1') {
            result.push(array[i]);
          }
        }

        return result;
      } // sort subsests by length


      function _sort(array) {
        var temp = [];

        for (var i = array.length - 1; i > 0; i--) {
          for (var j = 0; j < i; j++) {
            if (array[j].length > array[j + 1].length) {
              temp = array[j];
              array[j] = array[j + 1];
              array[j + 1] = temp;
            }
          }
        }

        return array;
      }
    });

    var name$1D = 'setSize';
    var dependencies$1D = ['typed', 'compareNatural'];
    var createSetSize = /* #__PURE__ */factory(name$1D, dependencies$1D, _ref => {
      var {
        typed,
        compareNatural
      } = _ref;

      /**
       * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
       * A multi-dimension array will be converted to a single-dimension array before the operation.
       *
       * Syntax:
       *
       *    math.setSize(set)
       *    math.setSize(set, unique)
       *
       * Examples:
       *
       *    math.setSize([1, 2, 2, 4])          // returns 4
       *    math.setSize([1, 2, 2, 4], true)    // returns 3
       *
       * See also:
       *
       *    setUnion, setIntersect, setDifference
       *
       * @param {Array | Matrix}    a  A multiset
       * @return {number}            The number of elements of the (multi)set
       */
      return typed(name$1D, {
        'Array | Matrix': function ArrayMatrix(a) {
          return Array.isArray(a) ? flatten$2(a).length : flatten$2(a.toArray()).length;
        },
        'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {
          if (unique === false || a.length === 0) {
            return Array.isArray(a) ? flatten$2(a).length : flatten$2(a.toArray()).length;
          } else {
            var b = flatten$2(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
            var count = 1;

            for (var i = 1; i < b.length; i++) {
              if (compareNatural(b[i], b[i - 1]) !== 0) {
                count++;
              }
            }

            return count;
          }
        }
      });
    });

    var name$1C = 'setSymDifference';
    var dependencies$1C = ['typed', 'size', 'concat', 'subset', 'setDifference', 'Index'];
    var createSetSymDifference = /* #__PURE__ */factory(name$1C, dependencies$1C, _ref => {
      var {
        typed,
        size,
        concat,
        subset,
        setDifference,
        Index
      } = _ref;

      /**
       * Create the symmetric difference of two (multi)sets.
       * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
       *
       * Syntax:
       *
       *    math.setSymDifference(set1, set2)
       *
       * Examples:
       *
       *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]
       *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]
       *
       * See also:
       *
       *    setUnion, setIntersect, setDifference
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {Array | Matrix}    The symmetric difference of two (multi)sets
       */
      return typed(name$1C, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          if (subset(size(a1), new Index(0)) === 0) {
            // if any of them is empty, return the other one
            return flatten$2(a2);
          } else if (subset(size(a2), new Index(0)) === 0) {
            return flatten$2(a1);
          }

          var b1 = flatten$2(a1);
          var b2 = flatten$2(a2);
          return concat(setDifference(b1, b2), setDifference(b2, b1));
        }
      });
    });

    var name$1B = 'setUnion';
    var dependencies$1B = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];
    var createSetUnion = /* #__PURE__ */factory(name$1B, dependencies$1B, _ref => {
      var {
        typed,
        size,
        concat,
        subset,
        setIntersect,
        setSymDifference,
        Index
      } = _ref;

      /**
       * Create the union of two (multi)sets.
       * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
       *
       * Syntax:
       *
       *    math.setUnion(set1, set2)
       *
       * Examples:
       *
       *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]
       *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]
       *
       * See also:
       *
       *    setIntersect, setDifference
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {Array | Matrix}    The union of two (multi)sets
       */
      return typed(name$1B, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          if (subset(size(a1), new Index(0)) === 0) {
            // if any of them is empty, return the other one
            return flatten$2(a2);
          } else if (subset(size(a2), new Index(0)) === 0) {
            return flatten$2(a1);
          }

          var b1 = flatten$2(a1);
          var b2 = flatten$2(a2);
          return concat(setSymDifference(b1, b2), setIntersect(b1, b2));
        }
      });
    });

    var name$1A = 'add';
    var dependencies$1A = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];
    var createAdd = /* #__PURE__ */factory(name$1A, dependencies$1A, _ref => {
      var {
        typed,
        matrix,
        addScalar,
        equalScalar,
        DenseMatrix,
        SparseMatrix
      } = _ref;
      var algorithm01 = createAlgorithm01({
        typed
      });
      var algorithm04 = createAlgorithm04({
        typed,
        equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed,
        DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Add two or more values, `x + y`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.add(x, y)
       *    math.add(x, y, z, ...)
       *
       * Examples:
       *
       *    math.add(2, 3)               // returns number 5
       *    math.add(2, 3, 4)            // returns number 9
       *
       *    const a = math.complex(2, 3)
       *    const b = math.complex(-4, 1)
       *    math.add(a, b)               // returns Complex -2 + 4i
       *
       *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
       *
       *    const c = math.unit('5 cm')
       *    const d = math.unit('2.1 mm')
       *    math.add(c, d)               // returns Unit 52.1 mm
       *
       *    math.add("2.3", "4")         // returns number 6.3
       *
       * See also:
       *
       *    subtract, sum
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
       */

      return typed(name$1A, extend({
        // we extend the signatures of addScalar with signatures dealing with matrices
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, addScalar);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, addScalar, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm01(y, x, addScalar, true);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm04(x, y, addScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return this(x, matrix(y));
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, addScalar, false);
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm10(x, y, addScalar, false);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, addScalar, true);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm10(y, x, addScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, addScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, addScalar, true).valueOf();
        },
        'any, any': addScalar,
        'any, any, ...any': function anyAnyAny(x, y, rest) {
          var result = this(x, y);

          for (var i = 0; i < rest.length; i++) {
            result = this(result, rest[i]);
          }

          return result;
        }
      }, addScalar.signatures));
    });

    var name$1z = 'hypot';
    var dependencies$1z = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];
    var createHypot = /* #__PURE__ */factory(name$1z, dependencies$1z, _ref => {
      var {
        typed,
        abs,
        addScalar,
        divideScalar,
        multiplyScalar,
        sqrt,
        smaller,
        isPositive
      } = _ref;

      /**
       * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
       *
       *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
       *
       * For matrix input, the hypotenusa is calculated for all values in the matrix.
       *
       * Syntax:
       *
       *     math.hypot(a, b, ...)
       *     math.hypot([a, b, c, ...])
       *
       * Examples:
       *
       *     math.hypot(3, 4)      // 5
       *     math.hypot(3, 4, 5)   // 7.0710678118654755
       *     math.hypot([3, 4, 5]) // 7.0710678118654755
       *     math.hypot(-2)        // 2
       *
       * See also:
       *
       *     abs, norm
       *
       * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.
       *                                                          Matrix and Array input is flattened and returns a
       *                                                          single number for the whole matrix.
       * @return {number | BigNumber} Returns the hypothenusa of the input values.
       */
      return typed(name$1z, {
        '... number | BigNumber': _hypot,
        Array: function Array(x) {
          return this.apply(this, flatten$2(x));
        },
        Matrix: function Matrix(x) {
          return this.apply(this, flatten$2(x.toArray()));
        }
      });
      /**
       * Calculate the hypotenusa for an Array with values
       * @param {Array.<number | BigNumber>} args
       * @return {number | BigNumber} Returns the result
       * @private
       */

      function _hypot(args) {
        // code based on `hypot` from es6-shim:
        // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
        var result = 0;
        var largest = 0;

        for (var i = 0; i < args.length; i++) {
          var value = abs(args[i]);

          if (smaller(largest, value)) {
            result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));
            result = addScalar(result, 1);
            largest = value;
          } else {
            result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);
          }
        }

        return multiplyScalar(largest, sqrt(result));
      }
    });

    var name$1y = 'norm';
    var dependencies$1y = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];
    var createNorm = /* #__PURE__ */factory(name$1y, dependencies$1y, _ref => {
      var {
        typed,
        abs,
        add,
        pow,
        conj,
        sqrt,
        multiply,
        equalScalar,
        larger,
        smaller,
        matrix,
        ctranspose,
        eigs
      } = _ref;

      /**
       * Calculate the norm of a number, vector or matrix.
       *
       * The second parameter p is optional. If not provided, it defaults to 2.
       *
       * Syntax:
       *
       *    math.norm(x)
       *    math.norm(x, p)
       *
       * Examples:
       *
       *    math.abs(-3.5)                         // returns 3.5
       *    math.norm(-3.5)                        // returns 3.5
       *
       *    math.norm(math.complex(3, -4))         // returns 5
       *
       *    math.norm([1, 2, -3], Infinity)        // returns 3
       *    math.norm([1, 2, -3], -Infinity)       // returns 1
       *
       *    math.norm([3, 4], 2)                   // returns 5
       *
       *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
       *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7
       *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661
       *
       * See also:
       *
       *    abs, hypot
       *
       * @param  {number | BigNumber | Complex | Array | Matrix} x
       *            Value for which to calculate the norm
       * @param  {number | BigNumber | string} [p=2]
       *            Vector space.
       *            Supported numbers include Infinity and -Infinity.
       *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
       * @return {number | BigNumber} the p-norm
       */
      return typed(name$1y, {
        number: Math.abs,
        Complex: function Complex(x) {
          return x.abs();
        },
        BigNumber: function BigNumber(x) {
          // norm(x) = abs(x)
          return x.abs();
        },
        boolean: function boolean(x) {
          // norm(x) = abs(x)
          return Math.abs(x);
        },
        Array: function Array(x) {
          return _norm(matrix(x), 2);
        },
        Matrix: function Matrix(x) {
          return _norm(x, 2);
        },
        'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {
          // ignore second parameter, TODO: remove the option of second parameter for these types
          return this(x);
        },
        'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
          return _norm(matrix(x), p);
        },
        'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
          return _norm(x, p);
        }
      });
      /**
       * Calculate the plus infinity norm for a vector
       * @param {Matrix} x
       * @returns {number} Returns the norm
       * @private
       */

      function _vectorNormPlusInfinity(x) {
        // norm(x, Infinity) = max(abs(x))
        var pinf = 0; // skip zeros since abs(0) === 0

        x.forEach(function (value) {
          var v = abs(value);

          if (larger(v, pinf)) {
            pinf = v;
          }
        }, true);
        return pinf;
      }
      /**
       * Calculate the minus infinity norm for a vector
       * @param {Matrix} x
       * @returns {number} Returns the norm
       * @private
       */


      function _vectorNormMinusInfinity(x) {
        // norm(x, -Infinity) = min(abs(x))
        var ninf; // skip zeros since abs(0) === 0

        x.forEach(function (value) {
          var v = abs(value);

          if (!ninf || smaller(v, ninf)) {
            ninf = v;
          }
        }, true);
        return ninf || 0;
      }
      /**
       * Calculate the norm for a vector
       * @param {Matrix} x
       * @param {number | string} p
       * @returns {number} Returns the norm
       * @private
       */


      function _vectorNorm(x, p) {
        // check p
        if (p === Number.POSITIVE_INFINITY || p === 'inf') {
          return _vectorNormPlusInfinity(x);
        }

        if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
          return _vectorNormMinusInfinity(x);
        }

        if (p === 'fro') {
          return _norm(x, 2);
        }

        if (typeof p === 'number' && !isNaN(p)) {
          // check p != 0
          if (!equalScalar(p, 0)) {
            // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
            var n = 0; // skip zeros since abs(0) === 0

            x.forEach(function (value) {
              n = add(pow(abs(value), p), n);
            }, true);
            return pow(n, 1 / p);
          }

          return Number.POSITIVE_INFINITY;
        } // invalid parameter value


        throw new Error('Unsupported parameter value');
      }
      /**
       * Calculate the Frobenius norm for a matrix
       * @param {Matrix} x
       * @returns {number} Returns the norm
       * @private
       */


      function _matrixNormFrobenius(x) {
        // norm(x) = sqrt(sum(diag(x'x)))
        var fro = 0;
        x.forEach(function (value, index) {
          fro = add(fro, multiply(value, conj(value)));
        });
        return abs(sqrt(fro));
      }
      /**
       * Calculate the norm L1 for a matrix
       * @param {Matrix} x
       * @returns {number} Returns the norm
       * @private
       */


      function _matrixNormOne(x) {
        // norm(x) = the largest column sum
        var c = []; // result

        var maxc = 0; // skip zeros since abs(0) == 0

        x.forEach(function (value, index) {
          var j = index[1];
          var cj = add(c[j] || 0, abs(value));

          if (larger(cj, maxc)) {
            maxc = cj;
          }

          c[j] = cj;
        }, true);
        return maxc;
      }
      /**
       * Calculate the norm L2 for a matrix
       * @param {Matrix} x
       * @returns {number} Returns the norm
       * @private
       */


      function _matrixNormTwo(x) {
        // norm(x) = sqrt( max eigenvalue of A*.A)
        var sizeX = x.size();

        if (sizeX[0] !== sizeX[1]) {
          throw new RangeError('Invalid matrix dimensions');
        }

        var tx = ctranspose(x);
        var squaredX = multiply(tx, x);
        var eigenVals = eigs(squaredX).values.toArray();
        var rho = eigenVals[eigenVals.length - 1];
        return abs(sqrt(rho));
      }
      /**
       * Calculate the infinity norm for a matrix
       * @param {Matrix} x
       * @returns {number} Returns the norm
       * @private
       */


      function _matrixNormInfinity(x) {
        // norm(x) = the largest row sum
        var r = []; // result

        var maxr = 0; // skip zeros since abs(0) == 0

        x.forEach(function (value, index) {
          var i = index[0];
          var ri = add(r[i] || 0, abs(value));

          if (larger(ri, maxr)) {
            maxr = ri;
          }

          r[i] = ri;
        }, true);
        return maxr;
      }
      /**
       * Calculate the norm for a 2D Matrix (M*N)
       * @param {Matrix} x
       * @param {number | string} p
       * @returns {number} Returns the norm
       * @private
       */


      function _matrixNorm(x, p) {
        // check p
        if (p === 1) {
          return _matrixNormOne(x);
        }

        if (p === Number.POSITIVE_INFINITY || p === 'inf') {
          return _matrixNormInfinity(x);
        }

        if (p === 'fro') {
          return _matrixNormFrobenius(x);
        }

        if (p === 2) {
          return _matrixNormTwo(x);
        } // invalid parameter value


        throw new Error('Unsupported parameter value ' + p);
      }
      /**
       * Calculate the norm for an array
       * @param {Matrix} x
       * @param {number | string} p
       * @returns {number} Returns the norm
       * @private
       */


      function _norm(x, p) {
        // size
        var sizeX = x.size(); // check if it is a vector

        if (sizeX.length === 1) {
          return _vectorNorm(x, p);
        } // MxN matrix


        if (sizeX.length === 2) {
          if (sizeX[0] && sizeX[1]) {
            return _matrixNorm(x, p);
          } else {
            throw new RangeError('Invalid matrix dimensions');
          }
        }
      }
    });

    var name$1x = 'dot';
    var dependencies$1x = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];
    var createDot = /* #__PURE__ */factory(name$1x, dependencies$1x, _ref => {
      var {
        typed,
        addScalar,
        multiplyScalar,
        conj,
        size
      } = _ref;

      /**
       * Calculate the dot product of two vectors. The dot product of
       * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:
       *
       *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn
       *
       * Syntax:
       *
       *    math.dot(x, y)
       *
       * Examples:
       *
       *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
       *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
       *
       * See also:
       *
       *    multiply, cross
       *
       * @param  {Array | Matrix} x     First vector
       * @param  {Array | Matrix} y     Second vector
       * @return {number}               Returns the dot product of `x` and `y`
       */
      return typed(name$1x, {
        'Array | DenseMatrix, Array | DenseMatrix': _denseDot,
        'SparseMatrix, SparseMatrix': _sparseDot
      });

      function _validateDim(x, y) {
        var xSize = _size(x);

        var ySize = _size(y);

        var xLen, yLen;

        if (xSize.length === 1) {
          xLen = xSize[0];
        } else if (xSize.length === 2 && xSize[1] === 1) {
          xLen = xSize[0];
        } else {
          throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');
        }

        if (ySize.length === 1) {
          yLen = ySize[0];
        } else if (ySize.length === 2 && ySize[1] === 1) {
          yLen = ySize[0];
        } else {
          throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');
        }

        if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');
        if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
        return xLen;
      }

      function _denseDot(a, b) {
        var N = _validateDim(a, b);

        var adata = isMatrix(a) ? a._data : a;
        var adt = isMatrix(a) ? a._datatype : undefined;
        var bdata = isMatrix(b) ? b._data : b;
        var bdt = isMatrix(b) ? b._datatype : undefined; // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)

        var aIsColumn = _size(a).length === 2;
        var bIsColumn = _size(b).length === 2;
        var add = addScalar;
        var mul = multiplyScalar; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          var dt = adt; // find signatures that matches (dt, dt)

          add = typed.find(addScalar, [dt, dt]);
          mul = typed.find(multiplyScalar, [dt, dt]);
        } // both vectors 1-dimensional


        if (!aIsColumn && !bIsColumn) {
          var c = mul(conj(adata[0]), bdata[0]);

          for (var i = 1; i < N; i++) {
            c = add(c, mul(conj(adata[i]), bdata[i]));
          }

          return c;
        } // a is 1-dim, b is column


        if (!aIsColumn && bIsColumn) {
          var _c = mul(conj(adata[0]), bdata[0][0]);

          for (var _i = 1; _i < N; _i++) {
            _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));
          }

          return _c;
        } // a is column, b is 1-dim


        if (aIsColumn && !bIsColumn) {
          var _c2 = mul(conj(adata[0][0]), bdata[0]);

          for (var _i2 = 1; _i2 < N; _i2++) {
            _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));
          }

          return _c2;
        } // both vectors are column


        if (aIsColumn && bIsColumn) {
          var _c3 = mul(conj(adata[0][0]), bdata[0][0]);

          for (var _i3 = 1; _i3 < N; _i3++) {
            _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));
          }

          return _c3;
        }
      }

      function _sparseDot(x, y) {
        _validateDim(x, y);

        var xindex = x._index;
        var xvalues = x._values;
        var yindex = y._index;
        var yvalues = y._values; // TODO optimize add & mul using datatype

        var c = 0;
        var add = addScalar;
        var mul = multiplyScalar;
        var i = 0;
        var j = 0;

        while (i < xindex.length && j < yindex.length) {
          var I = xindex[i];
          var J = yindex[j];

          if (I < J) {
            i++;
            continue;
          }

          if (I > J) {
            j++;
            continue;
          }

          if (I === J) {
            c = add(c, mul(xvalues[i], yvalues[j]));
            i++;
            j++;
          }
        }

        return c;
      } // TODO remove this once #1771 is fixed


      function _size(x) {
        return isMatrix(x) ? x.size() : size(x);
      }
    });

    var name$1w = 'trace';
    var dependencies$1w = ['typed', 'matrix', 'add'];
    var createTrace = /* #__PURE__ */factory(name$1w, dependencies$1w, _ref => {
      var {
        typed,
        matrix,
        add
      } = _ref;

      /**
       * Calculate the trace of a matrix: the sum of the elements on the main
       * diagonal of a square matrix.
       *
       * Syntax:
       *
       *    math.trace(x)
       *
       * Examples:
       *
       *    math.trace([[1, 2], [3, 4]]) // returns 5
       *
       *    const A = [
       *      [1, 2, 3],
       *      [-1, 2, 3],
       *      [2, 0, 3]
       *    ]
       *    math.trace(A) // returns 6
       *
       * See also:
       *
       *    diag
       *
       * @param {Array | Matrix} x  A matrix
       *
       * @return {number} The trace of `x`
       */
      return typed('trace', {
        Array: function _arrayTrace(x) {
          // use dense matrix implementation
          return _denseTrace(matrix(x));
        },
        SparseMatrix: _sparseTrace,
        DenseMatrix: _denseTrace,
        any: clone$1
      });

      function _denseTrace(m) {
        // matrix size & data
        var size = m._size;
        var data = m._data; // process dimensions

        switch (size.length) {
          case 1:
            // vector
            if (size[0] === 1) {
              // return data[0]
              return clone$1(data[0]);
            }

            throw new RangeError('Matrix must be square (size: ' + format$1(size) + ')');

          case 2:
            {
              // two dimensional
              var rows = size[0];
              var cols = size[1];

              if (rows === cols) {
                // calulate sum
                var sum = 0; // loop diagonal

                for (var i = 0; i < rows; i++) {
                  sum = add(sum, data[i][i]);
                } // return trace


                return sum;
              } else {
                throw new RangeError('Matrix must be square (size: ' + format$1(size) + ')');
              }
            }

          default:
            // multi dimensional
            throw new RangeError('Matrix must be two dimensional (size: ' + format$1(size) + ')');
        }
      }

      function _sparseTrace(m) {
        // matrix arrays
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr;
        var size = m._size; // check dimensions

        var rows = size[0];
        var columns = size[1]; // matrix must be square

        if (rows === columns) {
          // calulate sum
          var sum = 0; // check we have data (avoid looping columns)

          if (values.length > 0) {
            // loop columns
            for (var j = 0; j < columns; j++) {
              // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
              var k0 = ptr[j];
              var k1 = ptr[j + 1]; // loop k within [k0, k1[

              for (var k = k0; k < k1; k++) {
                // row index
                var i = index[k]; // check row

                if (i === j) {
                  // accumulate value
                  sum = add(sum, values[k]); // exit loop

                  break;
                }

                if (i > j) {
                  // exit loop, no value on the diagonal for column j
                  break;
                }
              }
            }
          } // return trace


          return sum;
        }

        throw new RangeError('Matrix must be square (size: ' + format$1(size) + ')');
      }
    });

    var name$1v = 'index';
    var dependencies$1v = ['typed', 'Index'];
    var createIndex = /* #__PURE__ */factory(name$1v, dependencies$1v, _ref => {
      var {
        typed,
        Index
      } = _ref;

      /**
       * Create an index. An Index can store ranges having start, step, and end
       * for multiple dimensions.
       * Matrix.get, Matrix.set, and math.subset accept an Index as input.
       *
       * Syntax:
       *
       *     math.index(range1, range2, ...)
       *
       * Where each range can be any of:
       *
       * - A number
       * - A string for getting/setting an object property
       * - An instance of `Range`
       * - A one-dimensional Array or a Matrix with numbers
       *
       * Indexes must be zero-based, integer numbers.
       *
       * Examples:
       *
       *    const b = [1, 2, 3, 4, 5]
       *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]
       *
       *    const a = math.matrix([[1, 2], [3, 4]])
       *    a.subset(math.index(0, 1))             // returns 2
       *
       * See also:
       *
       *    bignumber, boolean, complex, matrix, number, string, unit
       *
       * @param {...*} ranges   Zero or more ranges or numbers.
       * @return {Index}        Returns the created index
       */
      return typed(name$1v, {
        '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {
          var ranges = args.map(function (arg) {
            if (isBigNumber(arg)) {
              return arg.toNumber(); // convert BigNumber to Number
            } else if (Array.isArray(arg) || isMatrix(arg)) {
              return arg.map(function (elem) {
                // convert BigNumber to Number
                return isBigNumber(elem) ? elem.toNumber() : elem;
              });
            } else {
              return arg;
            }
          });
          var res = new Index();
          Index.apply(res, ranges);
          return res;
        }
      });
    });

    // Reserved keywords not allowed to use in the parser
    var keywords = new Set(['end']);

    var name$1u = 'Node';
    var dependencies$1u = ['mathWithTransform'];
    var createNode = /* #__PURE__ */factory(name$1u, dependencies$1u, _ref => {
      var {
        mathWithTransform
      } = _ref;

      /**
       * Node
       */
      function Node() {
        if (!(this instanceof Node)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }
      }
      /**
       * Evaluate the node
       * @param {Object} [scope]  Scope to read/write variables
       * @return {*}              Returns the result
       */


      Node.prototype.evaluate = function (scope) {
        return this.compile().evaluate(scope);
      };

      Node.prototype.type = 'Node';
      Node.prototype.isNode = true;
      Node.prototype.comment = '';
      /**
       * Compile the node into an optimized, evauatable JavaScript function
       * @return {{evaluate: function([Object])}} object
       *                Returns an object with a function 'evaluate',
       *                which can be invoked as expr.evaluate([scope: Object]),
       *                where scope is an optional object with
       *                variables.
       */

      Node.prototype.compile = function () {
        var expr = this._compile(mathWithTransform, {});

        var args = {};
        var context = null;

        function evaluate(scope) {
          var s = createMap$1(scope);

          _validateScope(s);

          return expr(s, args, context);
        }

        return {
          evaluate
        };
      };
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */


      Node.prototype._compile = function (math, argNames) {
        throw new Error('Method _compile should be implemented by type ' + this.type);
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      Node.prototype.forEach = function (callback) {
        // must be implemented by each of the Node implementations
        throw new Error('Cannot run forEach on a Node interface');
      };
      /**
       * Create a new Node having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {OperatorNode} Returns a transformed copy of the node
       */


      Node.prototype.map = function (callback) {
        // must be implemented by each of the Node implementations
        throw new Error('Cannot run map on a Node interface');
      };
      /**
       * Validate whether an object is a Node, for use with map
       * @param {Node} node
       * @returns {Node} Returns the input if it's a node, else throws an Error
       * @protected
       */


      Node.prototype._ifNode = function (node) {
        if (!isNode(node)) {
          throw new TypeError('Callback function must return a Node');
        }

        return node;
      };
      /**
       * Recursively traverse all nodes in a node tree. Executes given callback for
       * this node and each of its child nodes.
       * @param {function(node: Node, path: string, parent: Node)} callback
       *          A callback called for every node in the node tree.
       */


      Node.prototype.traverse = function (callback) {
        // execute callback for itself
        // eslint-disable-next-line
        callback(this, null, null); // recursively traverse over all childs of a node

        function _traverse(node, callback) {
          node.forEach(function (child, path, parent) {
            callback(child, path, parent);

            _traverse(child, callback);
          });
        }

        _traverse(this, callback);
      };
      /**
       * Recursively transform a node tree via a transform function.
       *
       * For example, to replace all nodes of type SymbolNode having name 'x' with a
       * ConstantNode with value 2:
       *
       *     const res = Node.transform(function (node, path, parent) {
       *       if (node && node.isSymbolNode) && (node.name === 'x')) {
       *         return new ConstantNode(2)
       *       }
       *       else {
       *         return node
       *       }
       *     })
       *
       * @param {function(node: Node, path: string, parent: Node) : Node} callback
       *          A mapping function accepting a node, and returning
       *          a replacement for the node or the original node.
       *          Signature: callback(node: Node, index: string, parent: Node) : Node
       * @return {Node} Returns the original node or its replacement
       */


      Node.prototype.transform = function (callback) {
        function _transform(child, path, parent) {
          var replacement = callback(child, path, parent);

          if (replacement !== child) {
            // stop iterating when the node is replaced
            return replacement;
          }

          return child.map(_transform);
        }

        return _transform(this, null, null);
      };
      /**
       * Find any node in the node tree matching given filter function. For example, to
       * find all nodes of type SymbolNode having name 'x':
       *
       *     const results = Node.filter(function (node) {
       *       return (node && node.isSymbolNode) && (node.name === 'x')
       *     })
       *
       * @param {function(node: Node, path: string, parent: Node) : Node} callback
       *            A test function returning true when a node matches, and false
       *            otherwise. Function signature:
       *            callback(node: Node, index: string, parent: Node) : boolean
       * @return {Node[]} nodes       An array with nodes matching given filter criteria
       */


      Node.prototype.filter = function (callback) {
        var nodes = [];
        this.traverse(function (node, path, parent) {
          if (callback(node, path, parent)) {
            nodes.push(node);
          }
        });
        return nodes;
      };
      /**
       * Create a shallow clone of this node
       * @return {Node}
       */


      Node.prototype.clone = function () {
        // must be implemented by each of the Node implementations
        throw new Error('Cannot clone a Node interface');
      };
      /**
       * Create a deep clone of this node
       * @return {Node}
       */


      Node.prototype.cloneDeep = function () {
        return this.map(function (node) {
          return node.cloneDeep();
        });
      };
      /**
       * Deep compare this node with another node.
       * @param {Node} other
       * @return {boolean} Returns true when both nodes are of the same type and
       *                   contain the same values (as do their childs)
       */


      Node.prototype.equals = function (other) {
        return other ? deepStrictEqual(this, other) : false;
      };
      /**
       * Get string representation. (wrapper function)
       *
       * This function can get an object of the following form:
       * {
       *    handler: //This can be a callback function of the form
       *             // "function callback(node, options)"or
       *             // a map that maps function names (used in FunctionNodes)
       *             // to callbacks
       *    parenthesis: "keep" //the parenthesis option (This is optional)
       * }
       *
       * @param {Object} [options]
       * @return {string}
       */


      Node.prototype.toString = function (options) {
        var customString = this._getCustomString(options);

        if (typeof customString !== 'undefined') {
          return customString;
        }

        return this._toString(options);
      };
      /**
       * Get a JSON representation of the node
       * Both .toJSON() and the static .fromJSON(json) should be implemented by all
       * implementations of Node
       * @returns {Object}
       */


      Node.prototype.toJSON = function () {
        throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);
      };
      /**
       * Get HTML representation. (wrapper function)
       *
       * This function can get an object of the following form:
       * {
       *    handler: //This can be a callback function of the form
       *             // "function callback(node, options)" or
       *             // a map that maps function names (used in FunctionNodes)
       *             // to callbacks
       *    parenthesis: "keep" //the parenthesis option (This is optional)
       * }
       *
       * @param {Object} [options]
       * @return {string}
       */


      Node.prototype.toHTML = function (options) {
        var customString = this._getCustomString(options);

        if (typeof customString !== 'undefined') {
          return customString;
        }

        return this.toHTML(options);
      };
      /**
       * Internal function to generate the string output.
       * This has to be implemented by every Node
       *
       * @throws {Error}
       */


      Node.prototype._toString = function () {
        // must be implemented by each of the Node implementations
        throw new Error('_toString not implemented for ' + this.type);
      };
      /**
       * Get LaTeX representation. (wrapper function)
       *
       * This function can get an object of the following form:
       * {
       *    handler: //This can be a callback function of the form
       *             // "function callback(node, options)"or
       *             // a map that maps function names (used in FunctionNodes)
       *             // to callbacks
       *    parenthesis: "keep" //the parenthesis option (This is optional)
       * }
       *
       * @param {Object} [options]
       * @return {string}
       */


      Node.prototype.toTex = function (options) {
        var customString = this._getCustomString(options);

        if (typeof customString !== 'undefined') {
          return customString;
        }

        return this._toTex(options);
      };
      /**
       * Internal function to generate the LaTeX output.
       * This has to be implemented by every Node
       *
       * @param {Object} [options]
       * @throws {Error}
       */


      Node.prototype._toTex = function (options) {
        // must be implemented by each of the Node implementations
        throw new Error('_toTex not implemented for ' + this.type);
      };
      /**
       * Helper used by `to...` functions.
       */


      Node.prototype._getCustomString = function (options) {
        if (options && typeof options === 'object') {
          switch (typeof options.handler) {
            case 'object':
            case 'undefined':
              return;

            case 'function':
              return options.handler(this, options);

            default:
              throw new TypeError('Object or function expected as callback');
          }
        }
      };
      /**
       * Get identifier.
       * @return {string}
       */


      Node.prototype.getIdentifier = function () {
        return this.type;
      };
      /**
       * Get the content of the current Node.
       * @return {Node} node
       **/


      Node.prototype.getContent = function () {
        return this;
      };
      /**
       * Validate the symbol names of a scope.
       * Throws an error when the scope contains an illegal symbol.
       * @param {Object} scope
       */


      function _validateScope(scope) {
        for (var symbol of [...keywords]) {
          if (scope.has(symbol)) {
            throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
          }
        }
      }

      return Node;
    }, {
      isClass: true,
      isNode: true
    });

    /**
     * Transform zero-based indices to one-based indices in errors
     * @param {Error} err
     * @returns {Error | IndexError} Returns the transformed error
     */

    function errorTransform(err) {
      if (err && err.isIndexError) {
        return new IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
      }

      return err;
    }

    function accessFactory(_ref) {
      var {
        subset
      } = _ref;

      /**
       * Retrieve part of an object:
       *
       * - Retrieve a property from an object
       * - Retrieve a part of a string
       * - Retrieve a matrix subset
       *
       * @param {Object | Array | Matrix | string} object
       * @param {Index} index
       * @return {Object | Array | Matrix | string} Returns the subset
       */
      return function access(object, index) {
        try {
          if (Array.isArray(object)) {
            return subset(object, index);
          } else if (object && typeof object.subset === 'function') {
            // Matrix
            return object.subset(index);
          } else if (typeof object === 'string') {
            // TODO: move getStringSubset into a separate util file, use that
            return subset(object, index);
          } else if (typeof object === 'object') {
            if (!index.isObjectProperty()) {
              throw new TypeError('Cannot apply a numeric index as object property');
            }

            return getSafeProperty(object, index.getObjectProperty());
          } else {
            throw new TypeError('Cannot apply index: unsupported type of object');
          }
        } catch (err) {
          throw errorTransform(err);
        }
      };
    }

    var name$1t = 'AccessorNode';
    var dependencies$1t = ['subset', 'Node'];
    var createAccessorNode = /* #__PURE__ */factory(name$1t, dependencies$1t, _ref => {
      var {
        subset,
        Node
      } = _ref;
      var access = accessFactory({
        subset
      });
      /**
       * @constructor AccessorNode
       * @extends {Node}
       * Access an object property or get a matrix subset
       *
       * @param {Node} object                 The object from which to retrieve
       *                                      a property or subset.
       * @param {IndexNode} index             IndexNode containing ranges
       */

      function AccessorNode(object, index) {
        if (!(this instanceof AccessorNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (!isNode(object)) {
          throw new TypeError('Node expected for parameter "object"');
        }

        if (!isIndexNode(index)) {
          throw new TypeError('IndexNode expected for parameter "index"');
        }

        this.object = object || null;
        this.index = index; // readonly property name

        Object.defineProperty(this, 'name', {
          get: function () {
            if (this.index) {
              return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
            } else {
              return this.object.name || '';
            }
          }.bind(this),
          set: function set() {
            throw new Error('Cannot assign a new name, name is read-only');
          }
        });
      }

      AccessorNode.prototype = new Node();
      AccessorNode.prototype.type = 'AccessorNode';
      AccessorNode.prototype.isAccessorNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      AccessorNode.prototype._compile = function (math, argNames) {
        var evalObject = this.object._compile(math, argNames);

        var evalIndex = this.index._compile(math, argNames);

        if (this.index.isObjectProperty()) {
          var prop = this.index.getObjectProperty();
          return function evalAccessorNode(scope, args, context) {
            // get a property from an object evaluated using the scope.
            return getSafeProperty(evalObject(scope, args, context), prop);
          };
        } else {
          return function evalAccessorNode(scope, args, context) {
            var object = evalObject(scope, args, context);
            var index = evalIndex(scope, args, object); // we pass object here instead of context

            return access(object, index);
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      AccessorNode.prototype.forEach = function (callback) {
        callback(this.object, 'object', this);
        callback(this.index, 'index', this);
      };
      /**
       * Create a new AccessorNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {AccessorNode} Returns a transformed copy of the node
       */


      AccessorNode.prototype.map = function (callback) {
        return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {AccessorNode}
       */


      AccessorNode.prototype.clone = function () {
        return new AccessorNode(this.object, this.index);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string}
       */


      AccessorNode.prototype._toString = function (options) {
        var object = this.object.toString(options);

        if (needParenthesis(this.object)) {
          object = '(' + object + ')';
        }

        return object + this.index.toString(options);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string}
       */


      AccessorNode.prototype.toHTML = function (options) {
        var object = this.object.toHTML(options);

        if (needParenthesis(this.object)) {
          object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return object + this.index.toHTML(options);
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string}
       */


      AccessorNode.prototype._toTex = function (options) {
        var object = this.object.toTex(options);

        if (needParenthesis(this.object)) {
          object = '\\left(\' + object + \'\\right)';
        }

        return object + this.index.toTex(options);
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      AccessorNode.prototype.toJSON = function () {
        return {
          mathjs: 'AccessorNode',
          object: this.object,
          index: this.index
        };
      };
      /**
       * Instantiate an AccessorNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "AccessorNode", object: ..., index: ...}`,
       *                       where mathjs is optional
       * @returns {AccessorNode}
       */


      AccessorNode.fromJSON = function (json) {
        return new AccessorNode(json.object, json.index);
      };
      /**
       * Are parenthesis needed?
       * @private
       */


      function needParenthesis(node) {
        // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
        return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));
      }

      return AccessorNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1s = 'ArrayNode';
    var dependencies$1s = ['Node'];
    var createArrayNode = /* #__PURE__ */factory(name$1s, dependencies$1s, _ref => {
      var {
        Node
      } = _ref;

      /**
       * @constructor ArrayNode
       * @extends {Node}
       * Holds an 1-dimensional array with items
       * @param {Node[]} [items]   1 dimensional array with items
       */
      function ArrayNode(items) {
        if (!(this instanceof ArrayNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.items = items || []; // validate input

        if (!Array.isArray(this.items) || !this.items.every(isNode)) {
          throw new TypeError('Array containing Nodes expected');
        }
      }

      ArrayNode.prototype = new Node();
      ArrayNode.prototype.type = 'ArrayNode';
      ArrayNode.prototype.isArrayNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      ArrayNode.prototype._compile = function (math, argNames) {
        var evalItems = map$1(this.items, function (item) {
          return item._compile(math, argNames);
        });
        var asMatrix = math.config.matrix !== 'Array';

        if (asMatrix) {
          var matrix = math.matrix;
          return function evalArrayNode(scope, args, context) {
            return matrix(map$1(evalItems, function (evalItem) {
              return evalItem(scope, args, context);
            }));
          };
        } else {
          return function evalArrayNode(scope, args, context) {
            return map$1(evalItems, function (evalItem) {
              return evalItem(scope, args, context);
            });
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      ArrayNode.prototype.forEach = function (callback) {
        for (var i = 0; i < this.items.length; i++) {
          var node = this.items[i];
          callback(node, 'items[' + i + ']', this);
        }
      };
      /**
       * Create a new ArrayNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {ArrayNode} Returns a transformed copy of the node
       */


      ArrayNode.prototype.map = function (callback) {
        var items = [];

        for (var i = 0; i < this.items.length; i++) {
          items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
        }

        return new ArrayNode(items);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {ArrayNode}
       */


      ArrayNode.prototype.clone = function () {
        return new ArrayNode(this.items.slice(0));
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ArrayNode.prototype._toString = function (options) {
        var items = this.items.map(function (node) {
          return node.toString(options);
        });
        return '[' + items.join(', ') + ']';
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      ArrayNode.prototype.toJSON = function () {
        return {
          mathjs: 'ArrayNode',
          items: this.items
        };
      };
      /**
       * Instantiate an ArrayNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "ArrayNode", items: [...]}`,
       *                       where mathjs is optional
       * @returns {ArrayNode}
       */


      ArrayNode.fromJSON = function (json) {
        return new ArrayNode(json.items);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ArrayNode.prototype.toHTML = function (options) {
        var items = this.items.map(function (node) {
          return node.toHTML(options);
        });
        return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      ArrayNode.prototype._toTex = function (options) {
        function itemsToTex(items, nested) {
          var mixedItems = items.some(isArrayNode) && !items.every(isArrayNode);
          var itemsFormRow = nested || mixedItems;
          var itemSep = itemsFormRow ? '&' : '\\\\';
          var itemsTex = items.map(function (node) {
            if (node.items) {
              return itemsToTex(node.items, !nested);
            } else {
              return node.toTex(options);
            }
          }).join(itemSep);
          return mixedItems || !itemsFormRow || itemsFormRow && !nested ? '\\begin{bmatrix}' + itemsTex + '\\end{bmatrix}' : itemsTex;
        }

        return itemsToTex(this.items, false);
      };

      return ArrayNode;
    }, {
      isClass: true,
      isNode: true
    });

    function assignFactory(_ref) {
      var {
        subset,
        matrix
      } = _ref;

      /**
       * Replace part of an object:
       *
       * - Assign a property to an object
       * - Replace a part of a string
       * - Replace a matrix subset
       *
       * @param {Object | Array | Matrix | string} object
       * @param {Index} index
       * @param {*} value
       * @return {Object | Array | Matrix | string} Returns the original object
       *                                            except in case of a string
       */
      // TODO: change assign to return the value instead of the object
      return function assign(object, index, value) {
        try {
          if (Array.isArray(object)) {
            // we use matrix.subset here instead of the function subset because we must not clone the contents
            return matrix(object).subset(index, value).valueOf();
          } else if (object && typeof object.subset === 'function') {
            // Matrix
            return object.subset(index, value);
          } else if (typeof object === 'string') {
            // TODO: move setStringSubset into a separate util file, use that
            return subset(object, index, value);
          } else if (typeof object === 'object') {
            if (!index.isObjectProperty()) {
              throw TypeError('Cannot apply a numeric index as object property');
            }

            setSafeProperty(object, index.getObjectProperty(), value);
            return object;
          } else {
            throw new TypeError('Cannot apply index: unsupported type of object');
          }
        } catch (err) {
          throw errorTransform(err);
        }
      };
    }

    // list of identifiers of nodes in order of their precedence
    var properties = [{
      // assignment
      AssignmentNode: {},
      FunctionAssignmentNode: {}
    }, {
      // conditional expression
      ConditionalNode: {
        latexLeftParens: false,
        latexRightParens: false,
        latexParens: false // conditionals don't need parentheses in LaTeX because
        // they are 2 dimensional

      }
    }, {
      // logical or
      'OperatorNode:or': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // logical xor
      'OperatorNode:xor': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // logical and
      'OperatorNode:and': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // bitwise or
      'OperatorNode:bitOr': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // bitwise xor
      'OperatorNode:bitXor': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // bitwise and
      'OperatorNode:bitAnd': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // relational operators
      'OperatorNode:equal': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:unequal': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:smaller': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:larger': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:smallerEq': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:largerEq': {
        associativity: 'left',
        associativeWith: []
      },
      RelationalNode: {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // bitshift operators
      'OperatorNode:leftShift': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:rightArithShift': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:rightLogShift': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // unit conversion
      'OperatorNode:to': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // range
      RangeNode: {}
    }, {
      // addition, subtraction
      'OperatorNode:add': {
        associativity: 'left',
        associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
      },
      'OperatorNode:subtract': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // multiply, divide, modulus
      'OperatorNode:multiply': {
        associativity: 'left',
        associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']
      },
      'OperatorNode:divide': {
        associativity: 'left',
        associativeWith: [],
        latexLeftParens: false,
        latexRightParens: false,
        latexParens: false // fractions don't require parentheses because
        // they're 2 dimensional, so parens aren't needed
        // in LaTeX

      },
      'OperatorNode:dotMultiply': {
        associativity: 'left',
        associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']
      },
      'OperatorNode:dotDivide': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:mod': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // unary prefix operators
      'OperatorNode:unaryPlus': {
        associativity: 'right'
      },
      'OperatorNode:unaryMinus': {
        associativity: 'right'
      },
      'OperatorNode:bitNot': {
        associativity: 'right'
      },
      'OperatorNode:not': {
        associativity: 'right'
      }
    }, {
      // exponentiation
      'OperatorNode:pow': {
        associativity: 'right',
        associativeWith: [],
        latexRightParens: false // the exponent doesn't need parentheses in
        // LaTeX because it's 2 dimensional
        // (it's on top)

      },
      'OperatorNode:dotPow': {
        associativity: 'right',
        associativeWith: []
      }
    }, {
      // factorial
      'OperatorNode:factorial': {
        associativity: 'left'
      }
    }, {
      // matrix transpose
      'OperatorNode:transpose': {
        associativity: 'left'
      }
    }];
    /**
     * Get the precedence of a Node.
     * Higher number for higher precedence, starting with 0.
     * Returns null if the precedence is undefined.
     *
     * @param {Node} _node
     * @param {string} parenthesis
     * @return {number | null}
     */

    function getPrecedence(_node, parenthesis) {
      var node = _node;

      if (parenthesis !== 'keep') {
        // ParenthesisNodes are only ignored when not in 'keep' mode
        node = _node.getContent();
      }

      var identifier = node.getIdentifier();

      for (var i = 0; i < properties.length; i++) {
        if (identifier in properties[i]) {
          return i;
        }
      }

      return null;
    }
    /**
     * Get the associativity of an operator (left or right).
     * Returns a string containing 'left' or 'right' or null if
     * the associativity is not defined.
     *
     * @param {Node} _node
     * @param {string} parenthesis
     * @return {string|null}
     * @throws {Error}
     */

    function getAssociativity(_node, parenthesis) {
      var node = _node;

      if (parenthesis !== 'keep') {
        // ParenthesisNodes are only ignored when not in 'keep' mode
        node = _node.getContent();
      }

      var identifier = node.getIdentifier();
      var index = getPrecedence(node, parenthesis);

      if (index === null) {
        // node isn't in the list
        return null;
      }

      var property = properties[index][identifier];

      if (hasOwnProperty$1(property, 'associativity')) {
        if (property.associativity === 'left') {
          return 'left';
        }

        if (property.associativity === 'right') {
          return 'right';
        } // associativity is invalid


        throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
      } // associativity is undefined


      return null;
    }
    /**
     * Check if an operator is associative with another operator.
     * Returns either true or false or null if not defined.
     *
     * @param {Node} nodeA
     * @param {Node} nodeB
     * @param {string} parenthesis
     * @return {boolean | null}
     */

    function isAssociativeWith(nodeA, nodeB, parenthesis) {
      // ParenthesisNodes are only ignored when not in 'keep' mode
      var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;
      var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;
      var identifierA = a.getIdentifier();
      var identifierB = b.getIdentifier();
      var index = getPrecedence(a, parenthesis);

      if (index === null) {
        // node isn't in the list
        return null;
      }

      var property = properties[index][identifierA];

      if (hasOwnProperty$1(property, 'associativeWith') && property.associativeWith instanceof Array) {
        for (var i = 0; i < property.associativeWith.length; i++) {
          if (property.associativeWith[i] === identifierB) {
            return true;
          }
        }

        return false;
      } // associativeWith is not defined


      return null;
    }

    var name$1r = 'AssignmentNode';
    var dependencies$1r = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset
    'Node'];
    var createAssignmentNode = /* #__PURE__ */factory(name$1r, dependencies$1r, _ref => {
      var {
        subset,
        matrix,
        Node
      } = _ref;
      var access = accessFactory({
        subset
      });
      var assign = assignFactory({
        subset,
        matrix
      });
      /**
       * @constructor AssignmentNode
       * @extends {Node}
       *
       * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
       * replace a subset of a matrix like `A[2,2]=42`.
       *
       * Syntax:
       *
       *     new AssignmentNode(symbol, value)
       *     new AssignmentNode(object, index, value)
       *
       * Usage:
       *
       *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2
       *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
       *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
       *
       * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
       * @param {IndexNode} [index=null]            Index, property name or matrix
       *                                            index. Optional. If not provided
       *                                            and `object` is a SymbolNode,
       *                                            the property is assigned to the
       *                                            global scope.
       * @param {Node} value                        The value to be assigned
       */

      function AssignmentNode(object, index, value) {
        if (!(this instanceof AssignmentNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.object = object;
        this.index = value ? index : null;
        this.value = value || index; // validate input

        if (!isSymbolNode(object) && !isAccessorNode(object)) {
          throw new TypeError('SymbolNode or AccessorNode expected as "object"');
        }

        if (isSymbolNode(object) && object.name === 'end') {
          throw new Error('Cannot assign to symbol "end"');
        }

        if (this.index && !isIndexNode(this.index)) {
          // index is optional
          throw new TypeError('IndexNode expected as "index"');
        }

        if (!isNode(this.value)) {
          throw new TypeError('Node expected as "value"');
        } // readonly property name


        Object.defineProperty(this, 'name', {
          get: function () {
            if (this.index) {
              return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
            } else {
              return this.object.name || '';
            }
          }.bind(this),
          set: function set() {
            throw new Error('Cannot assign a new name, name is read-only');
          }
        });
      }

      AssignmentNode.prototype = new Node();
      AssignmentNode.prototype.type = 'AssignmentNode';
      AssignmentNode.prototype.isAssignmentNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      AssignmentNode.prototype._compile = function (math, argNames) {
        var evalObject = this.object._compile(math, argNames);

        var evalIndex = this.index ? this.index._compile(math, argNames) : null;

        var evalValue = this.value._compile(math, argNames);

        var name = this.object.name;

        if (!this.index) {
          // apply a variable to the scope, for example `a=2`
          if (!isSymbolNode(this.object)) {
            throw new TypeError('SymbolNode expected as object');
          }

          return function evalAssignmentNode(scope, args, context) {
            var value = evalValue(scope, args, context);
            scope.set(name, value);
            return value;
          };
        } else if (this.index.isObjectProperty()) {
          // apply an object property for example `a.b=2`
          var prop = this.index.getObjectProperty();
          return function evalAssignmentNode(scope, args, context) {
            var object = evalObject(scope, args, context);
            var value = evalValue(scope, args, context);
            setSafeProperty(object, prop, value);
            return value;
          };
        } else if (isSymbolNode(this.object)) {
          // update a matrix subset, for example `a[2]=3`
          return function evalAssignmentNode(scope, args, context) {
            var childObject = evalObject(scope, args, context);
            var value = evalValue(scope, args, context);
            var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

            scope.set(name, assign(childObject, index, value));
            return value;
          };
        } else {
          // isAccessorNode(node.object) === true
          // update a matrix subset, for example `a.b[2]=3`
          // we will not use the compile function of the AccessorNode, but compile it
          // ourselves here as we need the parent object of the AccessorNode:
          // wee need to apply the updated object to parent object
          var evalParentObject = this.object.object._compile(math, argNames);

          if (this.object.index.isObjectProperty()) {
            var parentProp = this.object.index.getObjectProperty();
            return function evalAssignmentNode(scope, args, context) {
              var parent = evalParentObject(scope, args, context);
              var childObject = getSafeProperty(parent, parentProp);
              var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context

              var value = evalValue(scope, args, context);
              setSafeProperty(parent, parentProp, assign(childObject, index, value));
              return value;
            };
          } else {
            // if some parameters use the 'end' parameter, we need to calculate the size
            var evalParentIndex = this.object.index._compile(math, argNames);

            return function evalAssignmentNode(scope, args, context) {
              var parent = evalParentObject(scope, args, context);
              var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context

              var childObject = access(parent, parentIndex);
              var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

              var value = evalValue(scope, args, context);
              assign(parent, parentIndex, assign(childObject, index, value));
              return value;
            };
          }
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      AssignmentNode.prototype.forEach = function (callback) {
        callback(this.object, 'object', this);

        if (this.index) {
          callback(this.index, 'index', this);
        }

        callback(this.value, 'value', this);
      };
      /**
       * Create a new AssignmentNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {AssignmentNode} Returns a transformed copy of the node
       */


      AssignmentNode.prototype.map = function (callback) {
        var object = this._ifNode(callback(this.object, 'object', this));

        var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;

        var value = this._ifNode(callback(this.value, 'value', this));

        return new AssignmentNode(object, index, value);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {AssignmentNode}
       */


      AssignmentNode.prototype.clone = function () {
        return new AssignmentNode(this.object, this.index, this.value);
      };
      /*
       * Is parenthesis needed?
       * @param {node} node
       * @param {string} [parenthesis='keep']
       * @private
       */


      function needParenthesis(node, parenthesis) {
        if (!parenthesis) {
          parenthesis = 'keep';
        }

        var precedence = getPrecedence(node, parenthesis);
        var exprPrecedence = getPrecedence(node.value, parenthesis);
        return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
      }
      /**
       * Get string representation
       * @param {Object} options
       * @return {string}
       */


      AssignmentNode.prototype._toString = function (options) {
        var object = this.object.toString(options);
        var index = this.index ? this.index.toString(options) : '';
        var value = this.value.toString(options);

        if (needParenthesis(this, options && options.parenthesis)) {
          value = '(' + value + ')';
        }

        return object + index + ' = ' + value;
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      AssignmentNode.prototype.toJSON = function () {
        return {
          mathjs: 'AssignmentNode',
          object: this.object,
          index: this.index,
          value: this.value
        };
      };
      /**
       * Instantiate an AssignmentNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
       *                       where mathjs is optional
       * @returns {AssignmentNode}
       */


      AssignmentNode.fromJSON = function (json) {
        return new AssignmentNode(json.object, json.index, json.value);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string}
       */


      AssignmentNode.prototype.toHTML = function (options) {
        var object = this.object.toHTML(options);
        var index = this.index ? this.index.toHTML(options) : '';
        var value = this.value.toHTML(options);

        if (needParenthesis(this, options && options.parenthesis)) {
          value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
        }

        return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string}
       */


      AssignmentNode.prototype._toTex = function (options) {
        var object = this.object.toTex(options);
        var index = this.index ? this.index.toTex(options) : '';
        var value = this.value.toTex(options);

        if (needParenthesis(this, options && options.parenthesis)) {
          value = "\\left(".concat(value, "\\right)");
        }

        return object + index + ':=' + value;
      };

      return AssignmentNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1q = 'BlockNode';
    var dependencies$1q = ['ResultSet', 'Node'];
    var createBlockNode = /* #__PURE__ */factory(name$1q, dependencies$1q, _ref => {
      var {
        ResultSet,
        Node
      } = _ref;

      /**
       * @constructor BlockNode
       * @extends {Node}
       * Holds a set with blocks
       * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
       *            An array with blocks, where a block is constructed as an Object
       *            with properties block, which is a Node, and visible, which is
       *            a boolean. The property visible is optional and is true by default
       */
      function BlockNode(blocks) {
        if (!(this instanceof BlockNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate input, copy blocks


        if (!Array.isArray(blocks)) throw new Error('Array expected');
        this.blocks = blocks.map(function (block) {
          var node = block && block.node;
          var visible = block && block.visible !== undefined ? block.visible : true;
          if (!isNode(node)) throw new TypeError('Property "node" must be a Node');
          if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');
          return {
            node,
            visible
          };
        });
      }

      BlockNode.prototype = new Node();
      BlockNode.prototype.type = 'BlockNode';
      BlockNode.prototype.isBlockNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      BlockNode.prototype._compile = function (math, argNames) {
        var evalBlocks = map$1(this.blocks, function (block) {
          return {
            evaluate: block.node._compile(math, argNames),
            visible: block.visible
          };
        });
        return function evalBlockNodes(scope, args, context) {
          var results = [];
          forEach$1(evalBlocks, function evalBlockNode(block) {
            var result = block.evaluate(scope, args, context);

            if (block.visible) {
              results.push(result);
            }
          });
          return new ResultSet(results);
        };
      };
      /**
       * Execute a callback for each of the child blocks of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      BlockNode.prototype.forEach = function (callback) {
        for (var i = 0; i < this.blocks.length; i++) {
          callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
        }
      };
      /**
       * Create a new BlockNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {BlockNode} Returns a transformed copy of the node
       */


      BlockNode.prototype.map = function (callback) {
        var blocks = [];

        for (var i = 0; i < this.blocks.length; i++) {
          var block = this.blocks[i];

          var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));

          blocks[i] = {
            node,
            visible: block.visible
          };
        }

        return new BlockNode(blocks);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {BlockNode}
       */


      BlockNode.prototype.clone = function () {
        var blocks = this.blocks.map(function (block) {
          return {
            node: block.node,
            visible: block.visible
          };
        });
        return new BlockNode(blocks);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      BlockNode.prototype._toString = function (options) {
        return this.blocks.map(function (param) {
          return param.node.toString(options) + (param.visible ? '' : ';');
        }).join('\n');
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      BlockNode.prototype.toJSON = function () {
        return {
          mathjs: 'BlockNode',
          blocks: this.blocks
        };
      };
      /**
       * Instantiate an BlockNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
       *                       where mathjs is optional
       * @returns {BlockNode}
       */


      BlockNode.fromJSON = function (json) {
        return new BlockNode(json.blocks);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      BlockNode.prototype.toHTML = function (options) {
        return this.blocks.map(function (param) {
          return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
        }).join('<span class="math-separator"><br /></span>');
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      BlockNode.prototype._toTex = function (options) {
        return this.blocks.map(function (param) {
          return param.node.toTex(options) + (param.visible ? '' : ';');
        }).join('\\;\\;\n');
      };

      return BlockNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1p = 'ConditionalNode';
    var dependencies$1p = ['Node'];
    var createConditionalNode = /* #__PURE__ */factory(name$1p, dependencies$1p, _ref => {
      var {
        Node
      } = _ref;

      /**
       * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
       *
       * @param {Node} condition   Condition, must result in a boolean
       * @param {Node} trueExpr    Expression evaluated when condition is true
       * @param {Node} falseExpr   Expression evaluated when condition is true
       *
       * @constructor ConditionalNode
       * @extends {Node}
       */
      function ConditionalNode(condition, trueExpr, falseExpr) {
        if (!(this instanceof ConditionalNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (!isNode(condition)) throw new TypeError('Parameter condition must be a Node');
        if (!isNode(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');
        if (!isNode(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');
        this.condition = condition;
        this.trueExpr = trueExpr;
        this.falseExpr = falseExpr;
      }

      ConditionalNode.prototype = new Node();
      ConditionalNode.prototype.type = 'ConditionalNode';
      ConditionalNode.prototype.isConditionalNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      ConditionalNode.prototype._compile = function (math, argNames) {
        var evalCondition = this.condition._compile(math, argNames);

        var evalTrueExpr = this.trueExpr._compile(math, argNames);

        var evalFalseExpr = this.falseExpr._compile(math, argNames);

        return function evalConditionalNode(scope, args, context) {
          return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      ConditionalNode.prototype.forEach = function (callback) {
        callback(this.condition, 'condition', this);
        callback(this.trueExpr, 'trueExpr', this);
        callback(this.falseExpr, 'falseExpr', this);
      };
      /**
       * Create a new ConditionalNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {ConditionalNode} Returns a transformed copy of the node
       */


      ConditionalNode.prototype.map = function (callback) {
        return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {ConditionalNode}
       */


      ConditionalNode.prototype.clone = function () {
        return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       */


      ConditionalNode.prototype._toString = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
        // or have lower or equal precedence
        // NOTE: enclosing all OperatorNodes in parentheses is a decision
        // purely based on aesthetics and readability

        var condition = this.condition.toString(options);
        var conditionPrecedence = getPrecedence(this.condition, parenthesis);

        if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
          condition = '(' + condition + ')';
        }

        var trueExpr = this.trueExpr.toString(options);
        var truePrecedence = getPrecedence(this.trueExpr, parenthesis);

        if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
          trueExpr = '(' + trueExpr + ')';
        }

        var falseExpr = this.falseExpr.toString(options);
        var falsePrecedence = getPrecedence(this.falseExpr, parenthesis);

        if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
          falseExpr = '(' + falseExpr + ')';
        }

        return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      ConditionalNode.prototype.toJSON = function () {
        return {
          mathjs: 'ConditionalNode',
          condition: this.condition,
          trueExpr: this.trueExpr,
          falseExpr: this.falseExpr
        };
      };
      /**
       * Instantiate an ConditionalNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "ConditionalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
       *                       where mathjs is optional
       * @returns {ConditionalNode}
       */


      ConditionalNode.fromJSON = function (json) {
        return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      ConditionalNode.prototype.toHTML = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
        // or have lower or equal precedence
        // NOTE: enclosing all OperatorNodes in parentheses is a decision
        // purely based on aesthetics and readability

        var condition = this.condition.toHTML(options);
        var conditionPrecedence = getPrecedence(this.condition, parenthesis);

        if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
          condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        var trueExpr = this.trueExpr.toHTML(options);
        var truePrecedence = getPrecedence(this.trueExpr, parenthesis);

        if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
          trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        var falseExpr = this.falseExpr.toHTML(options);
        var falsePrecedence = getPrecedence(this.falseExpr, parenthesis);

        if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
          falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      ConditionalNode.prototype._toTex = function (options) {
        return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
      };
      /**
       * Test whether a condition is met
       * @param {*} condition
       * @returns {boolean} true if condition is true or non-zero, else false
       */


      function testCondition(condition) {
        if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
          return !!condition;
        }

        if (condition) {
          if (isBigNumber(condition)) {
            return !condition.isZero();
          }

          if (isComplex(condition)) {
            return !!(condition.re || condition.im);
          }

          if (isUnit(condition)) {
            return !!condition.value;
          }
        }

        if (condition === null || condition === undefined) {
          return false;
        }

        throw new TypeError('Unsupported type of condition "' + typeOf$1(condition) + '"');
      }

      return ConditionalNode;
    }, {
      isClass: true,
      isNode: true
    });

    // Map the characters to escape to their escaped values. The list is derived
    // from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var defaultEscapes = {
      "{": "\\{",
      "}": "\\}",
      "\\": "\\textbackslash{}",
      "#": "\\#",
      $: "\\$",
      "%": "\\%",
      "&": "\\&",
      "^": "\\textasciicircum{}",
      _: "\\_",
      "~": "\\textasciitilde{}"
    };
    var formatEscapes = {
      "\u2013": "\\--",
      "\u2014": "\\---",
      " ": "~",
      "\t": "\\qquad{}",
      "\r\n": "\\newline{}",
      "\n": "\\newline{}"
    };

    var defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {
      return _extends({}, defaultEscapes, formatEscapes);
    };

    /**
     * Escape a string to be used in LaTeX documents.
     * @param {string} str the string to be escaped.
     * @param {boolean} params.preserveFormatting whether formatting escapes should
     *  be performed (default: false).
     * @param {function} params.escapeMapFn the function to modify the escape maps.
     * @return {string} the escaped string, ready to be used in LaTeX.
     */
    var dist$1 = function (str) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$preserveFormatti = _ref.preserveFormatting,
          preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,
          _ref$escapeMapFn = _ref.escapeMapFn,
          escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;

      var runningStr = String(str);
      var result = "";

      var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});
      var escapeKeys = Object.keys(escapes); // as it is reused later on

      // Algorithm: Go through the string character by character, if it matches
      // with one of the special characters then we'll replace it with the escaped
      // version.

      var _loop = function _loop() {
        var specialCharFound = false;
        escapeKeys.forEach(function (key, index) {
          if (specialCharFound) {
            return;
          }
          if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {
            result += escapes[escapeKeys[index]];
            runningStr = runningStr.slice(key.length, runningStr.length);
            specialCharFound = true;
          }
        });
        if (!specialCharFound) {
          result += runningStr.slice(0, 1);
          runningStr = runningStr.slice(1, runningStr.length);
        }
      };

      while (runningStr) {
        _loop();
      }
      return result;
    };

    var escapeLatexLib = dist$1;

    /* eslint no-template-curly-in-string: "off" */
    var latexSymbols = {
      // GREEK LETTERS
      Alpha: 'A',
      alpha: '\\alpha',
      Beta: 'B',
      beta: '\\beta',
      Gamma: '\\Gamma',
      gamma: '\\gamma',
      Delta: '\\Delta',
      delta: '\\delta',
      Epsilon: 'E',
      epsilon: '\\epsilon',
      varepsilon: '\\varepsilon',
      Zeta: 'Z',
      zeta: '\\zeta',
      Eta: 'H',
      eta: '\\eta',
      Theta: '\\Theta',
      theta: '\\theta',
      vartheta: '\\vartheta',
      Iota: 'I',
      iota: '\\iota',
      Kappa: 'K',
      kappa: '\\kappa',
      varkappa: '\\varkappa',
      Lambda: '\\Lambda',
      lambda: '\\lambda',
      Mu: 'M',
      mu: '\\mu',
      Nu: 'N',
      nu: '\\nu',
      Xi: '\\Xi',
      xi: '\\xi',
      Omicron: 'O',
      omicron: 'o',
      Pi: '\\Pi',
      pi: '\\pi',
      varpi: '\\varpi',
      Rho: 'P',
      rho: '\\rho',
      varrho: '\\varrho',
      Sigma: '\\Sigma',
      sigma: '\\sigma',
      varsigma: '\\varsigma',
      Tau: 'T',
      tau: '\\tau',
      Upsilon: '\\Upsilon',
      upsilon: '\\upsilon',
      Phi: '\\Phi',
      phi: '\\phi',
      varphi: '\\varphi',
      Chi: 'X',
      chi: '\\chi',
      Psi: '\\Psi',
      psi: '\\psi',
      Omega: '\\Omega',
      omega: '\\omega',
      // logic
      true: '\\mathrm{True}',
      false: '\\mathrm{False}',
      // other
      i: 'i',
      // TODO use \i ??
      inf: '\\infty',
      Inf: '\\infty',
      infinity: '\\infty',
      Infinity: '\\infty',
      oo: '\\infty',
      lim: '\\lim',
      undefined: '\\mathbf{?}'
    };
    var latexOperators = {
      transpose: '^\\top',
      ctranspose: '^H',
      factorial: '!',
      pow: '^',
      dotPow: '.^\\wedge',
      // TODO find ideal solution
      unaryPlus: '+',
      unaryMinus: '-',
      bitNot: '\\~',
      // TODO find ideal solution
      not: '\\neg',
      multiply: '\\cdot',
      divide: '\\frac',
      // TODO how to handle that properly?
      dotMultiply: '.\\cdot',
      // TODO find ideal solution
      dotDivide: '.:',
      // TODO find ideal solution
      mod: '\\mod',
      add: '+',
      subtract: '-',
      to: '\\rightarrow',
      leftShift: '<<',
      rightArithShift: '>>',
      rightLogShift: '>>>',
      equal: '=',
      unequal: '\\neq',
      smaller: '<',
      larger: '>',
      smallerEq: '\\leq',
      largerEq: '\\geq',
      bitAnd: '\\&',
      bitXor: '\\underline{|}',
      bitOr: '|',
      and: '\\wedge',
      xor: '\\veebar',
      or: '\\vee'
    };
    var latexFunctions = {
      // arithmetic
      abs: {
        1: '\\left|${args[0]}\\right|'
      },
      add: {
        2: "\\left(${args[0]}".concat(latexOperators.add, "${args[1]}\\right)")
      },
      cbrt: {
        1: '\\sqrt[3]{${args[0]}}'
      },
      ceil: {
        1: '\\left\\lceil${args[0]}\\right\\rceil'
      },
      cube: {
        1: '\\left(${args[0]}\\right)^3'
      },
      divide: {
        2: '\\frac{${args[0]}}{${args[1]}}'
      },
      dotDivide: {
        2: "\\left(${args[0]}".concat(latexOperators.dotDivide, "${args[1]}\\right)")
      },
      dotMultiply: {
        2: "\\left(${args[0]}".concat(latexOperators.dotMultiply, "${args[1]}\\right)")
      },
      dotPow: {
        2: "\\left(${args[0]}".concat(latexOperators.dotPow, "${args[1]}\\right)")
      },
      exp: {
        1: '\\exp\\left(${args[0]}\\right)'
      },
      expm1: "\\left(e".concat(latexOperators.pow, "{${args[0]}}-1\\right)"),
      fix: {
        1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
      },
      floor: {
        1: '\\left\\lfloor${args[0]}\\right\\rfloor'
      },
      gcd: '\\gcd\\left(${args}\\right)',
      hypot: '\\hypot\\left(${args}\\right)',
      log: {
        1: '\\ln\\left(${args[0]}\\right)',
        2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
      },
      log10: {
        1: '\\log_{10}\\left(${args[0]}\\right)'
      },
      log1p: {
        1: '\\ln\\left(${args[0]}+1\\right)',
        2: '\\log_{${args[1]}}\\left(${args[0]}+1\\right)'
      },
      log2: '\\log_{2}\\left(${args[0]}\\right)',
      mod: {
        2: "\\left(${args[0]}".concat(latexOperators.mod, "${args[1]}\\right)")
      },
      multiply: {
        2: "\\left(${args[0]}".concat(latexOperators.multiply, "${args[1]}\\right)")
      },
      norm: {
        1: '\\left\\|${args[0]}\\right\\|',
        2: undefined // use default template

      },
      nthRoot: {
        2: '\\sqrt[${args[1]}]{${args[0]}}'
      },
      nthRoots: {
        2: '\\{y : $y^{args[1]} = {${args[0]}}\\}'
      },
      pow: {
        2: "\\left(${args[0]}\\right)".concat(latexOperators.pow, "{${args[1]}}")
      },
      round: {
        1: '\\left\\lfloor${args[0]}\\right\\rceil',
        2: undefined // use default template

      },
      sign: {
        1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
      },
      sqrt: {
        1: '\\sqrt{${args[0]}}'
      },
      square: {
        1: '\\left(${args[0]}\\right)^2'
      },
      subtract: {
        2: "\\left(${args[0]}".concat(latexOperators.subtract, "${args[1]}\\right)")
      },
      unaryMinus: {
        1: "".concat(latexOperators.unaryMinus, "\\left(${args[0]}\\right)")
      },
      unaryPlus: {
        1: "".concat(latexOperators.unaryPlus, "\\left(${args[0]}\\right)")
      },
      // bitwise
      bitAnd: {
        2: "\\left(${args[0]}".concat(latexOperators.bitAnd, "${args[1]}\\right)")
      },
      bitNot: {
        1: latexOperators.bitNot + '\\left(${args[0]}\\right)'
      },
      bitOr: {
        2: "\\left(${args[0]}".concat(latexOperators.bitOr, "${args[1]}\\right)")
      },
      bitXor: {
        2: "\\left(${args[0]}".concat(latexOperators.bitXor, "${args[1]}\\right)")
      },
      leftShift: {
        2: "\\left(${args[0]}".concat(latexOperators.leftShift, "${args[1]}\\right)")
      },
      rightArithShift: {
        2: "\\left(${args[0]}".concat(latexOperators.rightArithShift, "${args[1]}\\right)")
      },
      rightLogShift: {
        2: "\\left(${args[0]}".concat(latexOperators.rightLogShift, "${args[1]}\\right)")
      },
      // combinatorics
      bellNumbers: {
        1: '\\mathrm{B}_{${args[0]}}'
      },
      catalan: {
        1: '\\mathrm{C}_{${args[0]}}'
      },
      stirlingS2: {
        2: '\\mathrm{S}\\left(${args}\\right)'
      },
      // complex
      arg: {
        1: '\\arg\\left(${args[0]}\\right)'
      },
      conj: {
        1: '\\left(${args[0]}\\right)^*'
      },
      im: {
        1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace'
      },
      re: {
        1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace'
      },
      // logical
      and: {
        2: "\\left(${args[0]}".concat(latexOperators.and, "${args[1]}\\right)")
      },
      not: {
        1: latexOperators.not + '\\left(${args[0]}\\right)'
      },
      or: {
        2: "\\left(${args[0]}".concat(latexOperators.or, "${args[1]}\\right)")
      },
      xor: {
        2: "\\left(${args[0]}".concat(latexOperators.xor, "${args[1]}\\right)")
      },
      // matrix
      cross: {
        2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
      },
      ctranspose: {
        1: "\\left(${args[0]}\\right)".concat(latexOperators.ctranspose)
      },
      det: {
        1: '\\det\\left(${args[0]}\\right)'
      },
      dot: {
        2: '\\left(${args[0]}\\cdot${args[1]}\\right)'
      },
      expm: {
        1: '\\exp\\left(${args[0]}\\right)'
      },
      inv: {
        1: '\\left(${args[0]}\\right)^{-1}'
      },
      pinv: {
        1: '\\left(${args[0]}\\right)^{+}'
      },
      sqrtm: {
        1: "{${args[0]}}".concat(latexOperators.pow, "{\\frac{1}{2}}")
      },
      trace: {
        1: '\\mathrm{tr}\\left(${args[0]}\\right)'
      },
      transpose: {
        1: "\\left(${args[0]}\\right)".concat(latexOperators.transpose)
      },
      // probability
      combinations: {
        2: '\\binom{${args[0]}}{${args[1]}}'
      },
      combinationsWithRep: {
        2: '\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)'
      },
      factorial: {
        1: "\\left(${args[0]}\\right)".concat(latexOperators.factorial)
      },
      gamma: {
        1: '\\Gamma\\left(${args[0]}\\right)'
      },
      lgamma: {
        1: '\\ln\\Gamma\\left(${args[0]}\\right)'
      },
      // relational
      equal: {
        2: "\\left(${args[0]}".concat(latexOperators.equal, "${args[1]}\\right)")
      },
      larger: {
        2: "\\left(${args[0]}".concat(latexOperators.larger, "${args[1]}\\right)")
      },
      largerEq: {
        2: "\\left(${args[0]}".concat(latexOperators.largerEq, "${args[1]}\\right)")
      },
      smaller: {
        2: "\\left(${args[0]}".concat(latexOperators.smaller, "${args[1]}\\right)")
      },
      smallerEq: {
        2: "\\left(${args[0]}".concat(latexOperators.smallerEq, "${args[1]}\\right)")
      },
      unequal: {
        2: "\\left(${args[0]}".concat(latexOperators.unequal, "${args[1]}\\right)")
      },
      // special
      erf: {
        1: 'erf\\left(${args[0]}\\right)'
      },
      // statistics
      max: '\\max\\left(${args}\\right)',
      min: '\\min\\left(${args}\\right)',
      variance: '\\mathrm{Var}\\left(${args}\\right)',
      // trigonometry
      acos: {
        1: '\\cos^{-1}\\left(${args[0]}\\right)'
      },
      acosh: {
        1: '\\cosh^{-1}\\left(${args[0]}\\right)'
      },
      acot: {
        1: '\\cot^{-1}\\left(${args[0]}\\right)'
      },
      acoth: {
        1: '\\coth^{-1}\\left(${args[0]}\\right)'
      },
      acsc: {
        1: '\\csc^{-1}\\left(${args[0]}\\right)'
      },
      acsch: {
        1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)'
      },
      asec: {
        1: '\\sec^{-1}\\left(${args[0]}\\right)'
      },
      asech: {
        1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)'
      },
      asin: {
        1: '\\sin^{-1}\\left(${args[0]}\\right)'
      },
      asinh: {
        1: '\\sinh^{-1}\\left(${args[0]}\\right)'
      },
      atan: {
        1: '\\tan^{-1}\\left(${args[0]}\\right)'
      },
      atan2: {
        2: '\\mathrm{atan2}\\left(${args}\\right)'
      },
      atanh: {
        1: '\\tanh^{-1}\\left(${args[0]}\\right)'
      },
      cos: {
        1: '\\cos\\left(${args[0]}\\right)'
      },
      cosh: {
        1: '\\cosh\\left(${args[0]}\\right)'
      },
      cot: {
        1: '\\cot\\left(${args[0]}\\right)'
      },
      coth: {
        1: '\\coth\\left(${args[0]}\\right)'
      },
      csc: {
        1: '\\csc\\left(${args[0]}\\right)'
      },
      csch: {
        1: '\\mathrm{csch}\\left(${args[0]}\\right)'
      },
      sec: {
        1: '\\sec\\left(${args[0]}\\right)'
      },
      sech: {
        1: '\\mathrm{sech}\\left(${args[0]}\\right)'
      },
      sin: {
        1: '\\sin\\left(${args[0]}\\right)'
      },
      sinh: {
        1: '\\sinh\\left(${args[0]}\\right)'
      },
      tan: {
        1: '\\tan\\left(${args[0]}\\right)'
      },
      tanh: {
        1: '\\tanh\\left(${args[0]}\\right)'
      },
      // unit
      to: {
        2: "\\left(${args[0]}".concat(latexOperators.to, "${args[1]}\\right)")
      },
      // utils
      numeric: function numeric(node, options) {
        // Not sure if this is strictly right but should work correctly for the vast majority of use cases.
        return node.args[0].toTex();
      },
      // type
      number: {
        0: '0',
        1: '\\left(${args[0]}\\right)',
        2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
      },
      string: {
        0: '\\mathtt{""}',
        1: '\\mathrm{string}\\left(${args[0]}\\right)'
      },
      bignumber: {
        0: '0',
        1: '\\left(${args[0]}\\right)'
      },
      complex: {
        0: '0',
        1: '\\left(${args[0]}\\right)',
        2: "\\left(\\left(${args[0]}\\right)+".concat(latexSymbols.i, "\\cdot\\left(${args[1]}\\right)\\right)")
      },
      matrix: {
        0: '\\begin{bmatrix}\\end{bmatrix}',
        1: '\\left(${args[0]}\\right)',
        2: '\\left(${args[0]}\\right)'
      },
      sparse: {
        0: '\\begin{bsparse}\\end{bsparse}',
        1: '\\left(${args[0]}\\right)'
      },
      unit: {
        1: '\\left(${args[0]}\\right)',
        2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
      }
    };
    var defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';
    var latexUnits = {
      deg: '^\\circ'
    };
    function escapeLatex(string) {
      return escapeLatexLib(string, {
        preserveFormatting: true
      });
    } // @param {string} name
    // @param {boolean} isUnit

    function toSymbol(name, isUnit) {
      isUnit = typeof isUnit === 'undefined' ? false : isUnit;

      if (isUnit) {
        if (hasOwnProperty$1(latexUnits, name)) {
          return latexUnits[name];
        }

        return '\\mathrm{' + escapeLatex(name) + '}';
      }

      if (hasOwnProperty$1(latexSymbols, name)) {
        return latexSymbols[name];
      }

      return escapeLatex(name);
    }

    var name$1o = 'ConstantNode';
    var dependencies$1o = ['Node'];
    var createConstantNode = /* #__PURE__ */factory(name$1o, dependencies$1o, _ref => {
      var {
        Node
      } = _ref;

      /**
       * A ConstantNode holds a constant value like a number or string.
       *
       * Usage:
       *
       *     new ConstantNode(2.3)
       *     new ConstantNode('hello')
       *
       * @param {*} value    Value can be any type (number, BigNumber, string, ...)
       * @constructor ConstantNode
       * @extends {Node}
       */
      function ConstantNode(value) {
        if (!(this instanceof ConstantNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.value = value;
      }

      ConstantNode.prototype = new Node();
      ConstantNode.prototype.type = 'ConstantNode';
      ConstantNode.prototype.isConstantNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      ConstantNode.prototype._compile = function (math, argNames) {
        var value = this.value;
        return function evalConstantNode() {
          return value;
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs
      };
      /**
       * Create a new ConstantNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node) : Node} callback
       * @returns {ConstantNode} Returns a clone of the node
       */


      ConstantNode.prototype.map = function (callback) {
        return this.clone();
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {ConstantNode}
       */


      ConstantNode.prototype.clone = function () {
        return new ConstantNode(this.value);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       */


      ConstantNode.prototype._toString = function (options) {
        return format$1(this.value, options);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      ConstantNode.prototype.toHTML = function (options) {
        var value = this._toString(options);

        switch (typeOf$1(this.value)) {
          case 'number':
          case 'BigNumber':
          case 'Fraction':
            return '<span class="math-number">' + value + '</span>';

          case 'string':
            return '<span class="math-string">' + value + '</span>';

          case 'boolean':
            return '<span class="math-boolean">' + value + '</span>';

          case 'null':
            return '<span class="math-null-symbol">' + value + '</span>';

          case 'undefined':
            return '<span class="math-undefined">' + value + '</span>';

          default:
            return '<span class="math-symbol">' + value + '</span>';
        }
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      ConstantNode.prototype.toJSON = function () {
        return {
          mathjs: 'ConstantNode',
          value: this.value
        };
      };
      /**
       * Instantiate a ConstantNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "SymbolNode", value: 2.3}`,
       *                       where mathjs is optional
       * @returns {ConstantNode}
       */


      ConstantNode.fromJSON = function (json) {
        return new ConstantNode(json.value);
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      ConstantNode.prototype._toTex = function (options) {
        var value = this._toString(options);

        switch (typeOf$1(this.value)) {
          case 'string':
            return '\\mathtt{' + escapeLatex(value) + '}';

          case 'number':
          case 'BigNumber':
            {
              if (!isFinite(this.value)) {
                return this.value.valueOf() < 0 ? '-\\infty' : '\\infty';
              }

              var index = value.toLowerCase().indexOf('e');

              if (index !== -1) {
                return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
              }
            }
            return value;

          case 'Fraction':
            return this.value.toLatex();

          default:
            return value;
        }
      };

      return ConstantNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1n = 'FunctionAssignmentNode';
    var dependencies$1n = ['typed', 'Node'];
    var createFunctionAssignmentNode = /* #__PURE__ */factory(name$1n, dependencies$1n, _ref => {
      var {
        typed,
        Node
      } = _ref;

      /**
       * @constructor FunctionAssignmentNode
       * @extends {Node}
       * Function assignment
       *
       * @param {string} name           Function name
       * @param {string[] | Array.<{name: string, type: string}>} params
       *                                Array with function parameter names, or an
       *                                array with objects containing the name
       *                                and type of the parameter
       * @param {Node} expr             The function expression
       */
      function FunctionAssignmentNode(name, params, expr) {
        if (!(this instanceof FunctionAssignmentNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate input


        if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
        if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
        if (!isNode(expr)) throw new TypeError('Node expected for parameter "expr"');
        if (keywords.has(name)) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
        this.name = name;
        this.params = params.map(function (param) {
          return param && param.name || param;
        });
        this.types = params.map(function (param) {
          return param && param.type || 'any';
        });
        this.expr = expr;
      }

      FunctionAssignmentNode.prototype = new Node();
      FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
      FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      FunctionAssignmentNode.prototype._compile = function (math, argNames) {
        var childArgNames = Object.create(argNames);
        forEach$1(this.params, function (param) {
          childArgNames[param] = true;
        }); // compile the function expression with the child args

        var evalExpr = this.expr._compile(math, childArgNames);

        var name = this.name;
        var params = this.params;
        var signature = join(this.types, ',');
        var syntax = name + '(' + join(this.params, ', ') + ')';
        return function evalFunctionAssignmentNode(scope, args, context) {
          var signatures = {};

          signatures[signature] = function () {
            var childArgs = Object.create(args);

            for (var i = 0; i < params.length; i++) {
              childArgs[params[i]] = arguments[i];
            }

            return evalExpr(scope, childArgs, context);
          };

          var fn = typed(name, signatures);
          fn.syntax = syntax;
          scope.set(name, fn);
          return fn;
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      FunctionAssignmentNode.prototype.forEach = function (callback) {
        callback(this.expr, 'expr', this);
      };
      /**
       * Create a new FunctionAssignmentNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
       */


      FunctionAssignmentNode.prototype.map = function (callback) {
        var expr = this._ifNode(callback(this.expr, 'expr', this));

        return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {FunctionAssignmentNode}
       */


      FunctionAssignmentNode.prototype.clone = function () {
        return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
      };
      /**
       * Is parenthesis needed?
       * @param {Node} node
       * @param {Object} parenthesis
       * @private
       */


      function needParenthesis(node, parenthesis) {
        var precedence = getPrecedence(node, parenthesis);
        var exprPrecedence = getPrecedence(node.expr, parenthesis);
        return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
      }
      /**
       * get string representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionAssignmentNode.prototype._toString = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var expr = this.expr.toString(options);

        if (needParenthesis(this, parenthesis)) {
          expr = '(' + expr + ')';
        }

        return this.name + '(' + this.params.join(', ') + ') = ' + expr;
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      FunctionAssignmentNode.prototype.toJSON = function () {
        var types = this.types;
        return {
          mathjs: 'FunctionAssignmentNode',
          name: this.name,
          params: this.params.map(function (param, index) {
            return {
              name: param,
              type: types[index]
            };
          }),
          expr: this.expr
        };
      };
      /**
       * Instantiate an FunctionAssignmentNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "FunctionAssignmentNode", name: ..., params: ..., expr: ...}`,
       *                       where mathjs is optional
       * @returns {FunctionAssignmentNode}
       */


      FunctionAssignmentNode.fromJSON = function (json) {
        return new FunctionAssignmentNode(json.name, json.params, json.expr);
      };
      /**
       * get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionAssignmentNode.prototype.toHTML = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var params = [];

        for (var i = 0; i < this.params.length; i++) {
          params.push('<span class="math-symbol math-parameter">' + escape$1(this.params[i]) + '</span>');
        }

        var expr = this.expr.toHTML(options);

        if (needParenthesis(this, parenthesis)) {
          expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return '<span class="math-function">' + escape$1(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
      };
      /**
       * get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionAssignmentNode.prototype._toTex = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var expr = this.expr.toTex(options);

        if (needParenthesis(this, parenthesis)) {
          expr = "\\left(".concat(expr, "\\right)");
        }

        return '\\mathrm{' + this.name + '}\\left(' + this.params.map(toSymbol).join(',') + '\\right):=' + expr;
      };

      return FunctionAssignmentNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1m = 'IndexNode';
    var dependencies$1m = ['Node', 'size'];
    var createIndexNode = /* #__PURE__ */factory(name$1m, dependencies$1m, _ref => {
      var {
        Node,
        size
      } = _ref;

      /**
       * @constructor IndexNode
       * @extends Node
       *
       * Describes a subset of a matrix or an object property.
       * Cannot be used on its own, needs to be used within an AccessorNode or
       * AssignmentNode.
       *
       * @param {Node[]} dimensions
       * @param {boolean} [dotNotation=false]  Optional property describing whether
       *                                       this index was written using dot
       *                                       notation like `a.b`, or using bracket
       *                                       notation like `a["b"]` (default).
       *                                       Used to stringify an IndexNode.
       */
      function IndexNode(dimensions, dotNotation) {
        if (!(this instanceof IndexNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.dimensions = dimensions;
        this.dotNotation = dotNotation || false; // validate input

        if (!Array.isArray(dimensions) || !dimensions.every(isNode)) {
          throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
        }

        if (this.dotNotation && !this.isObjectProperty()) {
          throw new Error('dotNotation only applicable for object properties');
        }
      }

      IndexNode.prototype = new Node();
      IndexNode.prototype.type = 'IndexNode';
      IndexNode.prototype.isIndexNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      IndexNode.prototype._compile = function (math, argNames) {
        // TODO: implement support for bignumber (currently bignumbers are silently
        //       reduced to numbers when changing the value to zero-based)
        // TODO: Optimization: when the range values are ConstantNodes,
        //       we can beforehand resolve the zero-based value
        // optimization for a simple object property
        var evalDimensions = map$1(this.dimensions, function (dimension, i) {
          var needsEnd = dimension.filter(node => node.isSymbolNode && node.name === 'end').length > 0;

          if (needsEnd) {
            // SymbolNode 'end' is used inside the index,
            // like in `A[end]` or `A[end - 2]`
            var childArgNames = Object.create(argNames);
            childArgNames.end = true;

            var _evalDimension = dimension._compile(math, childArgNames);

            return function evalDimension(scope, args, context) {
              if (!isMatrix(context) && !isArray(context) && !isString(context)) {
                throw new TypeError('Cannot resolve "end": ' + 'context must be a Matrix, Array, or string but is ' + typeOf$1(context));
              }

              var s = size(context).valueOf();
              var childArgs = Object.create(args);
              childArgs.end = s[i];
              return _evalDimension(scope, childArgs, context);
            };
          } else {
            // SymbolNode `end` not used
            return dimension._compile(math, argNames);
          }
        });
        var index = getSafeProperty(math, 'index');
        return function evalIndexNode(scope, args, context) {
          var dimensions = map$1(evalDimensions, function (evalDimension) {
            return evalDimension(scope, args, context);
          });
          return index(...dimensions);
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      IndexNode.prototype.forEach = function (callback) {
        for (var i = 0; i < this.dimensions.length; i++) {
          callback(this.dimensions[i], 'dimensions[' + i + ']', this);
        }
      };
      /**
       * Create a new IndexNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {IndexNode} Returns a transformed copy of the node
       */


      IndexNode.prototype.map = function (callback) {
        var dimensions = [];

        for (var i = 0; i < this.dimensions.length; i++) {
          dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
        }

        return new IndexNode(dimensions, this.dotNotation);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {IndexNode}
       */


      IndexNode.prototype.clone = function () {
        return new IndexNode(this.dimensions.slice(0), this.dotNotation);
      };
      /**
       * Test whether this IndexNode contains a single property name
       * @return {boolean}
       */


      IndexNode.prototype.isObjectProperty = function () {
        return this.dimensions.length === 1 && isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';
      };
      /**
       * Returns the property name if IndexNode contains a property.
       * If not, returns null.
       * @return {string | null}
       */


      IndexNode.prototype.getObjectProperty = function () {
        return this.isObjectProperty() ? this.dimensions[0].value : null;
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       */


      IndexNode.prototype._toString = function (options) {
        // format the parameters like "[1, 0:5]"
        return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      IndexNode.prototype.toJSON = function () {
        return {
          mathjs: 'IndexNode',
          dimensions: this.dimensions,
          dotNotation: this.dotNotation
        };
      };
      /**
       * Instantiate an IndexNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
       *                       where mathjs is optional
       * @returns {IndexNode}
       */


      IndexNode.fromJSON = function (json) {
        return new IndexNode(json.dimensions, json.dotNotation);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      IndexNode.prototype.toHTML = function (options) {
        // format the parameters like "[1, 0:5]"
        var dimensions = [];

        for (var i = 0; i < this.dimensions.length; i++) {
          dimensions[i] = this.dimensions[i].toHTML();
        }

        if (this.dotNotation) {
          return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + escape$1(this.getObjectProperty()) + '</span>';
        } else {
          return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
        }
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      IndexNode.prototype._toTex = function (options) {
        var dimensions = this.dimensions.map(function (range) {
          return range.toTex(options);
        });
        return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
      };

      return IndexNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1l = 'ObjectNode';
    var dependencies$1l = ['Node'];
    var createObjectNode = /* #__PURE__ */factory(name$1l, dependencies$1l, _ref => {
      var {
        Node
      } = _ref;

      /**
       * @constructor ObjectNode
       * @extends {Node}
       * Holds an object with keys/values
       * @param {Object.<string, Node>} [properties]   object with key/value pairs
       */
      function ObjectNode(properties) {
        if (!(this instanceof ObjectNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.properties = properties || {}; // validate input

        if (properties) {
          if (!(typeof properties === 'object') || !Object.keys(properties).every(function (key) {
            return isNode(properties[key]);
          })) {
            throw new TypeError('Object containing Nodes expected');
          }
        }
      }

      ObjectNode.prototype = new Node();
      ObjectNode.prototype.type = 'ObjectNode';
      ObjectNode.prototype.isObjectNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      ObjectNode.prototype._compile = function (math, argNames) {
        var evalEntries = {};

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            // we stringify/parse the key here to resolve unicode characters,
            // so you cannot create a key like {"co\\u006Estructor": null}
            var stringifiedKey = stringify(key);
            var parsedKey = JSON.parse(stringifiedKey);

            if (!isSafeProperty(this.properties, parsedKey)) {
              throw new Error('No access to property "' + parsedKey + '"');
            }

            evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);
          }
        }

        return function evalObjectNode(scope, args, context) {
          var obj = {};

          for (var _key in evalEntries) {
            if (hasOwnProperty$1(evalEntries, _key)) {
              obj[_key] = evalEntries[_key](scope, args, context);
            }
          }

          return obj;
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      ObjectNode.prototype.forEach = function (callback) {
        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            callback(this.properties[key], 'properties[' + stringify(key) + ']', this);
          }
        }
      };
      /**
       * Create a new ObjectNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {ObjectNode} Returns a transformed copy of the node
       */


      ObjectNode.prototype.map = function (callback) {
        var properties = {};

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));
          }
        }

        return new ObjectNode(properties);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {ObjectNode}
       */


      ObjectNode.prototype.clone = function () {
        var properties = {};

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            properties[key] = this.properties[key];
          }
        }

        return new ObjectNode(properties);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ObjectNode.prototype._toString = function (options) {
        var entries = [];

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            entries.push(stringify(key) + ': ' + this.properties[key].toString(options));
          }
        }

        return '{' + entries.join(', ') + '}';
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      ObjectNode.prototype.toJSON = function () {
        return {
          mathjs: 'ObjectNode',
          properties: this.properties
        };
      };
      /**
       * Instantiate an OperatorNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
       *                       where mathjs is optional
       * @returns {ObjectNode}
       */


      ObjectNode.fromJSON = function (json) {
        return new ObjectNode(json.properties);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ObjectNode.prototype.toHTML = function (options) {
        var entries = [];

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            entries.push('<span class="math-symbol math-property">' + escape$1(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
          }
        }

        return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      ObjectNode.prototype._toTex = function (options) {
        var entries = [];

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            entries.push('\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\');
          }
        }

        return "\\left\\{\\begin{array}{ll}".concat(entries.join('\n'), "\\end{array}\\right\\}");
      };

      return ObjectNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1k = 'OperatorNode';
    var dependencies$1k = ['Node'];
    var createOperatorNode = /* #__PURE__ */factory(name$1k, dependencies$1k, _ref => {
      var {
        Node
      } = _ref;

      /**
       * @constructor OperatorNode
       * @extends {Node}
       * An operator with two arguments, like 2+3
       *
       * @param {string} op           Operator name, for example '+'
       * @param {string} fn           Function name, for example 'add'
       * @param {Node[]} args         Operator arguments
       * @param {boolean} [implicit]  Is this an implicit multiplication?
       * @param {boolean} [isPercentage] Is this an percentage Operation?
       */
      function OperatorNode(op, fn, args, implicit, isPercentage) {
        if (!(this instanceof OperatorNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate input


        if (typeof op !== 'string') {
          throw new TypeError('string expected for parameter "op"');
        }

        if (typeof fn !== 'string') {
          throw new TypeError('string expected for parameter "fn"');
        }

        if (!Array.isArray(args) || !args.every(isNode)) {
          throw new TypeError('Array containing Nodes expected for parameter "args"');
        }

        this.implicit = implicit === true;
        this.isPercentage = isPercentage === true;
        this.op = op;
        this.fn = fn;
        this.args = args || [];
      }

      OperatorNode.prototype = new Node();
      OperatorNode.prototype.type = 'OperatorNode';
      OperatorNode.prototype.isOperatorNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      OperatorNode.prototype._compile = function (math, argNames) {
        // validate fn
        if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {
          if (!math[this.fn]) {
            throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
          } else {
            throw new Error('No access to function "' + this.fn + '"');
          }
        }

        var fn = getSafeProperty(math, this.fn);
        var evalArgs = map$1(this.args, function (arg) {
          return arg._compile(math, argNames);
        });

        if (evalArgs.length === 1) {
          var evalArg0 = evalArgs[0];
          return function evalOperatorNode(scope, args, context) {
            return fn(evalArg0(scope, args, context));
          };
        } else if (evalArgs.length === 2) {
          var _evalArg = evalArgs[0];
          var evalArg1 = evalArgs[1];
          return function evalOperatorNode(scope, args, context) {
            return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));
          };
        } else {
          return function evalOperatorNode(scope, args, context) {
            return fn.apply(null, map$1(evalArgs, function (evalArg) {
              return evalArg(scope, args, context);
            }));
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      OperatorNode.prototype.forEach = function (callback) {
        for (var i = 0; i < this.args.length; i++) {
          callback(this.args[i], 'args[' + i + ']', this);
        }
      };
      /**
       * Create a new OperatorNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {OperatorNode} Returns a transformed copy of the node
       */


      OperatorNode.prototype.map = function (callback) {
        var args = [];

        for (var i = 0; i < this.args.length; i++) {
          args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
        }

        return new OperatorNode(this.op, this.fn, args, this.implicit, this.isPercentage);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {OperatorNode}
       */


      OperatorNode.prototype.clone = function () {
        return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);
      };
      /**
       * Check whether this is an unary OperatorNode:
       * has exactly one argument, like `-a`.
       * @return {boolean} Returns true when an unary operator node, false otherwise.
       */


      OperatorNode.prototype.isUnary = function () {
        return this.args.length === 1;
      };
      /**
       * Check whether this is a binary OperatorNode:
       * has exactly two arguments, like `a + b`.
       * @return {boolean} Returns true when a binary operator node, false otherwise.
       */


      OperatorNode.prototype.isBinary = function () {
        return this.args.length === 2;
      };
      /**
       * Calculate which parentheses are necessary. Gets an OperatorNode
       * (which is the root of the tree) and an Array of Nodes
       * (this.args) and returns an array where 'true' means that an argument
       * has to be enclosed in parentheses whereas 'false' means the opposite.
       *
       * @param {OperatorNode} root
       * @param {string} parenthesis
       * @param {Node[]} args
       * @param {boolean} latex
       * @return {boolean[]}
       * @private
       */


      function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
        // precedence of the root OperatorNode
        var precedence = getPrecedence(root, parenthesis);
        var associativity = getAssociativity(root, parenthesis);

        if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {
          return args.map(function (arg) {
            switch (arg.getContent().type) {
              // Nodes that don't need extra parentheses
              case 'ArrayNode':
              case 'ConstantNode':
              case 'SymbolNode':
              case 'ParenthesisNode':
                return false;

              default:
                return true;
            }
          });
        }

        var result;

        switch (args.length) {
          case 0:
            result = [];
            break;

          case 1:
            // unary operators
            {
              // precedence of the operand
              var operandPrecedence = getPrecedence(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed

              if (latex && operandPrecedence !== null) {
                var operandIdentifier;
                var rootIdentifier;

                if (parenthesis === 'keep') {
                  operandIdentifier = args[0].getIdentifier();
                  rootIdentifier = root.getIdentifier();
                } else {
                  // Ignore Parenthesis Nodes when not in 'keep' mode
                  operandIdentifier = args[0].getContent().getIdentifier();
                  rootIdentifier = root.getContent().getIdentifier();
                }

                if (properties[precedence][rootIdentifier].latexLeftParens === false) {
                  result = [false];
                  break;
                }

                if (properties[operandPrecedence][operandIdentifier].latexParens === false) {
                  result = [false];
                  break;
                }
              }

              if (operandPrecedence === null) {
                // if the operand has no defined precedence, no parens are needed
                result = [false];
                break;
              }

              if (operandPrecedence <= precedence) {
                // if the operands precedence is lower, parens are needed
                result = [true];
                break;
              } // otherwise, no parens needed


              result = [false];
            }
            break;

          case 2:
            // binary operators
            {
              var lhsParens; // left hand side needs parenthesis?
              // precedence of the left hand side

              var lhsPrecedence = getPrecedence(args[0], parenthesis); // is the root node associative with the left hand side

              var assocWithLhs = isAssociativeWith(root, args[0], parenthesis);

              if (lhsPrecedence === null) {
                // if the left hand side has no defined precedence, no parens are needed
                // FunctionNode for example
                lhsParens = false;
              } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {
                // In case of equal precedence, if the root node is left associative
                // parens are **never** necessary for the left hand side.
                // If it is right associative however, parens are necessary
                // if the root node isn't associative with the left hand side
                lhsParens = true;
              } else if (lhsPrecedence < precedence) {
                lhsParens = true;
              } else {
                lhsParens = false;
              }

              var rhsParens; // right hand side needs parenthesis?
              // precedence of the right hand side

              var rhsPrecedence = getPrecedence(args[1], parenthesis); // is the root node associative with the right hand side?

              var assocWithRhs = isAssociativeWith(root, args[1], parenthesis);

              if (rhsPrecedence === null) {
                // if the right hand side has no defined precedence, no parens are needed
                // FunctionNode for example
                rhsParens = false;
              } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {
                // In case of equal precedence, if the root node is right associative
                // parens are **never** necessary for the right hand side.
                // If it is left associative however, parens are necessary
                // if the root node isn't associative with the right hand side
                rhsParens = true;
              } else if (rhsPrecedence < precedence) {
                rhsParens = true;
              } else {
                rhsParens = false;
              } // handle special cases for LaTeX, where some of the parentheses aren't needed


              if (latex) {
                var _rootIdentifier;

                var lhsIdentifier;
                var rhsIdentifier;

                if (parenthesis === 'keep') {
                  _rootIdentifier = root.getIdentifier();
                  lhsIdentifier = root.args[0].getIdentifier();
                  rhsIdentifier = root.args[1].getIdentifier();
                } else {
                  // Ignore ParenthesisNodes when not in 'keep' mode
                  _rootIdentifier = root.getContent().getIdentifier();
                  lhsIdentifier = root.args[0].getContent().getIdentifier();
                  rhsIdentifier = root.args[1].getContent().getIdentifier();
                }

                if (lhsPrecedence !== null) {
                  if (properties[precedence][_rootIdentifier].latexLeftParens === false) {
                    lhsParens = false;
                  }

                  if (properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
                    lhsParens = false;
                  }
                }

                if (rhsPrecedence !== null) {
                  if (properties[precedence][_rootIdentifier].latexRightParens === false) {
                    rhsParens = false;
                  }

                  if (properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
                    rhsParens = false;
                  }
                }
              }

              result = [lhsParens, rhsParens];
            }
            break;

          default:
            if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {
              result = args.map(function (arg) {
                var argPrecedence = getPrecedence(arg, parenthesis);
                var assocWithArg = isAssociativeWith(root, arg, parenthesis);
                var argAssociativity = getAssociativity(arg, parenthesis);

                if (argPrecedence === null) {
                  // if the argument has no defined precedence, no parens are needed
                  return false;
                } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {
                  return true;
                } else if (argPrecedence < precedence) {
                  return true;
                }

                return false;
              });
            }

            break;
        } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode
        // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be
        // printed.


        if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {
          result = args.map(function (arg, index) {
            var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';

            if (result[index] || isParenthesisNode) {
              // put in parenthesis?
              return true;
            }

            return false;
          });
        }

        return result;
      }
      /**
       * Get string representation.
       * @param {Object} options
       * @return {string} str
       */


      OperatorNode.prototype._toString = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var implicit = options && options.implicit ? options.implicit : 'hide';
        var args = this.args;
        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

        if (args.length === 1) {
          // unary operators
          var assoc = getAssociativity(this, parenthesis);
          var operand = args[0].toString(options);

          if (parens[0]) {
            operand = '(' + operand + ')';
          } // for example for "not", we want a space between operand and argument


          var opIsNamed = /[a-zA-Z]+/.test(this.op);

          if (assoc === 'right') {
            // prefix operator
            return this.op + (opIsNamed ? ' ' : '') + operand;
          } else if (assoc === 'left') {
            // postfix
            return operand + (opIsNamed ? ' ' : '') + this.op;
          } // fall back to postfix


          return operand + this.op;
        } else if (args.length === 2) {
          var lhs = args[0].toString(options); // left hand side

          var rhs = args[1].toString(options); // right hand side

          if (parens[0]) {
            // left hand side in parenthesis?
            lhs = '(' + lhs + ')';
          }

          if (parens[1]) {
            // right hand side in parenthesis?
            rhs = '(' + rhs + ')';
          }

          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
            return lhs + ' ' + rhs;
          }

          return lhs + ' ' + this.op + ' ' + rhs;
        } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
          var stringifiedArgs = args.map(function (arg, index) {
            arg = arg.toString(options);

            if (parens[index]) {
              // put in parenthesis?
              arg = '(' + arg + ')';
            }

            return arg;
          });

          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
            return stringifiedArgs.join(' ');
          }

          return stringifiedArgs.join(' ' + this.op + ' ');
        } else {
          // fallback to formatting as a function call
          return this.fn + '(' + this.args.join(', ') + ')';
        }
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      OperatorNode.prototype.toJSON = function () {
        return {
          mathjs: 'OperatorNode',
          op: this.op,
          fn: this.fn,
          args: this.args,
          implicit: this.implicit,
          isPercentage: this.isPercentage
        };
      };
      /**
       * Instantiate an OperatorNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "OperatorNode", "op": "+", "fn": "add", "args": [...], "implicit": false, "isPercentage":false}`,
       *                       where mathjs is optional
       * @returns {OperatorNode}
       */


      OperatorNode.fromJSON = function (json) {
        return new OperatorNode(json.op, json.fn, json.args, json.implicit, json.isPercentage);
      };
      /**
       * Get HTML representation.
       * @param {Object} options
       * @return {string} str
       */


      OperatorNode.prototype.toHTML = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var implicit = options && options.implicit ? options.implicit : 'hide';
        var args = this.args;
        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

        if (args.length === 1) {
          // unary operators
          var assoc = getAssociativity(this, parenthesis);
          var operand = args[0].toHTML(options);

          if (parens[0]) {
            operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
          }

          if (assoc === 'right') {
            // prefix operator
            return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + escape$1(this.op) + '</span>' + operand;
          } else {
            // postfix when assoc === 'left' or undefined
            return operand + '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + escape$1(this.op) + '</span>';
          }
        } else if (args.length === 2) {
          // binary operatoes
          var lhs = args[0].toHTML(options); // left hand side

          var rhs = args[1].toHTML(options); // right hand side

          if (parens[0]) {
            // left hand side in parenthesis?
            lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
          }

          if (parens[1]) {
            // right hand side in parenthesis?
            rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
          }

          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
            return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
          }

          return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$1(this.op) + '</span>' + rhs;
        } else {
          var stringifiedArgs = args.map(function (arg, index) {
            arg = arg.toHTML(options);

            if (parens[index]) {
              // put in parenthesis?
              arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            }

            return arg;
          });

          if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
            if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
              return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
            }

            return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$1(this.op) + '</span>');
          } else {
            // fallback to formatting as a function call
            return '<span class="math-function">' + escape$1(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
          }
        }
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      OperatorNode.prototype._toTex = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var implicit = options && options.implicit ? options.implicit : 'hide';
        var args = this.args;
        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
        var op = latexOperators[this.fn];
        op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op

        if (args.length === 1) {
          // unary operators
          var assoc = getAssociativity(this, parenthesis);
          var operand = args[0].toTex(options);

          if (parens[0]) {
            operand = "\\left(".concat(operand, "\\right)");
          }

          if (assoc === 'right') {
            // prefix operator
            return op + operand;
          } else if (assoc === 'left') {
            // postfix operator
            return operand + op;
          } // fall back to postfix


          return operand + op;
        } else if (args.length === 2) {
          // binary operators
          var lhs = args[0]; // left hand side

          var lhsTex = lhs.toTex(options);

          if (parens[0]) {
            lhsTex = "\\left(".concat(lhsTex, "\\right)");
          }

          var rhs = args[1]; // right hand side

          var rhsTex = rhs.toTex(options);

          if (parens[1]) {
            rhsTex = "\\left(".concat(rhsTex, "\\right)");
          } // handle some exceptions (due to the way LaTeX works)


          var lhsIdentifier;

          if (parenthesis === 'keep') {
            lhsIdentifier = lhs.getIdentifier();
          } else {
            // Ignore ParenthesisNodes if in 'keep' mode
            lhsIdentifier = lhs.getContent().getIdentifier();
          }

          switch (this.getIdentifier()) {
            case 'OperatorNode:divide':
              // op contains '\\frac' at this point
              return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';

            case 'OperatorNode:pow':
              lhsTex = '{' + lhsTex + '}';
              rhsTex = '{' + rhsTex + '}';

              switch (lhsIdentifier) {
                case 'ConditionalNode': //

                case 'OperatorNode:divide':
                  lhsTex = "\\left(".concat(lhsTex, "\\right)");
              }

              break;

            case 'OperatorNode:multiply':
              if (this.implicit && implicit === 'hide') {
                return lhsTex + '~' + rhsTex;
              }

          }

          return lhsTex + op + rhsTex;
        } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
          var texifiedArgs = args.map(function (arg, index) {
            arg = arg.toTex(options);

            if (parens[index]) {
              arg = "\\left(".concat(arg, "\\right)");
            }

            return arg;
          });

          if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {
            return texifiedArgs.join('~');
          }

          return texifiedArgs.join(op);
        } else {
          // fall back to formatting as a function call
          // as this is a fallback, it doesn't use
          // fancy function names
          return '\\mathrm{' + this.fn + '}\\left(' + args.map(function (arg) {
            return arg.toTex(options);
          }).join(',') + '\\right)';
        }
      };
      /**
       * Get identifier.
       * @return {string}
       */


      OperatorNode.prototype.getIdentifier = function () {
        return this.type + ':' + this.fn;
      };

      return OperatorNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1j = 'ParenthesisNode';
    var dependencies$1j = ['Node'];
    var createParenthesisNode = /* #__PURE__ */factory(name$1j, dependencies$1j, _ref => {
      var {
        Node
      } = _ref;

      /**
       * @constructor ParenthesisNode
       * @extends {Node}
       * A parenthesis node describes manual parenthesis from the user input
       * @param {Node} content
       * @extends {Node}
       */
      function ParenthesisNode(content) {
        if (!(this instanceof ParenthesisNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate input


        if (!isNode(content)) {
          throw new TypeError('Node expected for parameter "content"');
        }

        this.content = content;
      }

      ParenthesisNode.prototype = new Node();
      ParenthesisNode.prototype.type = 'ParenthesisNode';
      ParenthesisNode.prototype.isParenthesisNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      ParenthesisNode.prototype._compile = function (math, argNames) {
        return this.content._compile(math, argNames);
      };
      /**
       * Get the content of the current Node.
       * @return {Node} content
       * @override
       **/


      ParenthesisNode.prototype.getContent = function () {
        return this.content.getContent();
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      ParenthesisNode.prototype.forEach = function (callback) {
        callback(this.content, 'content', this);
      };
      /**
       * Create a new ParenthesisNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node) : Node} callback
       * @returns {ParenthesisNode} Returns a clone of the node
       */


      ParenthesisNode.prototype.map = function (callback) {
        var content = callback(this.content, 'content', this);
        return new ParenthesisNode(content);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {ParenthesisNode}
       */


      ParenthesisNode.prototype.clone = function () {
        return new ParenthesisNode(this.content);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ParenthesisNode.prototype._toString = function (options) {
        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
          return '(' + this.content.toString(options) + ')';
        }

        return this.content.toString(options);
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      ParenthesisNode.prototype.toJSON = function () {
        return {
          mathjs: 'ParenthesisNode',
          content: this.content
        };
      };
      /**
       * Instantiate an ParenthesisNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
       *                       where mathjs is optional
       * @returns {ParenthesisNode}
       */


      ParenthesisNode.fromJSON = function (json) {
        return new ParenthesisNode(json.content);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ParenthesisNode.prototype.toHTML = function (options) {
        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
          return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return this.content.toHTML(options);
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ParenthesisNode.prototype._toTex = function (options) {
        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
          return "\\left(".concat(this.content.toTex(options), "\\right)");
        }

        return this.content.toTex(options);
      };

      return ParenthesisNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1i = 'RangeNode';
    var dependencies$1i = ['Node'];
    var createRangeNode = /* #__PURE__ */factory(name$1i, dependencies$1i, _ref => {
      var {
        Node
      } = _ref;

      /**
       * @constructor RangeNode
       * @extends {Node}
       * create a range
       * @param {Node} start  included lower-bound
       * @param {Node} end    included upper-bound
       * @param {Node} [step] optional step
       */
      function RangeNode(start, end, step) {
        if (!(this instanceof RangeNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate inputs


        if (!isNode(start)) throw new TypeError('Node expected');
        if (!isNode(end)) throw new TypeError('Node expected');
        if (step && !isNode(step)) throw new TypeError('Node expected');
        if (arguments.length > 3) throw new Error('Too many arguments');
        this.start = start; // included lower-bound

        this.end = end; // included upper-bound

        this.step = step || null; // optional step
      }

      RangeNode.prototype = new Node();
      RangeNode.prototype.type = 'RangeNode';
      RangeNode.prototype.isRangeNode = true;
      /**
       * Check whether the RangeNode needs the `end` symbol to be defined.
       * This end is the size of the Matrix in current dimension.
       * @return {boolean}
       */

      RangeNode.prototype.needsEnd = function () {
        // find all `end` symbols in this RangeNode
        var endSymbols = this.filter(function (node) {
          return isSymbolNode(node) && node.name === 'end';
        });
        return endSymbols.length > 0;
      };
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */


      RangeNode.prototype._compile = function (math, argNames) {
        var range = math.range;

        var evalStart = this.start._compile(math, argNames);

        var evalEnd = this.end._compile(math, argNames);

        if (this.step) {
          var evalStep = this.step._compile(math, argNames);

          return function evalRangeNode(scope, args, context) {
            return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
          };
        } else {
          return function evalRangeNode(scope, args, context) {
            return range(evalStart(scope, args, context), evalEnd(scope, args, context));
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      RangeNode.prototype.forEach = function (callback) {
        callback(this.start, 'start', this);
        callback(this.end, 'end', this);

        if (this.step) {
          callback(this.step, 'step', this);
        }
      };
      /**
       * Create a new RangeNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {RangeNode} Returns a transformed copy of the node
       */


      RangeNode.prototype.map = function (callback) {
        return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {RangeNode}
       */


      RangeNode.prototype.clone = function () {
        return new RangeNode(this.start, this.end, this.step && this.step);
      };
      /**
       * Calculate the necessary parentheses
       * @param {Node} node
       * @param {string} parenthesis
       * @return {Object} parentheses
       * @private
       */


      function calculateNecessaryParentheses(node, parenthesis) {
        var precedence = getPrecedence(node, parenthesis);
        var parens = {};
        var startPrecedence = getPrecedence(node.start, parenthesis);
        parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';

        if (node.step) {
          var stepPrecedence = getPrecedence(node.step, parenthesis);
          parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
        }

        var endPrecedence = getPrecedence(node.end, parenthesis);
        parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';
        return parens;
      }
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       */


      RangeNode.prototype._toString = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

        var str;
        var start = this.start.toString(options);

        if (parens.start) {
          start = '(' + start + ')';
        }

        str = start;

        if (this.step) {
          var step = this.step.toString(options);

          if (parens.step) {
            step = '(' + step + ')';
          }

          str += ':' + step;
        }

        var end = this.end.toString(options);

        if (parens.end) {
          end = '(' + end + ')';
        }

        str += ':' + end;
        return str;
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      RangeNode.prototype.toJSON = function () {
        return {
          mathjs: 'RangeNode',
          start: this.start,
          end: this.end,
          step: this.step
        };
      };
      /**
       * Instantiate an RangeNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
       *                       where mathjs is optional
       * @returns {RangeNode}
       */


      RangeNode.fromJSON = function (json) {
        return new RangeNode(json.start, json.end, json.step);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      RangeNode.prototype.toHTML = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

        var str;
        var start = this.start.toHTML(options);

        if (parens.start) {
          start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        str = start;

        if (this.step) {
          var step = this.step.toHTML(options);

          if (parens.step) {
            step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
          }

          str += '<span class="math-operator math-range-operator">:</span>' + step;
        }

        var end = this.end.toHTML(options);

        if (parens.end) {
          end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        str += '<span class="math-operator math-range-operator">:</span>' + end;
        return str;
      };
      /**
       * Get LaTeX representation
       * @params {Object} options
       * @return {string} str
       */


      RangeNode.prototype._toTex = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var parens = calculateNecessaryParentheses(this, parenthesis);
        var str = this.start.toTex(options);

        if (parens.start) {
          str = "\\left(".concat(str, "\\right)");
        }

        if (this.step) {
          var step = this.step.toTex(options);

          if (parens.step) {
            step = "\\left(".concat(step, "\\right)");
          }

          str += ':' + step;
        }

        var end = this.end.toTex(options);

        if (parens.end) {
          end = "\\left(".concat(end, "\\right)");
        }

        str += ':' + end;
        return str;
      };

      return RangeNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1h = 'RelationalNode';
    var dependencies$1h = ['Node'];
    var createRelationalNode = /* #__PURE__ */factory(name$1h, dependencies$1h, _ref => {
      var {
        Node
      } = _ref;

      /**
       * A node representing a chained conditional expression, such as 'x > y > z'
       *
       * @param {String[]} conditionals   An array of conditional operators used to compare the parameters
       * @param {Node[]} params   The parameters that will be compared
       *
       * @constructor RelationalNode
       * @extends {Node}
       */
      function RelationalNode(conditionals, params) {
        if (!(this instanceof RelationalNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');
        if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');
        if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');
        this.conditionals = conditionals;
        this.params = params;
      }

      RelationalNode.prototype = new Node();
      RelationalNode.prototype.type = 'RelationalNode';
      RelationalNode.prototype.isRelationalNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      RelationalNode.prototype._compile = function (math, argNames) {
        var self = this;
        var compiled = this.params.map(p => p._compile(math, argNames));
        return function evalRelationalNode(scope, args, context) {
          var evalLhs;
          var evalRhs = compiled[0](scope, args, context);

          for (var i = 0; i < self.conditionals.length; i++) {
            evalLhs = evalRhs;
            evalRhs = compiled[i + 1](scope, args, context);
            var condFn = getSafeProperty(math, self.conditionals[i]);

            if (!condFn(evalLhs, evalRhs)) {
              return false;
            }
          }

          return true;
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      RelationalNode.prototype.forEach = function (callback) {
        this.params.forEach((n, i) => callback(n, 'params[' + i + ']', this), this);
      };
      /**
       * Create a new RelationalNode having its childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {RelationalNode} Returns a transformed copy of the node
       */


      RelationalNode.prototype.map = function (callback) {
        return new RelationalNode(this.conditionals.slice(), this.params.map((n, i) => this._ifNode(callback(n, 'params[' + i + ']', this)), this));
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {RelationalNode}
       */


      RelationalNode.prototype.clone = function () {
        return new RelationalNode(this.conditionals, this.params);
      };
      /**
       * Get string representation.
       * @param {Object} options
       * @return {string} str
       */


      RelationalNode.prototype._toString = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = getPrecedence(this, parenthesis);
        var paramStrings = this.params.map(function (p, index) {
          var paramPrecedence = getPrecedence(p, parenthesis);
          return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);
        });
        var operatorMap = {
          equal: '==',
          unequal: '!=',
          smaller: '<',
          larger: '>',
          smallerEq: '<=',
          largerEq: '>='
        };
        var ret = paramStrings[0];

        for (var i = 0; i < this.conditionals.length; i++) {
          ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];
        }

        return ret;
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      RelationalNode.prototype.toJSON = function () {
        return {
          mathjs: 'RelationalNode',
          conditionals: this.conditionals,
          params: this.params
        };
      };
      /**
       * Instantiate a RelationalNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "RelationalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
       *                       where mathjs is optional
       * @returns {RelationalNode}
       */


      RelationalNode.fromJSON = function (json) {
        return new RelationalNode(json.conditionals, json.params);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      RelationalNode.prototype.toHTML = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = getPrecedence(this, parenthesis);
        var paramStrings = this.params.map(function (p, index) {
          var paramPrecedence = getPrecedence(p, parenthesis);
          return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + p.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : p.toHTML(options);
        });
        var operatorMap = {
          equal: '==',
          unequal: '!=',
          smaller: '<',
          larger: '>',
          smallerEq: '<=',
          largerEq: '>='
        };
        var ret = paramStrings[0];

        for (var i = 0; i < this.conditionals.length; i++) {
          ret += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$1(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];
        }

        return ret;
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      RelationalNode.prototype._toTex = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = getPrecedence(this, parenthesis);
        var paramStrings = this.params.map(function (p, index) {
          var paramPrecedence = getPrecedence(p, parenthesis);
          return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\left(' + p.toTex(options) + '\right)' : p.toTex(options);
        });
        var ret = paramStrings[0];

        for (var i = 0; i < this.conditionals.length; i++) {
          ret += latexOperators[this.conditionals[i]] + paramStrings[i + 1];
        }

        return ret;
      };

      return RelationalNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1g = 'SymbolNode';
    var dependencies$1g = ['math', '?Unit', 'Node'];
    var createSymbolNode = /* #__PURE__ */factory(name$1g, dependencies$1g, _ref => {
      var {
        math,
        Unit,
        Node
      } = _ref;

      /**
       * Check whether some name is a valueless unit like "inch".
       * @param {string} name
       * @return {boolean}
       */
      function isValuelessUnit(name) {
        return Unit ? Unit.isValuelessUnit(name) : false;
      }
      /**
       * @constructor SymbolNode
       * @extends {Node}
       * A symbol node can hold and resolve a symbol
       * @param {string} name
       * @extends {Node}
       */


      function SymbolNode(name) {
        if (!(this instanceof SymbolNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate input


        if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
        this.name = name;
      }

      SymbolNode.prototype = new Node();
      SymbolNode.prototype.type = 'SymbolNode';
      SymbolNode.prototype.isSymbolNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      SymbolNode.prototype._compile = function (math, argNames) {
        var name = this.name;

        if (argNames[name] === true) {
          // this is a FunctionAssignment argument
          // (like an x when inside the expression of a function assignment `f(x) = ...`)
          return function (scope, args, context) {
            return args[name];
          };
        } else if (name in math) {
          return function (scope, args, context) {
            return scope.has(name) ? scope.get(name) : getSafeProperty(math, name);
          };
        } else {
          var isUnit = isValuelessUnit(name);
          return function (scope, args, context) {
            return scope.has(name) ? scope.get(name) : isUnit ? new Unit(null, name) : SymbolNode.onUndefinedSymbol(name);
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      SymbolNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs
      };
      /**
       * Create a new SymbolNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node) : Node} callback
       * @returns {SymbolNode} Returns a clone of the node
       */


      SymbolNode.prototype.map = function (callback) {
        return this.clone();
      };
      /**
       * Throws an error 'Undefined symbol {name}'
       * @param {string} name
       */


      SymbolNode.onUndefinedSymbol = function (name) {
        throw new Error('Undefined symbol ' + name);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {SymbolNode}
       */


      SymbolNode.prototype.clone = function () {
        return new SymbolNode(this.name);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      SymbolNode.prototype._toString = function (options) {
        return this.name;
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      SymbolNode.prototype.toHTML = function (options) {
        var name = escape$1(this.name);

        if (name === 'true' || name === 'false') {
          return '<span class="math-symbol math-boolean">' + name + '</span>';
        } else if (name === 'i') {
          return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
        } else if (name === 'Infinity') {
          return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
        } else if (name === 'NaN') {
          return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
        } else if (name === 'null') {
          return '<span class="math-symbol math-null-symbol">' + name + '</span>';
        } else if (name === 'undefined') {
          return '<span class="math-symbol math-undefined-symbol">' + name + '</span>';
        }

        return '<span class="math-symbol">' + name + '</span>';
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      SymbolNode.prototype.toJSON = function () {
        return {
          mathjs: 'SymbolNode',
          name: this.name
        };
      };
      /**
       * Instantiate a SymbolNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "SymbolNode", name: "x"}`,
       *                       where mathjs is optional
       * @returns {SymbolNode}
       */


      SymbolNode.fromJSON = function (json) {
        return new SymbolNode(json.name);
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      SymbolNode.prototype._toTex = function (options) {
        var isUnit = false;

        if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {
          isUnit = true;
        }

        var symbol = toSymbol(this.name, isUnit);

        if (symbol[0] === '\\') {
          // no space needed if the symbol starts with '\'
          return symbol;
        } // the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol


        return ' ' + symbol;
      };

      return SymbolNode;
    }, {
      isClass: true,
      isNode: true
    });

    /**
     * Create a new scope which can access the parent scope,
     * but does not affect it when written. This is suitable for variable definitions
     * within a block node, or function definition.
     *
     * If parent scope has a createSubScope method, it delegates to that. Otherwise,
     * creates an empty map, and copies the parent scope to it, adding in
     * the remaining `args`.
     *
     * @param {Map} parentScope
     * @param  {...any} args
     * @returns {Map}
     */

    function createSubScope(parentScope) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (typeof parentScope.createSubScope === 'function') {
        return assign(parentScope.createSubScope(), ...args);
      }

      return assign(createEmptyMap(), parentScope, ...args);
    }

    var name$1f = 'FunctionNode';
    var dependencies$1f = ['math', 'Node', 'SymbolNode'];
    var createFunctionNode = /* #__PURE__ */factory(name$1f, dependencies$1f, _ref => {
      var {
        math,
        Node,
        SymbolNode
      } = _ref;

      /**
       * @constructor FunctionNode
       * @extends {./Node}
       * invoke a list with arguments on a node
       * @param {./Node | string} fn Node resolving with a function on which to invoke
       *                             the arguments, typically a SymboNode or AccessorNode
       * @param {./Node[]} args
       */
      function FunctionNode(fn, args) {
        if (!(this instanceof FunctionNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (typeof fn === 'string') {
          fn = new SymbolNode(fn);
        } // validate input


        if (!isNode(fn)) throw new TypeError('Node expected as parameter "fn"');

        if (!Array.isArray(args) || !args.every(isNode)) {
          throw new TypeError('Array containing Nodes expected for parameter "args"');
        }

        this.fn = fn;
        this.args = args || []; // readonly property name

        Object.defineProperty(this, 'name', {
          get: function () {
            return this.fn.name || '';
          }.bind(this),
          set: function set() {
            throw new Error('Cannot assign a new name, name is read-only');
          }
        });
      }

      FunctionNode.prototype = new Node();
      FunctionNode.prototype.type = 'FunctionNode';
      FunctionNode.prototype.isFunctionNode = true;
      /* format to fixed length */

      var strin = entity => format$1(entity, {
        truncate: 78
      });
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */


      FunctionNode.prototype._compile = function (math, argNames) {
        if (!(this instanceof FunctionNode)) {
          throw new TypeError('No valid FunctionNode');
        } // compile arguments


        var evalArgs = this.args.map(arg => arg._compile(math, argNames));

        if (isSymbolNode(this.fn)) {
          var _name = this.fn.name;

          if (!argNames[_name]) {
            // we can statically determine whether the function has an rawArgs property
            var fn = _name in math ? getSafeProperty(math, _name) : undefined;
            var isRaw = typeof fn === 'function' && fn.rawArgs === true;

            var resolveFn = scope => {
              var value;

              if (scope.has(_name)) {
                value = scope.get(_name);
              } else if (_name in math) {
                value = getSafeProperty(math, _name);
              } else {
                return FunctionNode.onUndefinedFunction(_name);
              }

              if (typeof value === 'function') {
                return value;
              }

              throw new TypeError("'".concat(_name, "' is not a function; its value is:\n  ").concat(strin(value)));
            };

            if (isRaw) {
              // pass unevaluated parameters (nodes) to the function
              // "raw" evaluation
              var rawArgs = this.args;
              return function evalFunctionNode(scope, args, context) {
                var fn = resolveFn(scope);
                return fn(rawArgs, math, createSubScope(scope, args), scope);
              };
            } else {
              // "regular" evaluation
              switch (evalArgs.length) {
                case 0:
                  return function evalFunctionNode(scope, args, context) {
                    var fn = resolveFn(scope);
                    return fn();
                  };

                case 1:
                  return function evalFunctionNode(scope, args, context) {
                    var fn = resolveFn(scope);
                    var evalArg0 = evalArgs[0];
                    return fn(evalArg0(scope, args, context));
                  };

                case 2:
                  return function evalFunctionNode(scope, args, context) {
                    var fn = resolveFn(scope);
                    var evalArg0 = evalArgs[0];
                    var evalArg1 = evalArgs[1];
                    return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));
                  };

                default:
                  return function evalFunctionNode(scope, args, context) {
                    var fn = resolveFn(scope);
                    var values = evalArgs.map(evalArg => evalArg(scope, args, context));
                    return fn(...values);
                  };
              }
            }
          } else {
            // the function symbol is an argName
            var _rawArgs = this.args;
            return function evalFunctionNode(scope, args, context) {
              var fn = args[_name];

              if (typeof fn !== 'function') {
                throw new TypeError("Argument '".concat(_name, "' was not a function; received: ").concat(strin(fn)));
              }

              if (fn.rawArgs) {
                return fn(_rawArgs, math, createSubScope(scope, args), scope); // "raw" evaluation
              } else {
                var values = evalArgs.map(evalArg => evalArg(scope, args, context));
                return fn.apply(fn, values);
              }
            };
          }
        } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {
          // execute the function with the right context: the object of the AccessorNode
          var evalObject = this.fn.object._compile(math, argNames);

          var prop = this.fn.index.getObjectProperty();
          var _rawArgs2 = this.args;
          return function evalFunctionNode(scope, args, context) {
            var object = evalObject(scope, args, context);
            validateSafeMethod(object, prop);
            var isRaw = object[prop] && object[prop].rawArgs;

            if (isRaw) {
              return object[prop](_rawArgs2, math, createSubScope(scope, args), scope); // "raw" evaluation
            } else {
              // "regular" evaluation
              var values = evalArgs.map(evalArg => evalArg(scope, args, context));
              return object[prop].apply(object, values);
            }
          };
        } else {
          // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
          // we have to dynamically determine whether the function has a rawArgs property
          var fnExpr = this.fn.toString();

          var evalFn = this.fn._compile(math, argNames);

          var _rawArgs3 = this.args;
          return function evalFunctionNode(scope, args, context) {
            var fn = evalFn(scope, args, context);

            if (typeof fn !== 'function') {
              throw new TypeError("Expression '".concat(fnExpr, "' did not evaluate to a function; value is:") + "\n  ".concat(strin(fn)));
            }

            if (fn.rawArgs) {
              return fn(_rawArgs3, math, createSubScope(scope, args), scope); // "raw" evaluation
            } else {
              // "regular" evaluation
              var values = evalArgs.map(evalArg => evalArg(scope, args, context));
              return fn.apply(fn, values);
            }
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      FunctionNode.prototype.forEach = function (callback) {
        callback(this.fn, 'fn', this);

        for (var i = 0; i < this.args.length; i++) {
          callback(this.args[i], 'args[' + i + ']', this);
        }
      };
      /**
       * Create a new FunctionNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {FunctionNode} Returns a transformed copy of the node
       */


      FunctionNode.prototype.map = function (callback) {
        var fn = this._ifNode(callback(this.fn, 'fn', this));

        var args = [];

        for (var i = 0; i < this.args.length; i++) {
          args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
        }

        return new FunctionNode(fn, args);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {FunctionNode}
       */


      FunctionNode.prototype.clone = function () {
        return new FunctionNode(this.fn, this.args.slice(0));
      };
      /**
       * Throws an error 'Undefined function {name}'
       * @param {string} name
       */


      FunctionNode.onUndefinedFunction = function (name) {
        throw new Error('Undefined function ' + name);
      }; // backup Node's toString function
      // @private


      var nodeToString = FunctionNode.prototype.toString;
      /**
       * Get string representation. (wrapper function)
       * This overrides parts of Node's toString function.
       * If callback is an object containing callbacks, it
       * calls the correct callback for the current node,
       * otherwise it falls back to calling Node's toString
       * function.
       *
       * @param {Object} options
       * @return {string} str
       * @override
       */

      FunctionNode.prototype.toString = function (options) {
        var customString;
        var name = this.fn.toString(options);

        if (options && typeof options.handler === 'object' && hasOwnProperty$1(options.handler, name)) {
          // callback is a map of callback functions
          customString = options.handler[name](this, options);
        }

        if (typeof customString !== 'undefined') {
          return customString;
        } // fall back to Node's toString


        return nodeToString.call(this, options);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionNode.prototype._toString = function (options) {
        var args = this.args.map(function (arg) {
          return arg.toString(options);
        });
        var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like "add(2, 4.2)"

        return fn + '(' + args.join(', ') + ')';
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      FunctionNode.prototype.toJSON = function () {
        return {
          mathjs: 'FunctionNode',
          fn: this.fn,
          args: this.args
        };
      };
      /**
       * Instantiate an AssignmentNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
       *                       where mathjs is optional
       * @returns {FunctionNode}
       */


      FunctionNode.fromJSON = function (json) {
        return new FunctionNode(json.fn, json.args);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionNode.prototype.toHTML = function (options) {
        var args = this.args.map(function (arg) {
          return arg.toHTML(options);
        }); // format the arguments like "add(2, 4.2)"

        return '<span class="math-function">' + escape$1(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
      };
      /*
       * Expand a LaTeX template
       *
       * @param {string} template
       * @param {Node} node
       * @param {Object} options
       * @private
       **/


      function expandTemplate(template, node, options) {
        var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$
        // while submatching identifier and 2 (in the second case)

        var regex = /\$(?:\{([a-z_][a-z_0-9]*)(?:\[([0-9]+)\])?\}|\$)/gi;
        var inputPos = 0; // position in the input string

        var match;

        while ((match = regex.exec(template)) !== null) {
          // go through all matches
          // add everything in front of the match to the LaTeX string
          latex += template.substring(inputPos, match.index);
          inputPos = match.index;

          if (match[0] === '$$') {
            // escaped dollar sign
            latex += '$';
            inputPos++;
          } else {
            // template parameter
            inputPos += match[0].length;
            var property = node[match[1]];

            if (!property) {
              throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
            }

            if (match[2] === undefined) {
              // no square brackets
              switch (typeof property) {
                case 'string':
                  latex += property;
                  break;

                case 'object':
                  if (isNode(property)) {
                    latex += property.toTex(options);
                  } else if (Array.isArray(property)) {
                    // make array of Nodes into comma separated list
                    latex += property.map(function (arg, index) {
                      if (isNode(arg)) {
                        return arg.toTex(options);
                      }

                      throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                    }).join(',');
                  } else {
                    throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
                  }

                  break;

                default:
                  throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
              }
            } else {
              // with square brackets
              if (isNode(property[match[2]] && property[match[2]])) {
                latex += property[match[2]].toTex(options);
              } else {
                throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
              }
            }
          }
        }

        latex += template.slice(inputPos); // append rest of the template

        return latex;
      } // backup Node's toTex function
      // @private


      var nodeToTex = FunctionNode.prototype.toTex;
      /**
       * Get LaTeX representation. (wrapper function)
       * This overrides parts of Node's toTex function.
       * If callback is an object containing callbacks, it
       * calls the correct callback for the current node,
       * otherwise it falls back to calling Node's toTex
       * function.
       *
       * @param {Object} options
       * @return {string}
       */

      FunctionNode.prototype.toTex = function (options) {
        var customTex;

        if (options && typeof options.handler === 'object' && hasOwnProperty$1(options.handler, this.name)) {
          // callback is a map of callback functions
          customTex = options.handler[this.name](this, options);
        }

        if (typeof customTex !== 'undefined') {
          return customTex;
        } // fall back to Node's toTex


        return nodeToTex.call(this, options);
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionNode.prototype._toTex = function (options) {
        var args = this.args.map(function (arg) {
          // get LaTeX of the arguments
          return arg.toTex(options);
        });
        var latexConverter;

        if (latexFunctions[this.name]) {
          latexConverter = latexFunctions[this.name];
        } // toTex property on the function itself


        if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {
          // .toTex is a callback function
          latexConverter = math[this.name].toTex;
        }

        var customToTex;

        switch (typeof latexConverter) {
          case 'function':
            // a callback function
            customToTex = latexConverter(this, options);
            break;

          case 'string':
            // a template string
            customToTex = expandTemplate(latexConverter, this, options);
            break;

          case 'object':
            // an object with different "converters" for different numbers of arguments
            switch (typeof latexConverter[args.length]) {
              case 'function':
                customToTex = latexConverter[args.length](this, options);
                break;

              case 'string':
                customToTex = expandTemplate(latexConverter[args.length], this, options);
                break;
            }

        }

        if (typeof customToTex !== 'undefined') {
          return customToTex;
        }

        return expandTemplate(defaultTemplate, this, options);
      };
      /**
       * Get identifier.
       * @return {string}
       */


      FunctionNode.prototype.getIdentifier = function () {
        return this.type + ':' + this.name;
      };

      return FunctionNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$1e = 'parse';
    var dependencies$1e = ['typed', 'numeric', 'config', 'AccessorNode', 'ArrayNode', 'AssignmentNode', 'BlockNode', 'ConditionalNode', 'ConstantNode', 'FunctionAssignmentNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'RangeNode', 'RelationalNode', 'SymbolNode'];
    var createParse = /* #__PURE__ */factory(name$1e, dependencies$1e, _ref => {
      var {
        typed,
        numeric,
        config,
        AccessorNode,
        ArrayNode,
        AssignmentNode,
        BlockNode,
        ConditionalNode,
        ConstantNode,
        FunctionAssignmentNode,
        FunctionNode,
        IndexNode,
        ObjectNode,
        OperatorNode,
        ParenthesisNode,
        RangeNode,
        RelationalNode,
        SymbolNode
      } = _ref;

      /**
       * Parse an expression. Returns a node tree, which can be evaluated by
       * invoking node.evaluate().
       *
       * Note the evaluating arbitrary expressions may involve security risks,
       * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
       *
       * Syntax:
       *
       *     math.parse(expr)
       *     math.parse(expr, options)
       *     math.parse([expr1, expr2, expr3, ...])
       *     math.parse([expr1, expr2, expr3, ...], options)
       *
       * Example:
       *
       *     const node1 = math.parse('sqrt(3^2 + 4^2)')
       *     node1.compile().evaluate() // 5
       *
       *     let scope = {a:3, b:4}
       *     const node2 = math.parse('a * b') // 12
       *     const code2 = node2.compile()
       *     code2.evaluate(scope) // 12
       *     scope.a = 5
       *     code2.evaluate(scope) // 20
       *
       *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
       *     nodes[2].compile().evaluate() // 12
       *
       * See also:
       *
       *     evaluate, compile
       *
       * @param {string | string[] | Matrix} expr          Expression to be parsed
       * @param {{nodes: Object<string, Node>}} [options]  Available options:
       *                                                   - `nodes` a set of custom nodes
       * @return {Node | Node[]} node
       * @throws {Error}
       */
      var parse = typed(name$1e, {
        string: function string(expression) {
          return parseStart(expression, {});
        },
        'Array | Matrix': function ArrayMatrix(expressions) {
          return parseMultiple(expressions, {});
        },
        'string, Object': function stringObject(expression, options) {
          var extraNodes = options.nodes !== undefined ? options.nodes : {};
          return parseStart(expression, extraNodes);
        },
        'Array | Matrix, Object': parseMultiple
      });

      function parseMultiple(expressions) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var extraNodes = options.nodes !== undefined ? options.nodes : {}; // parse an array or matrix with expressions

        return deepMap(expressions, function (elem) {
          if (typeof elem !== 'string') throw new TypeError('String expected');
          return parseStart(elem, extraNodes);
        });
      } // token types enumeration


      var TOKENTYPE = {
        NULL: 0,
        DELIMITER: 1,
        NUMBER: 2,
        SYMBOL: 3,
        UNKNOWN: 4
      }; // map with all delimiters

      var DELIMITERS = {
        ',': true,
        '(': true,
        ')': true,
        '[': true,
        ']': true,
        '{': true,
        '}': true,
        '"': true,
        '\'': true,
        ';': true,
        '+': true,
        '-': true,
        '*': true,
        '.*': true,
        '/': true,
        './': true,
        '%': true,
        '^': true,
        '.^': true,
        '~': true,
        '!': true,
        '&': true,
        '|': true,
        '^|': true,
        '=': true,
        ':': true,
        '?': true,
        '==': true,
        '!=': true,
        '<': true,
        '>': true,
        '<=': true,
        '>=': true,
        '<<': true,
        '>>': true,
        '>>>': true
      }; // map with all named delimiters

      var NAMED_DELIMITERS = {
        mod: true,
        to: true,
        in: true,
        and: true,
        xor: true,
        or: true,
        not: true
      };
      var CONSTANTS = {
        true: true,
        false: false,
        null: null,
        undefined
      };
      var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];

      function initialState() {
        return {
          extraNodes: {},
          // current extra nodes, must be careful not to mutate
          expression: '',
          // current expression
          comment: '',
          // last parsed comment
          index: 0,
          // current index in expr
          token: '',
          // current token
          tokenType: TOKENTYPE.NULL,
          // type of the token
          nestingLevel: 0,
          // level of nesting inside parameters, used to ignore newline characters
          conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here

        };
      }
      /**
       * View upto `length` characters of the expression starting at the current character.
       *
       * @param {Object} state
       * @param {number} [length=1] Number of characters to view
       * @returns {string}
       * @private
       */


      function currentString(state, length) {
        return state.expression.substr(state.index, length);
      }
      /**
       * View the current character. Returns '' if end of expression is reached.
       *
       * @param {Object} state
       * @returns {string}
       * @private
       */


      function currentCharacter(state) {
        return currentString(state, 1);
      }
      /**
       * Get the next character from the expression.
       * The character is stored into the char c. If the end of the expression is
       * reached, the function puts an empty string in c.
       * @private
       */


      function next(state) {
        state.index++;
      }
      /**
       * Preview the previous character from the expression.
       * @return {string} cNext
       * @private
       */


      function prevCharacter(state) {
        return state.expression.charAt(state.index - 1);
      }
      /**
       * Preview the next character from the expression.
       * @return {string} cNext
       * @private
       */


      function nextCharacter(state) {
        return state.expression.charAt(state.index + 1);
      }
      /**
       * Get next token in the current string expr.
       * The token and token type are available as token and tokenType
       * @private
       */


      function getToken(state) {
        state.tokenType = TOKENTYPE.NULL;
        state.token = '';
        state.comment = ''; // skip over ignored characters:

        while (true) {
          // comments:
          if (currentCharacter(state) === '#') {
            while (currentCharacter(state) !== '\n' && currentCharacter(state) !== '') {
              state.comment += currentCharacter(state);
              next(state);
            }
          } // whitespace: space, tab, and newline when inside parameters


          if (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {
            next(state);
          } else {
            break;
          }
        } // check for end of expression


        if (currentCharacter(state) === '') {
          // token is still empty
          state.tokenType = TOKENTYPE.DELIMITER;
          return;
        } // check for new line character


        if (currentCharacter(state) === '\n' && !state.nestingLevel) {
          state.tokenType = TOKENTYPE.DELIMITER;
          state.token = currentCharacter(state);
          next(state);
          return;
        }

        var c1 = currentCharacter(state);
        var c2 = currentString(state, 2);
        var c3 = currentString(state, 3);

        if (c3.length === 3 && DELIMITERS[c3]) {
          state.tokenType = TOKENTYPE.DELIMITER;
          state.token = c3;
          next(state);
          next(state);
          next(state);
          return;
        } // check for delimiters consisting of 2 characters


        if (c2.length === 2 && DELIMITERS[c2]) {
          state.tokenType = TOKENTYPE.DELIMITER;
          state.token = c2;
          next(state);
          next(state);
          return;
        } // check for delimiters consisting of 1 character


        if (DELIMITERS[c1]) {
          state.tokenType = TOKENTYPE.DELIMITER;
          state.token = c1;
          next(state);
          return;
        } // check for a number


        if (parse.isDigitDot(c1)) {
          state.tokenType = TOKENTYPE.NUMBER; // check for binary, octal, or hex

          var _c = currentString(state, 2);

          if (_c === '0b' || _c === '0o' || _c === '0x') {
            state.token += currentCharacter(state);
            next(state);
            state.token += currentCharacter(state);
            next(state);

            while (parse.isHexDigit(currentCharacter(state))) {
              state.token += currentCharacter(state);
              next(state);
            }

            if (currentCharacter(state) === '.') {
              // this number has a radix point
              state.token += '.';
              next(state); // get the digits after the radix

              while (parse.isHexDigit(currentCharacter(state))) {
                state.token += currentCharacter(state);
                next(state);
              }
            } else if (currentCharacter(state) === 'i') {
              // this number has a word size suffix
              state.token += 'i';
              next(state); // get the word size

              while (parse.isDigit(currentCharacter(state))) {
                state.token += currentCharacter(state);
                next(state);
              }
            }

            return;
          } // get number, can have a single dot


          if (currentCharacter(state) === '.') {
            state.token += currentCharacter(state);
            next(state);

            if (!parse.isDigit(currentCharacter(state))) {
              // this is no number, it is just a dot (can be dot notation)
              state.tokenType = TOKENTYPE.DELIMITER;
              return;
            }
          } else {
            while (parse.isDigit(currentCharacter(state))) {
              state.token += currentCharacter(state);
              next(state);
            }

            if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
              state.token += currentCharacter(state);
              next(state);
            }
          }

          while (parse.isDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          } // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"


          if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {
            if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {
              state.token += currentCharacter(state);
              next(state);

              if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {
                state.token += currentCharacter(state);
                next(state);
              } // Scientific notation MUST be followed by an exponent


              if (!parse.isDigit(currentCharacter(state))) {
                throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
              }

              while (parse.isDigit(currentCharacter(state))) {
                state.token += currentCharacter(state);
                next(state);
              }

              if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
                throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
              }
            } else if (nextCharacter(state) === '.') {
              next(state);
              throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
            }
          }

          return;
        } // check for variables, functions, named operators


        if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {
          while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          }

          if (hasOwnProperty$1(NAMED_DELIMITERS, state.token)) {
            state.tokenType = TOKENTYPE.DELIMITER;
          } else {
            state.tokenType = TOKENTYPE.SYMBOL;
          }

          return;
        } // something unknown is found, wrong characters -> a syntax error


        state.tokenType = TOKENTYPE.UNKNOWN;

        while (currentCharacter(state) !== '') {
          state.token += currentCharacter(state);
          next(state);
        }

        throw createSyntaxError(state, 'Syntax error in part "' + state.token + '"');
      }
      /**
       * Get next token and skip newline tokens
       */


      function getTokenSkipNewline(state) {
        do {
          getToken(state);
        } while (state.token === '\n'); // eslint-disable-line no-unmodified-loop-condition

      }
      /**
       * Open parameters.
       * New line characters will be ignored until closeParams(state) is called
       */


      function openParams(state) {
        state.nestingLevel++;
      }
      /**
       * Close parameters.
       * New line characters will no longer be ignored
       */


      function closeParams(state) {
        state.nestingLevel--;
      }
      /**
       * Checks whether the current character `c` is a valid alpha character:
       *
       * - A latin letter (upper or lower case) Ascii: a-z, A-Z
       * - An underscore                        Ascii: _
       * - A dollar sign                        Ascii: $
       * - A latin letter with accents          Unicode: \u00C0 - \u02AF
       * - A greek letter                       Unicode: \u0370 - \u03FF
       * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
       *
       * The previous and next characters are needed to determine whether
       * this character is part of a unicode surrogate pair.
       *
       * @param {string} c      Current character in the expression
       * @param {string} cPrev  Previous character
       * @param {string} cNext  Next character
       * @return {boolean}
       */


      parse.isAlpha = function isAlpha(c, cPrev, cNext) {
        return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);
      };
      /**
       * Test whether a character is a valid latin, greek, or letter-like character
       * @param {string} c
       * @return {boolean}
       */


      parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
        return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
      };
      /**
       * Test whether two given 16 bit characters form a surrogate pair of a
       * unicode math symbol.
       *
       * https://unicode-table.com/en/
       * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
       *
       * Note: In ES6 will be unicode aware:
       * https://stackoverflow.com/questions/280712/javascript-unicode-regexes
       * https://mathiasbynens.be/notes/es6-unicode-regex
       *
       * @param {string} high
       * @param {string} low
       * @return {boolean}
       */


      parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
        return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
      };
      /**
       * Check whether given character c is a white space character: space, tab, or enter
       * @param {string} c
       * @param {number} nestingLevel
       * @return {boolean}
       */


      parse.isWhitespace = function isWhitespace(c, nestingLevel) {
        // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
        return c === ' ' || c === '\t' || c === '\n' && nestingLevel > 0;
      };
      /**
       * Test whether the character c is a decimal mark (dot).
       * This is the case when it's not the start of a delimiter '.*', './', or '.^'
       * @param {string} c
       * @param {string} cNext
       * @return {boolean}
       */


      parse.isDecimalMark = function isDecimalMark(c, cNext) {
        return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
      };
      /**
       * checks if the given char c is a digit or dot
       * @param {string} c   a string with one character
       * @return {boolean}
       */


      parse.isDigitDot = function isDigitDot(c) {
        return c >= '0' && c <= '9' || c === '.';
      };
      /**
       * checks if the given char c is a digit
       * @param {string} c   a string with one character
       * @return {boolean}
       */


      parse.isDigit = function isDigit(c) {
        return c >= '0' && c <= '9';
      };
      /**
       * checks if the given char c is a hex digit
       * @param {string} c   a string with one character
       * @return {boolean}
       */


      parse.isHexDigit = function isHexDigit(c) {
        return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';
      };
      /**
       * Start of the parse levels below, in order of precedence
       * @return {Node} node
       * @private
       */


      function parseStart(expression, extraNodes) {
        var state = initialState();

        _extends$1(state, {
          expression,
          extraNodes
        });

        getToken(state);
        var node = parseBlock(state); // check for garbage at the end of the expression
        // an expression ends with a empty character '' and tokenType DELIMITER

        if (state.token !== '') {
          if (state.tokenType === TOKENTYPE.DELIMITER) {
            // user entered a not existing operator like "//"
            // TODO: give hints for aliases, for example with "<>" give as hint " did you mean !== ?"
            throw createError(state, 'Unexpected operator ' + state.token);
          } else {
            throw createSyntaxError(state, 'Unexpected part "' + state.token + '"');
          }
        }

        return node;
      }
      /**
       * Parse a block with expressions. Expressions can be separated by a newline
       * character '\n', or by a semicolon ';'. In case of a semicolon, no output
       * of the preceding line is returned.
       * @return {Node} node
       * @private
       */


      function parseBlock(state) {
        var node;
        var blocks = [];
        var visible;

        if (state.token !== '' && state.token !== '\n' && state.token !== ';') {
          node = parseAssignment(state);
          node.comment = state.comment;
        } // TODO: simplify this loop


        while (state.token === '\n' || state.token === ';') {
          // eslint-disable-line no-unmodified-loop-condition
          if (blocks.length === 0 && node) {
            visible = state.token !== ';';
            blocks.push({
              node,
              visible
            });
          }

          getToken(state);

          if (state.token !== '\n' && state.token !== ';' && state.token !== '') {
            node = parseAssignment(state);
            node.comment = state.comment;
            visible = state.token !== ';';
            blocks.push({
              node,
              visible
            });
          }
        }

        if (blocks.length > 0) {
          return new BlockNode(blocks);
        } else {
          if (!node) {
            node = new ConstantNode(undefined);
            node.comment = state.comment;
          }

          return node;
        }
      }
      /**
       * Assignment of a function or variable,
       * - can be a variable like 'a=2.3'
       * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
       * - defining a function like 'f(x) = x^2'
       * @return {Node} node
       * @private
       */


      function parseAssignment(state) {
        var name, args, value, valid;
        var node = parseConditional(state);

        if (state.token === '=') {
          if (isSymbolNode(node)) {
            // parse a variable assignment like 'a = 2/3'
            name = node.name;
            getTokenSkipNewline(state);
            value = parseAssignment(state);
            return new AssignmentNode(new SymbolNode(name), value);
          } else if (isAccessorNode(node)) {
            // parse a matrix subset assignment like 'A[1,2] = 4'
            getTokenSkipNewline(state);
            value = parseAssignment(state);
            return new AssignmentNode(node.object, node.index, value);
          } else if (isFunctionNode(node) && isSymbolNode(node.fn)) {
            // parse function assignment like 'f(x) = x^2'
            valid = true;
            args = [];
            name = node.name;
            node.args.forEach(function (arg, index) {
              if (isSymbolNode(arg)) {
                args[index] = arg.name;
              } else {
                valid = false;
              }
            });

            if (valid) {
              getTokenSkipNewline(state);
              value = parseAssignment(state);
              return new FunctionAssignmentNode(name, args, value);
            }
          }

          throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');
        }

        return node;
      }
      /**
       * conditional operation
       *
       *     condition ? truePart : falsePart
       *
       * Note: conditional operator is right-associative
       *
       * @return {Node} node
       * @private
       */


      function parseConditional(state) {
        var node = parseLogicalOr(state);

        while (state.token === '?') {
          // eslint-disable-line no-unmodified-loop-condition
          // set a conditional level, the range operator will be ignored as long
          // as conditionalLevel === state.nestingLevel.
          var prev = state.conditionalLevel;
          state.conditionalLevel = state.nestingLevel;
          getTokenSkipNewline(state);
          var condition = node;
          var trueExpr = parseAssignment(state);
          if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');
          state.conditionalLevel = null;
          getTokenSkipNewline(state);
          var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity

          node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level

          state.conditionalLevel = prev;
        }

        return node;
      }
      /**
       * logical or, 'x or y'
       * @return {Node} node
       * @private
       */


      function parseLogicalOr(state) {
        var node = parseLogicalXor(state);

        while (state.token === 'or') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);
        }

        return node;
      }
      /**
       * logical exclusive or, 'x xor y'
       * @return {Node} node
       * @private
       */


      function parseLogicalXor(state) {
        var node = parseLogicalAnd(state);

        while (state.token === 'xor') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);
        }

        return node;
      }
      /**
       * logical and, 'x and y'
       * @return {Node} node
       * @private
       */


      function parseLogicalAnd(state) {
        var node = parseBitwiseOr(state);

        while (state.token === 'and') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);
        }

        return node;
      }
      /**
       * bitwise or, 'x | y'
       * @return {Node} node
       * @private
       */


      function parseBitwiseOr(state) {
        var node = parseBitwiseXor(state);

        while (state.token === '|') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);
        }

        return node;
      }
      /**
       * bitwise exclusive or (xor), 'x ^| y'
       * @return {Node} node
       * @private
       */


      function parseBitwiseXor(state) {
        var node = parseBitwiseAnd(state);

        while (state.token === '^|') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);
        }

        return node;
      }
      /**
       * bitwise and, 'x & y'
       * @return {Node} node
       * @private
       */


      function parseBitwiseAnd(state) {
        var node = parseRelational(state);

        while (state.token === '&') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);
        }

        return node;
      }
      /**
       * Parse a chained conditional, like 'a > b >= c'
       * @return {Node} node
       */


      function parseRelational(state) {
        var params = [parseShift(state)];
        var conditionals = [];
        var operators = {
          '==': 'equal',
          '!=': 'unequal',
          '<': 'smaller',
          '>': 'larger',
          '<=': 'smallerEq',
          '>=': 'largerEq'
        };

        while (hasOwnProperty$1(operators, state.token)) {
          // eslint-disable-line no-unmodified-loop-condition
          var cond = {
            name: state.token,
            fn: operators[state.token]
          };
          conditionals.push(cond);
          getTokenSkipNewline(state);
          params.push(parseShift(state));
        }

        if (params.length === 1) {
          return params[0];
        } else if (params.length === 2) {
          return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);
        } else {
          return new RelationalNode(conditionals.map(c => c.fn), params);
        }
      }
      /**
       * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
       * @return {Node} node
       * @private
       */


      function parseShift(state) {
        var node, name, fn, params;
        node = parseConversion(state);
        var operators = {
          '<<': 'leftShift',
          '>>': 'rightArithShift',
          '>>>': 'rightLogShift'
        };

        while (hasOwnProperty$1(operators, state.token)) {
          name = state.token;
          fn = operators[name];
          getTokenSkipNewline(state);
          params = [node, parseConversion(state)];
          node = new OperatorNode(name, fn, params);
        }

        return node;
      }
      /**
       * conversion operators 'to' and 'in'
       * @return {Node} node
       * @private
       */


      function parseConversion(state) {
        var node, name, fn, params;
        node = parseRange(state);
        var operators = {
          to: 'to',
          in: 'to' // alias of 'to'

        };

        while (hasOwnProperty$1(operators, state.token)) {
          name = state.token;
          fn = operators[name];
          getTokenSkipNewline(state);

          if (name === 'in' && state.token === '') {
            // end of expression -> this is the unit 'in' ('inch')
            node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
          } else {
            // operator 'a to b' or 'a in b'
            params = [node, parseRange(state)];
            node = new OperatorNode(name, fn, params);
          }
        }

        return node;
      }
      /**
       * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
       * @return {Node} node
       * @private
       */


      function parseRange(state) {
        var node;
        var params = [];

        if (state.token === ':') {
          // implicit start=1 (one-based)
          node = new ConstantNode(1);
        } else {
          // explicit start
          node = parseAddSubtract(state);
        }

        if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {
          // we ignore the range operator when a conditional operator is being processed on the same level
          params.push(node); // parse step and end

          while (state.token === ':' && params.length < 3) {
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);

            if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {
              // implicit end
              params.push(new SymbolNode('end'));
            } else {
              // explicit end
              params.push(parseAddSubtract(state));
            }
          }

          if (params.length === 3) {
            // params = [start, step, end]
            node = new RangeNode(params[0], params[2], params[1]); // start, end, step
          } else {
            // length === 2
            // params = [start, end]
            node = new RangeNode(params[0], params[1]); // start, end
          }
        }

        return node;
      }
      /**
       * add or subtract
       * @return {Node} node
       * @private
       */


      function parseAddSubtract(state) {
        var node, name, fn, params;
        node = parseMultiplyDivide(state);
        var operators = {
          '+': 'add',
          '-': 'subtract'
        };

        while (hasOwnProperty$1(operators, state.token)) {
          name = state.token;
          fn = operators[name];
          getTokenSkipNewline(state);
          var rightNode = parseMultiplyDivide(state);

          if (rightNode.isPercentage) {
            params = [node, new OperatorNode('*', 'multiply', [node, rightNode])];
          } else {
            params = [node, rightNode];
          }

          node = new OperatorNode(name, fn, params);
        }

        return node;
      }
      /**
       * multiply, divide, modulus
       * @return {Node} node
       * @private
       */


      function parseMultiplyDivide(state) {
        var node, last, name, fn;
        node = parseImplicitMultiplication(state);
        last = node;
        var operators = {
          '*': 'multiply',
          '.*': 'dotMultiply',
          '/': 'divide',
          './': 'dotDivide'
        };

        while (true) {
          if (hasOwnProperty$1(operators, state.token)) {
            // explicit operators
            name = state.token;
            fn = operators[name];
            getTokenSkipNewline(state);
            last = parseImplicitMultiplication(state);
            node = new OperatorNode(name, fn, [node, last]);
          } else {
            break;
          }
        }

        return node;
      }
      /**
       * implicit multiplication
       * @return {Node} node
       * @private
       */


      function parseImplicitMultiplication(state) {
        var node, last;
        node = parseRule2(state);
        last = node;

        while (true) {
          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && isConstantNode(node) || state.tokenType === TOKENTYPE.NUMBER && !isConstantNode(last) && (!isOperatorNode(last) || last.op === '!') || state.token === '(') {
            // parse implicit multiplication
            //
            // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
            // number:      implicit multiplication like '(2+3)2'
            // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
            last = parseRule2(state);
            node = new OperatorNode('*', 'multiply', [node, last], true
            /* implicit */
            );
          } else {
            break;
          }
        }

        return node;
      }
      /**
       * Infamous "rule 2" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370
       * Explicit division gets higher precedence than implicit multiplication
       * when the division matches this pattern: [number] / [number] [symbol]
       * @return {Node} node
       * @private
       */


      function parseRule2(state) {
        var node = parsePercentage(state);
        var last = node;
        var tokenStates = [];

        while (true) {
          // Match the "number /" part of the pattern "number / number symbol"
          if (state.token === '/' && isConstantNode(last)) {
            // Look ahead to see if the next token is a number
            tokenStates.push(_extends$1({}, state));
            getTokenSkipNewline(state); // Match the "number / number" part of the pattern

            if (state.tokenType === TOKENTYPE.NUMBER) {
              // Look ahead again
              tokenStates.push(_extends$1({}, state));
              getTokenSkipNewline(state); // Match the "symbol" part of the pattern, or a left parenthesis

              if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {
                // We've matched the pattern "number / number symbol".
                // Rewind once and build the "number / number" node; the symbol will be consumed later
                _extends$1(state, tokenStates.pop());

                tokenStates.pop();
                last = parsePercentage(state);
                node = new OperatorNode('/', 'divide', [node, last]);
              } else {
                // Not a match, so rewind
                tokenStates.pop();

                _extends$1(state, tokenStates.pop());

                break;
              }
            } else {
              // Not a match, so rewind
              _extends$1(state, tokenStates.pop());

              break;
            }
          } else {
            break;
          }
        }

        return node;
      }
      /**
       * percentage or mod
       * @return {Node} node
       * @private
       */


      function parsePercentage(state) {
        var node, name, fn, params;
        node = parseUnary(state);
        var operators = {
          '%': 'mod',
          mod: 'mod'
        };

        while (hasOwnProperty$1(operators, state.token)) {
          name = state.token;
          fn = operators[name];
          getTokenSkipNewline(state);

          if (name === '%' && state.tokenType === TOKENTYPE.DELIMITER && state.token !== '(') {
            // If the expression contains only %, then treat that as /100
            node = new OperatorNode('/', 'divide', [node, new ConstantNode(100)], false, true);
          } else {
            params = [node, parseUnary(state)];
            node = new OperatorNode(name, fn, params);
          }
        }

        return node;
      }
      /**
       * Unary plus and minus, and logical and bitwise not
       * @return {Node} node
       * @private
       */


      function parseUnary(state) {
        var name, params, fn;
        var operators = {
          '-': 'unaryMinus',
          '+': 'unaryPlus',
          '~': 'bitNot',
          not: 'not'
        };

        if (hasOwnProperty$1(operators, state.token)) {
          fn = operators[state.token];
          name = state.token;
          getTokenSkipNewline(state);
          params = [parseUnary(state)];
          return new OperatorNode(name, fn, params);
        }

        return parsePow(state);
      }
      /**
       * power
       * Note: power operator is right associative
       * @return {Node} node
       * @private
       */


      function parsePow(state) {
        var node, name, fn, params;
        node = parseLeftHandOperators(state);

        if (state.token === '^' || state.token === '.^') {
          name = state.token;
          fn = name === '^' ? 'pow' : 'dotPow';
          getTokenSkipNewline(state);
          params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'

          node = new OperatorNode(name, fn, params);
        }

        return node;
      }
      /**
       * Left hand operators: factorial x!, ctranspose x'
       * @return {Node} node
       * @private
       */


      function parseLeftHandOperators(state) {
        var node, name, fn, params;
        node = parseCustomNodes(state);
        var operators = {
          '!': 'factorial',
          '\'': 'ctranspose'
        };

        while (hasOwnProperty$1(operators, state.token)) {
          name = state.token;
          fn = operators[name];
          getToken(state);
          params = [node];
          node = new OperatorNode(name, fn, params);
          node = parseAccessors(state, node);
        }

        return node;
      }
      /**
       * Parse a custom node handler. A node handler can be used to process
       * nodes in a custom way, for example for handling a plot.
       *
       * A handler must be passed as second argument of the parse function.
       * - must extend math.Node
       * - must contain a function _compile(defs: Object) : string
       * - must contain a function find(filter: Object) : Node[]
       * - must contain a function toString() : string
       * - the constructor is called with a single argument containing all parameters
       *
       * For example:
       *
       *     nodes = {
       *       'plot': PlotHandler
       *     }
       *
       * The constructor of the handler is called as:
       *
       *     node = new PlotHandler(params)
       *
       * The handler will be invoked when evaluating an expression like:
       *
       *     node = math.parse('plot(sin(x), x)', nodes)
       *
       * @return {Node} node
       * @private
       */


      function parseCustomNodes(state) {
        var params = [];

        if (state.tokenType === TOKENTYPE.SYMBOL && hasOwnProperty$1(state.extraNodes, state.token)) {
          var CustomNode = state.extraNodes[state.token];
          getToken(state); // parse parameters

          if (state.token === '(') {
            params = [];
            openParams(state);
            getToken(state);

            if (state.token !== ')') {
              params.push(parseAssignment(state)); // parse a list with parameters

              while (state.token === ',') {
                // eslint-disable-line no-unmodified-loop-condition
                getToken(state);
                params.push(parseAssignment(state));
              }
            }

            if (state.token !== ')') {
              throw createSyntaxError(state, 'Parenthesis ) expected');
            }

            closeParams(state);
            getToken(state);
          } // create a new custom node
          // noinspection JSValidateTypes


          return new CustomNode(params);
        }

        return parseSymbol(state);
      }
      /**
       * parse symbols: functions, variables, constants, units
       * @return {Node} node
       * @private
       */


      function parseSymbol(state) {
        var node, name;

        if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
          name = state.token;
          getToken(state);

          if (hasOwnProperty$1(CONSTANTS, name)) {
            // true, false, null, ...
            node = new ConstantNode(CONSTANTS[name]);
          } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {
            // NaN, Infinity
            node = new ConstantNode(numeric(name, 'number'));
          } else {
            node = new SymbolNode(name);
          } // parse function parameters and matrix index


          node = parseAccessors(state, node);
          return node;
        }

        return parseDoubleQuotesString(state);
      }
      /**
       * parse accessors:
       * - function invocation in round brackets (...), for example sqrt(2)
       * - index enclosed in square brackets [...], for example A[2,3]
       * - dot notation for properties, like foo.bar
       * @param {Object} state
       * @param {Node} node    Node on which to apply the parameters. If there
       *                       are no parameters in the expression, the node
       *                       itself is returned
       * @param {string[]} [types]  Filter the types of notations
       *                            can be ['(', '[', '.']
       * @return {Node} node
       * @private
       */


      function parseAccessors(state, node, types) {
        var params;

        while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {
          // eslint-disable-line no-unmodified-loop-condition
          params = [];

          if (state.token === '(') {
            if (isSymbolNode(node) || isAccessorNode(node)) {
              // function invocation like fn(2, 3) or obj.fn(2, 3)
              openParams(state);
              getToken(state);

              if (state.token !== ')') {
                params.push(parseAssignment(state)); // parse a list with parameters

                while (state.token === ',') {
                  // eslint-disable-line no-unmodified-loop-condition
                  getToken(state);
                  params.push(parseAssignment(state));
                }
              }

              if (state.token !== ')') {
                throw createSyntaxError(state, 'Parenthesis ) expected');
              }

              closeParams(state);
              getToken(state);
              node = new FunctionNode(node, params);
            } else {
              // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)
              // don't parse it here but let it be handled by parseImplicitMultiplication
              // with correct precedence
              return node;
            }
          } else if (state.token === '[') {
            // index notation like variable[2, 3]
            openParams(state);
            getToken(state);

            if (state.token !== ']') {
              params.push(parseAssignment(state)); // parse a list with parameters

              while (state.token === ',') {
                // eslint-disable-line no-unmodified-loop-condition
                getToken(state);
                params.push(parseAssignment(state));
              }
            }

            if (state.token !== ']') {
              throw createSyntaxError(state, 'Parenthesis ] expected');
            }

            closeParams(state);
            getToken(state);
            node = new AccessorNode(node, new IndexNode(params));
          } else {
            // dot notation like variable.prop
            getToken(state);

            if (state.tokenType !== TOKENTYPE.SYMBOL) {
              throw createSyntaxError(state, 'Property name expected after dot');
            }

            params.push(new ConstantNode(state.token));
            getToken(state);
            var dotNotation = true;
            node = new AccessorNode(node, new IndexNode(params, dotNotation));
          }
        }

        return node;
      }
      /**
       * Parse a double quotes string.
       * @return {Node} node
       * @private
       */


      function parseDoubleQuotesString(state) {
        var node, str;

        if (state.token === '"') {
          str = parseDoubleQuotesStringToken(state); // create constant

          node = new ConstantNode(str); // parse index parameters

          node = parseAccessors(state, node);
          return node;
        }

        return parseSingleQuotesString(state);
      }
      /**
       * Parse a string surrounded by double quotes "..."
       * @return {string}
       */


      function parseDoubleQuotesStringToken(state) {
        var str = '';

        while (currentCharacter(state) !== '' && currentCharacter(state) !== '"') {
          if (currentCharacter(state) === '\\') {
            // escape character, immediately process the next
            // character to prevent stopping at a next '\"'
            str += currentCharacter(state);
            next(state);
          }

          str += currentCharacter(state);
          next(state);
        }

        getToken(state);

        if (state.token !== '"') {
          throw createSyntaxError(state, 'End of string " expected');
        }

        getToken(state);
        return JSON.parse('"' + str + '"'); // unescape escaped characters
      }
      /**
       * Parse a single quotes string.
       * @return {Node} node
       * @private
       */


      function parseSingleQuotesString(state) {
        var node, str;

        if (state.token === '\'') {
          str = parseSingleQuotesStringToken(state); // create constant

          node = new ConstantNode(str); // parse index parameters

          node = parseAccessors(state, node);
          return node;
        }

        return parseMatrix(state);
      }
      /**
       * Parse a string surrounded by single quotes '...'
       * @return {string}
       */


      function parseSingleQuotesStringToken(state) {
        var str = '';

        while (currentCharacter(state) !== '' && currentCharacter(state) !== '\'') {
          if (currentCharacter(state) === '\\') {
            // escape character, immediately process the next
            // character to prevent stopping at a next '\''
            str += currentCharacter(state);
            next(state);
          }

          str += currentCharacter(state);
          next(state);
        }

        getToken(state);

        if (state.token !== '\'') {
          throw createSyntaxError(state, 'End of string \' expected');
        }

        getToken(state);
        return JSON.parse('"' + str + '"'); // unescape escaped characters
      }
      /**
       * parse the matrix
       * @return {Node} node
       * @private
       */


      function parseMatrix(state) {
        var array, params, rows, cols;

        if (state.token === '[') {
          // matrix [...]
          openParams(state);
          getToken(state);

          if (state.token !== ']') {
            // this is a non-empty matrix
            var row = parseRow(state);

            if (state.token === ';') {
              // 2 dimensional array
              rows = 1;
              params = [row]; // the rows of the matrix are separated by dot-comma's

              while (state.token === ';') {
                // eslint-disable-line no-unmodified-loop-condition
                getToken(state);
                params[rows] = parseRow(state);
                rows++;
              }

              if (state.token !== ']') {
                throw createSyntaxError(state, 'End of matrix ] expected');
              }

              closeParams(state);
              getToken(state); // check if the number of columns matches in all rows

              cols = params[0].items.length;

              for (var r = 1; r < rows; r++) {
                if (params[r].items.length !== cols) {
                  throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');
                }
              }

              array = new ArrayNode(params);
            } else {
              // 1 dimensional vector
              if (state.token !== ']') {
                throw createSyntaxError(state, 'End of matrix ] expected');
              }

              closeParams(state);
              getToken(state);
              array = row;
            }
          } else {
            // this is an empty matrix "[ ]"
            closeParams(state);
            getToken(state);
            array = new ArrayNode([]);
          }

          return parseAccessors(state, array);
        }

        return parseObject(state);
      }
      /**
       * Parse a single comma-separated row from a matrix, like 'a, b, c'
       * @return {ArrayNode} node
       */


      function parseRow(state) {
        var params = [parseAssignment(state)];
        var len = 1;

        while (state.token === ',') {
          // eslint-disable-line no-unmodified-loop-condition
          getToken(state); // parse expression

          params[len] = parseAssignment(state);
          len++;
        }

        return new ArrayNode(params);
      }
      /**
       * parse an object, enclosed in angle brackets{...}, for example {value: 2}
       * @return {Node} node
       * @private
       */


      function parseObject(state) {
        if (state.token === '{') {
          openParams(state);
          var key;
          var properties = {};

          do {
            getToken(state);

            if (state.token !== '}') {
              // parse key
              if (state.token === '"') {
                key = parseDoubleQuotesStringToken(state);
              } else if (state.token === '\'') {
                key = parseSingleQuotesStringToken(state);
              } else if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
                key = state.token;
                getToken(state);
              } else {
                throw createSyntaxError(state, 'Symbol or string expected as object key');
              } // parse key/value separator


              if (state.token !== ':') {
                throw createSyntaxError(state, 'Colon : expected after object key');
              }

              getToken(state); // parse key

              properties[key] = parseAssignment(state);
            }
          } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition


          if (state.token !== '}') {
            throw createSyntaxError(state, 'Comma , or bracket } expected after object value');
          }

          closeParams(state);
          getToken(state);
          var node = new ObjectNode(properties); // parse index parameters

          node = parseAccessors(state, node);
          return node;
        }

        return parseNumber(state);
      }
      /**
       * parse a number
       * @return {Node} node
       * @private
       */


      function parseNumber(state) {
        var numberStr;

        if (state.tokenType === TOKENTYPE.NUMBER) {
          // this is a number
          numberStr = state.token;
          getToken(state);
          return new ConstantNode(numeric(numberStr, config.number));
        }

        return parseParentheses(state);
      }
      /**
       * parentheses
       * @return {Node} node
       * @private
       */


      function parseParentheses(state) {
        var node; // check if it is a parenthesized expression

        if (state.token === '(') {
          // parentheses (...)
          openParams(state);
          getToken(state);
          node = parseAssignment(state); // start again

          if (state.token !== ')') {
            throw createSyntaxError(state, 'Parenthesis ) expected');
          }

          closeParams(state);
          getToken(state);
          node = new ParenthesisNode(node);
          node = parseAccessors(state, node);
          return node;
        }

        return parseEnd(state);
      }
      /**
       * Evaluated when the expression is not yet ended but expected to end
       * @return {Node} res
       * @private
       */


      function parseEnd(state) {
        if (state.token === '') {
          // syntax error or unexpected end of expression
          throw createSyntaxError(state, 'Unexpected end of expression');
        } else {
          throw createSyntaxError(state, 'Value expected');
        }
      }
      /**
       * Shortcut for getting the current row value (one based)
       * Returns the line of the currently handled expression
       * @private
       */

      /* TODO: implement keeping track on the row number
      function row () {
        return null
      }
      */

      /**
       * Shortcut for getting the current col value (one based)
       * Returns the column (position) where the last state.token starts
       * @private
       */


      function col(state) {
        return state.index - state.token.length + 1;
      }
      /**
       * Create an error
       * @param {Object} state
       * @param {string} message
       * @return {SyntaxError} instantiated error
       * @private
       */


      function createSyntaxError(state, message) {
        var c = col(state);
        var error = new SyntaxError(message + ' (char ' + c + ')');
        error.char = c;
        return error;
      }
      /**
       * Create an error
       * @param {Object} state
       * @param {string} message
       * @return {Error} instantiated error
       * @private
       */


      function createError(state, message) {
        var c = col(state);
        var error = new SyntaxError(message + ' (char ' + c + ')');
        error.char = c;
        return error;
      }

      return parse;
    });

    var name$1d = 'compile';
    var dependencies$1d = ['typed', 'parse'];
    var createCompile = /* #__PURE__ */factory(name$1d, dependencies$1d, _ref => {
      var {
        typed,
        parse
      } = _ref;

      /**
       * Parse and compile an expression.
       * Returns a an object with a function `evaluate([scope])` to evaluate the
       * compiled expression.
       *
       * Syntax:
       *
       *     math.compile(expr)                       // returns one node
       *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
       *
       * Examples:
       *
       *     const code1 = math.compile('sqrt(3^2 + 4^2)')
       *     code1.evaluate() // 5
       *
       *     let scope = {a: 3, b: 4}
       *     const code2 = math.compile('a * b') // 12
       *     code2.evaluate(scope) // 12
       *     scope.a = 5
       *     code2.evaluate(scope) // 20
       *
       *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])
       *     nodes[2].evaluate() // 12
       *
       * See also:
       *
       *    parse, evaluate
       *
       * @param {string | string[] | Array | Matrix} expr
       *            The expression to be compiled
       * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code
       *            An object with the compiled expression
       * @throws {Error}
       */
      return typed(name$1d, {
        string: function string(expr) {
          return parse(expr).compile();
        },
        'Array | Matrix': function ArrayMatrix(expr) {
          return deepMap(expr, function (entry) {
            return parse(entry).compile();
          });
        }
      });
    });

    var name$1c = 'evaluate';
    var dependencies$1c = ['typed', 'parse'];
    var createEvaluate = /* #__PURE__ */factory(name$1c, dependencies$1c, _ref => {
      var {
        typed,
        parse
      } = _ref;

      /**
       * Evaluate an expression.
       *
       * Note the evaluating arbitrary expressions may involve security risks,
       * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
       *
       * Syntax:
       *
       *     math.evaluate(expr)
       *     math.evaluate(expr, scope)
       *     math.evaluate([expr1, expr2, expr3, ...])
       *     math.evaluate([expr1, expr2, expr3, ...], scope)
       *
       * Example:
       *
       *     math.evaluate('(2+3)/4')                // 1.25
       *     math.evaluate('sqrt(3^2 + 4^2)')        // 5
       *     math.evaluate('sqrt(-4)')               // 2i
       *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]
       *
       *     let scope = {a:3, b:4}
       *     math.evaluate('a * b', scope)           // 12
       *
       * See also:
       *
       *    parse, compile
       *
       * @param {string | string[] | Matrix} expr   The expression to be evaluated
       * @param {Object} [scope]                    Scope to read/write variables
       * @return {*} The result of the expression
       * @throws {Error}
       */
      return typed(name$1c, {
        string: function string(expr) {
          var scope = createEmptyMap();
          return parse(expr).compile().evaluate(scope);
        },
        'string, Map | Object': function stringMapObject(expr, scope) {
          return parse(expr).compile().evaluate(scope);
        },
        'Array | Matrix': function ArrayMatrix(expr) {
          var scope = createEmptyMap();
          return deepMap(expr, function (entry) {
            return parse(entry).compile().evaluate(scope);
          });
        },
        'Array | Matrix, Map | Object': function ArrayMatrixMapObject(expr, scope) {
          return deepMap(expr, function (entry) {
            return parse(entry).compile().evaluate(scope);
          });
        }
      });
    });

    var name$1b = 'Parser';
    var dependencies$1b = ['evaluate'];
    var createParserClass = /* #__PURE__ */factory(name$1b, dependencies$1b, _ref => {
      var {
        evaluate
      } = _ref;

      /**
       * @constructor Parser
       * Parser contains methods to evaluate or parse expressions, and has a number
       * of convenience methods to get, set, and remove variables from memory. Parser
       * keeps a scope containing variables in memory, which is used for all
       * evaluations.
       *
       * Methods:
       *    const result = parser.evaluate(expr)  // evaluate an expression
       *    const value = parser.get(name)        // retrieve a variable from the parser
       *    const values = parser.getAll()        // retrieve all defined variables
       *    parser.set(name, value)               // set a variable in the parser
       *    parser.remove(name)                   // clear a variable from the
       *                                          // parsers scope
       *    parser.clear()                        // clear the parsers scope
       *
       * Example usage:
       *    const parser = new Parser()
       *    // Note: there is a convenience method which can be used instead:
       *    // const parser = new math.parser()
       *
       *    // evaluate expressions
       *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5
       *    parser.evaluate('sqrt(-4)')               // 2i
       *    parser.evaluate('2 inch in cm')           // 5.08 cm
       *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476
       *
       *    // define variables and functions
       *    parser.evaluate('x = 7 / 2')              // 3.5
       *    parser.evaluate('x + 3')                  // 6.5
       *    parser.evaluate('f(x, y) = x^y')          // f(x, y)
       *    parser.evaluate('f(2, 3)')                // 8
       *
       *    // get and set variables and functions
       *    const x = parser.get('x')                 // 7
       *    const f = parser.get('f')                 // function
       *    const g = f(3, 2)                         // 9
       *    parser.set('h', 500)
       *    const i = parser.evaluate('h / 2')        // 250
       *    parser.set('hello', function (name) {
       *        return 'hello, ' + name + '!'
       *    })
       *    parser.evaluate('hello("user")')          // "hello, user!"
       *
       *    // clear defined functions and variables
       *    parser.clear()
       *
       */
      function Parser() {
        if (!(this instanceof Parser)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        Object.defineProperty(this, 'scope', {
          value: createEmptyMap(),
          writable: false
        });
      }
      /**
       * Attach type information
       */


      Parser.prototype.type = 'Parser';
      Parser.prototype.isParser = true;
      /**
       * Parse and evaluate the given expression
       * @param {string | string[]} expr   A string containing an expression,
       *                                   for example "2+3", or a list with expressions
       * @return {*} result     The result, or undefined when the expression was empty
       * @throws {Error}
       */

      Parser.prototype.evaluate = function (expr) {
        // TODO: validate arguments
        return evaluate(expr, this.scope);
      };
      /**
       * Get a variable (a function or variable) by name from the parsers scope.
       * Returns undefined when not found
       * @param {string} name
       * @return {* | undefined} value
       */


      Parser.prototype.get = function (name) {
        // TODO: validate arguments
        if (this.scope.has(name)) {
          return this.scope.get(name);
        }
      };
      /**
       * Get a map with all defined variables
       * @return {Object} values
       */


      Parser.prototype.getAll = function () {
        return toObject(this.scope);
      };
      /**
       * Get a map with all defined variables
       * @return {Map} values
       */


      Parser.prototype.getAllAsMap = function () {
        return this.scope;
      };
      /**
       * Set a symbol (a function or variable) by name from the parsers scope.
       * @param {string} name
       * @param {* | undefined} value
       */


      Parser.prototype.set = function (name, value) {
        this.scope.set(name, value);
        return value;
      };
      /**
       * Remove a variable from the parsers scope
       * @param {string} name
       */


      Parser.prototype.remove = function (name) {
        this.scope.delete(name);
      };
      /**
       * Clear the scope with variables and functions
       */


      Parser.prototype.clear = function () {
        this.scope.clear();
      };

      return Parser;
    }, {
      isClass: true
    });

    var name$1a = 'parser';
    var dependencies$1a = ['typed', 'Parser'];
    var createParser = /* #__PURE__ */factory(name$1a, dependencies$1a, _ref => {
      var {
        typed,
        Parser
      } = _ref;

      /**
       * Create a parser. The function creates a new `math.Parser` object.
       *
       * Syntax:
       *
       *    math.parser()
       *
       * Examples:
       *
       *     const parser = new math.parser()
       *
       *     // evaluate expressions
       *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5
       *     const b = parser.evaluate('sqrt(-4)')        // 2i
       *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm
       *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476
       *
       *     // define variables and functions
       *     parser.evaluate('x = 7 / 2')             // 3.5
       *     parser.evaluate('x + 3')                 // 6.5
       *     parser.evaluate('f(x, y) = x^y')         // f(x, y)
       *     parser.evaluate('f(2, 3)')               // 8
       *
       *     // get and set variables and functions
       *     const x = parser.get('x')                // 7
       *     const f = parser.get('f')                // function
       *     const g = f(3, 2)                        // 9
       *     parser.set('h', 500)
       *     const i = parser.evaluate('h / 2')       // 250
       *     parser.set('hello', function (name) {
       *       return 'hello, ' + name + '!'
       *     })
       *     parser.evaluate('hello("user")')         // "hello, user!"
       *
       *     // clear defined functions and variables
       *     parser.clear()
       *
       * See also:
       *
       *    evaluate, compile, parse
       *
       * @return {Parser} Parser
       */
      return typed(name$1a, {
        '': function _() {
          return new Parser();
        }
      });
    });

    var name$19 = 'lup';
    var dependencies$19 = ['typed', 'matrix', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'larger', 'equalScalar', 'unaryMinus', 'DenseMatrix', 'SparseMatrix', 'Spa'];
    var createLup = /* #__PURE__ */factory(name$19, dependencies$19, _ref => {
      var {
        typed,
        matrix,
        abs,
        addScalar,
        divideScalar,
        multiplyScalar,
        subtract,
        larger,
        equalScalar,
        unaryMinus,
        DenseMatrix,
        SparseMatrix,
        Spa
      } = _ref;

      /**
       * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
       * row permutation vector `p` where `A[p,:] = L * U`
       *
       * Syntax:
       *
       *    math.lup(A)
       *
       * Example:
       *
       *    const m = [[2, 1], [1, 4]]
       *    const r = math.lup(m)
       *    // r = {
       *    //   L: [[1, 0], [0.5, 1]],
       *    //   U: [[2, 1], [0, 3.5]],
       *    //   P: [0, 1]
       *    // }
       *
       * See also:
       *
       *    slu, lsolve, lusolve, usolve
       *
       * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
       *
       * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
       */
      return typed(name$19, {
        DenseMatrix: function DenseMatrix(m) {
          return _denseLUP(m);
        },
        SparseMatrix: function SparseMatrix(m) {
          return _sparseLUP(m);
        },
        Array: function Array(a) {
          // create dense matrix from array
          var m = matrix(a); // lup, use matrix implementation

          var r = _denseLUP(m); // result


          return {
            L: r.L.valueOf(),
            U: r.U.valueOf(),
            p: r.p
          };
        }
      });

      function _denseLUP(m) {
        // rows & columns
        var rows = m._size[0];
        var columns = m._size[1]; // minimum rows and columns

        var n = Math.min(rows, columns); // matrix array, clone original data

        var data = clone$1(m._data); // l matrix arrays

        var ldata = [];
        var lsize = [rows, n]; // u matrix arrays

        var udata = [];
        var usize = [n, columns]; // vars

        var i, j, k; // permutation vector

        var p = [];

        for (i = 0; i < rows; i++) {
          p[i] = i;
        } // loop columns


        for (j = 0; j < columns; j++) {
          // skip first column in upper triangular matrix
          if (j > 0) {
            // loop rows
            for (i = 0; i < rows; i++) {
              // min i,j
              var min = Math.min(i, j); // v[i, j]

              var s = 0; // loop up to min

              for (k = 0; k < min; k++) {
                // s = l[i, k] - data[k, j]
                s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
              }

              data[i][j] = subtract(data[i][j], s);
            }
          } // row with larger value in cvector, row >= j


          var pi = j;
          var pabsv = 0;
          var vjj = 0; // loop rows

          for (i = j; i < rows; i++) {
            // data @ i, j
            var v = data[i][j]; // absolute value

            var absv = abs(v); // value is greater than pivote value

            if (larger(absv, pabsv)) {
              // store row
              pi = i; // update max value

              pabsv = absv; // value @ [j, j]

              vjj = v;
            }
          } // swap rows (j <-> pi)


          if (j !== pi) {
            // swap values j <-> pi in p
            p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data

            DenseMatrix._swapRows(j, pi, data);
          } // check column is in lower triangular matrix


          if (j < rows) {
            // loop rows (lower triangular matrix)
            for (i = j + 1; i < rows; i++) {
              // value @ i, j
              var vij = data[i][j];

              if (!equalScalar(vij, 0)) {
                // update data
                data[i][j] = divideScalar(data[i][j], vjj);
              }
            }
          }
        } // loop columns


        for (j = 0; j < columns; j++) {
          // loop rows
          for (i = 0; i < rows; i++) {
            // initialize row in arrays
            if (j === 0) {
              // check row exists in upper triangular matrix
              if (i < columns) {
                // U
                udata[i] = [];
              } // L


              ldata[i] = [];
            } // check we are in the upper triangular matrix


            if (i < j) {
              // check row exists in upper triangular matrix
              if (i < columns) {
                // U
                udata[i][j] = data[i][j];
              } // check column exists in lower triangular matrix


              if (j < rows) {
                // L
                ldata[i][j] = 0;
              }

              continue;
            } // diagonal value


            if (i === j) {
              // check row exists in upper triangular matrix
              if (i < columns) {
                // U
                udata[i][j] = data[i][j];
              } // check column exists in lower triangular matrix


              if (j < rows) {
                // L
                ldata[i][j] = 1;
              }

              continue;
            } // check row exists in upper triangular matrix


            if (i < columns) {
              // U
              udata[i][j] = 0;
            } // check column exists in lower triangular matrix


            if (j < rows) {
              // L
              ldata[i][j] = data[i][j];
            }
          }
        } // l matrix


        var l = new DenseMatrix({
          data: ldata,
          size: lsize
        }); // u matrix

        var u = new DenseMatrix({
          data: udata,
          size: usize
        }); // p vector

        var pv = [];

        for (i = 0, n = p.length; i < n; i++) {
          pv[p[i]] = i;
        } // return matrices


        return {
          L: l,
          U: u,
          p: pv,
          toString: function toString() {
            return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
          }
        };
      }

      function _sparseLUP(m) {
        // rows & columns
        var rows = m._size[0];
        var columns = m._size[1]; // minimum rows and columns

        var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)

        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // l matrix arrays

        var lvalues = [];
        var lindex = [];
        var lptr = [];
        var lsize = [rows, n]; // u matrix arrays

        var uvalues = [];
        var uindex = [];
        var uptr = [];
        var usize = [n, columns]; // vars

        var i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)

        var pvCo = [];
        var pvOc = [];

        for (i = 0; i < rows; i++) {
          pvCo[i] = i;
          pvOc[i] = i;
        } // swap indices in permutation vectors (condition x < y)!


        var swapIndeces = function swapIndeces(x, y) {
          // find pv indeces getting data from x and y
          var kx = pvOc[x];
          var ky = pvOc[y]; // update permutation vector current -> original

          pvCo[kx] = y;
          pvCo[ky] = x; // update permutation vector original -> current

          pvOc[x] = ky;
          pvOc[y] = kx;
        }; // loop columns


        var _loop = function _loop() {
          // sparse accumulator
          var spa = new Spa(); // check lower triangular matrix has a value @ column j

          if (j < rows) {
            // update ptr
            lptr.push(lvalues.length); // first value in j column for lower triangular matrix

            lvalues.push(1);
            lindex.push(j);
          } // update ptr


          uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

          var k0 = ptr[j];
          var k1 = ptr[j + 1]; // copy column j into sparse accumulator

          for (k = k0; k < k1; k++) {
            // row
            i = index[k]; // copy column values into sparse accumulator (use permutation vector)

            spa.set(pvCo[i], values[k]);
          } // skip first column in upper triangular matrix


          if (j > 0) {
            // loop rows in column j (above diagonal)
            spa.forEach(0, j - 1, function (k, vkj) {
              // loop rows in column k (L)
              SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
                // check row is below k
                if (i > k) {
                  // update spa value
                  spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
                }
              });
            });
          } // row with larger value in spa, row >= j


          var pi = j;
          var vjj = spa.get(j);
          var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)

          spa.forEach(j + 1, rows - 1, function (x, v) {
            // absolute value
            var absv = abs(v); // value is greater than pivote value

            if (larger(absv, pabsv)) {
              // store row
              pi = x; // update max value

              pabsv = absv; // value @ [j, j]

              vjj = v;
            }
          }); // swap rows (j <-> pi)

          if (j !== pi) {
            // swap values j <-> pi in L
            SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U


            SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa


            spa.swap(j, pi); // update permutation vector (swap values @ j, pi)

            swapIndeces(j, pi);
          } // loop values in spa (order by row)


          spa.forEach(0, rows - 1, function (x, v) {
            // check we are above diagonal
            if (x <= j) {
              // update upper triangular matrix
              uvalues.push(v);
              uindex.push(x);
            } else {
              // update value
              v = divideScalar(v, vjj); // check value is non zero

              if (!equalScalar(v, 0)) {
                // update lower triangular matrix
                lvalues.push(v);
                lindex.push(x);
              }
            }
          });
        };

        for (j = 0; j < columns; j++) {
          _loop();
        } // update ptrs


        uptr.push(uvalues.length);
        lptr.push(lvalues.length); // return matrices

        return {
          L: new SparseMatrix({
            values: lvalues,
            index: lindex,
            ptr: lptr,
            size: lsize
          }),
          U: new SparseMatrix({
            values: uvalues,
            index: uindex,
            ptr: uptr,
            size: usize
          }),
          p: pvCo,
          toString: function toString() {
            return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
          }
        };
      }
    });

    var name$18 = 'qr';
    var dependencies$18 = ['typed', 'matrix', 'zeros', 'identity', 'isZero', 'equal', 'sign', 'sqrt', 'conj', 'unaryMinus', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'complex'];
    var createQr = /* #__PURE__ */factory(name$18, dependencies$18, _ref => {
      var {
        typed,
        matrix,
        zeros,
        identity,
        isZero,
        equal,
        sign,
        sqrt,
        conj,
        unaryMinus,
        addScalar,
        divideScalar,
        multiplyScalar,
        subtract,
        complex
      } = _ref;

      /**
       * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in
       * two matrices (`Q`, `R`) where `Q` is an
       * orthogonal matrix and `R` is an upper triangular matrix.
       *
       * Syntax:
       *
       *    math.qr(A)
       *
       * Example:
       *
       *    const m = [
       *      [1, -1,  4],
       *      [1,  4, -2],
       *      [1,  4,  2],
       *      [1,  -1, 0]
       *    ]
       *    const result = math.qr(m)
       *    // r = {
       *    //   Q: [
       *    //     [0.5, -0.5,   0.5],
       *    //     [0.5,  0.5,  -0.5],
       *    //     [0.5,  0.5,   0.5],
       *    //     [0.5, -0.5,  -0.5],
       *    //   ],
       *    //   R: [
       *    //     [2, 3,  2],
       *    //     [0, 5, -2],
       *    //     [0, 0,  4],
       *    //     [0, 0,  0]
       *    //   ]
       *    // }
       *
       * See also:
       *
       *    lup, lusolve
       *
       * @param {Matrix | Array} A    A two dimensional matrix or array
       * for which to get the QR decomposition.
       *
       * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
       * matrix and R: the upper triangular matrix
       */
      return _extends$1(typed(name$18, {
        DenseMatrix: function DenseMatrix(m) {
          return _denseQR(m);
        },
        SparseMatrix: function SparseMatrix(m) {
          return _sparseQR();
        },
        Array: function Array(a) {
          // create dense matrix from array
          var m = matrix(a); // lup, use matrix implementation

          var r = _denseQR(m); // result


          return {
            Q: r.Q.valueOf(),
            R: r.R.valueOf()
          };
        }
      }), {
        _denseQRimpl
      });

      function _denseQRimpl(m) {
        // rows & columns (m x n)
        var rows = m._size[0]; // m

        var cols = m._size[1]; // n

        var Q = identity([rows], 'dense');
        var Qdata = Q._data;
        var R = m.clone();
        var Rdata = R._data; // vars

        var i, j, k;
        var w = zeros([rows], '');

        for (k = 0; k < Math.min(cols, rows); ++k) {
          /*
           * **k-th Household matrix**
           *
           * The matrix I - 2*v*transpose(v)
           * x     = first column of A
           * x1    = first element of x
           * alpha = x1 / |x1| * |x|
           * e1    = tranpose([1, 0, 0, ...])
           * u     = x - alpha * e1
           * v     = u / |u|
           *
           * Household matrix = I - 2 * v * tranpose(v)
           *
           *  * Initially Q = I and R = A.
           *  * Household matrix is a reflection in a plane normal to v which
           *    will zero out all but the top right element in R.
           *  * Appplying reflection to both Q and R will not change product.
           *  * Repeat this process on the (1,1) minor to get R as an upper
           *    triangular matrix.
           *  * Reflections leave the magnitude of the columns of Q unchanged
           *    so Q remains othoganal.
           *
           */
          var pivot = Rdata[k][k];
          var sgn = unaryMinus(equal(pivot, 0) ? 1 : sign(pivot));
          var conjSgn = conj(sgn);
          var alphaSquared = 0;

          for (i = k; i < rows; i++) {
            alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));
          }

          var alpha = multiplyScalar(sgn, sqrt(alphaSquared));

          if (!isZero(alpha)) {
            // first element in vector u
            var u1 = subtract(pivot, alpha); // w = v * u1 / |u|    (only elements k to (rows-1) are used)

            w[k] = 1;

            for (i = k + 1; i < rows; i++) {
              w[i] = divideScalar(Rdata[i][k], u1);
            } // tau = - conj(u1 / alpha)


            var tau = unaryMinus(conj(divideScalar(u1, alpha)));
            var s = void 0;
            /*
             * tau and w have been choosen so that
             *
             * 2 * v * tranpose(v) = tau * w * tranpose(w)
             */

            /*
             * -- calculate R = R - tau * w * tranpose(w) * R --
             * Only do calculation with rows k to (rows-1)
             * Additionally columns 0 to (k-1) will not be changed by this
             *   multiplication so do not bother recalculating them
             */

            for (j = k; j < cols; j++) {
              s = 0.0; // calculate jth element of [tranpose(w) * R]

              for (i = k; i < rows; i++) {
                s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
              } // calculate the jth element of [tau * transpose(w) * R]


              s = multiplyScalar(s, tau);

              for (i = k; i < rows; i++) {
                Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);
              }
            }
            /*
             * -- calculate Q = Q - tau * Q * w * transpose(w) --
             * Q is a square matrix (rows x rows)
             * Only do calculation with columns k to (rows-1)
             * Additionally rows 0 to (k-1) will not be changed by this
             *   multiplication so do not bother recalculating them
             */


            for (i = 0; i < rows; i++) {
              s = 0.0; // calculate ith element of [Q * w]

              for (j = k; j < rows; j++) {
                s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
              } // calculate the ith element of [tau * Q * w]


              s = multiplyScalar(s, tau);

              for (j = k; j < rows; ++j) {
                Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);
              }
            }
          }
        } // return matrices


        return {
          Q,
          R,
          toString: function toString() {
            return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
          }
        };
      }

      function _denseQR(m) {
        var ret = _denseQRimpl(m);

        var Rdata = ret.R._data;

        if (m._data.length > 0) {
          var zero = Rdata[0][0].type === 'Complex' ? complex(0) : 0;

          for (var i = 0; i < Rdata.length; ++i) {
            for (var j = 0; j < i && j < (Rdata[0] || []).length; ++j) {
              Rdata[i][j] = zero;
            }
          }
        }

        return ret;
      }

      function _sparseQR(m) {
        throw new Error('qr not implemented for sparse matrices yet');
      }
    });

    /**
     * Permutes a sparse matrix C = P * A * Q
     *
     * @param {SparseMatrix}  a         The Matrix A
     * @param {Array}   pinv            The row permutation vector
     * @param {Array}   q               The column permutation vector
     * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
     *
     * @return {Matrix}                 C = P * A * Q, null on error
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csPermute(a, pinv, q, values) {
      // a arrays
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size;
      var adt = a._datatype; // rows & columns

      var m = asize[0];
      var n = asize[1]; // c arrays

      var cvalues = values && a._values ? [] : null;
      var cindex = []; // (aptr[n])

      var cptr = []; // (n + 1)
      // initialize vars

      var nz = 0; // loop columns

      for (var k = 0; k < n; k++) {
        // column k of C is column q[k] of A
        cptr[k] = nz; // apply column permutation

        var j = q ? q[k] : k; // loop values in column j of A

        for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
          // row i of A is row pinv[i] of C
          var r = pinv ? pinv[aindex[t]] : aindex[t]; // index

          cindex[nz] = r; // check we need to populate values

          if (cvalues) {
            cvalues[nz] = avalues[t];
          } // increment number of nonzero elements


          nz++;
        }
      } // finalize the last column of C


      cptr[n] = nz; // return C matrix

      return a.createSparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [m, n],
        datatype: adt
      });
    }

    /**
     * Depth-first search and postorder of a tree rooted at node j
     *
     * @param {Number}  j               The tree node
     * @param {Number}  k
     * @param {Array}   w               The workspace array
     * @param {Number}  head            The index offset within the workspace for the head array
     * @param {Number}  next            The index offset within the workspace for the next array
     * @param {Array}   post            The post ordering array
     * @param {Number}  stack           The index offset within the workspace for the stack array
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csTdfs(j, k, w, head, next, post, stack) {
      // variables
      var top = 0; // place j on the stack

      w[stack] = j; // while (stack is not empty)

      while (top >= 0) {
        // p = top of stack
        var p = w[stack + top]; // i = youngest child of p

        var i = w[head + p];

        if (i === -1) {
          // p has no unordered children left
          top--; // node p is the kth postordered node

          post[k++] = p;
        } else {
          // remove i from children of p
          w[head + p] = w[next + i]; // increment top

          ++top; // start dfs on child node i

          w[stack + top] = i;
        }
      }

      return k;
    }

    /**
     * Post order a tree of forest
     *
     * @param {Array}   parent          The tree or forest
     * @param {Number}  n               Number of columns
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */

    function csPost(parent, n) {
      // check inputs
      if (!parent) {
        return null;
      } // vars


      var k = 0;
      var j; // allocate result

      var post = []; // (n)
      // workspace, head: first n entries, next: next n entries, stack: last n entries

      var w = []; // (3 * n)

      var head = 0;
      var next = n;
      var stack = 2 * n; // initialize workspace

      for (j = 0; j < n; j++) {
        // empty linked lists
        w[head + j] = -1;
      } // traverse nodes in reverse order


      for (j = n - 1; j >= 0; j--) {
        // check j is a root
        if (parent[j] === -1) {
          continue;
        } // add j to list of its parent


        w[next + j] = w[head + parent[j]];
        w[head + parent[j]] = j;
      } // loop nodes


      for (j = 0; j < n; j++) {
        // skip j if it is not a root
        if (parent[j] !== -1) {
          continue;
        } // depth-first search


        k = csTdfs(j, k, w, head, next, post, stack);
      }

      return post;
    }

    /**
     * Computes the elimination tree of Matrix A (using triu(A)) or the
     * elimination tree of A'A without forming A'A.
     *
     * @param {Matrix}  a               The A Matrix
     * @param {boolean} ata             A value of true the function computes the etree of A'A
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csEtree(a, ata) {
      // check inputs
      if (!a) {
        return null;
      } // a arrays


      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size; // rows & columns

      var m = asize[0];
      var n = asize[1]; // allocate result

      var parent = []; // (n)
      // allocate workspace

      var w = []; // (n + (ata ? m : 0))

      var ancestor = 0; // first n entries in w

      var prev = n; // last m entries (ata = true)

      var i, inext; // check we are calculating A'A

      if (ata) {
        // initialize workspace
        for (i = 0; i < m; i++) {
          w[prev + i] = -1;
        }
      } // loop columns


      for (var k = 0; k < n; k++) {
        // node k has no parent yet
        parent[k] = -1; // nor does k have an ancestor

        w[ancestor + k] = -1; // values in column k

        for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
          // row
          var r = aindex[p]; // node

          i = ata ? w[prev + r] : r; // traverse from i to k

          for (; i !== -1 && i < k; i = inext) {
            // inext = ancestor of i
            inext = w[ancestor + i]; // path compression

            w[ancestor + i] = k; // check no anc., parent is k

            if (inext === -1) {
              parent[i] = k;
            }
          }

          if (ata) {
            w[prev + r] = k;
          }
        }
      }

      return parent;
    }

    /**
     * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
     *
     * @param {Matrix}   a              The sparse matrix
     * @param {function} callback       The callback function, function will be invoked with the following args:
     *                                    - The entry row
     *                                    - The entry column
     *                                    - The entry value
     *                                    - The state parameter
     * @param {any}      other          The state
     *
     * @return                          The number of nonzero elements in the matrix
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csFkeep(a, callback, other) {
      // a arrays
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size; // columns

      var n = asize[1]; // nonzero items

      var nz = 0; // loop columns

      for (var j = 0; j < n; j++) {
        // get current location of col j
        var p = aptr[j]; // record new location of col j

        aptr[j] = nz;

        for (; p < aptr[j + 1]; p++) {
          // check we need to keep this item
          if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
            // keep A(i,j)
            aindex[nz] = aindex[p]; // check we need to process values (pattern only)

            if (avalues) {
              avalues[nz] = avalues[p];
            } // increment nonzero items


            nz++;
          }
        }
      } // finalize A


      aptr[n] = nz; // trim arrays

      aindex.splice(nz, aindex.length - nz); // check we need to process values (pattern only)

      if (avalues) {
        avalues.splice(nz, avalues.length - nz);
      } // return number of nonzero items


      return nz;
    }

    /**
     * This function "flips" its input about the integer -1.
     *
     * @param {Number}  i               The value to flip
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csFlip(i) {
      // flip the value
      return -i - 2;
    }

    var name$17 = 'csAmd';
    var dependencies$17 = ['add', 'multiply', 'transpose'];
    var createCsAmd = /* #__PURE__ */factory(name$17, dependencies$17, _ref => {
      var {
        add,
        multiply,
        transpose
      } = _ref;

      /**
       * Approximate minimum degree ordering. The minimum degree algorithm is a widely used
       * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
       * than A. It is a gready method that selects the sparsest pivot row and column during the course
       * of a right looking sparse Cholesky factorization.
       *
       * Reference: http://faculty.cse.tamu.edu/davis/publications.html
       *
       * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
       * @param {Matrix} m        Sparse Matrix
       */
      return function csAmd(order, a) {
        // check input parameters
        if (!a || order <= 0 || order > 3) {
          return null;
        } // a matrix arrays


        var asize = a._size; // rows and columns

        var m = asize[0];
        var n = asize[1]; // initialize vars

        var lemax = 0; // dense threshold

        var dense = Math.max(16, 10 * Math.sqrt(n));
        dense = Math.min(n - 2, dense); // create target matrix C

        var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries


        csFkeep(cm, _diag, null); // C matrix arrays

        var cindex = cm._index;
        var cptr = cm._ptr; // number of nonzero elements in C

        var cnz = cptr[n]; // allocate result (n+1)

        var P = []; // create workspace (8 * (n + 1))

        var W = [];
        var len = 0; // first n + 1 entries

        var nv = n + 1; // next n + 1 entries

        var next = 2 * (n + 1); // next n + 1 entries

        var head = 3 * (n + 1); // next n + 1 entries

        var elen = 4 * (n + 1); // next n + 1 entries

        var degree = 5 * (n + 1); // next n + 1 entries

        var w = 6 * (n + 1); // next n + 1 entries

        var hhead = 7 * (n + 1); // last n + 1 entries
        // use P as workspace for last

        var last = P; // initialize quotient graph

        var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists


        var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node


        var mindeg = 0; // vars

        var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do

        while (nel < n) {
          // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
          // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
          // many nodes have been eliminated.
          for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {
          }

          if (W[next + k] !== -1) {
            last[W[next + k]] = -1;
          } // remove k from degree list


          W[head + mindeg] = W[next + k]; // elenk = |Ek|

          var elenk = W[elen + k]; // # of nodes k represents

          var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated

          nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is
          // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
          // degree lists. All elements e in Ek are absorved into element k.

          var dk = 0; // flag k as in Lk

          W[nv + k] = -nvk;
          var p = cptr[k]; // do in place if W[elen + k] === 0

          var pk1 = elenk === 0 ? p : cnz;
          var pk2 = pk1;

          for (k1 = 1; k1 <= elenk + 1; k1++) {
            if (k1 > elenk) {
              // search the nodes in k
              e = k; // list of nodes starts at cindex[pj]

              pj = p; // length of list of nodes in k

              ln = W[len + k] - elenk;
            } else {
              // search the nodes in e
              e = cindex[p++];
              pj = cptr[e]; // length of list of nodes in e

              ln = W[len + e];
            }

            for (k2 = 1; k2 <= ln; k2++) {
              i = cindex[pj++]; // check  node i dead, or seen

              if ((nvi = W[nv + i]) <= 0) {
                continue;
              } // W[degree + Lk] += size of node i


              dk += nvi; // negate W[nv + i] to denote i in Lk

              W[nv + i] = -nvi; // place i in Lk

              cindex[pk2++] = i;

              if (W[next + i] !== -1) {
                last[W[next + i]] = last[i];
              } // check we need to remove i from degree list


              if (last[i] !== -1) {
                W[next + last[i]] = W[next + i];
              } else {
                W[head + W[degree + i]] = W[next + i];
              }
            }

            if (e !== k) {
              // absorb e into k
              cptr[e] = csFlip(k); // e is now a dead element

              W[w + e] = 0;
            }
          } // cindex[cnz...nzmax] is free


          if (elenk !== 0) {
            cnz = pk2;
          } // external degree of k - |Lk\i|


          W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]

          cptr[k] = pk1;
          W[len + k] = pk2 - pk1; // k is now an element

          W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
          // scan, no entry in the w array is greater than or equal to mark.
          // clear w if necessary

          mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\Lk|

          for (pk = pk1; pk < pk2; pk++) {
            i = cindex[pk]; // check if W[elen + i] empty, skip it

            if ((eln = W[elen + i]) <= 0) {
              continue;
            } // W[nv + i] was negated


            nvi = -W[nv + i];
            var wnvi = mark - nvi; // scan Ei

            for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
              e = cindex[p];

              if (W[w + e] >= mark) {
                // decrement |Le\Lk|
                W[w + e] -= nvi;
              } else if (W[w + e] !== 0) {
                // ensure e is a live element, 1st time e seen in scan 1
                W[w + e] = W[degree + e] + wnvi;
              }
            }
          } // degree update
          // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
          // function h(i) for all nodes in Lk.
          // scan2: degree update


          for (pk = pk1; pk < pk2; pk++) {
            // consider node i in Lk
            i = cindex[pk];
            p1 = cptr[i];
            p2 = p1 + W[elen + i] - 1;
            pn = p1; // scan Ei

            for (h = 0, d = 0, p = p1; p <= p2; p++) {
              e = cindex[p]; // check e is an unabsorbed element

              if (W[w + e] !== 0) {
                // dext = |Le\Lk|
                var dext = W[w + e] - mark;

                if (dext > 0) {
                  // sum up the set differences
                  d += dext; // keep e in Ei

                  cindex[pn++] = e; // compute the hash of node i

                  h += e;
                } else {
                  // aggressive absorb. e->k
                  cptr[e] = csFlip(k); // e is a dead element

                  W[w + e] = 0;
                }
              }
            } // W[elen + i] = |Ei|


            W[elen + i] = pn - p1 + 1;
            var p3 = pn;
            var p4 = p1 + W[len + i]; // prune edges in Ai

            for (p = p2 + 1; p < p4; p++) {
              j = cindex[p]; // check node j dead or in Lk

              var nvj = W[nv + j];

              if (nvj <= 0) {
                continue;
              } // degree(i) += |j|


              d += nvj; // place j in node list of i

              cindex[pn++] = j; // compute hash for node i

              h += j;
            } // check for mass elimination


            if (d === 0) {
              // absorb i into k
              cptr[i] = csFlip(k);
              nvi = -W[nv + i]; // |Lk| -= |i|

              dk -= nvi; // |k| += W[nv + i]

              nvk += nvi;
              nel += nvi;
              W[nv + i] = 0; // node i is dead

              W[elen + i] = -1;
            } else {
              // update degree(i)
              W[degree + i] = Math.min(W[degree + i], d); // move first node to end

              cindex[pn] = cindex[p3]; // move 1st el. to end of Ei

              cindex[p3] = cindex[p1]; // add k as 1st element in of Ei

              cindex[p1] = k; // new len of adj. list of node i

              W[len + i] = pn - p1 + 1; // finalize hash of i

              h = (h < 0 ? -h : h) % n; // place i in hash bucket

              W[next + i] = W[hhead + h];
              W[hhead + h] = i; // save hash of i in last[i]

              last[i] = h;
            }
          } // finalize |Lk|


          W[degree + k] = dk;
          lemax = Math.max(lemax, dk); // clear w

          mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
          // If two nodes have identical adjacency lists, their hash functions wil be identical.

          for (pk = pk1; pk < pk2; pk++) {
            i = cindex[pk]; // check i is dead, skip it

            if (W[nv + i] >= 0) {
              continue;
            } // scan hash bucket of node i


            h = last[i];
            i = W[hhead + h]; // hash bucket will be empty

            W[hhead + h] = -1;

            for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {
              ln = W[len + i];
              eln = W[elen + i];

              for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {
                W[w + cindex[p]] = mark;
              }

              var jlast = i; // compare i with all j

              for (j = W[next + i]; j !== -1;) {
                var ok = W[len + j] === ln && W[elen + j] === eln;

                for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
                  // compare i and j
                  if (W[w + cindex[p]] !== mark) {
                    ok = 0;
                  }
                } // check i and j are identical


                if (ok) {
                  // absorb j into i
                  cptr[j] = csFlip(i);
                  W[nv + i] += W[nv + j];
                  W[nv + j] = 0; // node j is dead

                  W[elen + j] = -1; // delete j from hash bucket

                  j = W[next + j];
                  W[next + jlast] = j;
                } else {
                  // j and i are different
                  jlast = j;
                  j = W[next + j];
                }
              }
            }
          } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
          // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.


          for (p = pk1, pk = pk1; pk < pk2; pk++) {
            i = cindex[pk]; // check  i is dead, skip it

            if ((nvi = -W[nv + i]) <= 0) {
              continue;
            } // restore W[nv + i]


            W[nv + i] = nvi; // compute external degree(i)

            d = W[degree + i] + dk - nvi;
            d = Math.min(d, n - nel - nvi);

            if (W[head + d] !== -1) {
              last[W[head + d]] = i;
            } // put i back in degree list


            W[next + i] = W[head + d];
            last[i] = -1;
            W[head + d] = i; // find new minimum degree

            mindeg = Math.min(mindeg, d);
            W[degree + i] = d; // place i in Lk

            cindex[p++] = i;
          } // # nodes absorbed into k


          W[nv + k] = nvk; // length of adj list of element k

          if ((W[len + k] = p - pk1) === 0) {
            // k is a root of the tree
            cptr[k] = -1; // k is now a dead element

            W[w + k] = 0;
          }

          if (elenk !== 0) {
            // free unused space in Lk
            cnz = p;
          }
        } // Postordering. The elimination is complete, but no permutation has been computed. All that is left
        // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
        // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
        // is computed. The tree is restored by unflipping all of ptr.
        // fix assembly tree


        for (i = 0; i < n; i++) {
          cptr[i] = csFlip(cptr[i]);
        }

        for (j = 0; j <= n; j++) {
          W[head + j] = -1;
        } // place unordered nodes in lists


        for (j = n; j >= 0; j--) {
          // skip if j is an element
          if (W[nv + j] > 0) {
            continue;
          } // place j in list of its parent


          W[next + j] = W[head + cptr[j]];
          W[head + cptr[j]] = j;
        } // place elements in lists


        for (e = n; e >= 0; e--) {
          // skip unless e is an element
          if (W[nv + e] <= 0) {
            continue;
          }

          if (cptr[e] !== -1) {
            // place e in list of its parent
            W[next + e] = W[head + cptr[e]];
            W[head + cptr[e]] = e;
          }
        } // postorder the assembly tree


        for (k = 0, i = 0; i <= n; i++) {
          if (cptr[i] === -1) {
            k = csTdfs(i, k, W, head, next, P, w);
          }
        } // remove last item in array


        P.splice(P.length - 1, 1); // return P

        return P;
      };
      /**
       * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
       * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
       *
       * Order: 0
       *   A natural ordering P=null matrix is returned.
       *
       * Order: 1
       *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
       *   P = M + M'
       *
       * Order: 2
       *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
       *   P = M' * M
       *
       * Order: 3
       *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
       *   P = M' * M
       */

      function _createTargetMatrix(order, a, m, n, dense) {
        // compute A'
        var at = transpose(a); // check order = 1, matrix must be square

        if (order === 1 && n === m) {
          // C = A + A'
          return add(a, at);
        } // check order = 2, drop dense columns from M'


        if (order === 2) {
          // transpose arrays
          var tindex = at._index;
          var tptr = at._ptr; // new column index

          var p2 = 0; // loop A' columns (rows)

          for (var j = 0; j < m; j++) {
            // column j of AT starts here
            var p = tptr[j]; // new column j starts here

            tptr[j] = p2; // skip dense col j

            if (tptr[j + 1] - p > dense) {
              continue;
            } // map rows in column j of A


            for (var p1 = tptr[j + 1]; p < p1; p++) {
              tindex[p2++] = tindex[p];
            }
          } // finalize AT


          tptr[m] = p2; // recreate A from new transpose matrix

          a = transpose(at); // use A' * A

          return multiply(at, a);
        } // use A' * A, square or rectangular matrix


        return multiply(at, a);
      }
      /**
       * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
       *
       *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
       *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
       *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
       *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
       */


      function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
        // Initialize quotient graph
        for (var k = 0; k < n; k++) {
          W[len + k] = cptr[k + 1] - cptr[k];
        }

        W[len + n] = 0; // initialize workspace

        for (var i = 0; i <= n; i++) {
          // degree list i is empty
          W[head + i] = -1;
          last[i] = -1;
          W[next + i] = -1; // hash list i is empty

          W[hhead + i] = -1; // node i is just one node

          W[nv + i] = 1; // node i is alive

          W[w + i] = 1; // Ek of node i is empty

          W[elen + i] = 0; // degree of node i

          W[degree + i] = W[len + i];
        } // clear w


        var mark = _wclear(0, 0, W, w, n); // n is a dead element


        W[elen + n] = -2; // n is a root of assembly tree

        cptr[n] = -1; // n is a dead element

        W[w + n] = 0; // return mark

        return mark;
      }
      /**
       * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with
       * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
       * output permutation p.
       */


      function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
        // result
        var nel = 0; // loop columns

        for (var i = 0; i < n; i++) {
          // degree @ i
          var d = W[degree + i]; // check node i is empty

          if (d === 0) {
            // element i is dead
            W[elen + i] = -2;
            nel++; // i is a root of assembly tree

            cptr[i] = -1;
            W[w + i] = 0;
          } else if (d > dense) {
            // absorb i into element n
            W[nv + i] = 0; // node i is dead

            W[elen + i] = -1;
            nel++;
            cptr[i] = csFlip(n);
            W[nv + n]++;
          } else {
            var h = W[head + d];

            if (h !== -1) {
              last[h] = i;
            } // put node i in degree list d


            W[next + i] = W[head + d];
            W[head + d] = i;
          }
        }

        return nel;
      }

      function _wclear(mark, lemax, W, w, n) {
        if (mark < 2 || mark + lemax < 0) {
          for (var k = 0; k < n; k++) {
            if (W[w + k] !== 0) {
              W[w + k] = 1;
            }
          }

          mark = 2;
        } // at this point, W [0..n-1] < mark holds


        return mark;
      }

      function _diag(i, j) {
        return i !== j;
      }
    });

    /**
     * This function determines if j is a leaf of the ith row subtree.
     * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
     *
     * @param {Number}  i               The ith row subtree
     * @param {Number}  j               The node to test
     * @param {Array}   w               The workspace array
     * @param {Number}  first           The index offset within the workspace for the first array
     * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
     * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
     * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
     *
     * @return {Object}
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {
      var s, sparent; // our result

      var jleaf = 0;
      var q; // check j is a leaf

      if (i <= j || w[first + j] <= w[maxfirst + i]) {
        return -1;
      } // update max first[j] seen so far


      w[maxfirst + i] = w[first + j]; // jprev = previous leaf of ith subtree

      var jprev = w[prevleaf + i];
      w[prevleaf + i] = j; // check j is first or subsequent leaf

      if (jprev === -1) {
        // 1st leaf, q = root of ith subtree
        jleaf = 1;
        q = i;
      } else {
        // update jleaf
        jleaf = 2; // q = least common ancester (jprev,j)

        for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]) {
        }

        for (s = jprev; s !== q; s = sparent) {
          // path compression
          sparent = w[ancestor + s];
          w[ancestor + s] = q;
        }
      }

      return {
        jleaf,
        q
      };
    }

    var name$16 = 'csCounts';
    var dependencies$16 = ['transpose'];
    var createCsCounts = /* #__PURE__ */factory(name$16, dependencies$16, _ref => {
      var {
        transpose
      } = _ref;

      /**
       * Computes the column counts using the upper triangular part of A.
       * It transposes A internally, none of the input parameters are modified.
       *
       * @param {Matrix} a           The sparse matrix A
       *
       * @param {Matrix} ata         Count the columns of A'A instead
       *
       * @return                     An array of size n of the column counts or null on error
       *
       * Reference: http://faculty.cse.tamu.edu/davis/publications.html
       */
      return function (a, parent, post, ata) {
        // check inputs
        if (!a || !parent || !post) {
          return null;
        } // a matrix arrays


        var asize = a._size; // rows and columns

        var m = asize[0];
        var n = asize[1]; // variables

        var i, j, k, J, p, p0, p1; // workspace size

        var s = 4 * n + (ata ? n + m + 1 : 0); // allocate workspace

        var w = []; // (s)

        var ancestor = 0; // first n entries

        var maxfirst = n; // next n entries

        var prevleaf = 2 * n; // next n entries

        var first = 3 * n; // next n entries

        var head = 4 * n; // next n + 1 entries (used when ata is true)

        var next = 5 * n + 1; // last entries in workspace
        // clear workspace w[0..s-1]

        for (k = 0; k < s; k++) {
          w[k] = -1;
        } // allocate result


        var colcount = []; // (n)
        // AT = A'

        var at = transpose(a); // at arrays

        var tindex = at._index;
        var tptr = at._ptr; // find w[first + j]

        for (k = 0; k < n; k++) {
          j = post[k]; // colcount[j]=1 if j is a leaf

          colcount[j] = w[first + j] === -1 ? 1 : 0;

          for (; j !== -1 && w[first + j] === -1; j = parent[j]) {
            w[first + j] = k;
          }
        } // initialize ata if needed


        if (ata) {
          // invert post
          for (k = 0; k < n; k++) {
            w[post[k]] = k;
          } // loop rows (columns in AT)


          for (i = 0; i < m; i++) {
            // values in column i of AT
            for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {
              k = Math.min(k, w[tindex[p]]);
            } // place row i in linked list k


            w[next + i] = w[head + k];
            w[head + k] = i;
          }
        } // each node in its own set


        for (i = 0; i < n; i++) {
          w[ancestor + i] = i;
        }

        for (k = 0; k < n; k++) {
          // j is the kth node in postordered etree
          j = post[k]; // check j is not a root

          if (parent[j] !== -1) {
            colcount[parent[j]]--;
          } // J=j for LL'=A case


          for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {
            for (p = tptr[J]; p < tptr[J + 1]; p++) {
              i = tindex[p];
              var r = csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor); // check A(i,j) is in skeleton

              if (r.jleaf >= 1) {
                colcount[j]++;
              } // check account for overlap in q


              if (r.jleaf === 2) {
                colcount[r.q]--;
              }
            }
          }

          if (parent[j] !== -1) {
            w[ancestor + j] = parent[j];
          }
        } // sum up colcount's of each child


        for (j = 0; j < n; j++) {
          if (parent[j] !== -1) {
            colcount[parent[j]] += colcount[j];
          }
        }

        return colcount;
      };
    });

    var name$15 = 'csSqr';
    var dependencies$15 = ['add', 'multiply', 'transpose'];
    var createCsSqr = /* #__PURE__ */factory(name$15, dependencies$15, _ref => {
      var {
        add,
        multiply,
        transpose
      } = _ref;
      var csAmd = createCsAmd({
        add,
        multiply,
        transpose
      });
      var csCounts = createCsCounts({
        transpose
      });
      /**
       * Symbolic ordering and analysis for QR and LU decompositions.
       *
       * @param {Number}  order           The ordering strategy (see csAmd for more details)
       * @param {Matrix}  a               The A matrix
       * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
       *                                  symbolic ordering and analysis for LU decomposition (false)
       *
       * @return {Object}                 The Symbolic ordering and analysis for matrix A
       *
       * Reference: http://faculty.cse.tamu.edu/davis/publications.html
       */

      return function csSqr(order, a, qr) {
        // a arrays
        var aptr = a._ptr;
        var asize = a._size; // columns

        var n = asize[1]; // vars

        var k; // symbolic analysis result

        var s = {}; // fill-reducing ordering

        s.q = csAmd(order, a); // validate results

        if (order && !s.q) {
          return null;
        } // QR symbolic analysis


        if (qr) {
          // apply permutations if needed
          var c = order ? csPermute(a, null, s.q, 0) : a; // etree of C'*C, where C=A(:,q)

          s.parent = csEtree(c, 1); // post order elimination tree

          var post = csPost(s.parent, n); // col counts chol(C'*C)

          s.cp = csCounts(c, s.parent, post, 1); // check we have everything needed to calculate number of nonzero elements

          if (c && s.parent && s.cp && _vcount(c, s)) {
            // calculate number of nonzero elements
            for (s.unz = 0, k = 0; k < n; k++) {
              s.unz += s.cp[k];
            }
          }
        } else {
          // for LU factorization only, guess nnz(L) and nnz(U)
          s.unz = 4 * aptr[n] + n;
          s.lnz = s.unz;
        } // return result S


        return s;
      };
      /**
       * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
       */

      function _vcount(a, s) {
        // a arrays
        var aptr = a._ptr;
        var aindex = a._index;
        var asize = a._size; // rows & columns

        var m = asize[0];
        var n = asize[1]; // initialize s arrays

        s.pinv = []; // (m + n)

        s.leftmost = []; // (m)
        // vars

        var parent = s.parent;
        var pinv = s.pinv;
        var leftmost = s.leftmost; // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries

        var w = []; // (m + 3 * n)

        var next = 0;
        var head = m;
        var tail = m + n;
        var nque = m + 2 * n; // vars

        var i, k, p, p0, p1; // initialize w

        for (k = 0; k < n; k++) {
          // queue k is empty
          w[head + k] = -1;
          w[tail + k] = -1;
          w[nque + k] = 0;
        } // initialize row arrays


        for (i = 0; i < m; i++) {
          leftmost[i] = -1;
        } // loop columns backwards


        for (k = n - 1; k >= 0; k--) {
          // values & index for column k
          for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
            // leftmost[i] = min(find(A(i,:)))
            leftmost[aindex[p]] = k;
          }
        } // scan rows in reverse order


        for (i = m - 1; i >= 0; i--) {
          // row i is not yet ordered
          pinv[i] = -1;
          k = leftmost[i]; // check row i is empty

          if (k === -1) {
            continue;
          } // first row in queue k


          if (w[nque + k]++ === 0) {
            w[tail + k] = i;
          } // put i at head of queue k


          w[next + i] = w[head + k];
          w[head + k] = i;
        }

        s.lnz = 0;
        s.m2 = m; // find row permutation and nnz(V)

        for (k = 0; k < n; k++) {
          // remove row i from queue k
          i = w[head + k]; // count V(k,k) as nonzero

          s.lnz++; // add a fictitious row

          if (i < 0) {
            i = s.m2++;
          } // associate row i with V(:,k)


          pinv[i] = k; // skip if V(k+1:m,k) is empty

          if (--nque[k] <= 0) {
            continue;
          } // nque[k] is nnz (V(k+1:m,k))


          s.lnz += w[nque + k]; // move all rows to parent of k

          var pa = parent[k];

          if (pa !== -1) {
            if (w[nque + pa] === 0) {
              w[tail + pa] = w[tail + k];
            }

            w[next + w[tail + k]] = w[head + pa];
            w[head + pa] = w[next + i];
            w[nque + pa] += w[nque + k];
          }
        }

        for (i = 0; i < m; i++) {
          if (pinv[i] < 0) {
            pinv[i] = k++;
          }
        }

        return true;
      }
    });

    /**
     * Checks if the node at w[j] is marked
     *
     * @param {Array}   w               The array
     * @param {Number}  j               The array index
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csMarked(w, j) {
      // check node is marked
      return w[j] < 0;
    }

    /**
     * Marks the node at w[j]
     *
     * @param {Array}   w               The array
     * @param {Number}  j               The array index
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */

    function csMark(w, j) {
      // mark w[j]
      w[j] = csFlip(w[j]);
    }

    /**
     * Flips the value if it is negative of returns the same value otherwise.
     *
     * @param {Number}  i               The value to flip
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */

    function csUnflip(i) {
      // flip the value if it is negative
      return i < 0 ? csFlip(i) : i;
    }

    /**
     * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
     * at nodes in B (see csReach()).
     *
     * @param {Number}  j               The starting node for the DFS algorithm
     * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
     * @param {Number}  top             Start index in stack xi[top..n-1]
     * @param {Number}  k               The kth column in B
     * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
     *                                  The first n entries is the nonzero pattern, the last n entries is the stack
     * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
     *
     * @return {Number}                 New value of top
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */

    function csDfs(j, g, top, xi, pinv) {
      // g arrays
      var index = g._index;
      var ptr = g._ptr;
      var size = g._size; // columns

      var n = size[1]; // vars

      var i, p, p2; // initialize head

      var head = 0; // initialize the recursion stack

      xi[0] = j; // loop

      while (head >= 0) {
        // get j from the top of the recursion stack
        j = xi[head]; // apply permutation vector

        var jnew = pinv ? pinv[j] : j; // check node j is marked

        if (!csMarked(ptr, j)) {
          // mark node j as visited
          csMark(ptr, j); // update stack (last n entries in xi)

          xi[n + head] = jnew < 0 ? 0 : csUnflip(ptr[jnew]);
        } // node j done if no unvisited neighbors


        var done = 1; // examine all neighbors of j, stack (last n entries in xi)

        for (p = xi[n + head], p2 = jnew < 0 ? 0 : csUnflip(ptr[jnew + 1]); p < p2; p++) {
          // consider neighbor node i
          i = index[p]; // check we have visited node i, skip it

          if (csMarked(ptr, i)) {
            continue;
          } // pause depth-first search of node j, update stack (last n entries in xi)


          xi[n + head] = p; // start dfs at node i

          xi[++head] = i; // node j is not done

          done = 0; // break, to start dfs(i)

          break;
        } // check depth-first search at node j is done


        if (done) {
          // remove j from the recursion stack
          head--; // and place in the output stack

          xi[--top] = j;
        }
      }

      return top;
    }

    /**
     * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1
     * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
     * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
     *
     * @param {Matrix}  g               The G matrix
     * @param {Matrix}  b               The B matrix
     * @param {Number}  k               The kth column in B
     * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
     *                                  The first n entries is the nonzero pattern, the last n entries is the stack
     * @param {Array}   pinv            The inverse row permutation vector
     *
     * @return {Number}                 The index for the nonzero pattern
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */

    function csReach(g, b, k, xi, pinv) {
      // g arrays
      var gptr = g._ptr;
      var gsize = g._size; // b arrays

      var bindex = b._index;
      var bptr = b._ptr; // columns

      var n = gsize[1]; // vars

      var p, p0, p1; // initialize top

      var top = n; // loop column indeces in B

      for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
        // node i
        var i = bindex[p]; // check node i is marked

        if (!csMarked(gptr, i)) {
          // start a dfs at unmarked node i
          top = csDfs(i, g, top, xi, pinv);
        }
      } // loop columns from top -> n - 1


      for (p = top; p < n; p++) {
        // restore G
        csMark(gptr, xi[p]);
      }

      return top;
    }

    var name$14 = 'csSpsolve';
    var dependencies$14 = ['divideScalar', 'multiply', 'subtract'];
    var createCsSpsolve = /* #__PURE__ */factory(name$14, dependencies$14, _ref => {
      var {
        divideScalar,
        multiply,
        subtract
      } = _ref;

      /**
       * The function csSpsolve() computes the solution to G * x = bk, where bk is the
       * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
       * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U
       * is upper triangular with the diagonal entry as the last entry in each column.
       *
       * @param {Matrix}  g               The G matrix
       * @param {Matrix}  b               The B matrix
       * @param {Number}  k               The kth column in B
       * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
       *                                  The first n entries is the nonzero pattern, the last n entries is the stack
       * @param {Array}   x               The soluton to the linear system G * x = b
       * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
       * @param {boolean} lo              The lower (true) upper triangular (false) flag
       *
       * @return {Number}                 The index for the nonzero pattern
       *
       * Reference: http://faculty.cse.tamu.edu/davis/publications.html
       */
      return function csSpsolve(g, b, k, xi, x, pinv, lo) {
        // g arrays
        var gvalues = g._values;
        var gindex = g._index;
        var gptr = g._ptr;
        var gsize = g._size; // columns

        var n = gsize[1]; // b arrays

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr; // vars

        var p, p0, p1, q; // xi[top..n-1] = csReach(B(:,k))

        var top = csReach(g, b, k, xi, pinv); // clear x

        for (p = top; p < n; p++) {
          x[xi[p]] = 0;
        } // scatter b


        for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
          x[bindex[p]] = bvalues[p];
        } // loop columns


        for (var px = top; px < n; px++) {
          // x array index for px
          var j = xi[px]; // apply permutation vector (U x = b), j maps to column J of G

          var J = pinv ? pinv[j] : j; // check column J is empty

          if (J < 0) {
            continue;
          } // column value indeces in G, p0 <= p < p1


          p0 = gptr[J];
          p1 = gptr[J + 1]; // x(j) /= G(j,j)

          x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]); // first entry L(j,j)

          p = lo ? p0 + 1 : p0;
          q = lo ? p1 : p1 - 1; // loop

          for (; p < q; p++) {
            // row
            var i = gindex[p]; // x(i) -= G(i,j) * x(j)

            x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
          }
        } // return top of stack


        return top;
      };
    });

    var name$13 = 'csLu';
    var dependencies$13 = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
    var createCsLu = /* #__PURE__ */factory(name$13, dependencies$13, _ref => {
      var {
        abs,
        divideScalar,
        multiply,
        subtract,
        larger,
        largerEq,
        SparseMatrix
      } = _ref;
      var csSpsolve = createCsSpsolve({
        divideScalar,
        multiply,
        subtract
      });
      /**
       * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
       * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L
       * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
       * L * U = A(p, q), where p is the inverse of pinv.
       *
       * @param {Matrix}  m               The A Matrix to factorize
       * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing
       *                                  column ordering q
       * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
       *
       * @return {Number}                 The numeric LU factorization of A or null
       *
       * Reference: http://faculty.cse.tamu.edu/davis/publications.html
       */

      return function csLu(m, s, tol) {
        // validate input
        if (!m) {
          return null;
        } // m arrays


        var size = m._size; // columns

        var n = size[1]; // symbolic analysis result

        var q;
        var lnz = 100;
        var unz = 100; // update symbolic analysis parameters

        if (s) {
          q = s.q;
          lnz = s.lnz || lnz;
          unz = s.unz || unz;
        } // L arrays


        var lvalues = []; // (lnz)

        var lindex = []; // (lnz)

        var lptr = []; // (n + 1)
        // L

        var L = new SparseMatrix({
          values: lvalues,
          index: lindex,
          ptr: lptr,
          size: [n, n]
        }); // U arrays

        var uvalues = []; // (unz)

        var uindex = []; // (unz)

        var uptr = []; // (n + 1)
        // U

        var U = new SparseMatrix({
          values: uvalues,
          index: uindex,
          ptr: uptr,
          size: [n, n]
        }); // inverse of permutation vector

        var pinv = []; // (n)
        // vars

        var i, p; // allocate arrays

        var x = []; // (n)

        var xi = []; // (2 * n)
        // initialize variables

        for (i = 0; i < n; i++) {
          // clear workspace
          x[i] = 0; // no rows pivotal yet

          pinv[i] = -1; // no cols of L yet

          lptr[i + 1] = 0;
        } // reset number of nonzero elements in L and U


        lnz = 0;
        unz = 0; // compute L(:,k) and U(:,k)

        for (var k = 0; k < n; k++) {
          // update ptr
          lptr[k] = lnz;
          uptr[k] = unz; // apply column permutations if needed

          var col = q ? q[k] : k; // solve triangular system, x = L\A(:,col)

          var top = csSpsolve(L, m, col, xi, x, pinv, 1); // find pivot

          var ipiv = -1;
          var a = -1; // loop xi[] from top -> n

          for (p = top; p < n; p++) {
            // x[i] is nonzero
            i = xi[p]; // check row i is not yet pivotal

            if (pinv[i] < 0) {
              // absolute value of x[i]
              var xabs = abs(x[i]); // check absoulte value is greater than pivot value

              if (larger(xabs, a)) {
                // largest pivot candidate so far
                a = xabs;
                ipiv = i;
              }
            } else {
              // x(i) is the entry U(pinv[i],k)
              uindex[unz] = pinv[i];
              uvalues[unz++] = x[i];
            }
          } // validate we found a valid pivot


          if (ipiv === -1 || a <= 0) {
            return null;
          } // update actual pivot column, give preference to diagonal value


          if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {
            ipiv = col;
          } // the chosen pivot


          var pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)

          uindex[unz] = k;
          uvalues[unz++] = pivot; // ipiv is the kth pivot row

          pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1

          lindex[lnz] = ipiv;
          lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot

          for (p = top; p < n; p++) {
            // row
            i = xi[p]; // check x(i) is an entry in L(:,k)

            if (pinv[i] < 0) {
              // save unpermuted row in L
              lindex[lnz] = i; // scale pivot column

              lvalues[lnz++] = divideScalar(x[i], pivot);
            } // x[0..n-1] = 0 for next k


            x[i] = 0;
          }
        } // update ptr


        lptr[n] = lnz;
        uptr[n] = unz; // fix row indices of L for final pinv

        for (p = 0; p < lnz; p++) {
          lindex[p] = pinv[lindex[p]];
        } // trim arrays


        lvalues.splice(lnz, lvalues.length - lnz);
        lindex.splice(lnz, lindex.length - lnz);
        uvalues.splice(unz, uvalues.length - unz);
        uindex.splice(unz, uindex.length - unz); // return LU factor

        return {
          L,
          U,
          pinv
        };
      };
    });

    var name$12 = 'slu';
    var dependencies$12 = ['typed', 'abs', 'add', 'multiply', 'transpose', 'divideScalar', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
    var createSlu = /* #__PURE__ */factory(name$12, dependencies$12, _ref => {
      var {
        typed,
        abs,
        add,
        multiply,
        transpose,
        divideScalar,
        subtract,
        larger,
        largerEq,
        SparseMatrix
      } = _ref;
      var csSqr = createCsSqr({
        add,
        multiply,
        transpose
      });
      var csLu = createCsLu({
        abs,
        divideScalar,
        multiply,
        subtract,
        larger,
        largerEq,
        SparseMatrix
      });
      /**
       * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
       *
       * `P * A * Q = L * U`
       *
       * Syntax:
       *
       *    math.slu(A, order, threshold)
       *
       * Examples:
       *
       *    const A = math.sparse([[4,3], [6, 3]])
       *    math.slu(A, 1, 0.001)
       *    // returns:
       *    // {
       *    //   L: [[1, 0], [1.5, 1]]
       *    //   U: [[4, 3], [0, -1.5]]
       *    //   p: [0, 1]
       *    //   q: [0, 1]
       *    // }
       *
       * See also:
       *
       *    lup, lsolve, usolve, lusolve
       *
       * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
       * @param {Number}       order          The Symbolic Ordering and Analysis order:
       *                                       0 - Natural ordering, no permutation vector q is returned
       *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
       *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.
       *                                           This is appropriatefor LU factorization of unsymmetric matrices.
       *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
       *                                           A dense row is a row with more than 10*sqr(columns) entries.
       * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
       *
       * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
       */

      return typed(name$12, {
        'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {
          // verify order
          if (!isInteger$1(order) || order < 0 || order > 3) {
            throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
          } // verify threshold


          if (threshold < 0 || threshold > 1) {
            throw new Error('Partial pivoting threshold must be a number from 0 to 1');
          } // perform symbolic ordering and analysis


          var s = csSqr(order, a, false); // perform lu decomposition

          var f = csLu(a, s, threshold); // return decomposition

          return {
            L: f.L,
            U: f.U,
            p: f.pinv,
            q: s.q,
            toString: function toString() {
              return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
            }
          };
        }
      });
    });

    /**
     * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
     *
     * @param {Array} p           The permutation vector of length n. null value denotes identity
     * @param {Array} b           The input vector
     *
     * @return {Array}            The output vector x = P'b
     */
    function csIpvec(p, b) {
      // vars
      var k;
      var n = b.length;
      var x = []; // check permutation vector was provided, p = null denotes identity

      if (p) {
        // loop vector
        for (k = 0; k < n; k++) {
          // apply permutation
          x[p[k]] = b[k];
        }
      } else {
        // loop vector
        for (k = 0; k < n; k++) {
          // x[i] = b[i]
          x[k] = b[k];
        }
      }

      return x;
    }

    var name$11 = 'lusolve';
    var dependencies$11 = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];
    var createLusolve = /* #__PURE__ */factory(name$11, dependencies$11, _ref => {
      var {
        typed,
        matrix,
        lup,
        slu,
        usolve,
        lsolve,
        DenseMatrix
      } = _ref;
      var solveValidation = createSolveValidation({
        DenseMatrix
      });
      /**
       * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
       *
       * Syntax:
       *
       *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
       *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
       *
       * Examples:
       *
       *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]
       *
       *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]
       *
       *    const f = math.lup(m)
       *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
       *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]
       *
       *    const a = [[-2, 3], [2, 1]]
       *    const b = [11, 9]
       *    const x = math.lusolve(a, b)  // [[2], [5]]
       *
       * See also:
       *
       *    lup, slu, lsolve, usolve
       *
       * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
       * @param {Matrix | Array} b               Column Vector
       * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
       * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
       *
       * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
       */

      return typed(name$11, {
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
          a = matrix(a);
          var d = lup(a);

          var x = _lusolve(d.L, d.U, d.p, null, b);

          return x.valueOf();
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {
          var d = lup(a);
          return _lusolve(d.L, d.U, d.p, null, b);
        },
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {
          var d = lup(a);
          return _lusolve(d.L, d.U, d.p, null, b);
        },
        'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {
          var d = slu(a, order, threshold);
          return _lusolve(d.L, d.U, d.p, d.q, b);
        },
        'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {
          return _lusolve(d.L, d.U, d.p, d.q, b);
        }
      });

      function _toMatrix(a) {
        if (isMatrix(a)) {
          return a;
        }

        if (isArray(a)) {
          return matrix(a);
        }

        throw new TypeError('Invalid Matrix LU decomposition');
      }

      function _lusolve(l, u, p, q, b) {
        // verify decomposition
        l = _toMatrix(l);
        u = _toMatrix(u); // apply row permutations if needed (b is a DenseMatrix)

        if (p) {
          b = solveValidation(l, b, true);
          b._data = csIpvec(p, b._data);
        } // use forward substitution to resolve L * y = b


        var y = lsolve(l, b); // use backward substitution to resolve U * x = y

        var x = usolve(u, y); // apply column permutations if needed (x is a DenseMatrix)

        if (q) {
          x._data = csIpvec(q, x._data);
        }

        return x;
      }
    });

    var name$10 = 'Help';
    var dependencies$10 = ['parse'];
    var createHelpClass = /* #__PURE__ */factory(name$10, dependencies$10, _ref => {
      var {
        parse
      } = _ref;

      /**
       * Documentation object
       * @param {Object} doc  Object containing properties:
       *                      {string} name
       *                      {string} category
       *                      {string} description
       *                      {string[]} syntax
       *                      {string[]} examples
       *                      {string[]} seealso
       * @constructor
       */
      function Help(doc) {
        if (!(this instanceof Help)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (!doc) throw new Error('Argument "doc" missing');
        this.doc = doc;
      }
      /**
       * Attach type information
       */


      Help.prototype.type = 'Help';
      Help.prototype.isHelp = true;
      /**
       * Generate a string representation of the Help object
       * @return {string} Returns a string
       * @private
       */

      Help.prototype.toString = function () {
        var doc = this.doc || {};
        var desc = '\n';

        if (doc.name) {
          desc += 'Name: ' + doc.name + '\n\n';
        }

        if (doc.category) {
          desc += 'Category: ' + doc.category + '\n\n';
        }

        if (doc.description) {
          desc += 'Description:\n    ' + doc.description + '\n\n';
        }

        if (doc.syntax) {
          desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
        }

        if (doc.examples) {
          desc += 'Examples:\n';
          var scope = {};

          for (var i = 0; i < doc.examples.length; i++) {
            var expr = doc.examples[i];
            desc += '    ' + expr + '\n';
            var res = void 0;

            try {
              // note: res can be undefined when `expr` is an empty string
              res = parse(expr).compile().evaluate(scope);
            } catch (e) {
              res = e;
            }

            if (res !== undefined && !isHelp(res)) {
              desc += '        ' + format$1(res, {
                precision: 14
              }) + '\n';
            }
          }

          desc += '\n';
        }

        if (doc.mayThrow && doc.mayThrow.length) {
          desc += 'Throws: ' + doc.mayThrow.join(', ') + '\n\n';
        }

        if (doc.seealso && doc.seealso.length) {
          desc += 'See also: ' + doc.seealso.join(', ') + '\n';
        }

        return desc;
      };
      /**
       * Export the help object to JSON
       */


      Help.prototype.toJSON = function () {
        var obj = clone$1(this.doc);
        obj.mathjs = 'Help';
        return obj;
      };
      /**
       * Instantiate a Help object from a JSON object
       * @param {Object} json
       * @returns {Help} Returns a new Help object
       */


      Help.fromJSON = function (json) {
        var doc = {};
        Object.keys(json).filter(prop => prop !== 'mathjs').forEach(prop => {
          doc[prop] = json[prop];
        });
        return new Help(doc);
      };
      /**
       * Returns a string representation of the Help object
       */


      Help.prototype.valueOf = Help.prototype.toString;
      return Help;
    }, {
      isClass: true
    });

    var name$$ = 'Chain';
    var dependencies$$ = ['?on', 'math'];
    var createChainClass = /* #__PURE__ */factory(name$$, dependencies$$, _ref => {
      var {
        on,
        math
      } = _ref;

      /**
       * @constructor Chain
       * Wrap any value in a chain, allowing to perform chained operations on
       * the value.
       *
       * All methods available in the math.js library can be called upon the chain,
       * and then will be evaluated with the value itself as first argument.
       * The chain can be closed by executing chain.done(), which will return
       * the final value.
       *
       * The Chain has a number of special functions:
       * - done()             Finalize the chained operation and return the
       *                      chain's value.
       * - valueOf()          The same as done()
       * - toString()         Returns a string representation of the chain's value.
       *
       * @param {*} [value]
       */
      function Chain(value) {
        if (!(this instanceof Chain)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (isChain(value)) {
          this.value = value.value;
        } else {
          this.value = value;
        }
      }
      /**
       * Attach type information
       */


      Chain.prototype.type = 'Chain';
      Chain.prototype.isChain = true;
      /**
       * Close the chain. Returns the final value.
       * Does the same as method valueOf()
       * @returns {*} value
       */

      Chain.prototype.done = function () {
        return this.value;
      };
      /**
       * Close the chain. Returns the final value.
       * Does the same as method done()
       * @returns {*} value
       */


      Chain.prototype.valueOf = function () {
        return this.value;
      };
      /**
       * Get a string representation of the value in the chain
       * @returns {string}
       */


      Chain.prototype.toString = function () {
        return format$1(this.value);
      };
      /**
       * Get a JSON representation of the chain
       * @returns {Object}
       */


      Chain.prototype.toJSON = function () {
        return {
          mathjs: 'Chain',
          value: this.value
        };
      };
      /**
       * Instantiate a Chain from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "Chain", value: ...}`,
       *                       where mathjs is optional
       * @returns {Chain}
       */


      Chain.fromJSON = function (json) {
        return new Chain(json.value);
      };
      /**
       * Create a proxy method for the chain
       * @param {string} name
       * @param {Function} fn      The function to be proxied
       *                           If fn is no function, it is silently ignored.
       * @private
       */


      function createProxy(name, fn) {
        if (typeof fn === 'function') {
          Chain.prototype[name] = chainify(fn);
        }
      }
      /**
       * Create a proxy method for the chain
       * @param {string} name
       * @param {function} resolver   The function resolving with the
       *                              function to be proxied
       * @private
       */


      function createLazyProxy(name, resolver) {
        lazy(Chain.prototype, name, function outerResolver() {
          var fn = resolver();

          if (typeof fn === 'function') {
            return chainify(fn);
          }

          return undefined; // if not a function, ignore
        });
      }
      /**
       * Make a function chainable
       * @param {function} fn
       * @return {Function} chain function
       * @private
       */


      function chainify(fn) {
        return function () {
          var args = [this.value]; // `this` will be the context of a Chain instance

          for (var i = 0; i < arguments.length; i++) {
            args[i + 1] = arguments[i];
          }

          return new Chain(fn.apply(fn, args));
        };
      }
      /**
       * Create a proxy for a single method, or an object with multiple methods.
       * Example usage:
       *
       *   Chain.createProxy('add', function add (x, y) {...})
       *   Chain.createProxy({
       *     add:      function add (x, y) {...},
       *     subtract: function subtract (x, y) {...}
       *   }
       *
       * @param {string | Object} arg0   A name (string), or an object with
       *                                 functions
       * @param {*} [arg1]               A function, when arg0 is a name
       */


      Chain.createProxy = function (arg0, arg1) {
        if (typeof arg0 === 'string') {
          // createProxy(name, value)
          createProxy(arg0, arg1);
        } else {
          var _loop = function _loop(_name) {
            if (hasOwnProperty$1(arg0, _name) && excludedNames[_name] === undefined) {
              createLazyProxy(_name, () => arg0[_name]);
            }
          };

          // createProxy(values)
          for (var _name in arg0) {
            _loop(_name);
          }
        }
      };

      var excludedNames = {
        expression: true,
        docs: true,
        type: true,
        classes: true,
        json: true,
        error: true,
        isChain: true // conflicts with the property isChain of a Chain instance

      }; // create proxy for everything that is in math.js

      Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.

      if (on) {
        on('import', function (name, resolver, path) {
          if (!path) {
            // an imported function (not a data type or something special)
            createLazyProxy(name, resolver);
          }
        });
      }

      return Chain;
    }, {
      isClass: true
    });

    var eDocs = {
      name: 'e',
      category: 'Constants',
      syntax: ['e'],
      description: 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
      examples: ['e', 'e ^ 2', 'exp(2)', 'log(e)'],
      seealso: ['exp']
    };

    var falseDocs = {
      name: 'false',
      category: 'Constants',
      syntax: ['false'],
      description: 'Boolean value false',
      examples: ['false'],
      seealso: ['true']
    };

    var iDocs = {
      name: 'i',
      category: 'Constants',
      syntax: ['i'],
      description: 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
      examples: ['i', 'i * i', 'sqrt(-1)'],
      seealso: []
    };

    var InfinityDocs = {
      name: 'Infinity',
      category: 'Constants',
      syntax: ['Infinity'],
      description: 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
      examples: ['Infinity', '1 / 0'],
      seealso: []
    };

    var LN10Docs = {
      name: 'LN10',
      category: 'Constants',
      syntax: ['LN10'],
      description: 'Returns the natural logarithm of 10, approximately equal to 2.302',
      examples: ['LN10', 'log(10)'],
      seealso: []
    };

    var LN2Docs = {
      name: 'LN2',
      category: 'Constants',
      syntax: ['LN2'],
      description: 'Returns the natural logarithm of 2, approximately equal to 0.693',
      examples: ['LN2', 'log(2)'],
      seealso: []
    };

    var LOG10EDocs = {
      name: 'LOG10E',
      category: 'Constants',
      syntax: ['LOG10E'],
      description: 'Returns the base-10 logarithm of E, approximately equal to 0.434',
      examples: ['LOG10E', 'log(e, 10)'],
      seealso: []
    };

    var LOG2EDocs = {
      name: 'LOG2E',
      category: 'Constants',
      syntax: ['LOG2E'],
      description: 'Returns the base-2 logarithm of E, approximately equal to 1.442',
      examples: ['LOG2E', 'log(e, 2)'],
      seealso: []
    };

    var NaNDocs = {
      name: 'NaN',
      category: 'Constants',
      syntax: ['NaN'],
      description: 'Not a number',
      examples: ['NaN', '0 / 0'],
      seealso: []
    };

    var nullDocs = {
      name: 'null',
      category: 'Constants',
      syntax: ['null'],
      description: 'Value null',
      examples: ['null'],
      seealso: ['true', 'false']
    };

    var phiDocs = {
      name: 'phi',
      category: 'Constants',
      syntax: ['phi'],
      description: 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
      examples: ['phi'],
      seealso: []
    };

    var piDocs = {
      name: 'pi',
      category: 'Constants',
      syntax: ['pi'],
      description: 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
      examples: ['pi', 'sin(pi/2)'],
      seealso: ['tau']
    };

    var SQRT12Docs = {
      name: 'SQRT1_2',
      category: 'Constants',
      syntax: ['SQRT1_2'],
      description: 'Returns the square root of 1/2, approximately equal to 0.707',
      examples: ['SQRT1_2', 'sqrt(1/2)'],
      seealso: []
    };

    var SQRT2Docs = {
      name: 'SQRT2',
      category: 'Constants',
      syntax: ['SQRT2'],
      description: 'Returns the square root of 2, approximately equal to 1.414',
      examples: ['SQRT2', 'sqrt(2)'],
      seealso: []
    };

    var tauDocs = {
      name: 'tau',
      category: 'Constants',
      syntax: ['tau'],
      description: 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
      examples: ['tau', '2 * pi'],
      seealso: ['pi']
    };

    var trueDocs = {
      name: 'true',
      category: 'Constants',
      syntax: ['true'],
      description: 'Boolean value true',
      examples: ['true'],
      seealso: ['false']
    };

    var versionDocs = {
      name: 'version',
      category: 'Constants',
      syntax: ['version'],
      description: 'A string with the version number of math.js',
      examples: ['version'],
      seealso: []
    };

    var bignumberDocs = {
      name: 'bignumber',
      category: 'Construction',
      syntax: ['bignumber(x)'],
      description: 'Create a big number from a number or string.',
      examples: ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber("7.2")', 'bignumber("7.2e500")', 'bignumber([0.1, 0.2, 0.3])'],
      seealso: ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
    };

    var booleanDocs = {
      name: 'boolean',
      category: 'Construction',
      syntax: ['x', 'boolean(x)'],
      description: 'Convert a string or number into a boolean.',
      examples: ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean("true")', 'boolean("false")', 'boolean([1, 0, 1, 1])'],
      seealso: ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']
    };

    var complexDocs = {
      name: 'complex',
      category: 'Construction',
      syntax: ['complex()', 'complex(re, im)', 'complex(string)'],
      description: 'Create a complex number.',
      examples: ['complex()', 'complex(2, 3)', 'complex("7 - 2i")'],
      seealso: ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']
    };

    var createUnitDocs = {
      name: 'createUnit',
      category: 'Construction',
      syntax: ['createUnit(definitions)', 'createUnit(name, definition)'],
      description: 'Create a user-defined unit and register it with the Unit type.',
      examples: ['createUnit("foo")', 'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})', 'createUnit("mph", "1 mile/hour")'],
      seealso: ['unit', 'splitUnit']
    };

    var fractionDocs = {
      name: 'fraction',
      category: 'Construction',
      syntax: ['fraction(num)', 'fraction(matrix)', 'fraction(num,den)', 'fraction({n: num, d: den})'],
      description: 'Create a fraction from a number or from integer numerator and denominator.',
      examples: ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)', 'fraction({n: 333, d: 53})', 'fraction([sqrt(9), sqrt(10), sqrt(11)])'],
      seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']
    };

    var indexDocs = {
      name: 'index',
      category: 'Construction',
      syntax: ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],
      description: 'Create an index to get or replace a subset of a matrix',
      examples: ['[]', '[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[0:2, 0:2] = ones(2, 2)'],
      seealso: ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']
    };

    var matrixDocs = {
      name: 'matrix',
      category: 'Construction',
      syntax: ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix("dense")', 'matrix([...])'],
      description: 'Create a matrix.',
      examples: ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
      seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']
    };

    var numberDocs = {
      name: 'number',
      category: 'Construction',
      syntax: ['x', 'number(x)', 'number(unit, valuelessUnit)'],
      description: 'Create a number or convert a string or boolean into a number.',
      examples: ['2', '2e3', '4.05', 'number(2)', 'number("7.2")', 'number(true)', 'number([true, false, true, true])', 'number(unit("52cm"), "m")'],
      seealso: ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
    };

    var sparseDocs = {
      name: 'sparse',
      category: 'Construction',
      syntax: ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
      description: 'Create a sparse matrix.',
      examples: ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], "number")'],
      seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']
    };

    var splitUnitDocs = {
      name: 'splitUnit',
      category: 'Construction',
      syntax: ['splitUnit(unit: Unit, parts: Unit[])'],
      description: 'Split a unit in an array of units whose sum is equal to the original unit.',
      examples: ['splitUnit(1 m, ["feet", "inch"])'],
      seealso: ['unit', 'createUnit']
    };

    var stringDocs = {
      name: 'string',
      category: 'Construction',
      syntax: ['"text"', 'string(x)'],
      description: 'Create a string or convert a value to a string',
      examples: ['"Hello World!"', 'string(4.2)', 'string(3 + 2i)'],
      seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']
    };

    var unitDocs = {
      name: 'unit',
      category: 'Construction',
      syntax: ['value unit', 'unit(value, unit)', 'unit(string)'],
      description: 'Create a unit.',
      examples: ['5.5 mm', '3 inch', 'unit(7.1, "kilogram")', 'unit("23 deg")'],
      seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']
    };

    var configDocs = {
      name: 'config',
      category: 'Core',
      syntax: ['config()', 'config(options)'],
      description: 'Get configuration or change configuration.',
      examples: ['config()', '1/3 + 1/4', 'config({number: "Fraction"})', '1/3 + 1/4'],
      seealso: []
    };

    var importDocs = {
      name: 'import',
      category: 'Core',
      syntax: ['import(functions)', 'import(functions, options)'],
      description: 'Import functions or constants from an object.',
      examples: ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],
      seealso: []
    };

    var typedDocs = {
      name: 'typed',
      category: 'Core',
      syntax: ['typed(signatures)', 'typed(name, signatures)'],
      description: 'Create a typed function.',
      examples: ['double = typed({ "number": f(x)=x+x })', 'double(2)', 'double("hello")'],
      seealso: []
    };

    var derivativeDocs = {
      name: 'derivative',
      category: 'Algebra',
      syntax: ['derivative(expr, variable)', 'derivative(expr, variable, {simplify: boolean})'],
      description: 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
      examples: ['derivative("2x^3", "x")', 'derivative("2x^3", "x", {simplify: false})', 'derivative("2x^2 + 3x + 4", "x")', 'derivative("sin(2x)", "x")', 'f = parse("x^2 + x")', 'x = parse("x")', 'df = derivative(f, x)', 'df.evaluate({x: 3})'],
      seealso: ['simplify', 'parse', 'evaluate']
    };

    var leafCountDocs = {
      name: 'leafCount',
      category: 'Algebra',
      syntax: ['leafCount(expr)'],
      description: 'Computes the number of leaves in the parse tree of the given expression',
      examples: ['leafCount("e^(i*pi)-1")', 'leafCount(parse("{a: 22/7, b: 10^(1/2)}"))'],
      seealso: ['simplify']
    };

    var lsolveDocs = {
      name: 'lsolve',
      category: 'Algebra',
      syntax: ['x=lsolve(L, b)'],
      description: 'Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
      examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
      seealso: ['lsolveAll', 'lup', 'lusolve', 'usolve', 'matrix', 'sparse']
    };

    var lsolveAllDocs = {
      name: 'lsolveAll',
      category: 'Algebra',
      syntax: ['x=lsolveAll(L, b)'],
      description: 'Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
      examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
      seealso: ['lsolve', 'lup', 'lusolve', 'usolve', 'matrix', 'sparse']
    };

    var lupDocs = {
      name: 'lup',
      category: 'Algebra',
      syntax: ['lup(m)'],
      description: 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
      examples: ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],
      seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr']
    };

    var lusolveDocs = {
      name: 'lusolve',
      category: 'Algebra',
      syntax: ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],
      description: 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
      examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],
      seealso: ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']
    };

    var qrDocs = {
      name: 'qr',
      category: 'Algebra',
      syntax: ['qr(A)'],
      description: 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
      examples: ['qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'],
      seealso: ['lup', 'slu', 'matrix']
    };

    var rationalizeDocs = {
      name: 'rationalize',
      category: 'Algebra',
      syntax: ['rationalize(expr)', 'rationalize(expr, scope)', 'rationalize(expr, scope, detailed)'],
      description: 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
      examples: ['rationalize("2x/y - y/(x+1)")', 'rationalize("2x/y - y/(x+1)", true)'],
      seealso: ['simplify']
    };

    var resolveDocs = {
      name: 'resolve',
      category: 'Algebra',
      syntax: ['resolve(node, scope)'],
      description: 'Recursively substitute variables in an expression tree.',
      examples: ['resolve(parse("1 + x"), { x: 7 })', 'resolve(parse("size(text)"), { text: "Hello World" })', 'resolve(parse("x + y"), { x: parse("3z") })', 'resolve(parse("3x"), { x: parse("y+z"), z: parse("w^y") })'],
      seealso: ['simplify', 'evaluate'],
      mayThrow: ['ReferenceError']
    };

    var simplifyDocs = {
      name: 'simplify',
      category: 'Algebra',
      syntax: ['simplify(expr)', 'simplify(expr, rules)'],
      description: 'Simplify an expression tree.',
      examples: ['simplify("3 + 2 / 4")', 'simplify("2x + x")', 'f = parse("x * (x + 2 + x)")', 'simplified = simplify(f)', 'simplified.evaluate({x: 2})'],
      seealso: ['simplifyCore', 'derivative', 'evaluate', 'parse', 'rationalize', 'resolve']
    };

    var simplifyCoreDocs = {
      name: 'simplifyCore',
      category: 'Algebra',
      syntax: ['simplifyCore(node)'],
      description: 'Perform simple one-pass simplifications on an expression tree.',
      examples: ['simplifyCore(parse("0*x"))', 'simplifyCore(parse("(x+0)*2"))'],
      seealso: ['simplify', 'evaluate']
    };

    var sluDocs = {
      name: 'slu',
      category: 'Algebra',
      syntax: ['slu(A, order, threshold)'],
      description: 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
      examples: ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],
      seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr']
    };

    var symbolicEqualDocs = {
      name: 'symbolicEqual',
      category: 'Algebra',
      syntax: ['symbolicEqual(expr1, expr2)', 'symbolicEqual(expr1, expr2, options)'],
      description: 'Returns true if the difference of the expressions simplifies to 0',
      examples: ['symbolicEqual("x*y","y*x")', 'symbolicEqual("abs(x^2)", "x^2")', 'symbolicEqual("abs(x)", "x", {context: {abs: {trivial: true}}})'],
      seealso: ['simplify', 'evaluate']
    };

    var usolveDocs = {
      name: 'usolve',
      category: 'Algebra',
      syntax: ['x=usolve(U, b)'],
      description: 'Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
      examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
      seealso: ['usolveAll', 'lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
    };

    var usolveAllDocs = {
      name: 'usolveAll',
      category: 'Algebra',
      syntax: ['x=usolve(U, b)'],
      description: 'Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
      examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
      seealso: ['usolve', 'lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
    };

    var absDocs = {
      name: 'abs',
      category: 'Arithmetic',
      syntax: ['abs(x)'],
      description: 'Compute the absolute value.',
      examples: ['abs(3.5)', 'abs(-4.2)'],
      seealso: ['sign']
    };

    var addDocs = {
      name: 'add',
      category: 'Operators',
      syntax: ['x + y', 'add(x, y)'],
      description: 'Add two values.',
      examples: ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '"2.3" + "4"'],
      seealso: ['subtract']
    };

    var cbrtDocs = {
      name: 'cbrt',
      category: 'Arithmetic',
      syntax: ['cbrt(x)', 'cbrt(x, allRoots)'],
      description: 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
      examples: ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],
      seealso: ['square', 'sqrt', 'cube', 'multiply']
    };

    var ceilDocs = {
      name: 'ceil',
      category: 'Arithmetic',
      syntax: ['ceil(x)'],
      description: 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
      examples: ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],
      seealso: ['floor', 'fix', 'round']
    };

    var cubeDocs = {
      name: 'cube',
      category: 'Arithmetic',
      syntax: ['cube(x)'],
      description: 'Compute the cube of a value. The cube of x is x * x * x.',
      examples: ['cube(2)', '2^3', '2 * 2 * 2'],
      seealso: ['multiply', 'square', 'pow']
    };

    var divideDocs = {
      name: 'divide',
      category: 'Operators',
      syntax: ['x / y', 'divide(x, y)'],
      description: 'Divide two values.',
      examples: ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],
      seealso: ['multiply']
    };

    var dotDivideDocs = {
      name: 'dotDivide',
      category: 'Operators',
      syntax: ['x ./ y', 'dotDivide(x, y)'],
      description: 'Divide two values element wise.',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],
      seealso: ['multiply', 'dotMultiply', 'divide']
    };

    var dotMultiplyDocs = {
      name: 'dotMultiply',
      category: 'Operators',
      syntax: ['x .* y', 'dotMultiply(x, y)'],
      description: 'Multiply two values element wise.',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],
      seealso: ['multiply', 'divide', 'dotDivide']
    };

    var dotPowDocs = {
      name: 'dotPow',
      category: 'Operators',
      syntax: ['x .^ y', 'dotPow(x, y)'],
      description: 'Calculates the power of x to y element wise.',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],
      seealso: ['pow']
    };

    var expDocs = {
      name: 'exp',
      category: 'Arithmetic',
      syntax: ['exp(x)'],
      description: 'Calculate the exponent of a value.',
      examples: ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'],
      seealso: ['expm', 'expm1', 'pow', 'log']
    };

    var expmDocs = {
      name: 'expm',
      category: 'Arithmetic',
      syntax: ['exp(x)'],
      description: 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',
      examples: ['expm([[0,2],[0,0]])'],
      seealso: ['exp']
    };

    var expm1Docs = {
      name: 'expm1',
      category: 'Arithmetic',
      syntax: ['expm1(x)'],
      description: 'Calculate the value of subtracting 1 from the exponential value.',
      examples: ['expm1(2)', 'pow(e, 2) - 1', 'log(expm1(2) + 1)'],
      seealso: ['exp', 'pow', 'log']
    };

    var fixDocs = {
      name: 'fix',
      category: 'Arithmetic',
      syntax: ['fix(x)'],
      description: 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
      examples: ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],
      seealso: ['ceil', 'floor', 'round']
    };

    var floorDocs = {
      name: 'floor',
      category: 'Arithmetic',
      syntax: ['floor(x)'],
      description: 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
      examples: ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],
      seealso: ['ceil', 'fix', 'round']
    };

    var gcdDocs = {
      name: 'gcd',
      category: 'Arithmetic',
      syntax: ['gcd(a, b)', 'gcd(a, b, c, ...)'],
      description: 'Compute the greatest common divisor.',
      examples: ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],
      seealso: ['lcm', 'xgcd']
    };

    var hypotDocs = {
      name: 'hypot',
      category: 'Arithmetic',
      syntax: ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],
      description: 'Calculate the hypotenusa of a list with values. ',
      examples: ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],
      seealso: ['abs', 'norm']
    };

    var invmodDocs = {
      name: 'invmod',
      category: 'Arithmetic',
      syntax: ['invmod(a, b)'],
      description: 'Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation ax ≣ 1 (mod b)',
      examples: ['invmod(8, 12)=NaN', 'invmod(7, 13)=2', 'math.invmod(15151, 15122)=10429'],
      seealso: ['gcd', 'xgcd']
    };

    var lcmDocs = {
      name: 'lcm',
      category: 'Arithmetic',
      syntax: ['lcm(x, y)'],
      description: 'Compute the least common multiple.',
      examples: ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],
      seealso: ['gcd']
    };

    var logDocs = {
      name: 'log',
      category: 'Arithmetic',
      syntax: ['log(x)', 'log(x, base)'],
      description: 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
      examples: ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],
      seealso: ['exp', 'log1p', 'log2', 'log10']
    };

    var log10Docs = {
      name: 'log10',
      category: 'Arithmetic',
      syntax: ['log10(x)'],
      description: 'Compute the 10-base logarithm of a value.',
      examples: ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],
      seealso: ['exp', 'log']
    };

    var log1pDocs = {
      name: 'log1p',
      category: 'Arithmetic',
      syntax: ['log1p(x)', 'log1p(x, base)'],
      description: 'Calculate the logarithm of a `value+1`',
      examples: ['log1p(2.5)', 'exp(log1p(1.4))', 'pow(10, 4)', 'log1p(9999, 10)', 'log1p(9999) / log(10)'],
      seealso: ['exp', 'log', 'log2', 'log10']
    };

    var log2Docs = {
      name: 'log2',
      category: 'Arithmetic',
      syntax: ['log2(x)'],
      description: 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',
      examples: ['log2(0.03125)', 'log2(16)', 'log2(16) / log2(2)', 'pow(2, 4)'],
      seealso: ['exp', 'log1p', 'log', 'log10']
    };

    var modDocs = {
      name: 'mod',
      category: 'Operators',
      syntax: ['x % y', 'x mod y', 'mod(x, y)'],
      description: 'Calculates the modulus, the remainder of an integer division.',
      examples: ['7 % 3', '11 % 2', '10 mod 4', 'isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],
      seealso: ['divide']
    };

    var multiplyDocs = {
      name: 'multiply',
      category: 'Operators',
      syntax: ['x * y', 'multiply(x, y)'],
      description: 'multiply two values.',
      examples: ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],
      seealso: ['divide']
    };

    var normDocs = {
      name: 'norm',
      category: 'Arithmetic',
      syntax: ['norm(x)', 'norm(x, p)'],
      description: 'Calculate the norm of a number, vector or matrix.',
      examples: ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i)', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], "inf")', 'norm([[1, 2], [3, 4]], "fro")']
    };

    var nthRootDocs = {
      name: 'nthRoot',
      category: 'Arithmetic',
      syntax: ['nthRoot(a)', 'nthRoot(a, root)'],
      description: 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
      examples: ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],
      seealso: ['nthRoots', 'pow', 'sqrt']
    };

    var nthRootsDocs = {
      name: 'nthRoots',
      category: 'Arithmetic',
      syntax: ['nthRoots(A)', 'nthRoots(A, root)'],
      description: '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation "x^root = A". ' + 'This function returns an array of complex values.',
      examples: ['nthRoots(1)', 'nthRoots(1, 3)'],
      seealso: ['sqrt', 'pow', 'nthRoot']
    };

    var powDocs = {
      name: 'pow',
      category: 'Operators',
      syntax: ['x ^ y', 'pow(x, y)'],
      description: 'Calculates the power of x to y, x^y.',
      examples: ['2^3', '2*2*2', '1 + e ^ (pi * i)', 'math.pow([[1, 2], [4, 3]], 2)', 'math.pow([[1, 2], [4, 3]], -1)'],
      seealso: ['multiply', 'nthRoot', 'nthRoots', 'sqrt']
    };

    var roundDocs = {
      name: 'round',
      category: 'Arithmetic',
      syntax: ['round(x)', 'round(x, n)'],
      description: 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
      examples: ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],
      seealso: ['ceil', 'floor', 'fix']
    };

    var signDocs = {
      name: 'sign',
      category: 'Arithmetic',
      syntax: ['sign(x)'],
      description: 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
      examples: ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],
      seealso: ['abs']
    };

    var sqrtDocs = {
      name: 'sqrt',
      category: 'Arithmetic',
      syntax: ['sqrt(x)'],
      description: 'Compute the square root value. If x = y * y, then y is the square root of x.',
      examples: ['sqrt(25)', '5 * 5', 'sqrt(-1)'],
      seealso: ['square', 'sqrtm', 'multiply', 'nthRoot', 'nthRoots', 'pow']
    };

    var sqrtmDocs = {
      name: 'sqrtm',
      category: 'Arithmetic',
      syntax: ['sqrtm(x)'],
      description: 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',
      examples: ['sqrtm([[1, 2], [3, 4]])'],
      seealso: ['sqrt', 'abs', 'square', 'multiply']
    };

    var squareDocs = {
      name: 'square',
      category: 'Arithmetic',
      syntax: ['square(x)'],
      description: 'Compute the square of a value. The square of x is x * x.',
      examples: ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],
      seealso: ['multiply', 'pow', 'sqrt', 'cube']
    };

    var subtractDocs = {
      name: 'subtract',
      category: 'Operators',
      syntax: ['x - y', 'subtract(x, y)'],
      description: 'subtract two values.',
      examples: ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],
      seealso: ['add']
    };

    var unaryMinusDocs = {
      name: 'unaryMinus',
      category: 'Operators',
      syntax: ['-x', 'unaryMinus(x)'],
      description: 'Inverse the sign of a value. Converts booleans and strings to numbers.',
      examples: ['-4.5', '-(-5.6)', '-"22"'],
      seealso: ['add', 'subtract', 'unaryPlus']
    };

    var unaryPlusDocs = {
      name: 'unaryPlus',
      category: 'Operators',
      syntax: ['+x', 'unaryPlus(x)'],
      description: 'Converts booleans and strings to numbers.',
      examples: ['+true', '+"2"'],
      seealso: ['add', 'subtract', 'unaryMinus']
    };

    var xgcdDocs = {
      name: 'xgcd',
      category: 'Arithmetic',
      syntax: ['xgcd(a, b)'],
      description: 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
      examples: ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],
      seealso: ['gcd', 'lcm']
    };

    var bitAndDocs = {
      name: 'bitAnd',
      category: 'Bitwise',
      syntax: ['x & y', 'bitAnd(x, y)'],
      description: 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
      examples: ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],
      seealso: ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
    };

    var bitNotDocs = {
      name: 'bitNot',
      category: 'Bitwise',
      syntax: ['~x', 'bitNot(x)'],
      description: 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
      examples: ['~1', '~2', 'bitNot([2, -3, 4])'],
      seealso: ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
    };

    var bitOrDocs = {
      name: 'bitOr',
      category: 'Bitwise',
      syntax: ['x | y', 'bitOr(x, y)'],
      description: 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
      examples: ['5 | 3', 'bitOr([1, 2, 3], 4)'],
      seealso: ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
    };

    var bitXorDocs = {
      name: 'bitXor',
      category: 'Bitwise',
      syntax: ['bitXor(x, y)'],
      description: 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
      examples: ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],
      seealso: ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']
    };

    var leftShiftDocs = {
      name: 'leftShift',
      category: 'Bitwise',
      syntax: ['x << y', 'leftShift(x, y)'],
      description: 'Bitwise left logical shift of a value x by y number of bits.',
      examples: ['4 << 1', '8 >> 1'],
      seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']
    };

    var rightArithShiftDocs = {
      name: 'rightArithShift',
      category: 'Bitwise',
      syntax: ['x >> y', 'rightArithShift(x, y)'],
      description: 'Bitwise right arithmetic shift of a value x by y number of bits.',
      examples: ['8 >> 1', '4 << 1', '-12 >> 2'],
      seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']
    };

    var rightLogShiftDocs = {
      name: 'rightLogShift',
      category: 'Bitwise',
      syntax: ['x >>> y', 'rightLogShift(x, y)'],
      description: 'Bitwise right logical shift of a value x by y number of bits.',
      examples: ['8 >>> 1', '4 << 1', '-12 >>> 2'],
      seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']
    };

    var bellNumbersDocs = {
      name: 'bellNumbers',
      category: 'Combinatorics',
      syntax: ['bellNumbers(n)'],
      description: 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
      examples: ['bellNumbers(3)', 'bellNumbers(8)'],
      seealso: ['stirlingS2']
    };

    var catalanDocs = {
      name: 'catalan',
      category: 'Combinatorics',
      syntax: ['catalan(n)'],
      description: 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
      examples: ['catalan(3)', 'catalan(8)'],
      seealso: ['bellNumbers']
    };

    var compositionDocs = {
      name: 'composition',
      category: 'Combinatorics',
      syntax: ['composition(n, k)'],
      description: 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
      examples: ['composition(5, 3)'],
      seealso: ['combinations']
    };

    var stirlingS2Docs = {
      name: 'stirlingS2',
      category: 'Combinatorics',
      syntax: ['stirlingS2(n, k)'],
      description: 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
      examples: ['stirlingS2(5, 3)'],
      seealso: ['bellNumbers']
    };

    var argDocs = {
      name: 'arg',
      category: 'Complex',
      syntax: ['arg(x)'],
      description: 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
      examples: ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],
      seealso: ['re', 'im', 'conj', 'abs']
    };

    var conjDocs = {
      name: 'conj',
      category: 'Complex',
      syntax: ['conj(x)'],
      description: 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
      examples: ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],
      seealso: ['re', 'im', 'abs', 'arg']
    };

    var imDocs = {
      name: 'im',
      category: 'Complex',
      syntax: ['im(x)'],
      description: 'Get the imaginary part of a complex number.',
      examples: ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],
      seealso: ['re', 'conj', 'abs', 'arg']
    };

    var reDocs = {
      name: 're',
      category: 'Complex',
      syntax: ['re(x)'],
      description: 'Get the real part of a complex number.',
      examples: ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],
      seealso: ['im', 'conj', 'abs', 'arg']
    };

    var evaluateDocs = {
      name: 'evaluate',
      category: 'Expression',
      syntax: ['evaluate(expression)', 'evaluate([expr1, expr2, expr3, ...])'],
      description: 'Evaluate an expression or an array with expressions.',
      examples: ['evaluate("2 + 3")', 'evaluate("sqrt(" + 4 + ")")'],
      seealso: []
    };

    var helpDocs = {
      name: 'help',
      category: 'Expression',
      syntax: ['help(object)', 'help(string)'],
      description: 'Display documentation on a function or data type.',
      examples: ['help(sqrt)', 'help("complex")'],
      seealso: []
    };

    var distanceDocs = {
      name: 'distance',
      category: 'Geometry',
      syntax: ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2]])'],
      description: 'Calculates the Euclidean distance between two points.',
      examples: ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],
      seealso: []
    };

    var intersectDocs = {
      name: 'intersect',
      category: 'Geometry',
      syntax: ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],
      description: 'Computes the intersection point of lines and/or planes.',
      examples: ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],
      seealso: []
    };

    var andDocs = {
      name: 'and',
      category: 'Logical',
      syntax: ['x and y', 'and(x, y)'],
      description: 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
      examples: ['true and false', 'true and true', '2 and 4'],
      seealso: ['not', 'or', 'xor']
    };

    var notDocs = {
      name: 'not',
      category: 'Logical',
      syntax: ['not x', 'not(x)'],
      description: 'Logical not. Flips the boolean value of given argument.',
      examples: ['not true', 'not false', 'not 2', 'not 0'],
      seealso: ['and', 'or', 'xor']
    };

    var orDocs = {
      name: 'or',
      category: 'Logical',
      syntax: ['x or y', 'or(x, y)'],
      description: 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
      examples: ['true or false', 'false or false', '0 or 4'],
      seealso: ['not', 'and', 'xor']
    };

    var xorDocs = {
      name: 'xor',
      category: 'Logical',
      syntax: ['x xor y', 'xor(x, y)'],
      description: 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
      examples: ['true xor false', 'false xor false', 'true xor true', '0 xor 4'],
      seealso: ['not', 'and', 'or']
    };

    var columnDocs = {
      name: 'column',
      category: 'Matrix',
      syntax: ['column(x, index)'],
      description: 'Return a column from a matrix or array.',
      examples: ['A = [[1, 2], [3, 4]]', 'column(A, 1)', 'column(A, 2)'],
      seealso: ['row', 'matrixFromColumns']
    };

    var concatDocs = {
      name: 'concat',
      category: 'Matrix',
      syntax: ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],
      description: 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
      examples: ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],
      seealso: ['det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var countDocs = {
      name: 'count',
      category: 'Matrix',
      syntax: ['count(x)'],
      description: 'Count the number of elements of a matrix, array or string.',
      examples: ['a = [1, 2; 3, 4; 5, 6]', 'count(a)', 'size(a)', 'count("hello world")'],
      seealso: ['size']
    };

    var crossDocs = {
      name: 'cross',
      category: 'Matrix',
      syntax: ['cross(A, B)'],
      description: 'Calculate the cross product for two vectors in three dimensional space.',
      examples: ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],
      seealso: ['multiply', 'dot']
    };

    var ctransposeDocs = {
      name: 'ctranspose',
      category: 'Matrix',
      syntax: ['x\'', 'ctranspose(x)'],
      description: 'Complex Conjugate and Transpose a matrix',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'ctranspose(a)'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
    };

    var detDocs = {
      name: 'det',
      category: 'Matrix',
      syntax: ['det(x)'],
      description: 'Calculate the determinant of a matrix',
      examples: ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],
      seealso: ['concat', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var diagDocs = {
      name: 'diag',
      category: 'Matrix',
      syntax: ['diag(x)', 'diag(x, k)'],
      description: 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
      examples: ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],
      seealso: ['concat', 'det', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var diffDocs = {
      name: 'diff',
      category: 'Matrix',
      syntax: ['diff(arr)', 'diff(arr, dim)'],
      description: ['Create a new matrix or array with the difference of the passed matrix or array.', 'Dim parameter is optional and used to indicant the dimension of the array/matrix to apply the difference', 'If no dimension parameter is passed it is assumed as dimension 0', 'Dimension is zero-based in javascript and one-based in the parser', 'Arrays must be \'rectangular\' meaning arrays like [1, 2]', 'If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays'],
      examples: ['diff([1, 2, 4, 7, 0])', 'diff([1, 2, 4, 7, 0], 0)', 'diff(matrix([1, 2, 4, 7, 0]))', 'diff([[1, 2], [3, 4]])', 'diff([[1, 2], [3, 4]], 0)', 'diff([[1, 2], [3, 4]], 1)', 'diff([[1, 2], [3, 4]], bignumber(1))', 'diff(matrix([[1, 2], [3, 4]]), 1)', 'diff([[1, 2], matrix([3, 4])], 1)'],
      seealso: ['subtract', 'partitionSelect']
    };

    var dotDocs = {
      name: 'dot',
      category: 'Matrix',
      syntax: ['dot(A, B)', 'A * B'],
      description: 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
      examples: ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],
      seealso: ['multiply', 'cross']
    };

    var eigsDocs = {
      name: 'eigs',
      category: 'Matrix',
      syntax: ['eigs(x)'],
      description: 'Calculate the eigenvalues and eigenvectors of a real symmetric matrix',
      examples: ['eigs([[5, 2.3], [2.3, 1]])'],
      seealso: ['inv']
    };

    var filterDocs = {
      name: 'filter',
      category: 'Matrix',
      syntax: ['filter(x, test)'],
      description: 'Filter items in a matrix.',
      examples: ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],
      seealso: ['sort', 'map', 'forEach']
    };

    var flattenDocs = {
      name: 'flatten',
      category: 'Matrix',
      syntax: ['flatten(x)'],
      description: 'Flatten a multi dimensional matrix into a single dimensional matrix.',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],
      seealso: ['concat', 'resize', 'size', 'squeeze']
    };

    var forEachDocs = {
      name: 'forEach',
      category: 'Matrix',
      syntax: ['forEach(x, callback)'],
      description: 'Iterates over all elements of a matrix/array, and executes the given callback function.',
      examples: ['numberOfPets = {}', 'addPet(n) = numberOfPets[n] = (numberOfPets[n] ? numberOfPets[n]:0 ) + 1;', 'forEach(["Dog","Cat","Cat"], addPet)', 'numberOfPets'],
      seealso: ['map', 'sort', 'filter']
    };

    var getMatrixDataTypeDocs = {
      name: 'getMatrixDataType',
      category: 'Matrix',
      syntax: ['getMatrixDataType(x)'],
      description: 'Find the data type of all elements in a matrix or array, ' + 'for example "number" if all items are a number ' + 'and "Complex" if all values are complex numbers. ' + 'If a matrix contains more than one data type, it will return "mixed".',
      examples: ['getMatrixDataType([1, 2, 3])', 'getMatrixDataType([[5 cm], [2 inch]])', 'getMatrixDataType([1, "text"])', 'getMatrixDataType([1, bignumber(4)])'],
      seealso: ['matrix', 'sparse', 'typeOf']
    };

    var identityDocs = {
      name: 'identity',
      category: 'Matrix',
      syntax: ['identity(n)', 'identity(m, n)', 'identity([m, n])'],
      description: 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
      examples: ['identity(3)', 'identity(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'identity(size(a))'],
      seealso: ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var invDocs = {
      name: 'inv',
      category: 'Matrix',
      syntax: ['inv(x)'],
      description: 'Calculate the inverse of a matrix',
      examples: ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],
      seealso: ['concat', 'det', 'diag', 'identity', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var pinvDocs = {
      name: 'pinv',
      category: 'Matrix',
      syntax: ['pinv(x)'],
      description: 'Calculate the Moore–Penrose inverse of a matrix',
      examples: ['pinv([1, 2; 3, 4])', 'pinv([[1, 0], [0, 1], [0, 1]])', 'pinv(4)'],
      seealso: ['inv']
    };

    var kronDocs = {
      name: 'kron',
      category: 'Matrix',
      syntax: ['kron(x, y)'],
      description: 'Calculates the kronecker product of 2 matrices or vectors.',
      examples: ['kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])', 'kron([1,1], [2,3,4])'],
      seealso: ['multiply', 'dot', 'cross']
    };

    var mapDocs = {
      name: 'map',
      category: 'Matrix',
      syntax: ['map(x, callback)'],
      description: 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
      examples: ['map([1, 2, 3], square)'],
      seealso: ['filter', 'forEach']
    };

    var matrixFromColumnsDocs = {
      name: 'matrixFromColumns',
      category: 'Matrix',
      syntax: ['math.matrixFromColumns(...arr)', 'math.matrixFromColumns(row1, row2)', 'math.matrixFromColumns(row1, row2, row3)'],
      description: 'Create a dense matrix from vectors as individual columns.',
      examples: ['matrixFromColumns([1, 2, 3], [[4],[5],[6]])'],
      seealso: ['matrix', 'matrixFromRows', 'matrixFromFunction', 'zeros']
    };

    var matrixFromFunctionDocs = {
      name: 'matrixFromFunction',
      category: 'Matrix',
      syntax: ['math.matrixFromFunction(size, fn)', 'math.matrixFromFunction(size, fn, format)', 'math.matrixFromFunction(size, fn, format, datatype)', 'math.matrixFromFunction(size, format, fn)', 'math.matrixFromFunction(size, format, datatype, fn)'],
      description: 'Create a matrix by evaluating a generating function at each index.',
      examples: ['f(I) = I[1] - I[2]', 'matrixFromFunction([3,3], f)', 'g(I) = I[1] - I[2] == 1 ? 4 : 0', 'matrixFromFunction([100, 100], "sparse", g)', 'matrixFromFunction([5], random)'],
      seealso: ['matrix', 'matrixFromRows', 'matrixFromColumns', 'zeros']
    };

    var matrixFromRowsDocs = {
      name: 'matrixFromRows',
      category: 'Matrix',
      syntax: ['math.matrixFromRows(...arr)', 'math.matrixFromRows(row1, row2)', 'math.matrixFromRows(row1, row2, row3)'],
      description: 'Create a dense matrix from vectors as individual rows.',
      examples: ['matrixFromRows([1, 2, 3], [[4],[5],[6]])'],
      seealso: ['matrix', 'matrixFromColumns', 'matrixFromFunction', 'zeros']
    };

    var onesDocs = {
      name: 'ones',
      category: 'Matrix',
      syntax: ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])'],
      description: 'Create a matrix containing ones.',
      examples: ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var partitionSelectDocs = {
      name: 'partitionSelect',
      category: 'Matrix',
      syntax: ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],
      description: 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
      examples: ['partitionSelect([5, 10, 1], 2)', 'partitionSelect(["C", "B", "A", "D"], 1)'],
      seealso: ['sort']
    };

    var rangeDocs = {
      name: 'range',
      category: 'Type',
      syntax: ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],
      description: 'Create a range. Lower bound of the range is included, upper bound is excluded.',
      examples: ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range("4:10")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var reshapeDocs = {
      name: 'reshape',
      category: 'Matrix',
      syntax: ['reshape(x, sizes)'],
      description: 'Reshape a multi dimensional array to fit the specified dimensions.',
      examples: ['reshape([1, 2, 3, 4, 5, 6], [2, 3])', 'reshape([[1, 2], [3, 4]], [1, 4])', 'reshape([[1, 2], [3, 4]], [4])'],
      seealso: ['size', 'squeeze', 'resize']
    };

    var resizeDocs = {
      name: 'resize',
      category: 'Matrix',
      syntax: ['resize(x, size)', 'resize(x, size, defaultValue)'],
      description: 'Resize a matrix.',
      examples: ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize("hello", [8], "!")'],
      seealso: ['size', 'subset', 'squeeze', 'reshape']
    };

    var rotateDocs = {
      name: 'rotate',
      category: 'Matrix',
      syntax: ['rotate(w, theta)', 'rotate(w, theta, v)'],
      description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',
      examples: ['rotate([1, 0], math.pi / 2)', 'rotate(matrix([1, 0]), unit("35deg"))', 'rotate([1, 0, 0], unit("90deg"), [0, 0, 1])', 'rotate(matrix([1, 0, 0]), unit("90deg"), matrix([0, 0, 1]))'],
      seealso: ['matrix', 'rotationMatrix']
    };

    var rotationMatrixDocs = {
      name: 'rotationMatrix',
      category: 'Matrix',
      syntax: ['rotationMatrix(theta)', 'rotationMatrix(theta, v)', 'rotationMatrix(theta, v, format)'],
      description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',
      examples: ['rotationMatrix(pi / 2)', 'rotationMatrix(unit("45deg"), [0, 0, 1])', 'rotationMatrix(1, matrix([0, 0, 1]), "sparse")'],
      seealso: ['cos', 'sin']
    };

    var rowDocs = {
      name: 'row',
      category: 'Matrix',
      syntax: ['row(x, index)'],
      description: 'Return a row from a matrix or array.',
      examples: ['A = [[1, 2], [3, 4]]', 'row(A, 1)', 'row(A, 2)'],
      seealso: ['column', 'matrixFromRows']
    };

    var sizeDocs = {
      name: 'size',
      category: 'Matrix',
      syntax: ['size(x)'],
      description: 'Calculate the size of a matrix.',
      examples: ['size(2.3)', 'size("hello world")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],
      seealso: ['concat', 'count', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var sortDocs = {
      name: 'sort',
      category: 'Matrix',
      syntax: ['sort(x)', 'sort(x, compare)'],
      description: 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
      examples: ['sort([5, 10, 1])', 'sort(["C", "B", "A", "D"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort(["Langdon", "Tom", "Sara"], sortByLength)', 'sort(["10", "1", "2"], "natural")'],
      seealso: ['map', 'filter', 'forEach']
    };

    var squeezeDocs = {
      name: 'squeeze',
      category: 'Matrix',
      syntax: ['squeeze(x)'],
      description: 'Remove inner and outer singleton dimensions from a matrix.',
      examples: ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']
    };

    var subsetDocs = {
      name: 'subset',
      category: 'Matrix',
      syntax: ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],
      description: 'Get or set a subset of the entries of a matrix or ' + 'characters of a string. ' + 'Indexes are one-based. There should be one index specification for ' + 'each dimension of the target. Each specification can be a single ' + 'index, a list of indices, or a range in colon notation `l:u`. ' + 'In a range, both the lower bound l and upper bound u are included; ' + 'and if a bound is omitted it defaults to the most extreme valid value. ' + 'The cartesian product of the indices specified in each dimension ' + 'determines the target of the operation.',
      examples: ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]', 'f[[1,2], [1,3]] = [9, 10; 11, 12]', 'f'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']
    };

    var traceDocs = {
      name: 'trace',
      category: 'Matrix',
      syntax: ['trace(A)'],
      description: 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
      examples: ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']
    };

    var transposeDocs = {
      name: 'transpose',
      category: 'Matrix',
      syntax: ['x\'', 'transpose(x)'],
      description: 'Transpose a matrix',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'transpose(a)'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
    };

    var zerosDocs = {
      name: 'zeros',
      category: 'Matrix',
      syntax: ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])'],
      description: 'Create a matrix containing zeros.',
      examples: ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']
    };

    var fftDocs = {
      name: 'fft',
      category: 'Matrix',
      syntax: ['fft(x)'],
      description: 'Calculate N-dimensional fourier transform',
      examples: ['fft([[1, 0], [1, 0]])'],
      seealso: ['ifft']
    };

    var ifftDocs = {
      name: 'ifft',
      category: 'Matrix',
      syntax: ['ifft(x)'],
      description: 'Calculate N-dimensional inverse fourier transform',
      examples: ['ifft([[2, 2], [0, 0]])'],
      seealso: ['fft']
    };

    var combinationsDocs = {
      name: 'combinations',
      category: 'Probability',
      syntax: ['combinations(n, k)'],
      description: 'Compute the number of combinations of n items taken k at a time',
      examples: ['combinations(7, 5)'],
      seealso: ['combinationsWithRep', 'permutations', 'factorial']
    };

    var combinationsWithRepDocs = {
      name: 'combinationsWithRep',
      category: 'Probability',
      syntax: ['combinationsWithRep(n, k)'],
      description: 'Compute the number of combinations of n items taken k at a time with replacements.',
      examples: ['combinationsWithRep(7, 5)'],
      seealso: ['combinations', 'permutations', 'factorial']
    };

    var factorialDocs = {
      name: 'factorial',
      category: 'Probability',
      syntax: ['n!', 'factorial(n)'],
      description: 'Compute the factorial of a value',
      examples: ['5!', '5 * 4 * 3 * 2 * 1', '3!'],
      seealso: ['combinations', 'combinationsWithRep', 'permutations', 'gamma']
    };

    var gammaDocs = {
      name: 'gamma',
      category: 'Probability',
      syntax: ['gamma(n)'],
      description: 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
      examples: ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],
      seealso: ['factorial']
    };

    var lgammaDocs = {
      name: 'lgamma',
      category: 'Probability',
      syntax: ['lgamma(n)'],
      description: 'Logarithm of the gamma function for real, positive numbers and complex numbers, ' + 'using Lanczos approximation for numbers and Stirling series for complex numbers.',
      examples: ['lgamma(4)', 'lgamma(1/2)', 'lgamma(math.i)', 'lgamma(complex(1.1, 2))'],
      seealso: ['gamma']
    };

    var kldivergenceDocs = {
      name: 'kldivergence',
      category: 'Probability',
      syntax: ['kldivergence(x, y)'],
      description: 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
      examples: ['kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],
      seealso: []
    };

    var multinomialDocs = {
      name: 'multinomial',
      category: 'Probability',
      syntax: ['multinomial(A)'],
      description: 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
      examples: ['multinomial([1, 2, 1])'],
      seealso: ['combinations', 'factorial']
    };

    var permutationsDocs = {
      name: 'permutations',
      category: 'Probability',
      syntax: ['permutations(n)', 'permutations(n, k)'],
      description: 'Compute the number of permutations of n items taken k at a time',
      examples: ['permutations(5)', 'permutations(5, 3)'],
      seealso: ['combinations', 'combinationsWithRep', 'factorial']
    };

    var pickRandomDocs = {
      name: 'pickRandom',
      category: 'Probability',
      syntax: ['pickRandom(array)', 'pickRandom(array, number)', 'pickRandom(array, weights)', 'pickRandom(array, number, weights)', 'pickRandom(array, weights, number)'],
      description: 'Pick a random entry from a given array.',
      examples: ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])', 'pickRandom([1, 3, 1, 6], 2)', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'],
      seealso: ['random', 'randomInt']
    };

    var randomDocs = {
      name: 'random',
      category: 'Probability',
      syntax: ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],
      description: 'Return a random number.',
      examples: ['random()', 'random(10, 20)', 'random([2, 3])'],
      seealso: ['pickRandom', 'randomInt']
    };

    var randomIntDocs = {
      name: 'randomInt',
      category: 'Probability',
      syntax: ['randomInt(max)', 'randomInt(min, max)', 'randomInt(size)', 'randomInt(size, max)', 'randomInt(size, min, max)'],
      description: 'Return a random integer number',
      examples: ['randomInt(10, 20)', 'randomInt([2, 3], 10)'],
      seealso: ['pickRandom', 'random']
    };

    var compareDocs = {
      name: 'compare',
      category: 'Relational',
      syntax: ['compare(x, y)'],
      description: 'Compare two values. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
      examples: ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],
      seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural', 'compareText']
    };

    var compareNaturalDocs = {
      name: 'compareNatural',
      category: 'Relational',
      syntax: ['compareNatural(x, y)'],
      description: 'Compare two values of any type in a deterministic, natural way. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
      examples: ['compareNatural(2, 3)', 'compareNatural(3, 2)', 'compareNatural(2, 2)', 'compareNatural(5cm, 40mm)', 'compareNatural("2", "10")', 'compareNatural(2 + 3i, 2 + 4i)', 'compareNatural([1, 2, 4], [1, 2, 3])', 'compareNatural([1, 5], [1, 2, 3])', 'compareNatural([1, 2], [1, 2])', 'compareNatural({a: 2}, {a: 4})'],
      seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare', 'compareText']
    };

    var compareTextDocs = {
      name: 'compareText',
      category: 'Relational',
      syntax: ['compareText(x, y)'],
      description: 'Compare two strings lexically. Comparison is case sensitive. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
      examples: ['compareText("B", "A")', 'compareText("A", "B")', 'compareText("A", "A")', 'compareText("2", "10")', 'compare("2", "10")', 'compare(2, 10)', 'compareNatural("2", "10")', 'compareText("B", ["A", "B", "C"])'],
      seealso: ['compare', 'compareNatural']
    };

    var deepEqualDocs = {
      name: 'deepEqual',
      category: 'Relational',
      syntax: ['deepEqual(x, y)'],
      description: 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
      examples: ['deepEqual([1,3,4], [1,3,4])', 'deepEqual([1,3,4], [1,3])'],
      seealso: ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']
    };

    var equalDocs = {
      name: 'equal',
      category: 'Relational',
      syntax: ['x == y', 'equal(x, y)'],
      description: 'Check equality of two values. Returns true if the values are equal, and false if not.',
      examples: ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],
      seealso: ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual', 'equalText']
    };

    var equalTextDocs = {
      name: 'equalText',
      category: 'Relational',
      syntax: ['equalText(x, y)'],
      description: 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',
      examples: ['equalText("Hello", "Hello")', 'equalText("a", "A")', 'equal("2e3", "2000")', 'equalText("2e3", "2000")', 'equalText("B", ["A", "B", "C"])'],
      seealso: ['compare', 'compareNatural', 'compareText', 'equal']
    };

    var largerDocs = {
      name: 'larger',
      category: 'Relational',
      syntax: ['x > y', 'larger(x, y)'],
      description: 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
      examples: ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],
      seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']
    };

    var largerEqDocs = {
      name: 'largerEq',
      category: 'Relational',
      syntax: ['x >= y', 'largerEq(x, y)'],
      description: 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
      examples: ['2 >= 1+1', '2 > 1+1', 'a = 3.2', 'b = 6-2.8', '(a >= b)'],
      seealso: ['equal', 'unequal', 'smallerEq', 'smaller', 'compare']
    };

    var smallerDocs = {
      name: 'smaller',
      category: 'Relational',
      syntax: ['x < y', 'smaller(x, y)'],
      description: 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
      examples: ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],
      seealso: ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']
    };

    var smallerEqDocs = {
      name: 'smallerEq',
      category: 'Relational',
      syntax: ['x <= y', 'smallerEq(x, y)'],
      description: 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
      examples: ['2 <= 1+1', '2 < 1+1', 'a = 3.2', 'b = 6-2.8', '(a <= b)'],
      seealso: ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']
    };

    var unequalDocs = {
      name: 'unequal',
      category: 'Relational',
      syntax: ['x != y', 'unequal(x, y)'],
      description: 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
      examples: ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],
      seealso: ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
    };

    var setCartesianDocs = {
      name: 'setCartesian',
      category: 'Set',
      syntax: ['setCartesian(set1, set2)'],
      description: 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays and the values will be sorted in ascending order before the operation.',
      examples: ['setCartesian([1, 2], [3, 4])'],
      seealso: ['setUnion', 'setIntersect', 'setDifference', 'setPowerset']
    };

    var setDifferenceDocs = {
      name: 'setDifference',
      category: 'Set',
      syntax: ['setDifference(set1, set2)'],
      description: 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
      examples: ['setDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
      seealso: ['setUnion', 'setIntersect', 'setSymDifference']
    };

    var setDistinctDocs = {
      name: 'setDistinct',
      category: 'Set',
      syntax: ['setDistinct(set)'],
      description: 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
      examples: ['setDistinct([1, 1, 1, 2, 2, 3])'],
      seealso: ['setMultiplicity']
    };

    var setIntersectDocs = {
      name: 'setIntersect',
      category: 'Set',
      syntax: ['setIntersect(set1, set2)'],
      description: 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
      examples: ['setIntersect([1, 2, 3, 4], [3, 4, 5, 6])', 'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
      seealso: ['setUnion', 'setDifference']
    };

    var setIsSubsetDocs = {
      name: 'setIsSubset',
      category: 'Set',
      syntax: ['setIsSubset(set1, set2)'],
      description: 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
      examples: ['setIsSubset([1, 2], [3, 4, 5, 6])', 'setIsSubset([3, 4], [3, 4, 5, 6])'],
      seealso: ['setUnion', 'setIntersect', 'setDifference']
    };

    var setMultiplicityDocs = {
      name: 'setMultiplicity',
      category: 'Set',
      syntax: ['setMultiplicity(element, set)'],
      description: 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
      examples: ['setMultiplicity(1, [1, 2, 2, 4])', 'setMultiplicity(2, [1, 2, 2, 4])'],
      seealso: ['setDistinct', 'setSize']
    };

    var setPowersetDocs = {
      name: 'setPowerset',
      category: 'Set',
      syntax: ['setPowerset(set)'],
      description: 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
      examples: ['setPowerset([1, 2, 3])'],
      seealso: ['setCartesian']
    };

    var setSizeDocs = {
      name: 'setSize',
      category: 'Set',
      syntax: ['setSize(set)', 'setSize(set, unique)'],
      description: 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
      examples: ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],
      seealso: ['setUnion', 'setIntersect', 'setDifference']
    };

    var setSymDifferenceDocs = {
      name: 'setSymDifference',
      category: 'Set',
      syntax: ['setSymDifference(set1, set2)'],
      description: 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
      examples: ['setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
      seealso: ['setUnion', 'setIntersect', 'setDifference']
    };

    var setUnionDocs = {
      name: 'setUnion',
      category: 'Set',
      syntax: ['setUnion(set1, set2)'],
      description: 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
      examples: ['setUnion([1, 2, 3, 4], [3, 4, 5, 6])', 'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
      seealso: ['setIntersect', 'setDifference']
    };

    var erfDocs = {
      name: 'erf',
      category: 'Special',
      syntax: ['erf(x)'],
      description: 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
      examples: ['erf(0.2)', 'erf(-0.5)', 'erf(4)'],
      seealso: []
    };

    var madDocs = {
      name: 'mad',
      category: 'Statistics',
      syntax: ['mad(a, b, c, ...)', 'mad(A)'],
      description: 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
      examples: ['mad(10, 20, 30)', 'mad([1, 2, 3])'],
      seealso: ['mean', 'median', 'std', 'abs']
    };

    var maxDocs = {
      name: 'max',
      category: 'Statistics',
      syntax: ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],
      description: 'Compute the maximum value of a list of values.',
      examples: ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],
      seealso: ['mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
    };

    var meanDocs = {
      name: 'mean',
      category: 'Statistics',
      syntax: ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],
      description: 'Compute the arithmetic mean of a list of values.',
      examples: ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],
      seealso: ['max', 'median', 'min', 'prod', 'std', 'sum', 'variance']
    };

    var medianDocs = {
      name: 'median',
      category: 'Statistics',
      syntax: ['median(a, b, c, ...)', 'median(A)'],
      description: 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
      examples: ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],
      seealso: ['max', 'mean', 'min', 'prod', 'std', 'sum', 'variance', 'quantileSeq']
    };

    var minDocs = {
      name: 'min',
      category: 'Statistics',
      syntax: ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],
      description: 'Compute the minimum value of a list of values.',
      examples: ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],
      seealso: ['max', 'mean', 'median', 'prod', 'std', 'sum', 'variance']
    };

    var modeDocs = {
      name: 'mode',
      category: 'Statistics',
      syntax: ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],
      description: 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
      examples: ['mode(2, 1, 4, 3, 1)', 'mode([1, 2.7, 3.2, 4, 2.7])', 'mode(1, 4, 6, 1, 6)'],
      seealso: ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'variance']
    };

    var prodDocs = {
      name: 'prod',
      category: 'Statistics',
      syntax: ['prod(a, b, c, ...)', 'prod(A)'],
      description: 'Compute the product of all values.',
      examples: ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],
      seealso: ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'variance']
    };

    var quantileSeqDocs = {
      name: 'quantileSeq',
      category: 'Statistics',
      syntax: ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],
      description: 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
      examples: ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],
      seealso: ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'variance']
    };

    var stdDocs = {
      name: 'std',
      category: 'Statistics',
      syntax: ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],
      description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
      examples: ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', 'std([1, 2, 3; 4, 5, 6])'],
      seealso: ['max', 'mean', 'min', 'median', 'prod', 'sum', 'variance']
    };

    var cumSumDocs = {
      name: 'cumsum',
      category: 'Statistics',
      syntax: ['cumsum(a, b, c, ...)', 'cumsum(A)'],
      description: 'Compute the cumulative sum of all values.',
      examples: ['cumsum(2, 3, 4, 1)', 'cumsum([2, 3, 4, 1])', 'cumsum([1, 2; 3, 4])', 'cumsum([1, 2; 3, 4], 1)', 'cumsum([1, 2; 3, 4], 2)'],
      seealso: ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
    };

    var sumDocs = {
      name: 'sum',
      category: 'Statistics',
      syntax: ['sum(a, b, c, ...)', 'sum(A)'],
      description: 'Compute the sum of all values.',
      examples: ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],
      seealso: ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
    };

    var varianceDocs = {
      name: 'variance',
      category: 'Statistics',
      syntax: ['variance(a, b, c, ...)', 'variance(A)', 'variance(A, normalization)'],
      description: 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
      examples: ['variance(2, 4, 6)', 'variance([2, 4, 6, 8])', 'variance([2, 4, 6, 8], "uncorrected")', 'variance([2, 4, 6, 8], "biased")', 'variance([1, 2, 3; 4, 5, 6])'],
      seealso: ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']
    };

    var acosDocs = {
      name: 'acos',
      category: 'Trigonometry',
      syntax: ['acos(x)'],
      description: 'Compute the inverse cosine of a value in radians.',
      examples: ['acos(0.5)', 'acos(cos(2.3))'],
      seealso: ['cos', 'atan', 'asin']
    };

    var acoshDocs = {
      name: 'acosh',
      category: 'Trigonometry',
      syntax: ['acosh(x)'],
      description: 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
      examples: ['acosh(1.5)'],
      seealso: ['cosh', 'asinh', 'atanh']
    };

    var acotDocs = {
      name: 'acot',
      category: 'Trigonometry',
      syntax: ['acot(x)'],
      description: 'Calculate the inverse cotangent of a value.',
      examples: ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],
      seealso: ['cot', 'atan']
    };

    var acothDocs = {
      name: 'acoth',
      category: 'Trigonometry',
      syntax: ['acoth(x)'],
      description: 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
      examples: ['acoth(2)', 'acoth(0.5)'],
      seealso: ['acsch', 'asech']
    };

    var acscDocs = {
      name: 'acsc',
      category: 'Trigonometry',
      syntax: ['acsc(x)'],
      description: 'Calculate the inverse cotangent of a value.',
      examples: ['acsc(2)', 'acsc(csc(0.5))', 'acsc(0.5)'],
      seealso: ['csc', 'asin', 'asec']
    };

    var acschDocs = {
      name: 'acsch',
      category: 'Trigonometry',
      syntax: ['acsch(x)'],
      description: 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
      examples: ['acsch(0.5)'],
      seealso: ['asech', 'acoth']
    };

    var asecDocs = {
      name: 'asec',
      category: 'Trigonometry',
      syntax: ['asec(x)'],
      description: 'Calculate the inverse secant of a value.',
      examples: ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],
      seealso: ['acos', 'acot', 'acsc']
    };

    var asechDocs = {
      name: 'asech',
      category: 'Trigonometry',
      syntax: ['asech(x)'],
      description: 'Calculate the inverse secant of a value.',
      examples: ['asech(0.5)'],
      seealso: ['acsch', 'acoth']
    };

    var asinDocs = {
      name: 'asin',
      category: 'Trigonometry',
      syntax: ['asin(x)'],
      description: 'Compute the inverse sine of a value in radians.',
      examples: ['asin(0.5)', 'asin(sin(0.5))'],
      seealso: ['sin', 'acos', 'atan']
    };

    var asinhDocs = {
      name: 'asinh',
      category: 'Trigonometry',
      syntax: ['asinh(x)'],
      description: 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
      examples: ['asinh(0.5)'],
      seealso: ['acosh', 'atanh']
    };

    var atanDocs = {
      name: 'atan',
      category: 'Trigonometry',
      syntax: ['atan(x)'],
      description: 'Compute the inverse tangent of a value in radians.',
      examples: ['atan(0.5)', 'atan(tan(0.5))'],
      seealso: ['tan', 'acos', 'asin']
    };

    var atan2Docs = {
      name: 'atan2',
      category: 'Trigonometry',
      syntax: ['atan2(y, x)'],
      description: 'Computes the principal value of the arc tangent of y/x in radians.',
      examples: ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],
      seealso: ['sin', 'cos', 'tan']
    };

    var atanhDocs = {
      name: 'atanh',
      category: 'Trigonometry',
      syntax: ['atanh(x)'],
      description: 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
      examples: ['atanh(0.5)'],
      seealso: ['acosh', 'asinh']
    };

    var cosDocs = {
      name: 'cos',
      category: 'Trigonometry',
      syntax: ['cos(x)'],
      description: 'Compute the cosine of x in radians.',
      examples: ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
      seealso: ['acos', 'sin', 'tan']
    };

    var coshDocs = {
      name: 'cosh',
      category: 'Trigonometry',
      syntax: ['cosh(x)'],
      description: 'Compute the hyperbolic cosine of x in radians.',
      examples: ['cosh(0.5)'],
      seealso: ['sinh', 'tanh', 'coth']
    };

    var cotDocs = {
      name: 'cot',
      category: 'Trigonometry',
      syntax: ['cot(x)'],
      description: 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
      examples: ['cot(2)', '1 / tan(2)'],
      seealso: ['sec', 'csc', 'tan']
    };

    var cothDocs = {
      name: 'coth',
      category: 'Trigonometry',
      syntax: ['coth(x)'],
      description: 'Compute the hyperbolic cotangent of x in radians.',
      examples: ['coth(2)', '1 / tanh(2)'],
      seealso: ['sech', 'csch', 'tanh']
    };

    var cscDocs = {
      name: 'csc',
      category: 'Trigonometry',
      syntax: ['csc(x)'],
      description: 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
      examples: ['csc(2)', '1 / sin(2)'],
      seealso: ['sec', 'cot', 'sin']
    };

    var cschDocs = {
      name: 'csch',
      category: 'Trigonometry',
      syntax: ['csch(x)'],
      description: 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
      examples: ['csch(2)', '1 / sinh(2)'],
      seealso: ['sech', 'coth', 'sinh']
    };

    var secDocs = {
      name: 'sec',
      category: 'Trigonometry',
      syntax: ['sec(x)'],
      description: 'Compute the secant of x in radians. Defined as 1/cos(x)',
      examples: ['sec(2)', '1 / cos(2)'],
      seealso: ['cot', 'csc', 'cos']
    };

    var sechDocs = {
      name: 'sech',
      category: 'Trigonometry',
      syntax: ['sech(x)'],
      description: 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
      examples: ['sech(2)', '1 / cosh(2)'],
      seealso: ['coth', 'csch', 'cosh']
    };

    var sinDocs = {
      name: 'sin',
      category: 'Trigonometry',
      syntax: ['sin(x)'],
      description: 'Compute the sine of x in radians.',
      examples: ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
      seealso: ['asin', 'cos', 'tan']
    };

    var sinhDocs = {
      name: 'sinh',
      category: 'Trigonometry',
      syntax: ['sinh(x)'],
      description: 'Compute the hyperbolic sine of x in radians.',
      examples: ['sinh(0.5)'],
      seealso: ['cosh', 'tanh']
    };

    var tanDocs = {
      name: 'tan',
      category: 'Trigonometry',
      syntax: ['tan(x)'],
      description: 'Compute the tangent of x in radians.',
      examples: ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],
      seealso: ['atan', 'sin', 'cos']
    };

    var tanhDocs = {
      name: 'tanh',
      category: 'Trigonometry',
      syntax: ['tanh(x)'],
      description: 'Compute the hyperbolic tangent of x in radians.',
      examples: ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],
      seealso: ['sinh', 'cosh']
    };

    var toDocs = {
      name: 'to',
      category: 'Units',
      syntax: ['x to unit', 'to(x, unit)'],
      description: 'Change the unit of a value.',
      examples: ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],
      seealso: []
    };

    var binDocs = {
      name: 'bin',
      category: 'Utils',
      syntax: ['bin(value)'],
      description: 'Format a number as binary',
      examples: ['bin(2)'],
      seealso: ['oct', 'hex']
    };

    var cloneDocs = {
      name: 'clone',
      category: 'Utils',
      syntax: ['clone(x)'],
      description: 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
      examples: ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone("hello world")'],
      seealso: []
    };

    var formatDocs = {
      name: 'format',
      category: 'Utils',
      syntax: ['format(value)', 'format(value, precision)'],
      description: 'Format a value of any type as string.',
      examples: ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],
      seealso: ['print']
    };

    var hasNumericValueDocs = {
      name: 'hasNumericValue',
      category: 'Utils',
      syntax: ['hasNumericValue(x)'],
      description: 'Test whether a value is an numeric value. ' + 'In case of a string, true is returned if the string contains a numeric value.',
      examples: ['hasNumericValue(2)', 'hasNumericValue("2")', 'isNumeric("2")', 'hasNumericValue(0)', 'hasNumericValue(bignumber(500))', 'hasNumericValue(fraction(0.125))', 'hasNumericValue(2 + 3i)', 'hasNumericValue([2.3, "foo", false])'],
      seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'isNumeric']
    };

    var hexDocs = {
      name: 'hex',
      category: 'Utils',
      syntax: ['hex(value)'],
      description: 'Format a number as hexadecimal',
      examples: ['hex(240)'],
      seealso: ['bin', 'oct']
    };

    var isIntegerDocs = {
      name: 'isInteger',
      category: 'Utils',
      syntax: ['isInteger(x)'],
      description: 'Test whether a value is an integer number.',
      examples: ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],
      seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
    };

    var isNaNDocs = {
      name: 'isNaN',
      category: 'Utils',
      syntax: ['isNaN(x)'],
      description: 'Test whether a value is NaN (not a number)',
      examples: ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],
      seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
    };

    var isNegativeDocs = {
      name: 'isNegative',
      category: 'Utils',
      syntax: ['isNegative(x)'],
      description: 'Test whether a value is negative: smaller than zero.',
      examples: ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],
      seealso: ['isInteger', 'isNumeric', 'isPositive', 'isZero']
    };

    var isNumericDocs = {
      name: 'isNumeric',
      category: 'Utils',
      syntax: ['isNumeric(x)'],
      description: 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
      examples: ['isNumeric(2)', 'isNumeric("2")', 'hasNumericValue("2")', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric(2 + 3i)', 'isNumeric([2.3, "foo", false])'],
      seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'hasNumericValue']
    };

    var isPositiveDocs = {
      name: 'isPositive',
      category: 'Utils',
      syntax: ['isPositive(x)'],
      description: 'Test whether a value is positive: larger than zero.',
      examples: ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],
      seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
    };

    var isPrimeDocs = {
      name: 'isPrime',
      category: 'Utils',
      syntax: ['isPrime(x)'],
      description: 'Test whether a value is prime: has no divisors other than itself and one.',
      examples: ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],
      seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
    };

    var isZeroDocs = {
      name: 'isZero',
      category: 'Utils',
      syntax: ['isZero(x)'],
      description: 'Test whether a value is zero.',
      examples: ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],
      seealso: ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
    };

    var numericDocs = {
      name: 'numeric',
      category: 'Utils',
      syntax: ['numeric(x)'],
      description: 'Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.',
      examples: ['numeric("4")', 'numeric("4", "number")', 'numeric("4", "BigNumber")', 'numeric("4", "Fraction)', 'numeric(4, "Fraction")', 'numeric(fraction(2, 5), "number)'],
      seealso: ['number', 'fraction', 'bignumber', 'string', 'format']
    };

    var octDocs = {
      name: 'oct',
      category: 'Utils',
      syntax: ['oct(value)'],
      description: 'Format a number as octal',
      examples: ['oct(56)'],
      seealso: ['bin', 'hex']
    };

    var printDocs = {
      name: 'print',
      category: 'Utils',
      syntax: ['print(template, values)', 'print(template, values, precision)'],
      description: 'Interpolate values into a string template.',
      examples: ['print("Lucy is $age years old", {age: 5})', 'print("The value of pi is $pi", {pi: pi}, 3)', 'print("Hello, $user.name!", {user: {name: "John"}})', 'print("Values: $0, $1, $2", [6, 9, 4])'],
      seealso: ['format']
    };

    var typeOfDocs = {
      name: 'typeOf',
      category: 'Utils',
      syntax: ['typeOf(x)'],
      description: 'Get the type of a variable.',
      examples: ['typeOf(3.5)', 'typeOf(2 - 4i)', 'typeOf(45 deg)', 'typeOf("hello world")'],
      seealso: ['getMatrixDataType']
    };

    var embeddedDocs = {
      // construction functions
      bignumber: bignumberDocs,
      boolean: booleanDocs,
      complex: complexDocs,
      createUnit: createUnitDocs,
      fraction: fractionDocs,
      index: indexDocs,
      matrix: matrixDocs,
      number: numberDocs,
      sparse: sparseDocs,
      splitUnit: splitUnitDocs,
      string: stringDocs,
      unit: unitDocs,
      // constants
      e: eDocs,
      E: eDocs,
      false: falseDocs,
      i: iDocs,
      Infinity: InfinityDocs,
      LN2: LN2Docs,
      LN10: LN10Docs,
      LOG2E: LOG2EDocs,
      LOG10E: LOG10EDocs,
      NaN: NaNDocs,
      null: nullDocs,
      pi: piDocs,
      PI: piDocs,
      phi: phiDocs,
      SQRT1_2: SQRT12Docs,
      SQRT2: SQRT2Docs,
      tau: tauDocs,
      true: trueDocs,
      version: versionDocs,
      // physical constants
      // TODO: more detailed docs for physical constants
      speedOfLight: {
        description: 'Speed of light in vacuum',
        examples: ['speedOfLight']
      },
      gravitationConstant: {
        description: 'Newtonian constant of gravitation',
        examples: ['gravitationConstant']
      },
      planckConstant: {
        description: 'Planck constant',
        examples: ['planckConstant']
      },
      reducedPlanckConstant: {
        description: 'Reduced Planck constant',
        examples: ['reducedPlanckConstant']
      },
      magneticConstant: {
        description: 'Magnetic constant (vacuum permeability)',
        examples: ['magneticConstant']
      },
      electricConstant: {
        description: 'Electric constant (vacuum permeability)',
        examples: ['electricConstant']
      },
      vacuumImpedance: {
        description: 'Characteristic impedance of vacuum',
        examples: ['vacuumImpedance']
      },
      coulomb: {
        description: 'Coulomb\'s constant',
        examples: ['coulomb']
      },
      elementaryCharge: {
        description: 'Elementary charge',
        examples: ['elementaryCharge']
      },
      bohrMagneton: {
        description: 'Borh magneton',
        examples: ['bohrMagneton']
      },
      conductanceQuantum: {
        description: 'Conductance quantum',
        examples: ['conductanceQuantum']
      },
      inverseConductanceQuantum: {
        description: 'Inverse conductance quantum',
        examples: ['inverseConductanceQuantum']
      },
      // josephson: {description: 'Josephson constant', examples: ['josephson']},
      magneticFluxQuantum: {
        description: 'Magnetic flux quantum',
        examples: ['magneticFluxQuantum']
      },
      nuclearMagneton: {
        description: 'Nuclear magneton',
        examples: ['nuclearMagneton']
      },
      klitzing: {
        description: 'Von Klitzing constant',
        examples: ['klitzing']
      },
      bohrRadius: {
        description: 'Borh radius',
        examples: ['bohrRadius']
      },
      classicalElectronRadius: {
        description: 'Classical electron radius',
        examples: ['classicalElectronRadius']
      },
      electronMass: {
        description: 'Electron mass',
        examples: ['electronMass']
      },
      fermiCoupling: {
        description: 'Fermi coupling constant',
        examples: ['fermiCoupling']
      },
      fineStructure: {
        description: 'Fine-structure constant',
        examples: ['fineStructure']
      },
      hartreeEnergy: {
        description: 'Hartree energy',
        examples: ['hartreeEnergy']
      },
      protonMass: {
        description: 'Proton mass',
        examples: ['protonMass']
      },
      deuteronMass: {
        description: 'Deuteron Mass',
        examples: ['deuteronMass']
      },
      neutronMass: {
        description: 'Neutron mass',
        examples: ['neutronMass']
      },
      quantumOfCirculation: {
        description: 'Quantum of circulation',
        examples: ['quantumOfCirculation']
      },
      rydberg: {
        description: 'Rydberg constant',
        examples: ['rydberg']
      },
      thomsonCrossSection: {
        description: 'Thomson cross section',
        examples: ['thomsonCrossSection']
      },
      weakMixingAngle: {
        description: 'Weak mixing angle',
        examples: ['weakMixingAngle']
      },
      efimovFactor: {
        description: 'Efimov factor',
        examples: ['efimovFactor']
      },
      atomicMass: {
        description: 'Atomic mass constant',
        examples: ['atomicMass']
      },
      avogadro: {
        description: 'Avogadro\'s number',
        examples: ['avogadro']
      },
      boltzmann: {
        description: 'Boltzmann constant',
        examples: ['boltzmann']
      },
      faraday: {
        description: 'Faraday constant',
        examples: ['faraday']
      },
      firstRadiation: {
        description: 'First radiation constant',
        examples: ['firstRadiation']
      },
      loschmidt: {
        description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',
        examples: ['loschmidt']
      },
      gasConstant: {
        description: 'Gas constant',
        examples: ['gasConstant']
      },
      molarPlanckConstant: {
        description: 'Molar Planck constant',
        examples: ['molarPlanckConstant']
      },
      molarVolume: {
        description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',
        examples: ['molarVolume']
      },
      sackurTetrode: {
        description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',
        examples: ['sackurTetrode']
      },
      secondRadiation: {
        description: 'Second radiation constant',
        examples: ['secondRadiation']
      },
      stefanBoltzmann: {
        description: 'Stefan-Boltzmann constant',
        examples: ['stefanBoltzmann']
      },
      wienDisplacement: {
        description: 'Wien displacement law constant',
        examples: ['wienDisplacement']
      },
      // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},
      molarMass: {
        description: 'Molar mass constant',
        examples: ['molarMass']
      },
      molarMassC12: {
        description: 'Molar mass constant of carbon-12',
        examples: ['molarMassC12']
      },
      gravity: {
        description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',
        examples: ['gravity']
      },
      planckLength: {
        description: 'Planck length',
        examples: ['planckLength']
      },
      planckMass: {
        description: 'Planck mass',
        examples: ['planckMass']
      },
      planckTime: {
        description: 'Planck time',
        examples: ['planckTime']
      },
      planckCharge: {
        description: 'Planck charge',
        examples: ['planckCharge']
      },
      planckTemperature: {
        description: 'Planck temperature',
        examples: ['planckTemperature']
      },
      // functions - algebra
      derivative: derivativeDocs,
      lsolve: lsolveDocs,
      lsolveAll: lsolveAllDocs,
      lup: lupDocs,
      lusolve: lusolveDocs,
      leafCount: leafCountDocs,
      resolve: resolveDocs,
      simplify: simplifyDocs,
      simplifyCore: simplifyCoreDocs,
      symbolicEqual: symbolicEqualDocs,
      rationalize: rationalizeDocs,
      slu: sluDocs,
      usolve: usolveDocs,
      usolveAll: usolveAllDocs,
      qr: qrDocs,
      // functions - arithmetic
      abs: absDocs,
      add: addDocs,
      cbrt: cbrtDocs,
      ceil: ceilDocs,
      cube: cubeDocs,
      divide: divideDocs,
      dotDivide: dotDivideDocs,
      dotMultiply: dotMultiplyDocs,
      dotPow: dotPowDocs,
      exp: expDocs,
      expm: expmDocs,
      expm1: expm1Docs,
      fix: fixDocs,
      floor: floorDocs,
      gcd: gcdDocs,
      hypot: hypotDocs,
      lcm: lcmDocs,
      log: logDocs,
      log2: log2Docs,
      log1p: log1pDocs,
      log10: log10Docs,
      mod: modDocs,
      multiply: multiplyDocs,
      norm: normDocs,
      nthRoot: nthRootDocs,
      nthRoots: nthRootsDocs,
      pow: powDocs,
      round: roundDocs,
      sign: signDocs,
      sqrt: sqrtDocs,
      sqrtm: sqrtmDocs,
      square: squareDocs,
      subtract: subtractDocs,
      unaryMinus: unaryMinusDocs,
      unaryPlus: unaryPlusDocs,
      xgcd: xgcdDocs,
      invmod: invmodDocs,
      // functions - bitwise
      bitAnd: bitAndDocs,
      bitNot: bitNotDocs,
      bitOr: bitOrDocs,
      bitXor: bitXorDocs,
      leftShift: leftShiftDocs,
      rightArithShift: rightArithShiftDocs,
      rightLogShift: rightLogShiftDocs,
      // functions - combinatorics
      bellNumbers: bellNumbersDocs,
      catalan: catalanDocs,
      composition: compositionDocs,
      stirlingS2: stirlingS2Docs,
      // functions - core
      config: configDocs,
      import: importDocs,
      typed: typedDocs,
      // functions - complex
      arg: argDocs,
      conj: conjDocs,
      re: reDocs,
      im: imDocs,
      // functions - expression
      evaluate: evaluateDocs,
      help: helpDocs,
      // functions - geometry
      distance: distanceDocs,
      intersect: intersectDocs,
      // functions - logical
      and: andDocs,
      not: notDocs,
      or: orDocs,
      xor: xorDocs,
      // functions - matrix
      concat: concatDocs,
      count: countDocs,
      cross: crossDocs,
      column: columnDocs,
      ctranspose: ctransposeDocs,
      det: detDocs,
      diag: diagDocs,
      diff: diffDocs,
      dot: dotDocs,
      getMatrixDataType: getMatrixDataTypeDocs,
      identity: identityDocs,
      filter: filterDocs,
      flatten: flattenDocs,
      forEach: forEachDocs,
      inv: invDocs,
      pinv: pinvDocs,
      eigs: eigsDocs,
      kron: kronDocs,
      matrixFromFunction: matrixFromFunctionDocs,
      matrixFromRows: matrixFromRowsDocs,
      matrixFromColumns: matrixFromColumnsDocs,
      map: mapDocs,
      ones: onesDocs,
      partitionSelect: partitionSelectDocs,
      range: rangeDocs,
      resize: resizeDocs,
      reshape: reshapeDocs,
      rotate: rotateDocs,
      rotationMatrix: rotationMatrixDocs,
      row: rowDocs,
      size: sizeDocs,
      sort: sortDocs,
      squeeze: squeezeDocs,
      subset: subsetDocs,
      trace: traceDocs,
      transpose: transposeDocs,
      zeros: zerosDocs,
      fft: fftDocs,
      ifft: ifftDocs,
      // functions - probability
      combinations: combinationsDocs,
      combinationsWithRep: combinationsWithRepDocs,
      // distribution: distributionDocs,
      factorial: factorialDocs,
      gamma: gammaDocs,
      kldivergence: kldivergenceDocs,
      lgamma: lgammaDocs,
      multinomial: multinomialDocs,
      permutations: permutationsDocs,
      pickRandom: pickRandomDocs,
      random: randomDocs,
      randomInt: randomIntDocs,
      // functions - relational
      compare: compareDocs,
      compareNatural: compareNaturalDocs,
      compareText: compareTextDocs,
      deepEqual: deepEqualDocs,
      equal: equalDocs,
      equalText: equalTextDocs,
      larger: largerDocs,
      largerEq: largerEqDocs,
      smaller: smallerDocs,
      smallerEq: smallerEqDocs,
      unequal: unequalDocs,
      // functions - set
      setCartesian: setCartesianDocs,
      setDifference: setDifferenceDocs,
      setDistinct: setDistinctDocs,
      setIntersect: setIntersectDocs,
      setIsSubset: setIsSubsetDocs,
      setMultiplicity: setMultiplicityDocs,
      setPowerset: setPowersetDocs,
      setSize: setSizeDocs,
      setSymDifference: setSymDifferenceDocs,
      setUnion: setUnionDocs,
      // functions - special
      erf: erfDocs,
      // functions - statistics
      cumsum: cumSumDocs,
      mad: madDocs,
      max: maxDocs,
      mean: meanDocs,
      median: medianDocs,
      min: minDocs,
      mode: modeDocs,
      prod: prodDocs,
      quantileSeq: quantileSeqDocs,
      std: stdDocs,
      sum: sumDocs,
      variance: varianceDocs,
      // functions - trigonometry
      acos: acosDocs,
      acosh: acoshDocs,
      acot: acotDocs,
      acoth: acothDocs,
      acsc: acscDocs,
      acsch: acschDocs,
      asec: asecDocs,
      asech: asechDocs,
      asin: asinDocs,
      asinh: asinhDocs,
      atan: atanDocs,
      atanh: atanhDocs,
      atan2: atan2Docs,
      cos: cosDocs,
      cosh: coshDocs,
      cot: cotDocs,
      coth: cothDocs,
      csc: cscDocs,
      csch: cschDocs,
      sec: secDocs,
      sech: sechDocs,
      sin: sinDocs,
      sinh: sinhDocs,
      tan: tanDocs,
      tanh: tanhDocs,
      // functions - units
      to: toDocs,
      // functions - utils
      clone: cloneDocs,
      format: formatDocs,
      bin: binDocs,
      oct: octDocs,
      hex: hexDocs,
      isNaN: isNaNDocs,
      isInteger: isIntegerDocs,
      isNegative: isNegativeDocs,
      isNumeric: isNumericDocs,
      hasNumericValue: hasNumericValueDocs,
      isPositive: isPositiveDocs,
      isPrime: isPrimeDocs,
      isZero: isZeroDocs,
      print: printDocs,
      typeOf: typeOfDocs,
      numeric: numericDocs
    };

    var name$_ = 'help';
    var dependencies$_ = ['typed', 'mathWithTransform', 'Help'];
    var createHelp = /* #__PURE__ */factory(name$_, dependencies$_, _ref => {
      var {
        typed,
        mathWithTransform,
        Help
      } = _ref;

      /**
       * Retrieve help on a function or data type.
       * Help files are retrieved from the embedded documentation in math.docs.
       *
       * Syntax:
       *
       *    math.help(search)
       *
       * Examples:
       *
       *    console.log(math.help('sin').toString())
       *    console.log(math.help(math.add).toString())
       *    console.log(math.help(math.add).toJSON())
       *
       * @param {Function | string | Object} search   A function or function name
       *                                              for which to get help
       * @return {Help} A help object
       */
      return typed(name$_, {
        any: function any(search) {
          var prop;
          var searchName = search;

          if (typeof search !== 'string') {
            for (prop in mathWithTransform) {
              // search in functions and constants
              if (hasOwnProperty$1(mathWithTransform, prop) && search === mathWithTransform[prop]) {
                searchName = prop;
                break;
              }
            }
            /* TODO: implement help for data types
             if (!text) {
             // search data type
             for (prop in math.type) {
             if (hasOwnProperty(math, prop)) {
             if (search === math.type[prop]) {
             text = prop
             break
             }
             }
             }
             }
             */

          }

          var doc = getSafeProperty(embeddedDocs, searchName);

          if (!doc) {
            var searchText = typeof searchName === 'function' ? searchName.name : searchName;
            throw new Error('No documentation found on "' + searchText + '"');
          }

          return new Help(doc);
        }
      });
    });

    var name$Z = 'chain';
    var dependencies$Z = ['typed', 'Chain'];
    var createChain = /* #__PURE__ */factory(name$Z, dependencies$Z, _ref => {
      var {
        typed,
        Chain
      } = _ref;

      /**
       * Wrap any value in a chain, allowing to perform chained operations on
       * the value.
       *
       * All methods available in the math.js library can be called upon the chain,
       * and then will be evaluated with the value itself as first argument.
       * The chain can be closed by executing `chain.done()`, which returns
       * the final value.
       *
       * The chain has a number of special functions:
       *
       * - `done()`     Finalize the chain and return the chain's value.
       * - `valueOf()`  The same as `done()`
       * - `toString()` Executes `math.format()` onto the chain's value, returning
       *                a string representation of the value.
       *
       * Syntax:
       *
       *    math.chain(value)
       *
       * Examples:
       *
       *     math.chain(3)
       *         .add(4)
       *         .subtract(2)
       *         .done()     // 5
       *
       *     math.chain( [[1, 2], [3, 4]] )
       *         .subset(math.index(0, 0), 8)
       *         .multiply(3)
       *         .done()     // [[24, 6], [9, 12]]
       *
       * @param {*} [value]   A value of any type on which to start a chained operation.
       * @return {math.Chain} The created chain
       */
      return typed(name$Z, {
        '': function _() {
          return new Chain();
        },
        any: function any(value) {
          return new Chain(value);
        }
      });
    });

    var name$Y = 'det';
    var dependencies$Y = ['typed', 'matrix', 'subtract', 'multiply', 'divideScalar', 'isZero', 'unaryMinus'];
    var createDet = /* #__PURE__ */factory(name$Y, dependencies$Y, _ref => {
      var {
        typed,
        matrix,
        subtract,
        multiply,
        divideScalar,
        isZero,
        unaryMinus
      } = _ref;

      /**
       * Calculate the determinant of a matrix.
       *
       * Syntax:
       *
       *    math.det(x)
       *
       * Examples:
       *
       *    math.det([[1, 2], [3, 4]]) // returns -2
       *
       *    const A = [
       *      [-2, 2, 3],
       *      [-1, 1, 3],
       *      [2, 0, -1]
       *    ]
       *    math.det(A) // returns 6
       *
       * See also:
       *
       *    inv
       *
       * @param {Array | Matrix} x  A matrix
       * @return {number} The determinant of `x`
       */
      return typed(name$Y, {
        any: function any(x) {
          return clone$1(x);
        },
        'Array | Matrix': function det(x) {
          var size;

          if (isMatrix(x)) {
            size = x.size();
          } else if (Array.isArray(x)) {
            x = matrix(x);
            size = x.size();
          } else {
            // a scalar
            size = [];
          }

          switch (size.length) {
            case 0:
              // scalar
              return clone$1(x);

            case 1:
              // vector
              if (size[0] === 1) {
                return clone$1(x.valueOf()[0]);
              } else {
                throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
              }

            case 2:
              {
                // two dimensional array
                var rows = size[0];
                var cols = size[1];

                if (rows === cols) {
                  return _det(x.clone().valueOf(), rows);
                } else {
                  throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
                }
              }

            default:
              // multi dimensional array
              throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format$1(size) + ')');
          }
        }
      });
      /**
       * Calculate the determinant of a matrix
       * @param {Array[]} matrix  A square, two dimensional matrix
       * @param {number} rows     Number of rows of the matrix (zero-based)
       * @param {number} cols     Number of columns of the matrix (zero-based)
       * @returns {number} det
       * @private
       */

      function _det(matrix, rows, cols) {
        if (rows === 1) {
          // this is a 1 x 1 matrix
          return clone$1(matrix[0][0]);
        } else if (rows === 2) {
          // this is a 2 x 2 matrix
          // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
          return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
        } else {
          // Bareiss algorithm
          // this algorithm have same complexity as LUP decomposition (O(n^3))
          // but it preserve precision of floating point more relative to the LUP decomposition
          var negated = false;
          var rowIndices = new Array(rows).fill(0).map((_, i) => i); // matrix index of row i

          for (var k = 0; k < rows; k++) {
            var k_ = rowIndices[k];

            if (isZero(matrix[k_][k])) {
              var _k = void 0;

              for (_k = k + 1; _k < rows; _k++) {
                if (!isZero(matrix[rowIndices[_k]][k])) {
                  k_ = rowIndices[_k];
                  rowIndices[_k] = rowIndices[k];
                  rowIndices[k] = k_;
                  negated = !negated;
                  break;
                }
              }

              if (_k === rows) return matrix[k_][k]; // some zero of the type
            }

            var piv = matrix[k_][k];
            var piv_ = k === 0 ? 1 : matrix[rowIndices[k - 1]][k - 1];

            for (var i = k + 1; i < rows; i++) {
              var i_ = rowIndices[i];

              for (var j = k + 1; j < rows; j++) {
                matrix[i_][j] = divideScalar(subtract(multiply(matrix[i_][j], piv), multiply(matrix[i_][k], matrix[k_][j])), piv_);
              }
            }
          }

          var det = matrix[rowIndices[rows - 1]][rows - 1];
          return negated ? unaryMinus(det) : det;
        }
      }
    });

    var name$X = 'inv';
    var dependencies$X = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];
    var createInv = /* #__PURE__ */factory(name$X, dependencies$X, _ref => {
      var {
        typed,
        matrix,
        divideScalar,
        addScalar,
        multiply,
        unaryMinus,
        det,
        identity,
        abs
      } = _ref;

      /**
       * Calculate the inverse of a square matrix.
       *
       * Syntax:
       *
       *     math.inv(x)
       *
       * Examples:
       *
       *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]
       *     math.inv(4)                 // returns 0.25
       *     1 / 4                       // returns 0.25
       *
       * See also:
       *
       *     det, transpose
       *
       * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
       * @return {number | Complex | Array | Matrix} The inverse of `x`.
       */
      return typed(name$X, {
        'Array | Matrix': function ArrayMatrix(x) {
          var size = isMatrix(x) ? x.size() : arraySize(x);

          switch (size.length) {
            case 1:
              // vector
              if (size[0] === 1) {
                if (isMatrix(x)) {
                  return matrix([divideScalar(1, x.valueOf()[0])]);
                } else {
                  return [divideScalar(1, x[0])];
                }
              } else {
                throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
              }

            case 2:
              // two dimensional array
              {
                var rows = size[0];
                var cols = size[1];

                if (rows === cols) {
                  if (isMatrix(x)) {
                    return matrix(_inv(x.valueOf(), rows, cols), x.storage());
                  } else {
                    // return an Array
                    return _inv(x, rows, cols);
                  }
                } else {
                  throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
                }
              }

            default:
              // multi dimensional array
              throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format$1(size) + ')');
          }
        },
        any: function any(x) {
          // scalar
          return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
        }
      });
      /**
       * Calculate the inverse of a square matrix
       * @param {Array[]} mat     A square matrix
       * @param {number} rows     Number of rows
       * @param {number} cols     Number of columns, must equal rows
       * @return {Array[]} inv    Inverse matrix
       * @private
       */

      function _inv(mat, rows, cols) {
        var r, s, f, value, temp;

        if (rows === 1) {
          // this is a 1 x 1 matrix
          value = mat[0][0];

          if (value === 0) {
            throw Error('Cannot calculate inverse, determinant is zero');
          }

          return [[divideScalar(1, value)]];
        } else if (rows === 2) {
          // this is a 2 x 2 matrix
          var d = det(mat);

          if (d === 0) {
            throw Error('Cannot calculate inverse, determinant is zero');
          }

          return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];
        } else {
          // this is a matrix of 3 x 3 or larger
          // calculate inverse using gauss-jordan elimination
          //      https://en.wikipedia.org/wiki/Gaussian_elimination
          //      http://mathworld.wolfram.com/MatrixInverse.html
          //      http://math.uww.edu/~mcfarlat/inverse.htm
          // make a copy of the matrix (only the arrays, not of the elements)
          var A = mat.concat();

          for (r = 0; r < rows; r++) {
            A[r] = A[r].concat();
          } // create an identity matrix which in the end will contain the
          // matrix inverse


          var B = identity(rows).valueOf(); // loop over all columns, and perform row reductions

          for (var c = 0; c < cols; c++) {
            // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]
            var ABig = abs(A[c][c]);
            var rBig = c;
            r = c + 1;

            while (r < rows) {
              if (abs(A[r][c]) > ABig) {
                ABig = abs(A[r][c]);
                rBig = r;
              }

              r++;
            }

            if (ABig === 0) {
              throw Error('Cannot calculate inverse, determinant is zero');
            }

            r = rBig;

            if (r !== c) {
              temp = A[c];
              A[c] = A[r];
              A[r] = temp;
              temp = B[c];
              B[c] = B[r];
              B[r] = temp;
            } // eliminate non-zero values on the other rows at column c


            var Ac = A[c];
            var Bc = B[c];

            for (r = 0; r < rows; r++) {
              var Ar = A[r];
              var Br = B[r];

              if (r !== c) {
                // eliminate value at column c and row r
                if (Ar[c] !== 0) {
                  f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value
                  // at column c

                  for (s = c; s < cols; s++) {
                    Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
                  }

                  for (s = 0; s < cols; s++) {
                    Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
                  }
                }
              } else {
                // normalize value at Acc to 1,
                // divide each value on row r with the value at Acc
                f = Ac[c];

                for (s = c; s < cols; s++) {
                  Ar[s] = divideScalar(Ar[s], f);
                }

                for (s = 0; s < cols; s++) {
                  Br[s] = divideScalar(Br[s], f);
                }
              }
            }
          }

          return B;
        }
      }
    });

    var name$W = 'pinv';
    var dependencies$W = ['typed', 'matrix', 'inv', 'deepEqual', 'equal', 'dotDivide', 'dot', 'ctranspose', 'divideScalar', 'multiply', 'add', 'Complex'];
    var createPinv = /* #__PURE__ */factory(name$W, dependencies$W, _ref => {
      var {
        typed,
        matrix,
        inv,
        deepEqual,
        equal,
        dotDivide,
        dot,
        ctranspose,
        divideScalar,
        multiply,
        add,
        Complex
      } = _ref;

      /**
       * Calculate the Moore–Penrose inverse of a matrix.
       *
       * Syntax:
       *
       *     math.pinv(x)
       *
       * Examples:
       *
       *     math.pinv([[1, 2], [3, 4]])          // returns [[-2, 1], [1.5, -0.5]]
       *     math.pinv([[1, 0], [0, 1], [0, 1]])  // returns [[1, 0, 0], [0, 0.5, 0.5]]
       *     math.pinv(4)                         // returns 0.25
       *
       * See also:
       *
       *     inv
       *
       * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
       * @return {number | Complex | Array | Matrix} The inverse of `x`.
       */
      return typed(name$W, {
        'Array | Matrix': function ArrayMatrix(x) {
          var size = isMatrix(x) ? x.size() : arraySize(x);

          switch (size.length) {
            case 1:
              // vector
              if (_isZeros(x)) return ctranspose(x); // null vector

              if (size[0] === 1) {
                return inv(x); // invertible matrix
              } else {
                return dotDivide(ctranspose(x), dot(x, x));
              }

            case 2:
              // two dimensional array
              {
                if (_isZeros(x)) return ctranspose(x); // zero matrixx

                var rows = size[0];
                var cols = size[1];

                if (rows === cols) {
                  try {
                    return inv(x); // invertible matrix
                  } catch (err) {
                    if (err instanceof Error && err.message.match(/Cannot calculate inverse, determinant is zero/)) ; else {
                      throw err;
                    }
                  }
                }

                if (isMatrix(x)) {
                  return matrix(_pinv(x.valueOf(), rows, cols), x.storage());
                } else {
                  // return an Array
                  return _pinv(x, rows, cols);
                }
              }

            default:
              // multi dimensional array
              throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format$1(size) + ')');
          }
        },
        any: function any(x) {
          // scalar
          if (equal(x, 0)) return clone$1(x); // zero

          return divideScalar(1, x);
        }
      });
      /**
       * Calculate the Moore–Penrose inverse of a matrix
       * @param {Array[]} mat     A matrix
       * @param {number} rows     Number of rows
       * @param {number} cols     Number of columns
       * @return {Array[]} pinv    Pseudoinverse matrix
       * @private
       */

      function _pinv(mat, rows, cols) {
        var {
          C,
          F
        } = _rankFact(mat, rows, cols); // TODO: Use SVD instead (may improve precision)


        var Cpinv = multiply(inv(multiply(ctranspose(C), C)), ctranspose(C));
        var Fpinv = multiply(ctranspose(F), inv(multiply(F, ctranspose(F))));
        return multiply(Fpinv, Cpinv);
      }
      /**
       * Calculate the reduced row echelon form of a matrix
       *
       * Modified from https://rosettacode.org/wiki/Reduced_row_echelon_form
       *
       * @param {Array[]} mat     A matrix
       * @param {number} rows     Number of rows
       * @param {number} cols     Number of columns
       * @return {Array[]}        Reduced row echelon form
       * @private
       */


      function _rref(mat, rows, cols) {
        var M = clone$1(mat);
        var lead = 0;

        for (var r = 0; r < rows; r++) {
          if (cols <= lead) {
            return M;
          }

          var i = r;

          while (_isZero(M[i][lead])) {
            i++;

            if (rows === i) {
              i = r;
              lead++;

              if (cols === lead) {
                return M;
              }
            }
          }

          [M[i], M[r]] = [M[r], M[i]];
          var val = M[r][lead];

          for (var j = 0; j < cols; j++) {
            M[r][j] = dotDivide(M[r][j], val);
          }

          for (var _i = 0; _i < rows; _i++) {
            if (_i === r) continue;
            val = M[_i][lead];

            for (var _j = 0; _j < cols; _j++) {
              M[_i][_j] = add(M[_i][_j], multiply(-1, multiply(val, M[r][_j])));
            }
          }

          lead++;
        }

        return M;
      }
      /**
       * Calculate the rank factorization of a matrix
       *
       * @param {Array[]} mat                  A matrix (M)
       * @param {number} rows                  Number of rows
       * @param {number} cols                  Number of columns
       * @return {{C: Array, F: Array}}        rank factorization where M = C F
       * @private
       */


      function _rankFact(mat, rows, cols) {
        var rref = _rref(mat, rows, cols);

        var C = mat.map((_, i) => _.filter((_, j) => j < rows && !_isZero(dot(rref[j], rref[j]))));
        var F = rref.filter((_, i) => !_isZero(dot(rref[i], rref[i])));
        return {
          C,
          F
        };
      }

      function _isZero(x) {
        return equal(add(x, Complex(1, 1)), add(0, Complex(1, 1)));
      }

      function _isZeros(arr) {
        return deepEqual(add(arr, Complex(1, 1)), add(multiply(arr, 0), Complex(1, 1)));
      }
    });

    function createComplexEigs(_ref) {
      var {
        addScalar,
        subtract,
        flatten,
        multiply,
        multiplyScalar,
        divideScalar,
        sqrt,
        abs,
        bignumber,
        diag,
        inv,
        qr,
        usolve,
        usolveAll,
        equal,
        complex,
        larger,
        smaller,
        matrixFromColumns,
        dot
      } = _ref;

      /**
       * @param {number[][]} arr the matrix to find eigenvalues of
       * @param {number} N size of the matrix
       * @param {number|BigNumber} prec precision, anything lower will be considered zero
       * @param {'number'|'BigNumber'|'Complex'} type
       * @param {boolean} findVectors should we find eigenvectors?
       *
       * @returns {{ values: number[], vectors: number[][] }}
       */
      function complexEigs(arr, N, prec, type, findVectors) {
        if (findVectors === undefined) {
          findVectors = true;
        } // TODO check if any row/col are zero except the diagonal
        // make sure corresponding rows and columns have similar magnitude
        // important because of numerical stability
        // MODIFIES arr by side effect!


        var R = balance(arr, N, prec, type, findVectors); // R is the row transformation matrix
        // arr = A' = R A R⁻¹, A is the original matrix
        // (if findVectors is false, R is undefined)
        // (And so to return to original matrix: A = R⁻¹ arr R)
        // TODO if magnitudes of elements vary over many orders,
        // move greatest elements to the top left corner
        // using similarity transformations, reduce the matrix
        // to Hessenberg form (upper triangular plus one subdiagonal row)
        // updates the transformation matrix R with new row operationsq
        // MODIFIES arr by side effect!

        reduceToHessenberg(arr, N, prec, type, findVectors, R); // still true that original A = R⁻¹ arr R)
        // find eigenvalues

        var {
          values,
          C
        } = iterateUntilTriangular(arr, N, prec, type, findVectors); // values is the list of eigenvalues, C is the column
        // transformation matrix that transforms arr, the hessenberg
        // matrix, to upper triangular
        // (So U = C⁻¹ arr C and the relationship between current arr
        // and original A is unchanged.)

        var vectors;

        if (findVectors) {
          vectors = findEigenvectors(arr, N, C, R, values, prec, type);
          vectors = matrixFromColumns(...vectors);
        }

        return {
          values,
          vectors
        };
      }
      /**
       * @param {number[][]} arr
       * @param {number} N
       * @param {number} prec
       * @param {'number'|'BigNumber'|'Complex'} type
       * @returns {number[][]}
       */


      function balance(arr, N, prec, type, findVectors) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var realzero = big ? bignumber(0) : 0;
        var one = big ? bignumber(1) : cplx ? complex(1) : 1;
        var realone = big ? bignumber(1) : 1; // base of the floating-point arithmetic

        var radix = big ? bignumber(10) : 2;
        var radixSq = multiplyScalar(radix, radix); // the diagonal transformation matrix R

        var Rdiag;

        if (findVectors) {
          Rdiag = Array(N).fill(one);
        } // this isn't the only time we loop thru the matrix...


        var last = false;

        while (!last) {
          // ...haha I'm joking! unless...
          last = true;

          for (var i = 0; i < N; i++) {
            // compute the taxicab norm of i-th column and row
            // TODO optimize for complex numbers
            var colNorm = realzero;
            var rowNorm = realzero;

            for (var j = 0; j < N; j++) {
              if (i === j) continue;
              var c = abs(arr[i][j]); // should be real

              colNorm = addScalar(colNorm, c);
              rowNorm = addScalar(rowNorm, c);
            }

            if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {
              // find integer power closest to balancing the matrix
              // (we want to scale only by integer powers of radix,
              // so that we don't lose any precision due to round-off)
              var f = realone;
              var _c = colNorm;
              var rowDivRadix = divideScalar(rowNorm, radix);
              var rowMulRadix = multiplyScalar(rowNorm, radix);

              while (smaller(_c, rowDivRadix)) {
                _c = multiplyScalar(_c, radixSq);
                f = multiplyScalar(f, radix);
              }

              while (larger(_c, rowMulRadix)) {
                _c = divideScalar(_c, radixSq);
                f = divideScalar(f, radix);
              } // check whether balancing is needed
              // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)


              var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95)); // apply balancing similarity transformation

              if (condition) {
                // we should loop once again to check whether
                // another rebalancing is needed
                last = false;
                var g = divideScalar(1, f);

                for (var _j = 0; _j < N; _j++) {
                  if (i === _j) {
                    continue;
                  }

                  arr[i][_j] = multiplyScalar(arr[i][_j], f);
                  arr[_j][i] = multiplyScalar(arr[_j][i], g);
                } // keep track of transformations


                if (findVectors) {
                  Rdiag[i] = multiplyScalar(Rdiag[i], f);
                }
              }
            }
          }
        } // return the diagonal row transformation matrix


        return diag(Rdiag);
      }
      /**
       * @param {number[][]} arr
       * @param {number} N
       * @param {number} prec
       * @param {'number'|'BigNumber'|'Complex'} type
       * @param {boolean} findVectors
       * @param {number[][]} R the row transformation matrix that will be modified
       */


      function reduceToHessenberg(arr, N, prec, type, findVectors, R) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var zero = big ? bignumber(0) : cplx ? complex(0) : 0;

        if (big) {
          prec = bignumber(prec);
        }

        for (var i = 0; i < N - 2; i++) {
          // Find the largest subdiag element in the i-th col
          var maxIndex = 0;
          var max = zero;

          for (var j = i + 1; j < N; j++) {
            var el = arr[j][i];

            if (smaller(abs(max), abs(el))) {
              max = el;
              maxIndex = j;
            }
          } // This col is pivoted, no need to do anything


          if (smaller(abs(max), prec)) {
            continue;
          }

          if (maxIndex !== i + 1) {
            // Interchange maxIndex-th and (i+1)-th row
            var tmp1 = arr[maxIndex];
            arr[maxIndex] = arr[i + 1];
            arr[i + 1] = tmp1; // Interchange maxIndex-th and (i+1)-th column

            for (var _j2 = 0; _j2 < N; _j2++) {
              var tmp2 = arr[_j2][maxIndex];
              arr[_j2][maxIndex] = arr[_j2][i + 1];
              arr[_j2][i + 1] = tmp2;
            } // keep track of transformations


            if (findVectors) {
              var tmp3 = R[maxIndex];
              R[maxIndex] = R[i + 1];
              R[i + 1] = tmp3;
            }
          } // Reduce following rows and columns


          for (var _j3 = i + 2; _j3 < N; _j3++) {
            var n = divideScalar(arr[_j3][i], max);

            if (n === 0) {
              continue;
            } // from j-th row subtract n-times (i+1)th row


            for (var k = 0; k < N; k++) {
              arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));
            } // to (i+1)th column add n-times j-th column


            for (var _k = 0; _k < N; _k++) {
              arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));
            } // keep track of transformations


            if (findVectors) {
              for (var _k2 = 0; _k2 < N; _k2++) {
                R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));
              }
            }
          }
        }

        return R;
      }
      /**
       * @returns {{values: values, C: Matrix}}
       * @see Press, Wiliams: Numerical recipes in Fortran 77
       * @see https://en.wikipedia.org/wiki/QR_algorithm
       */


      function iterateUntilTriangular(A, N, prec, type, findVectors) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var one = big ? bignumber(1) : cplx ? complex(1) : 1;

        if (big) {
          prec = bignumber(prec);
        } // The Francis Algorithm
        // The core idea of this algorithm is that doing successive
        // A' = Q⁺AQ transformations will eventually converge to block-
        // upper-triangular with diagonal blocks either 1x1 or 2x2.
        // The Q here is the one from the QR decomposition, A = QR.
        // Since the eigenvalues of a block-upper-triangular matrix are
        // the eigenvalues of its diagonal blocks and we know how to find
        // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.


        var arr = clone$1(A); // the list of converged eigenvalues

        var lambdas = []; // size of arr, which will get smaller as eigenvalues converge

        var n = N; // the diagonal of the block-diagonal matrix that turns
        // converged 2x2 matrices into upper triangular matrices

        var Sdiag = []; // N×N matrix describing the overall transformation done during the QR algorithm

        var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined; // n×n matrix describing the QR transformations done since last convergence

        var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined; // last eigenvalue converged before this many steps

        var lastConvergenceBefore = 0;

        while (lastConvergenceBefore <= 100) {
          lastConvergenceBefore += 1; // TODO if the convergence is slow, do something clever
          // Perform the factorization

          var k = 0; // TODO set close to an eigenvalue

          for (var i = 0; i < n; i++) {
            arr[i][i] = subtract(arr[i][i], k);
          } // TODO do an implicit QR transformation


          var {
            Q,
            R
          } = qr(arr);
          arr = multiply(R, Q);

          for (var _i = 0; _i < n; _i++) {
            arr[_i][_i] = addScalar(arr[_i][_i], k);
          } // keep track of transformations


          if (findVectors) {
            Qpartial = multiply(Qpartial, Q);
          } // The rightmost diagonal element converged to an eigenvalue


          if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {
            lastConvergenceBefore = 0;
            lambdas.push(arr[n - 1][n - 1]); // keep track of transformations

            if (findVectors) {
              Sdiag.unshift([[1]]);
              inflateMatrix(Qpartial, N);
              Qtotal = multiply(Qtotal, Qpartial);

              if (n > 1) {
                Qpartial = diag(Array(n - 1).fill(one));
              }
            } // reduce the matrix size


            n -= 1;
            arr.pop();

            for (var _i2 = 0; _i2 < n; _i2++) {
              arr[_i2].pop();
            } // The rightmost diagonal 2x2 block converged

          } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {
            lastConvergenceBefore = 0;
            var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);
            lambdas.push(...ll); // keep track of transformations

            if (findVectors) {
              Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));
              inflateMatrix(Qpartial, N);
              Qtotal = multiply(Qtotal, Qpartial);

              if (n > 2) {
                Qpartial = diag(Array(n - 2).fill(one));
              }
            } // reduce the matrix size


            n -= 2;
            arr.pop();
            arr.pop();

            for (var _i3 = 0; _i3 < n; _i3++) {
              arr[_i3].pop();

              arr[_i3].pop();
            }
          }

          if (n === 0) {
            break;
          }
        } // standard sorting


        lambdas.sort((a, b) => +subtract(abs(a), abs(b))); // the algorithm didn't converge

        if (lastConvergenceBefore > 100) {
          var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));
          err.values = lambdas;
          err.vectors = [];
          throw err;
        } // combine the overall QR transformation Qtotal with the subsequent
        // transformation S that turns the diagonal 2x2 blocks to upper triangular


        var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;
        return {
          values: lambdas,
          C
        };
      }
      /**
       * @param {Matrix} A hessenberg-form matrix
       * @param {number} N size of A
       * @param {Matrix} C column transformation matrix that turns A into upper triangular
       * @param {Matrix} R similarity that turns original matrix into A
       * @param {number[]} values array of eigenvalues of A
       * @param {'number'|'BigNumber'|'Complex'} type
       * @returns {number[][]} eigenvalues
       */


      function findEigenvectors(A, N, C, R, values, prec, type) {
        var Cinv = inv(C);
        var U = multiply(Cinv, A, C);
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
        var one = big ? bignumber(1) : cplx ? complex(1) : 1; // turn values into a kind of "multiset"
        // this way it is easier to find eigenvectors

        var uniqueValues = [];
        var multiplicities = [];

        for (var λ of values) {
          var i = indexOf(uniqueValues, λ, equal);

          if (i === -1) {
            uniqueValues.push(λ);
            multiplicities.push(1);
          } else {
            multiplicities[i] += 1;
          }
        } // find eigenvectors by solving U − λE = 0
        // TODO replace with an iterative eigenvector algorithm
        // (this one might fail for imprecise eigenvalues)


        var vectors = [];
        var len = uniqueValues.length;
        var b = Array(N).fill(zero);
        var E = diag(Array(N).fill(one)); // eigenvalues for which usolve failed (due to numerical error)

        var failedLambdas = [];

        var _loop = function _loop(_i4) {
          var λ = uniqueValues[_i4];
          var S = subtract(U, multiply(λ, E)); // the characteristic matrix

          var solutions = usolveAll(S, b);
          solutions.shift(); // ignore the null vector
          // looks like we missed something, try inverse iteration

          while (solutions.length < multiplicities[_i4]) {
            var approxVec = inverseIterate(S, N, solutions, prec, type);

            if (approxVec == null) {
              // no more vectors were found
              failedLambdas.push(λ);
              break;
            }

            solutions.push(approxVec);
          } // Transform back into original array coordinates


          var correction = multiply(inv(R), C);
          solutions = solutions.map(v => multiply(correction, v));
          vectors.push(...solutions.map(v => flatten(v)));
        };

        for (var _i4 = 0; _i4 < len; _i4++) {
          _loop(_i4);
        }

        if (failedLambdas.length !== 0) {
          var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));
          err.values = values;
          err.vectors = vectors;
          throw err;
        }

        return vectors;
      }
      /**
       * Compute the eigenvalues of an 2x2 matrix
       * @return {[number,number]}
       */


      function eigenvalues2x2(a, b, c, d) {
        // λ± = ½ trA ± ½ √( tr²A - 4 detA )
        var trA = addScalar(a, d);
        var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));
        var x = multiplyScalar(trA, 0.5);
        var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);
        return [addScalar(x, y), subtract(x, y)];
      }
      /**
       * For an 2x2 matrix compute the transformation matrix S,
       * so that SAS⁻¹ is an upper triangular matrix
       * @return {[[number,number],[number,number]]}
       * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf
       * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html
       */


      function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
        var one = big ? bignumber(1) : cplx ? complex(1) : 1; // matrix is already upper triangular
        // return an identity matrix

        if (smaller(abs(c), prec)) {
          return [[one, zero], [zero, one]];
        } // matrix is diagonalizable
        // return its eigenvectors as columns


        if (larger(abs(subtract(l1, l2)), prec)) {
          return [[subtract(l1, d), subtract(l2, d)], [c, c]];
        } // matrix is not diagonalizable
        // compute off-diagonal elements of N = A - λI
        // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )
        // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )


        var na = subtract(a, l1);
        var nb = subtract(b, l1);
        var nc = subtract(c, l1);
        var nd = subtract(d, l1);

        if (smaller(abs(nb), prec)) {
          return [[na, one], [nc, zero]];
        } else {
          return [[nb, zero], [nd, one]];
        }
      }
      /**
       * Enlarge the matrix from n×n to N×N, setting the new
       * elements to 1 on diagonal and 0 elsewhere
       */


      function inflateMatrix(arr, N) {
        // add columns
        for (var i = 0; i < arr.length; i++) {
          arr[i].push(...Array(N - arr[i].length).fill(0));
        } // add rows


        for (var _i5 = arr.length; _i5 < N; _i5++) {
          arr.push(Array(N).fill(0));
          arr[_i5][_i5] = 1;
        }

        return arr;
      }
      /**
       * Create a block-diagonal matrix with the given square matrices on the diagonal
       * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal
       * @param {number} N the size of the resulting matrix
       */


      function blockDiag(arr, N) {
        var M = [];

        for (var i = 0; i < N; i++) {
          M[i] = Array(N).fill(0);
        }

        var I = 0;

        for (var sub of arr) {
          var n = sub.length;

          for (var _i6 = 0; _i6 < n; _i6++) {
            for (var j = 0; j < n; j++) {
              M[I + _i6][I + j] = sub[_i6][j];
            }
          }

          I += n;
        }

        return M;
      }
      /**
       * Finds the index of an element in an array using a custom equality function
       * @template T
       * @param {Array<T>} arr array in which to search
       * @param {T} el the element to find
       * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`
       * @returns {number} the index of `el`, or -1 when it's not in `arr`
       */


      function indexOf(arr, el, fn) {
        for (var i = 0; i < arr.length; i++) {
          if (fn(arr[i], el)) {
            return i;
          }
        }

        return -1;
      }
      /**
       * Provided a near-singular upper-triangular matrix A and a list of vectors,
       * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal
       * to each vector in the list
       * @template T
       * @param {T[][]} A near-singular square matrix
       * @param {number} N dimension
       * @param {T[][]} orthog list of vectors
       * @param {number} prec epsilon
       * @param {'number'|'BigNumber'|'Complex'} type
       * @return {T[] | null} eigenvector
       *
       * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration
       */


      function inverseIterate(A, N, orthog, prec, type) {
        var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;
        var b; // the vector
        // you better choose a random vector before I count to five

        var i = 0;

        while (true) {
          b = randomOrthogonalVector(N, orthog, type);
          b = usolve(A, b);

          if (larger(norm(b), largeNum)) {
            break;
          }

          if (++i >= 5) {
            return null;
          }
        } // you better converge before I count to ten


        i = 0;

        while (true) {
          var c = usolve(A, b);

          if (smaller(norm(orthogonalComplement(b, [c])), prec)) {
            break;
          }

          if (++i >= 10) {
            return null;
          }

          b = normalize(c);
        }

        return b;
      }
      /**
       * Generates a random unit vector of dimension N, orthogonal to each vector in the list
       * @template T
       * @param {number} N dimension
       * @param {T[][]} orthog list of vectors
       * @param {'number'|'BigNumber'|'Complex'} type
       * @returns {T[]} random vector
       */


      function randomOrthogonalVector(N, orthog, type) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex'; // generate random vector with the correct type

        var v = Array(N).fill(0).map(_ => 2 * Math.random() - 1);

        if (big) {
          v = v.map(n => bignumber(n));
        }

        if (cplx) {
          v = v.map(n => complex(n));
        } // project to orthogonal complement


        v = orthogonalComplement(v, orthog); // normalize

        return normalize(v, type);
      }
      /**
       * Project vector v to the orthogonal complement of an array of vectors
       */


      function orthogonalComplement(v, orthog) {
        for (var w of orthog) {
          // v := v − (w, v)/∥w∥² w
          v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));
        }

        return v;
      }
      /**
       * Calculate the norm of a vector.
       * We can't use math.norm because factory can't handle circular dependency.
       * Seriously, I'm really fed up with factory.
       */


      function norm(v) {
        return abs(sqrt(dot(v, v)));
      }
      /**
       * Normalize a vector
       * @template T
       * @param {T[]} v
       * @param {'number'|'BigNumber'|'Complex'} type
       * @returns {T[]} normalized vec
       */


      function normalize(v, type) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var one = big ? bignumber(1) : cplx ? complex(1) : 1;
        return multiply(divideScalar(one, norm(v)), v);
      }

      return complexEigs;
    }

    function createRealSymmetric(_ref) {
      var {
        config,
        addScalar,
        subtract,
        abs,
        atan,
        cos,
        sin,
        multiplyScalar,
        inv,
        bignumber,
        multiply,
        add
      } = _ref;

      /**
       * @param {number[] | BigNumber[]} arr
       * @param {number} N
       * @param {number} prec
       * @param {'number' | 'BigNumber'} type
       */
      function main(arr, N) {
        var prec = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : config.epsilon;
        var type = arguments.length > 3 ? arguments[3] : undefined;

        if (type === 'number') {
          return diag(arr, prec);
        }

        if (type === 'BigNumber') {
          return diagBig(arr, prec);
        }

        throw TypeError('Unsupported data type: ' + type);
      } // diagonalization implementation for number (efficient)


      function diag(x, precision) {
        var N = x.length;
        var e0 = Math.abs(precision / N);
        var psi;
        var Sij = new Array(N); // Sij is Identity Matrix

        for (var i = 0; i < N; i++) {
          Sij[i] = createArray(N, 0);
          Sij[i][i] = 1.0;
        } // initial error


        var Vab = getAij(x);

        while (Math.abs(Vab[1]) >= Math.abs(e0)) {
          var _i = Vab[0][0];
          var j = Vab[0][1];
          psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);
          x = x1(x, psi, _i, j);
          Sij = Sij1(Sij, psi, _i, j);
          Vab = getAij(x);
        }

        var Ei = createArray(N, 0); // eigenvalues

        for (var _i2 = 0; _i2 < N; _i2++) {
          Ei[_i2] = x[_i2][_i2];
        }

        return sorting(clone$1(Ei), clone$1(Sij));
      } // diagonalization implementation for bigNumber


      function diagBig(x, precision) {
        var N = x.length;
        var e0 = abs(precision / N);
        var psi;
        var Sij = new Array(N); // Sij is Identity Matrix

        for (var i = 0; i < N; i++) {
          Sij[i] = createArray(N, 0);
          Sij[i][i] = 1.0;
        } // initial error


        var Vab = getAijBig(x);

        while (abs(Vab[1]) >= abs(e0)) {
          var _i3 = Vab[0][0];
          var j = Vab[0][1];
          psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);
          x = x1Big(x, psi, _i3, j);
          Sij = Sij1Big(Sij, psi, _i3, j);
          Vab = getAijBig(x);
        }

        var Ei = createArray(N, 0); // eigenvalues

        for (var _i4 = 0; _i4 < N; _i4++) {
          Ei[_i4] = x[_i4][_i4];
        } // return [clone(Ei), clone(Sij)]


        return sorting(clone$1(Ei), clone$1(Sij));
      } // get angle


      function getTheta(aii, ajj, aij) {
        var denom = ajj - aii;

        if (Math.abs(denom) <= config.epsilon) {
          return Math.PI / 4.0;
        } else {
          return 0.5 * Math.atan(2.0 * aij / (ajj - aii));
        }
      } // get angle


      function getThetaBig(aii, ajj, aij) {
        var denom = subtract(ajj, aii);

        if (abs(denom) <= config.epsilon) {
          return bignumber(-1).acos().div(4);
        } else {
          return multiplyScalar(0.5, atan(multiply(2.0, aij, inv(denom))));
        }
      } // update eigvec


      function Sij1(Sij, theta, i, j) {
        var N = Sij.length;
        var c = Math.cos(theta);
        var s = Math.sin(theta);
        var Ski = createArray(N, 0);
        var Skj = createArray(N, 0);

        for (var k = 0; k < N; k++) {
          Ski[k] = c * Sij[k][i] - s * Sij[k][j];
          Skj[k] = s * Sij[k][i] + c * Sij[k][j];
        }

        for (var _k = 0; _k < N; _k++) {
          Sij[_k][i] = Ski[_k];
          Sij[_k][j] = Skj[_k];
        }

        return Sij;
      } // update eigvec for overlap


      function Sij1Big(Sij, theta, i, j) {
        var N = Sij.length;
        var c = cos(theta);
        var s = sin(theta);
        var Ski = createArray(N, bignumber(0));
        var Skj = createArray(N, bignumber(0));

        for (var k = 0; k < N; k++) {
          Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));
          Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));
        }

        for (var _k2 = 0; _k2 < N; _k2++) {
          Sij[_k2][i] = Ski[_k2];
          Sij[_k2][j] = Skj[_k2];
        }

        return Sij;
      } // update matrix


      function x1Big(Hij, theta, i, j) {
        var N = Hij.length;
        var c = bignumber(cos(theta));
        var s = bignumber(sin(theta));
        var c2 = multiplyScalar(c, c);
        var s2 = multiplyScalar(s, s);
        var Aki = createArray(N, bignumber(0));
        var Akj = createArray(N, bignumber(0)); // 2cs Hij

        var csHij = multiply(bignumber(2), c, s, Hij[i][j]); //  Aii

        var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));
        var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i

        for (var k = 0; k < N; k++) {
          Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));
          Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));
        } // Modify Hij


        Hij[i][i] = Aii;
        Hij[j][j] = Ajj;
        Hij[i][j] = bignumber(0);
        Hij[j][i] = bignumber(0); // 0  to i

        for (var _k3 = 0; _k3 < N; _k3++) {
          if (_k3 !== i && _k3 !== j) {
            Hij[i][_k3] = Aki[_k3];
            Hij[_k3][i] = Aki[_k3];
            Hij[j][_k3] = Akj[_k3];
            Hij[_k3][j] = Akj[_k3];
          }
        }

        return Hij;
      } // update matrix


      function x1(Hij, theta, i, j) {
        var N = Hij.length;
        var c = Math.cos(theta);
        var s = Math.sin(theta);
        var c2 = c * c;
        var s2 = s * s;
        var Aki = createArray(N, 0);
        var Akj = createArray(N, 0); //  Aii

        var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];
        var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i

        for (var k = 0; k < N; k++) {
          Aki[k] = c * Hij[i][k] - s * Hij[j][k];
          Akj[k] = s * Hij[i][k] + c * Hij[j][k];
        } // Modify Hij


        Hij[i][i] = Aii;
        Hij[j][j] = Ajj;
        Hij[i][j] = 0;
        Hij[j][i] = 0; // 0  to i

        for (var _k4 = 0; _k4 < N; _k4++) {
          if (_k4 !== i && _k4 !== j) {
            Hij[i][_k4] = Aki[_k4];
            Hij[_k4][i] = Aki[_k4];
            Hij[j][_k4] = Akj[_k4];
            Hij[_k4][j] = Akj[_k4];
          }
        }

        return Hij;
      } // get max off-diagonal value from Upper Diagonal


      function getAij(Mij) {
        var N = Mij.length;
        var maxMij = 0;
        var maxIJ = [0, 1];

        for (var i = 0; i < N; i++) {
          for (var j = i + 1; j < N; j++) {
            if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {
              maxMij = Math.abs(Mij[i][j]);
              maxIJ = [i, j];
            }
          }
        }

        return [maxIJ, maxMij];
      } // get max off-diagonal value from Upper Diagonal


      function getAijBig(Mij) {
        var N = Mij.length;
        var maxMij = 0;
        var maxIJ = [0, 1];

        for (var i = 0; i < N; i++) {
          for (var j = i + 1; j < N; j++) {
            if (abs(maxMij) < abs(Mij[i][j])) {
              maxMij = abs(Mij[i][j]);
              maxIJ = [i, j];
            }
          }
        }

        return [maxIJ, maxMij];
      } // sort results


      function sorting(E, S) {
        var N = E.length;
        var values = Array(N);
        var vectors = Array(N);

        for (var k = 0; k < N; k++) {
          vectors[k] = Array(N);
        }

        for (var i = 0; i < N; i++) {
          var minID = 0;
          var minE = E[0];

          for (var j = 0; j < E.length; j++) {
            if (abs(E[j]) < abs(minE)) {
              minID = j;
              minE = E[minID];
            }
          }

          values[i] = E.splice(minID, 1)[0];

          for (var _k5 = 0; _k5 < N; _k5++) {
            vectors[_k5][i] = S[_k5][minID];

            S[_k5].splice(minID, 1);
          }
        }

        return {
          values,
          vectors
        };
      }
      /**
       * Create an array of a certain size and fill all items with an initial value
       * @param {number} size
       * @param {number} value
       * @return {number[]}
       */


      function createArray(size, value) {
        // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)
        var array = new Array(size);

        for (var i = 0; i < size; i++) {
          array[i] = value;
        }

        return array;
      }

      return main;
    }

    var name$V = 'eigs'; // The absolute state of math.js's dependency system:

    var dependencies$V = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'divideScalar', 'inv', 'bignumber', 'multiply', 'add', 'larger', 'column', 'flatten', 'number', 'complex', 'sqrt', 'diag', 'qr', 'usolve', 'usolveAll', 'im', 're', 'smaller', 'matrixFromColumns', 'dot'];
    var createEigs = /* #__PURE__ */factory(name$V, dependencies$V, _ref => {
      var {
        config,
        typed,
        matrix,
        addScalar,
        subtract,
        equal,
        abs,
        atan,
        cos,
        sin,
        multiplyScalar,
        divideScalar,
        inv,
        bignumber,
        multiply,
        add,
        larger,
        column,
        flatten,
        number,
        complex,
        sqrt,
        diag,
        qr,
        usolve,
        usolveAll,
        im,
        re,
        smaller,
        matrixFromColumns,
        dot
      } = _ref;
      var doRealSymetric = createRealSymmetric({
        config,
        addScalar,
        subtract,
        column,
        flatten,
        equal,
        abs,
        atan,
        cos,
        sin,
        multiplyScalar,
        inv,
        bignumber,
        complex,
        multiply,
        add
      });
      var doComplexEigs = createComplexEigs({
        config,
        addScalar,
        subtract,
        multiply,
        multiplyScalar,
        flatten,
        divideScalar,
        sqrt,
        abs,
        bignumber,
        diag,
        qr,
        inv,
        usolve,
        usolveAll,
        equal,
        complex,
        larger,
        smaller,
        matrixFromColumns,
        dot
      });
      /**
       * Compute eigenvalues and eigenvectors of a matrix. The eigenvalues are sorted by their absolute value, ascending.
       * An eigenvalue with multiplicity k will be listed k times. The eigenvectors are returned as columns of a matrix –
       * the eigenvector that belongs to the j-th eigenvalue in the list (eg. `values[j]`) is the j-th column (eg. `column(vectors, j)`).
       * If the algorithm fails to converge, it will throw an error – in that case, however, you may still find useful information
       * in `err.values` and `err.vectors`.
       *
       * Syntax:
       *
       *     math.eigs(x, [prec])
       *
       * Examples:
       *
       *     const { eigs, multiply, column, transpose } = math
       *     const H = [[5, 2.3], [2.3, 1]]
       *     const ans = eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}
       *     const E = ans.values
       *     const U = ans.vectors
       *     multiply(H, column(U, 0)) // returns multiply(E[0], column(U, 0))
       *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H
       *     E[0] == UTxHxU[0][0]  // returns true
       *
       * See also:
       *
       *     inv
       *
       * @param {Array | Matrix} x  Matrix to be diagonalized
       *
       * @param {number | BigNumber} [prec] Precision, default value: 1e-15
       * @return {{values: Array|Matrix, vectors: Array|Matrix}} Object containing an array of eigenvalues and a matrix with eigenvectors as columns.
       *
       */

      return typed('eigs', {
        Array: function Array(x) {
          var mat = matrix(x);
          return computeValuesAndVectors(mat);
        },
        'Array, number|BigNumber': function ArrayNumberBigNumber(x, prec) {
          var mat = matrix(x);
          return computeValuesAndVectors(mat, prec);
        },
        Matrix: function Matrix(mat) {
          var {
            values,
            vectors
          } = computeValuesAndVectors(mat);
          return {
            values: matrix(values),
            vectors: matrix(vectors)
          };
        },
        'Matrix, number|BigNumber': function MatrixNumberBigNumber(mat, prec) {
          var {
            values,
            vectors
          } = computeValuesAndVectors(mat, prec);
          return {
            values: matrix(values),
            vectors: matrix(vectors)
          };
        }
      });

      function computeValuesAndVectors(mat, prec) {
        if (prec === undefined) {
          prec = config.epsilon;
        }

        var size = mat.size();

        if (size.length !== 2 || size[0] !== size[1]) {
          throw new RangeError('Matrix must be square (size: ' + format$1(size) + ')');
        }

        var arr = mat.toArray();
        var N = size[0];

        if (isReal(arr, N, prec)) {
          coerceReal(arr, N);

          if (isSymmetric(arr, N, prec)) {
            var _type = coerceTypes(mat, arr, N);

            return doRealSymetric(arr, N, prec, _type);
          }
        }

        var type = coerceTypes(mat, arr, N);
        return doComplexEigs(arr, N, prec, type);
      }
      /** @return {boolean} */


      function isSymmetric(arr, N, prec) {
        for (var i = 0; i < N; i++) {
          for (var j = i; j < N; j++) {
            // TODO proper comparison of bignum and frac
            if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {
              return false;
            }
          }
        }

        return true;
      }
      /** @return {boolean} */


      function isReal(arr, N, prec) {
        for (var i = 0; i < N; i++) {
          for (var j = 0; j < N; j++) {
            // TODO proper comparison of bignum and frac
            if (larger(bignumber(abs(im(arr[i][j]))), prec)) {
              return false;
            }
          }
        }

        return true;
      }

      function coerceReal(arr, N) {
        for (var i = 0; i < N; i++) {
          for (var j = 0; j < N; j++) {
            arr[i][j] = re(arr[i][j]);
          }
        }
      }
      /** @return {'number' | 'BigNumber' | 'Complex'} */


      function coerceTypes(mat, arr, N) {
        /** @type {string} */
        var type = mat.datatype();

        if (type === 'number' || type === 'BigNumber' || type === 'Complex') {
          return type;
        }

        var hasNumber = false;
        var hasBig = false;
        var hasComplex = false;

        for (var i = 0; i < N; i++) {
          for (var j = 0; j < N; j++) {
            var el = arr[i][j];

            if (isNumber(el) || isFraction(el)) {
              hasNumber = true;
            } else if (isBigNumber(el)) {
              hasBig = true;
            } else if (isComplex(el)) {
              hasComplex = true;
            } else {
              throw TypeError('Unsupported type in Matrix: ' + typeOf$1(el));
            }
          }
        }

        if (hasBig && hasComplex) {
          console.warn('Complex BigNumbers not supported, this operation will lose precission.');
        }

        if (hasComplex) {
          for (var _i = 0; _i < N; _i++) {
            for (var _j = 0; _j < N; _j++) {
              arr[_i][_j] = complex(arr[_i][_j]);
            }
          }

          return 'Complex';
        }

        if (hasBig) {
          for (var _i2 = 0; _i2 < N; _i2++) {
            for (var _j2 = 0; _j2 < N; _j2++) {
              arr[_i2][_j2] = bignumber(arr[_i2][_j2]);
            }
          }

          return 'BigNumber';
        }

        if (hasNumber) {
          for (var _i3 = 0; _i3 < N; _i3++) {
            for (var _j3 = 0; _j3 < N; _j3++) {
              arr[_i3][_j3] = number(arr[_i3][_j3]);
            }
          }

          return 'number';
        } else {
          throw TypeError('Matrix contains unsupported types only.');
        }
      }
    });

    var name$U = 'expm';
    var dependencies$U = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];
    var createExpm = /* #__PURE__ */factory(name$U, dependencies$U, _ref => {
      var {
        typed,
        abs,
        add,
        identity,
        inv,
        multiply
      } = _ref;

      /**
       * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.
       * Not to be confused with exp(a), which performs element-wise
       * exponentiation.
       *
       * The exponential is calculated using the Padé approximant with scaling and
       * squaring; see "Nineteen Dubious Ways to Compute the Exponential of a
       * Matrix," by Moler and Van Loan.
       *
       * Syntax:
       *
       *     math.expm(x)
       *
       * Examples:
       *
       *     const A = [[0,2],[0,0]]
       *     math.expm(A)        // returns [[1,2],[0,1]]
       *
       * See also:
       *
       *     exp
       *
       * @param {Matrix} x  A square Matrix
       * @return {Matrix}   The exponential of x
       */
      return typed(name$U, {
        Matrix: function Matrix(A) {
          // Check matrix size
          var size = A.size();

          if (size.length !== 2 || size[0] !== size[1]) {
            throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
          }

          var n = size[0]; // Desired accuracy of the approximant (The actual accuracy
          // will be affected by round-off error)

          var eps = 1e-15; // The Padé approximant is not so accurate when the values of A
          // are "large", so scale A by powers of two. Then compute the
          // exponential, and square the result repeatedly according to
          // the identity e^A = (e^(A/m))^m
          // Compute infinity-norm of A, ||A||, to see how "big" it is

          var infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the
          // Padé approximant to reach the desired accuracy

          var params = findParams(infNorm, eps);
          var q = params.q;
          var j = params.j; // The Pade approximation to e^A is:
          // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)
          // where
          // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i
          // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i
          // Scale A by 1 / 2^j

          var Apos = multiply(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix

          var N = identity(n);
          var D = identity(n); // Initialization (i=0)

          var factor = 1; // Initialization (i=1)

          var AposToI = Apos; // Cloning not necessary

          var alternate = -1;

          for (var i = 1; i <= q; i++) {
            if (i > 1) {
              AposToI = multiply(AposToI, Apos);
              alternate = -alternate;
            }

            factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);
            N = add(N, multiply(factor, AposToI));
            D = add(D, multiply(factor * alternate, AposToI));
          }

          var R = multiply(inv(D), N); // Square j times

          for (var _i = 0; _i < j; _i++) {
            R = multiply(R, R);
          }

          return isSparseMatrix(A) ? A.createSparseMatrix(R) : R;
        }
      });

      function infinityNorm(A) {
        var n = A.size()[0];
        var infNorm = 0;

        for (var i = 0; i < n; i++) {
          var rowSum = 0;

          for (var j = 0; j < n; j++) {
            rowSum += abs(A.get([i, j]));
          }

          infNorm = Math.max(rowSum, infNorm);
        }

        return infNorm;
      }
      /**
       * Find the best parameters for the Pade approximant given
       * the matrix norm and desired accuracy. Returns the first acceptable
       * combination in order of increasing computational load.
       */


      function findParams(infNorm, eps) {
        var maxSearchSize = 30;

        for (var k = 0; k < maxSearchSize; k++) {
          for (var q = 0; q <= k; q++) {
            var j = k - q;

            if (errorEstimate(infNorm, q, j) < eps) {
              return {
                q,
                j
              };
            }
          }
        }

        throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');
      }
      /**
       * Returns the estimated error of the Pade approximant for the given
       * parameters.
       */


      function errorEstimate(infNorm, q, j) {
        var qfac = 1;

        for (var i = 2; i <= q; i++) {
          qfac *= i;
        }

        var twoqfac = qfac;

        for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {
          twoqfac *= _i2;
        }

        var twoqp1fac = twoqfac * (2 * q + 1);
        return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);
      }
    });

    var name$T = 'sqrtm';
    var dependencies$T = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];
    var createSqrtm = /* #__PURE__ */factory(name$T, dependencies$T, _ref => {
      var {
        typed,
        abs,
        add,
        multiply,
        sqrt,
        subtract,
        inv,
        size,
        max,
        identity
      } = _ref;
      var _maxIterations = 1e3;
      var _tolerance = 1e-6;
      /**
       * Calculate the principal square root matrix using the Denman–Beavers iterative method
       *
       * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration
       *
       * @param  {Array | Matrix} A   The square matrix `A`
       * @return {Array | Matrix}     The principal square root of matrix `A`
       * @private
       */

      function _denmanBeavers(A) {
        var error;
        var iterations = 0;
        var Y = A;
        var Z = identity(size(A));

        do {
          var Yk = Y;
          Y = multiply(0.5, add(Yk, inv(Z)));
          Z = multiply(0.5, add(Z, inv(Yk)));
          error = max(abs(subtract(Y, Yk)));

          if (error > _tolerance && ++iterations > _maxIterations) {
            throw new Error('computing square root of matrix: iterative method could not converge');
          }
        } while (error > _tolerance);

        return Y;
      }
      /**
       * Calculate the principal square root of a square matrix.
       * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.
       *
       * https://en.wikipedia.org/wiki/Square_root_of_a_matrix
       *
       * Syntax:
       *
       *     X = math.sqrtm(A)
       *
       * Examples:
       *
       *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]
       *
       * See also:
       *
       *     sqrt, pow
       *
       * @param  {Array | Matrix} A   The square matrix `A`
       * @return {Array | Matrix}     The principal square root of matrix `A`
       */


      return typed(name$T, {
        'Array | Matrix': function ArrayMatrix(A) {
          var size = isMatrix(A) ? A.size() : arraySize(A);

          switch (size.length) {
            case 1:
              // Single element Array | Matrix
              if (size[0] === 1) {
                return sqrt(A);
              } else {
                throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
              }

            case 2:
              {
                // Two-dimensional Array | Matrix
                var rows = size[0];
                var cols = size[1];

                if (rows === cols) {
                  return _denmanBeavers(A);
                } else {
                  throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
                }
              }

            default:
              // Multi dimensional array
              throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + format$1(size) + ')');
          }
        }
      });
    });

    var name$S = 'divide';
    var dependencies$S = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];
    var createDivide = /* #__PURE__ */factory(name$S, dependencies$S, _ref => {
      var {
        typed,
        matrix,
        multiply,
        equalScalar,
        divideScalar,
        inv
      } = _ref;
      var algorithm11 = createAlgorithm11({
        typed,
        equalScalar
      });
      var algorithm14 = createAlgorithm14({
        typed
      });
      /**
       * Divide two values, `x / y`.
       * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
       *
       * Syntax:
       *
       *    math.divide(x, y)
       *
       * Examples:
       *
       *    math.divide(2, 3)            // returns number 0.6666666666666666
       *
       *    const a = math.complex(5, 14)
       *    const b = math.complex(4, 1)
       *    math.divide(a, b)            // returns Complex 2 + 3i
       *
       *    const c = [[7, -6], [13, -4]]
       *    const d = [[1, 2], [4, 3]]
       *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]
       *
       *    const e = math.unit('18 km')
       *    math.divide(e, 4.5)          // returns Unit 4 km
       *
       * See also:
       *
       *    multiply
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
       */

      return typed('divide', extend({
        // we extend the signatures of divideScalar with signatures dealing with matrices
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {
          // TODO: implement matrix right division using pseudo inverse
          // https://www.mathworks.nl/help/matlab/ref/mrdivide.html
          // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
          // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
          return multiply(x, inv(y));
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, divideScalar, false);
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, divideScalar, false);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, divideScalar, false).valueOf();
        },
        'any, Array | Matrix': function anyArrayMatrix(x, y) {
          return multiply(x, inv(y));
        }
      }, divideScalar.signatures));
    });

    var name$R = 'distance';
    var dependencies$R = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];
    var createDistance = /* #__PURE__ */factory(name$R, dependencies$R, _ref => {
      var {
        typed,
        addScalar,
        subtract,
        multiplyScalar,
        divideScalar,
        unaryMinus,
        sqrt,
        abs
      } = _ref;

      /**
        * Calculates:
        *    The eucledian distance between two points in N-dimensional spaces.
        *    Distance between point and a line in 2 and 3 dimensional spaces.
        *    Pairwise distance between a set of 2D or 3D points
        * NOTE:
        *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
        *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
        *
        * Syntax:
        *    math.distance([x1, y1], [x2, y2])
        *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
        *    math.distance([x1, y1, z1], [x2, y2, z2])
        *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
        *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])
        *    math.distance([[A], [B], [C]...])
        *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
        *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
        *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
        *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
        *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
        *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
        *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
        *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
        *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
        *
        * Examples:
        *    math.distance([0,0], [4,4])                     // Returns 5.6569
        *    math.distance(
        *     {pointOneX: 0, pointOneY: 0},
        *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
        *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
        *    math.distance(
        *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
        *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
        *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2
        *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
        *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
        *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
        *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
        *    math.distance(
        *     {pointX: 1, pointY: 4},
        *     {lineOnePtX: 6, lineOnePtY: 3},
        *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
        *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
        *    math.distance(
        *     {pointX: 2, pointY: 3, pointZ: 1},
        *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
        *
        * @param {Array | Matrix | Object} x    Co-ordinates of first point
        * @param {Array | Matrix | Object} y    Co-ordinates of second point
        * @return {Number | BigNumber} Returns the distance from two/three points
      */
      return typed(name$R, {
        'Array, Array, Array': function ArrayArrayArray(x, y, z) {
          // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
          if (x.length === 2 && y.length === 2 && z.length === 2) {
            if (!_2d(x)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
            }

            if (!_2d(y)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
            }

            if (!_2d(z)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
            }

            var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));
            var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);
            var yCoeff = unaryMinus(multiplyScalar(m, y[0]));
            var constant = x[1];
            return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
          } else {
            throw new TypeError('Invalid Arguments: Try again');
          }
        },
        'Object, Object, Object': function ObjectObjectObject(x, y, z) {
          if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
            if (!_2d(x)) {
              throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
            }

            if (!_2d(y)) {
              throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
            }

            if (!_2d(z)) {
              throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
            }

            if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {
              var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));
              var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);
              var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));
              var constant = x.pointX;
              return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
            } else {
              throw new TypeError('Key names do not match');
            }
          } else {
            throw new TypeError('Invalid Arguments: Try again');
          }
        },
        'Array, Array': function ArrayArray(x, y) {
          // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
          if (x.length === 2 && y.length === 3) {
            if (!_2d(x)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
            }

            if (!_3d(y)) {
              throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
            }

            return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
          } else if (x.length === 3 && y.length === 6) {
            // Point to Line 3D
            if (!_3d(x)) {
              throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
            }

            if (!_parametricLine(y)) {
              throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
            }

            return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
          } else if (x.length === y.length && x.length > 0) {
            // Point to Point N-dimensions
            if (!_containsOnlyNumbers(x)) {
              throw new TypeError('All values of an array should be numbers or BigNumbers');
            }

            if (!_containsOnlyNumbers(y)) {
              throw new TypeError('All values of an array should be numbers or BigNumbers');
            }

            return _euclideanDistance(x, y);
          } else {
            throw new TypeError('Invalid Arguments: Try again');
          }
        },
        'Object, Object': function ObjectObject(x, y) {
          if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
            if (!_2d(x)) {
              throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
            }

            if (!_3d(y)) {
              throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
            }

            if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {
              return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
            } else {
              throw new TypeError('Key names do not match');
            }
          } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
            // Point to Line 3D
            if (!_3d(x)) {
              throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
            }

            if (!_parametricLine(y)) {
              throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
            }

            if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {
              return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
            } else {
              throw new TypeError('Key names do not match');
            }
          } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
            // Point to Point 2D
            if (!_2d(x)) {
              throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
            }

            if (!_2d(y)) {
              throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
            }

            if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {
              return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);
            } else {
              throw new TypeError('Key names do not match');
            }
          } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
            // Point to Point 3D
            if (!_3d(x)) {
              throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
            }

            if (!_3d(y)) {
              throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
            }

            if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {
              return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);
            } else {
              throw new TypeError('Key names do not match');
            }
          } else {
            throw new TypeError('Invalid Arguments: Try again');
          }
        },
        Array: function Array(arr) {
          if (!_pairwise(arr)) {
            throw new TypeError('Incorrect array format entered for pairwise distance calculation');
          }

          return _distancePairwise(arr);
        }
      });

      function _isNumber(a) {
        // distance supports numbers and bignumbers
        return typeof a === 'number' || isBigNumber(a);
      }

      function _2d(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (a.constructor !== Array) {
          a = _objectToArray(a);
        }

        return _isNumber(a[0]) && _isNumber(a[1]);
      }

      function _3d(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (a.constructor !== Array) {
          a = _objectToArray(a);
        }

        return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
      }

      function _containsOnlyNumbers(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (!Array.isArray(a)) {
          a = _objectToArray(a);
        }

        return a.every(_isNumber);
      }

      function _parametricLine(a) {
        if (a.constructor !== Array) {
          a = _objectToArray(a);
        }

        return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
      }

      function _objectToArray(o) {
        var keys = Object.keys(o);
        var a = [];

        for (var i = 0; i < keys.length; i++) {
          a.push(o[keys[i]]);
        }

        return a;
      }

      function _pairwise(a) {
        // checks for valid arguments passed to _distancePairwise(Array)
        if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
          if (a.some(aI => aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {
            return false;
          }
        } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
          if (a.some(aI => aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {
            return false;
          }
        } else {
          return false;
        }

        return true;
      }

      function _distancePointLine2D(x, y, a, b, c) {
        var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));
        var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));
        return divideScalar(num, den);
      }

      function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
        var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];
        num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));
        var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));
        return divideScalar(num, den);
      }

      function _euclideanDistance(x, y) {
        var vectorSize = x.length;
        var result = 0;
        var diff = 0;

        for (var i = 0; i < vectorSize; i++) {
          diff = subtract(x[i], y[i]);
          result = addScalar(multiplyScalar(diff, diff), result);
        }

        return sqrt(result);
      }

      function _distancePairwise(a) {
        var result = [];
        var pointA = [];
        var pointB = [];

        for (var i = 0; i < a.length - 1; i++) {
          for (var j = i + 1; j < a.length; j++) {
            if (a[0].length === 2) {
              pointA = [a[i][0], a[i][1]];
              pointB = [a[j][0], a[j][1]];
            } else if (a[0].length === 3) {
              pointA = [a[i][0], a[i][1], a[i][2]];
              pointB = [a[j][0], a[j][1], a[j][2]];
            }

            result.push(_euclideanDistance(pointA, pointB));
          }
        }

        return result;
      }
    });

    var name$Q = 'intersect';
    var dependencies$Q = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar', 'flatten', 'isZero', 'isNumeric'];
    var createIntersect = /* #__PURE__ */factory(name$Q, dependencies$Q, _ref => {
      var {
        typed,
        config,
        abs,
        add,
        addScalar,
        matrix,
        multiply,
        multiplyScalar,
        divideScalar,
        subtract,
        smaller,
        equalScalar,
        flatten,
        isZero,
        isNumeric
      } = _ref;

      /**
       * Calculates the point of intersection of two lines in two or three dimensions
       * and of a line and a plane in three dimensions. The inputs are in the form of
       * arrays or 1 dimensional matrices. The line intersection functions return null
       * if the lines do not meet.
       *
       * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
       *
       * Syntax:
       *
       *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
       *    math.intersect(endPoint1, endPoint2, planeCoefficients)
       *
       * Examples:
       *
       *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]
       *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]
       *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]
       *
       * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
       * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
       * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
       *                              OR Co-efficients of the plane's equation
       * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
       *                              OR undefined if the calculation is for line and plane
       * @return {Array}              Returns the point of intersection of lines/lines-planes
       */
      return typed('intersect', {
        'Array, Array, Array': _AAA,
        'Array, Array, Array, Array': _AAAA,
        'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {
          var arr = _AAA(x.valueOf(), y.valueOf(), plane.valueOf());

          return arr === null ? null : matrix(arr);
        },
        'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {
          // TODO: output matrix type should match input matrix type
          var arr = _AAAA(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf());

          return arr === null ? null : matrix(arr);
        }
      });

      function _AAA(x, y, plane) {
        x = _coerceArr(x);
        y = _coerceArr(y);
        plane = _coerceArr(plane);

        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }

        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }

        if (!_4d(plane)) {
          throw new TypeError('Array with 4 numbers expected as third argument');
        }

        return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
      }

      function _AAAA(w, x, y, z) {
        w = _coerceArr(w);
        x = _coerceArr(x);
        y = _coerceArr(y);
        z = _coerceArr(z);

        if (w.length === 2) {
          if (!_2d(w)) {
            throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
          }

          if (!_2d(x)) {
            throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
          }

          if (!_2d(y)) {
            throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
          }

          if (!_2d(z)) {
            throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');
          }

          return _intersect2d(w, x, y, z);
        } else if (w.length === 3) {
          if (!_3d(w)) {
            throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
          }

          if (!_3d(x)) {
            throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
          }

          if (!_3d(y)) {
            throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');
          }

          if (!_3d(z)) {
            throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');
          }

          return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
        } else {
          throw new TypeError('Arrays with two or thee dimensional points expected');
        }
      }
      /** Coerce row and column 2-dim arrays to 1-dim array */


      function _coerceArr(arr) {
        // row matrix
        if (arr.length === 1) return arr[0]; // column matrix

        if (arr.length > 1 && Array.isArray(arr[0])) {
          if (arr.every(el => Array.isArray(el) && el.length === 1)) return flatten(arr);
        }

        return arr;
      }

      function _2d(x) {
        return x.length === 2 && isNumeric(x[0]) && isNumeric(x[1]);
      }

      function _3d(x) {
        return x.length === 3 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]);
      }

      function _4d(x) {
        return x.length === 4 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]) && isNumeric(x[3]);
      }

      function _intersect2d(p1a, p1b, p2a, p2b) {
        var o1 = p1a;
        var o2 = p2a;
        var d1 = subtract(o1, p1b);
        var d2 = subtract(o2, p2b);
        var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));
        if (isZero(det)) return null;

        if (smaller(abs(det), config.epsilon)) {
          return null;
        }

        var d20o11 = multiplyScalar(d2[0], o1[1]);
        var d21o10 = multiplyScalar(d2[1], o1[0]);
        var d20o21 = multiplyScalar(d2[0], o2[1]);
        var d21o20 = multiplyScalar(d2[1], o2[0]);
        var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);
        return add(multiply(d1, t), o1);
      }

      function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {
        // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)
        var add1 = multiplyScalar(subtract(a, b), subtract(c, d));
        var add2 = multiplyScalar(subtract(e, f), subtract(g, h));
        var add3 = multiplyScalar(subtract(i, j), subtract(k, l));
        return addScalar(addScalar(add1, add2), add3);
      }

      function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
        var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);

        var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);

        var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);

        var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);

        var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);

        var numerator = subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343));
        var denominator = subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321));
        if (isZero(denominator)) return null;
        var ta = divideScalar(numerator, denominator);
        var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);
        var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));
        var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));
        var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));
        var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));
        var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));
        var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));

        if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {
          return [pax, pay, paz];
        } else {
          return null;
        }
      }

      function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
        var x1x = multiplyScalar(x1, x);
        var x2x = multiplyScalar(x2, x);
        var y1y = multiplyScalar(y1, y);
        var y2y = multiplyScalar(y2, y);
        var z1z = multiplyScalar(z1, z);
        var z2z = multiplyScalar(z2, z);
        var numerator = subtract(subtract(subtract(c, x1x), y1y), z1z);
        var denominator = subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z);
        var t = divideScalar(numerator, denominator);
        var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));
        var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));
        var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));
        return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:
        //       (a) no intersection,
        //       (b) line contained in plane
      }
    });

    var name$P = 'sum';
    var dependencies$P = ['typed', 'config', 'add', 'numeric'];
    var createSum = /* #__PURE__ */factory(name$P, dependencies$P, _ref => {
      var {
        typed,
        config,
        add,
        numeric
      } = _ref;

      /**
       * Compute the sum of a matrix or a list with values.
       * In case of a (multi dimensional) array or matrix, the sum of all
       * elements will be calculated.
       *
       * Syntax:
       *
       *     math.sum(a, b, c, ...)
       *     math.sum(A)
       *
       * Examples:
       *
       *     math.sum(2, 1, 4, 3)               // returns 10
       *     math.sum([2, 1, 4, 3])             // returns 10
       *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22
       *
       * See also:
       *
       *    mean, median, min, max, prod, std, variance, cumsum
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The sum of all values
       */
      return typed(name$P, {
        // sum([a, b, c, d, ...])
        'Array | Matrix': _sum,
        // sum([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': _nsumDim,
        // sum(a, b, c, d, ...)
        '...': function _(args) {
          if (containsCollections(args)) {
            throw new TypeError('Scalar values expected in function sum');
          }

          return _sum(args);
        }
      });
      /**
       * Recursively calculate the sum of an n-dimensional array
       * @param {Array | Matrix} array
       * @return {number} sum
       * @private
       */

      function _sum(array) {
        var sum;
        deepForEach(array, function (value) {
          try {
            sum = sum === undefined ? value : add(sum, value);
          } catch (err) {
            throw improveErrorMessage(err, 'sum', value);
          }
        }); // make sure returning numeric value: parse a string into a numeric value

        if (sum === undefined) {
          sum = numeric(0, config.number);
        }

        if (typeof sum === 'string') {
          sum = numeric(sum, config.number);
        }

        return sum;
      }

      function _nsumDim(array, dim) {
        try {
          var sum = reduce(array, dim, add);
          return sum;
        } catch (err) {
          throw improveErrorMessage(err, 'sum');
        }
      }
    });

    var name$O = 'cumsum';
    var dependencies$O = ['typed', 'add', 'unaryPlus'];
    var createCumSum = /* #__PURE__ */factory(name$O, dependencies$O, _ref => {
      var {
        typed,
        add,
        unaryPlus
      } = _ref;

      /**
       * Compute the cumulative sum of a matrix or a list with values.
       * In case of a (multi dimensional) array or matrix, the cumulative sums
       * along a specified dimension (defaulting to the first) will be calculated.
       *
       * Syntax:
       *
       *     math.cumsum(a, b, c, ...)
       *     math.cumsum(A)
       *
       * Examples:
       *
       *     math.cumsum(2, 1, 4, 3)               // returns [2, 3, 7, 10]
       *     math.cumsum([2, 1, 4, 3])             // returns [2, 3, 7, 10]
       *     math.cumsum([[1, 2], [3, 4]])         // returns [[1, 2], [4, 6]]
       *     math.cumsum([[1, 2], [3, 4]], 0)      // returns [[1, 2], [4, 6]]
       *     math.cumsum([[1, 2], [3, 4]], 1)      // returns [[1, 3], [3, 7]]
       *     math.cumsum([[2, 5], [4, 3], [1, 7]]) // returns [[2, 5], [6, 8], [7, 15]]
       *
       * See also:
       *
       *    mean, median, min, max, prod, std, variance, sum
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The cumulative sum of all values
       */
      return typed(name$O, {
        // sum([a, b, c, d, ...])
        Array: _cumsum,
        Matrix: function Matrix(matrix) {
          return matrix.create(_cumsum(matrix.valueOf()));
        },
        // sum([a, b, c, d, ...], dim)
        'Array, number | BigNumber': _ncumSumDim,
        'Matrix, number | BigNumber': function MatrixNumberBigNumber(matrix, dim) {
          return matrix.create(_ncumSumDim(matrix.valueOf(), dim));
        },
        // cumsum(a, b, c, d, ...)
        '...': function _(args) {
          if (containsCollections(args)) {
            throw new TypeError('All values expected to be scalar in function cumsum');
          }

          return _cumsum(args);
        }
      });
      /**
         * Recursively calculate the cumulative sum of an n-dimensional array
         * @param {Array} array
         * @return {number} cumsum
         * @private
         */

      function _cumsum(array) {
        try {
          return _cumsummap(array);
        } catch (err) {
          throw improveErrorMessage(err, name$O);
        }
      }

      function _cumsummap(array) {
        if (array.length === 0) {
          return [];
        }

        var sums = [unaryPlus(array[0])]; // unaryPlus converts to number if need be

        for (var i = 1; i < array.length; ++i) {
          // Must use add below and not addScalar for the case of summing a
          // 2+-dimensional array along the 0th dimension (the row vectors,
          // or higher-d analogues, are literally added to each other).
          sums.push(add(sums[i - 1], array[i]));
        }

        return sums;
      }

      function _ncumSumDim(array, dim) {
        var size = arraySize(array);

        if (dim < 0 || dim >= size.length) {
          // TODO: would be more clear when throwing a DimensionError here
          throw new IndexError(dim, size.length);
        }

        try {
          return _cumsumDimensional(array, dim);
        } catch (err) {
          throw improveErrorMessage(err, name$O);
        }
      }
      /* Possible TODO: Refactor _reduce in collection.js to be able to work here as well */


      function _cumsumDimensional(mat, dim) {
        var i, ret, tran;

        if (dim <= 0) {
          var initialValue = mat[0][0];

          if (!Array.isArray(initialValue)) {
            return _cumsummap(mat);
          } else {
            tran = _switch$1(mat);
            ret = [];

            for (i = 0; i < tran.length; i++) {
              ret[i] = _cumsumDimensional(tran[i], dim - 1);
            }

            return ret;
          }
        } else {
          ret = [];

          for (i = 0; i < mat.length; i++) {
            ret[i] = _cumsumDimensional(mat[i], dim - 1);
          }

          return ret;
        }
      }
    });

    var name$N = 'mean';
    var dependencies$N = ['typed', 'add', 'divide'];
    var createMean = /* #__PURE__ */factory(name$N, dependencies$N, _ref => {
      var {
        typed,
        add,
        divide
      } = _ref;

      /**
       * Compute the mean value of matrix or a list with values.
       * In case of a multi dimensional array, the mean of the flattened array
       * will be calculated. When `dim` is provided, the maximum over the selected
       * dimension will be calculated. Parameter `dim` is zero-based.
       *
       * Syntax:
       *
       *     math.mean(a, b, c, ...)
       *     math.mean(A)
       *     math.mean(A, dim)
       *
       * Examples:
       *
       *     math.mean(2, 1, 4, 3)                     // returns 2.5
       *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725
       *
       *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]
       *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]
       *
       * See also:
       *
       *     median, min, max, sum, prod, std, variance
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The mean of all values
       */
      return typed(name$N, {
        // mean([a, b, c, d, ...])
        'Array | Matrix': _mean,
        // mean([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': _nmeanDim,
        // mean(a, b, c, d, ...)
        '...': function _(args) {
          if (containsCollections(args)) {
            throw new TypeError('Scalar values expected in function mean');
          }

          return _mean(args);
        }
      });
      /**
       * Calculate the mean value in an n-dimensional array, returning a
       * n-1 dimensional array
       * @param {Array} array
       * @param {number} dim
       * @return {number} mean
       * @private
       */

      function _nmeanDim(array, dim) {
        try {
          var sum = reduce(array, dim, add);
          var s = Array.isArray(array) ? arraySize(array) : array.size();
          return divide(sum, s[dim]);
        } catch (err) {
          throw improveErrorMessage(err, 'mean');
        }
      }
      /**
       * Recursively calculate the mean value in an n-dimensional array
       * @param {Array} array
       * @return {number} mean
       * @private
       */


      function _mean(array) {
        var sum;
        var num = 0;
        deepForEach(array, function (value) {
          try {
            sum = sum === undefined ? value : add(sum, value);
            num++;
          } catch (err) {
            throw improveErrorMessage(err, 'mean', value);
          }
        });

        if (num === 0) {
          throw new Error('Cannot calculate the mean of an empty array');
        }

        return divide(sum, num);
      }
    });

    var name$M = 'median';
    var dependencies$M = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];
    var createMedian = /* #__PURE__ */factory(name$M, dependencies$M, _ref => {
      var {
        typed,
        add,
        divide,
        compare,
        partitionSelect
      } = _ref;

      /**
       * Recursively calculate the median of an n-dimensional array
       * @param {Array} array
       * @return {Number} median
       * @private
       */
      function _median(array) {
        try {
          array = flatten$2(array.valueOf());
          var num = array.length;

          if (num === 0) {
            throw new Error('Cannot calculate median of an empty array');
          }

          if (num % 2 === 0) {
            // even: return the average of the two middle values
            var mid = num / 2 - 1;
            var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part

            var left = array[mid];

            for (var i = 0; i < mid; ++i) {
              if (compare(array[i], left) > 0) {
                left = array[i];
              }
            }

            return middle2(left, right);
          } else {
            // odd: return the middle value
            var m = partitionSelect(array, (num - 1) / 2);
            return middle(m);
          }
        } catch (err) {
          throw improveErrorMessage(err, 'median');
        }
      } // helper function to type check the middle value of the array


      var middle = typed({
        'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {
          return value;
        }
      }); // helper function to type check the two middle value of the array

      var middle2 = typed({
        'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {
          return divide(add(left, right), 2);
        }
      });
      /**
       * Compute the median of a matrix or a list with values. The values are
       * sorted and the middle value is returned. In case of an even number of
       * values, the average of the two middle values is returned.
       * Supported types of values are: Number, BigNumber, Unit
       *
       * In case of a (multi dimensional) array or matrix, the median of all
       * elements will be calculated.
       *
       * Syntax:
       *
       *     math.median(a, b, c, ...)
       *     math.median(A)
       *
       * Examples:
       *
       *     math.median(5, 2, 7)        // returns 5
       *     math.median([3, -1, 5, 7])  // returns 4
       *
       * See also:
       *
       *     mean, min, max, sum, prod, std, variance, quantileSeq
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The median
       */

      return typed(name$M, {
        // median([a, b, c, d, ...])
        'Array | Matrix': _median,
        // median([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
          // TODO: implement median(A, dim)
          throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)
        },
        // median(a, b, c, d, ...)
        '...': function _(args) {
          if (containsCollections(args)) {
            throw new TypeError('Scalar values expected in function median');
          }

          return _median(args);
        }
      });
    });

    var name$L = 'mad';
    var dependencies$L = ['typed', 'abs', 'map', 'median', 'subtract'];
    var createMad = /* #__PURE__ */factory(name$L, dependencies$L, _ref => {
      var {
        typed,
        abs,
        map,
        median,
        subtract
      } = _ref;

      /**
       * Compute the median absolute deviation of a matrix or a list with values.
       * The median absolute deviation is defined as the median of the absolute
       * deviations from the median.
       *
       * Syntax:
       *
       *     math.mad(a, b, c, ...)
       *     math.mad(A)
       *
       * Examples:
       *
       *     math.mad(10, 20, 30)             // returns 10
       *     math.mad([1, 2, 3])              // returns 1
       *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5
       *
       * See also:
       *
       *     median, mean, std, abs
       *
       * @param {Array | Matrix} array
       *                        A single matrix or multiple scalar values.
       * @return {*} The median absolute deviation.
       */
      return typed(name$L, {
        // mad([a, b, c, d, ...])
        'Array | Matrix': _mad,
        // mad(a, b, c, d, ...)
        '...': function _(args) {
          return _mad(args);
        }
      });

      function _mad(array) {
        array = flatten$2(array.valueOf());

        if (array.length === 0) {
          throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');
        }

        try {
          var med = median(array);
          return median(map(array, function (value) {
            return abs(subtract(value, med));
          }));
        } catch (err) {
          if (err instanceof TypeError && err.message.indexOf('median') !== -1) {
            throw new TypeError(err.message.replace('median', 'mad'));
          } else {
            throw improveErrorMessage(err, 'mad');
          }
        }
      }
    });

    var DEFAULT_NORMALIZATION = 'unbiased';
    var name$K = 'variance';
    var dependencies$K = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
    var createVariance = /* #__PURE__ */factory(name$K, dependencies$K, _ref => {
      var {
        typed,
        add,
        subtract,
        multiply,
        divide,
        apply,
        isNaN
      } = _ref;

      /**
       * Compute the variance of a matrix or a  list with values.
       * In case of a (multi dimensional) array or matrix, the variance over all
       * elements will be calculated.
       *
       * Additionally, it is possible to compute the variance along the rows
       * or columns of a matrix by specifying the dimension as the second argument.
       *
       * Optionally, the type of normalization can be specified as the final
       * parameter. The parameter `normalization` can be one of the following values:
       *
       * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
       * - 'uncorrected'        The sum of squared errors is divided by n
       * - 'biased'             The sum of squared errors is divided by (n + 1)
       *
       *
       * Note that older browser may not like the variable name `var`. In that
       * case, the function can be called as `math['var'](...)` instead of
       * `math.var(...)`.
       *
       * Syntax:
       *
       *     math.variance(a, b, c, ...)
       *     math.variance(A)
       *     math.variance(A, normalization)
       *     math.variance(A, dimension)
       *     math.variance(A, dimension, normalization)
       *
       * Examples:
       *
       *     math.variance(2, 4, 6)                     // returns 4
       *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667
       *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5
       *     math.variance([2, 4, 6, 8], 'biased')      // returns 4
       *
       *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5
       *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]
       *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]
       *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]
       *
       * See also:
       *
       *    mean, median, max, min, prod, std, sum
       *
       * @param {Array | Matrix} array
       *                        A single matrix or or multiple scalar values
       * @param {string} [normalization='unbiased']
       *                        Determines how to normalize the variance.
       *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
       * @param dimension {number | BigNumber}
       *                        Determines the axis to compute the variance for a matrix
       * @return {*} The variance
       */
      return typed(name$K, {
        // variance([a, b, c, d, ...])
        'Array | Matrix': function ArrayMatrix(array) {
          return _var(array, DEFAULT_NORMALIZATION);
        },
        // variance([a, b, c, d, ...], normalization)
        'Array | Matrix, string': _var,
        // variance([a, b, c, c, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
          return _varDim(array, dim, DEFAULT_NORMALIZATION);
        },
        // variance([a, b, c, c, ...], dim, normalization)
        'Array | Matrix, number | BigNumber, string': _varDim,
        // variance(a, b, c, d, ...)
        '...': function _(args) {
          return _var(args, DEFAULT_NORMALIZATION);
        }
      });
      /**
       * Recursively calculate the variance of an n-dimensional array
       * @param {Array} array
       * @param {string} normalization
       *                        Determines how to normalize the variance:
       *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
       *                        - 'uncorrected' The sum of squared errors is divided by n
       *                        - 'biased'      The sum of squared errors is divided by (n + 1)
       * @return {number | BigNumber} variance
       * @private
       */

      function _var(array, normalization) {
        var sum;
        var num = 0;

        if (array.length === 0) {
          throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
        } // calculate the mean and number of elements


        deepForEach(array, function (value) {
          try {
            sum = sum === undefined ? value : add(sum, value);
            num++;
          } catch (err) {
            throw improveErrorMessage(err, 'variance', value);
          }
        });
        if (num === 0) throw new Error('Cannot calculate variance of an empty array');
        var mean = divide(sum, num); // calculate the variance

        sum = undefined;
        deepForEach(array, function (value) {
          var diff = subtract(value, mean);
          sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));
        });

        if (isNaN(sum)) {
          return sum;
        }

        switch (normalization) {
          case 'uncorrected':
            return divide(sum, num);

          case 'biased':
            return divide(sum, num + 1);

          case 'unbiased':
            {
              var zero = isBigNumber(sum) ? sum.mul(0) : 0;
              return num === 1 ? zero : divide(sum, num - 1);
            }

          default:
            throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
        }
      }

      function _varDim(array, dim, normalization) {
        try {
          if (array.length === 0) {
            throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
          }

          return apply(array, dim, x => _var(x, normalization));
        } catch (err) {
          throw improveErrorMessage(err, 'variance');
        }
      }
    });

    var name$J = 'quantileSeq';
    var dependencies$J = ['typed', 'add', 'multiply', 'partitionSelect', 'compare'];
    var createQuantileSeq = /* #__PURE__ */factory(name$J, dependencies$J, _ref => {
      var {
        typed,
        add,
        multiply,
        partitionSelect,
        compare
      } = _ref;

      /**
       * Compute the prob order quantile of a matrix or a list with values.
       * The sequence is sorted and the middle value is returned.
       * Supported types of sequence values are: Number, BigNumber, Unit
       * Supported types of probability are: Number, BigNumber
       *
       * In case of a (multi dimensional) array or matrix, the prob order quantile
       * of all elements will be calculated.
       *
       * Syntax:
       *
       *     math.quantileSeq(A, prob[, sorted])
       *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
       *     math.quantileSeq(A, N[, sorted])
       *
       * Examples:
       *
       *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4
       *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]
       *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]
       *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4
       *
       * See also:
       *
       *     median, mean, min, max, sum, prod, std, variance
       *
       * @param {Array, Matrix} data                A single matrix or Array
       * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
       *                                            the amount of evenly distributed steps of
       *                                            probabilities; only one of these options can
       *                                            be provided
       * @param {Boolean} sorted=false              is data sorted in ascending order
       * @return {Number, BigNumber, Unit, Array}   Quantile(s)
       */
      function quantileSeq(data, probOrN, sorted) {
        var probArr, dataArr, one;

        if (arguments.length < 2 || arguments.length > 3) {
          throw new SyntaxError('Function quantileSeq requires two or three parameters');
        }

        if (isCollection(data)) {
          sorted = sorted || false;

          if (typeof sorted === 'boolean') {
            dataArr = data.valueOf();

            if (isNumber(probOrN)) {
              if (probOrN < 0) {
                throw new Error('N/prob must be non-negative');
              }

              if (probOrN <= 1) {
                // quantileSeq([a, b, c, d, ...], prob[,sorted])
                return _quantileSeq(dataArr, probOrN, sorted);
              }

              if (probOrN > 1) {
                // quantileSeq([a, b, c, d, ...], N[,sorted])
                if (!isInteger$1(probOrN)) {
                  throw new Error('N must be a positive integer');
                }

                var nPlusOne = probOrN + 1;
                probArr = new Array(probOrN);

                for (var i = 0; i < probOrN;) {
                  probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
                }

                return probArr;
              }
            }

            if (isBigNumber(probOrN)) {
              var BigNumber = probOrN.constructor;

              if (probOrN.isNegative()) {
                throw new Error('N/prob must be non-negative');
              }

              one = new BigNumber(1);

              if (probOrN.lte(one)) {
                // quantileSeq([a, b, c, d, ...], prob[,sorted])
                return new BigNumber(_quantileSeq(dataArr, probOrN, sorted));
              }

              if (probOrN.gt(one)) {
                // quantileSeq([a, b, c, d, ...], N[,sorted])
                if (!probOrN.isInteger()) {
                  throw new Error('N must be a positive integer');
                } // largest possible Array length is 2^32-1
                // 2^32 < 10^15, thus safe conversion guaranteed


                var intN = probOrN.toNumber();

                if (intN > 4294967295) {
                  throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
                }

                var _nPlusOne = new BigNumber(intN + 1);

                probArr = new Array(intN);

                for (var _i = 0; _i < intN;) {
                  probArr[_i] = new BigNumber(_quantileSeq(dataArr, new BigNumber(++_i).div(_nPlusOne), sorted));
                }

                return probArr;
              }
            }

            if (Array.isArray(probOrN)) {
              // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
              probArr = new Array(probOrN.length);

              for (var _i2 = 0; _i2 < probArr.length; ++_i2) {
                var currProb = probOrN[_i2];

                if (isNumber(currProb)) {
                  if (currProb < 0 || currProb > 1) {
                    throw new Error('Probability must be between 0 and 1, inclusive');
                  }
                } else if (isBigNumber(currProb)) {
                  one = new currProb.constructor(1);

                  if (currProb.isNegative() || currProb.gt(one)) {
                    throw new Error('Probability must be between 0 and 1, inclusive');
                  }
                } else {
                  throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
                }

                probArr[_i2] = _quantileSeq(dataArr, currProb, sorted);
              }

              return probArr;
            }

            throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
          }

          throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
        }

        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
      }
      /**
       * Calculate the prob order quantile of an n-dimensional array.
       *
       * @param {Array} array
       * @param {Number, BigNumber} prob
       * @param {Boolean} sorted
       * @return {Number, BigNumber, Unit} prob order quantile
       * @private
       */


      function _quantileSeq(array, prob, sorted) {
        var flat = flatten$2(array);
        var len = flat.length;

        if (len === 0) {
          throw new Error('Cannot calculate quantile of an empty sequence');
        }

        if (isNumber(prob)) {
          var _index = prob * (len - 1);

          var _fracPart = _index % 1;

          if (_fracPart === 0) {
            var value = sorted ? flat[_index] : partitionSelect(flat, _index);
            validate(value);
            return value;
          }

          var _integerPart = Math.floor(_index);

          var _left;

          var _right;

          if (sorted) {
            _left = flat[_integerPart];
            _right = flat[_integerPart + 1];
          } else {
            _right = partitionSelect(flat, _integerPart + 1); // max of partition is kth largest

            _left = flat[_integerPart];

            for (var i = 0; i < _integerPart; ++i) {
              if (compare(flat[i], _left) > 0) {
                _left = flat[i];
              }
            }
          }

          validate(_left);
          validate(_right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

          return add(multiply(_left, 1 - _fracPart), multiply(_right, _fracPart));
        } // If prob is a BigNumber


        var index = prob.times(len - 1);

        if (index.isInteger()) {
          index = index.toNumber();

          var _value = sorted ? flat[index] : partitionSelect(flat, index);

          validate(_value);
          return _value;
        }

        var integerPart = index.floor();
        var fracPart = index.minus(integerPart);
        var integerPartNumber = integerPart.toNumber();
        var left;
        var right;

        if (sorted) {
          left = flat[integerPartNumber];
          right = flat[integerPartNumber + 1];
        } else {
          right = partitionSelect(flat, integerPartNumber + 1); // max of partition is kth largest

          left = flat[integerPartNumber];

          for (var _i3 = 0; _i3 < integerPartNumber; ++_i3) {
            if (compare(flat[_i3], left) > 0) {
              left = flat[_i3];
            }
          }
        }

        validate(left);
        validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

        var one = new fracPart.constructor(1);
        return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
      }
      /**
       * Check if array value types are valid, throw error otherwise.
       * @param {number | BigNumber | Unit} x
       * @param {number | BigNumber | Unit} x
       * @private
       */


      var validate = typed({
        'number | BigNumber | Unit': function numberBigNumberUnit(x) {
          return x;
        }
      });
      return quantileSeq;
    });

    var name$I = 'std';
    var dependencies$I = ['typed', 'sqrt', 'variance'];
    var createStd = /* #__PURE__ */factory(name$I, dependencies$I, _ref => {
      var {
        typed,
        sqrt,
        variance
      } = _ref;

      /**
       * Compute the standard deviation of a matrix or a  list with values.
       * The standard deviations is defined as the square root of the variance:
       * `std(A) = sqrt(variance(A))`.
       * In case of a (multi dimensional) array or matrix, the standard deviation
       * over all elements will be calculated by default, unless an axis is specified
       * in which case the standard deviation will be computed along that axis.
       *
       * Additionally, it is possible to compute the standard deviation along the rows
       * or columns of a matrix by specifying the dimension as the second argument.
       *
       * Optionally, the type of normalization can be specified as the final
       * parameter. The parameter `normalization` can be one of the following values:
       *
       * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
       * - 'uncorrected'        The sum of squared errors is divided by n
       * - 'biased'             The sum of squared errors is divided by (n + 1)
       *
       *
       * Syntax:
       *
       *     math.std(a, b, c, ...)
       *     math.std(A)
       *     math.std(A, normalization)
       *     math.std(A, dimension)
       *     math.std(A, dimension, normalization)
       *
       * Examples:
       *
       *     math.std(2, 4, 6)                     // returns 2
       *     math.std([2, 4, 6, 8])                // returns 2.581988897471611
       *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979
       *     math.std([2, 4, 6, 8], 'biased')      // returns 2
       *
       *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707
       *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]
       *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]
       *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]
       *
       * See also:
       *
       *    mean, median, max, min, prod, sum, variance
       *
       * @param {Array | Matrix} array
       *                        A single matrix or or multiple scalar values
       * @param {string} [normalization='unbiased']
       *                        Determines how to normalize the variance.
       *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
       * @param dimension {number | BigNumber}
       *                        Determines the axis to compute the standard deviation for a matrix
       * @return {*} The standard deviation
       */
      return typed(name$I, {
        // std([a, b, c, d, ...])
        'Array | Matrix': _std,
        // std([a, b, c, d, ...], normalization)
        'Array | Matrix, string': _std,
        // std([a, b, c, c, ...], dim)
        'Array | Matrix, number | BigNumber': _std,
        // std([a, b, c, c, ...], dim, normalization)
        'Array | Matrix, number | BigNumber, string': _std,
        // std(a, b, c, d, ...)
        '...': function _(args) {
          return _std(args);
        }
      });

      function _std(array, normalization) {
        if (array.length === 0) {
          throw new SyntaxError('Function std requires one or more parameters (0 provided)');
        }

        try {
          return sqrt(variance.apply(null, arguments));
        } catch (err) {
          if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {
            throw new TypeError(err.message.replace(' variance', ' std'));
          } else {
            throw err;
          }
        }
      }
    });

    var name$H = 'combinations';
    var dependencies$H = ['typed'];
    var createCombinations = /* #__PURE__ */factory(name$H, dependencies$H, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Compute the number of ways of picking `k` unordered outcomes from `n`
       * possibilities.
       *
       * Combinations only takes integer arguments.
       * The following condition must be enforced: k <= n.
       *
       * Syntax:
       *
       *     math.combinations(n, k)
       *
       * Examples:
       *
       *    math.combinations(7, 5) // returns 21
       *
       * See also:
       *
       *    combinationsWithRep, permutations, factorial
       *
       * @param {number | BigNumber} n    Total number of objects in the set
       * @param {number | BigNumber} k    Number of objects in the subset
       * @return {number | BigNumber}     Number of possible combinations.
       */
      return typed(name$H, {
        'number, number': combinationsNumber,
        'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
          var BigNumber = n.constructor;
          var result, i;
          var nMinusk = n.minus(k);
          var one = new BigNumber(1);

          if (!isPositiveInteger$2(n) || !isPositiveInteger$2(k)) {
            throw new TypeError('Positive integer value expected in function combinations');
          }

          if (k.gt(n)) {
            throw new TypeError('k must be less than n in function combinations');
          }

          result = one;

          if (k.lt(nMinusk)) {
            for (i = one; i.lte(nMinusk); i = i.plus(one)) {
              result = result.times(k.plus(i)).dividedBy(i);
            }
          } else {
            for (i = one; i.lte(k); i = i.plus(one)) {
              result = result.times(nMinusk.plus(i)).dividedBy(i);
            }
          }

          return result;
        } // TODO: implement support for collection in combinations

      });
    });
    /**
     * Test whether BigNumber n is a positive integer
     * @param {BigNumber} n
     * @returns {boolean} isPositiveInteger
     */

    function isPositiveInteger$2(n) {
      return n.isInteger() && n.gte(0);
    }

    var name$G = 'combinationsWithRep';
    var dependencies$G = ['typed'];
    var createCombinationsWithRep = /* #__PURE__ */factory(name$G, dependencies$G, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Compute the number of ways of picking `k` unordered outcomes from `n`
       * possibilities, allowing individual outcomes to be repeated more than once.
       *
       * CombinationsWithRep only takes integer arguments.
       * The following condition must be enforced: k <= n + k -1.
       *
       * Syntax:
       *
       *     math.combinationsWithRep(n, k)
       *
       * Examples:
       *
       *    math.combinationsWithRep(7, 5) // returns 462
       *
       * See also:
       *
       *    combinations, permutations, factorial
       *
       * @param {number | BigNumber} n    Total number of objects in the set
       * @param {number | BigNumber} k    Number of objects in the subset
       * @return {number | BigNumber}     Number of possible combinations with replacement.
       */
      return typed(name$G, {
        'number, number': function numberNumber(n, k) {
          if (!isInteger$1(n) || n < 0) {
            throw new TypeError('Positive integer value expected in function combinationsWithRep');
          }

          if (!isInteger$1(k) || k < 0) {
            throw new TypeError('Positive integer value expected in function combinationsWithRep');
          }

          if (n < 1) {
            throw new TypeError('k must be less than or equal to n + k - 1');
          }

          if (k < n - 1) {
            var _prodrange = product(n, n + k - 1);

            return _prodrange / product(1, k);
          }

          var prodrange = product(k + 1, n + k - 1);
          return prodrange / product(1, n - 1);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
          var BigNumber = n.constructor;
          var result, i;
          var one = new BigNumber(1);
          var nMinusOne = n.minus(one);

          if (!isPositiveInteger$1(n) || !isPositiveInteger$1(k)) {
            throw new TypeError('Positive integer value expected in function combinationsWithRep');
          }

          if (n.lt(one)) {
            throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');
          }

          result = one;

          if (k.lt(nMinusOne)) {
            for (i = one; i.lte(nMinusOne); i = i.plus(one)) {
              result = result.times(k.plus(i)).dividedBy(i);
            }
          } else {
            for (i = one; i.lte(k); i = i.plus(one)) {
              result = result.times(nMinusOne.plus(i)).dividedBy(i);
            }
          }

          return result;
        }
      });
    });
    /**
     * Test whether BigNumber n is a positive integer
     * @param {BigNumber} n
     * @returns {boolean} isPositiveInteger
     */

    function isPositiveInteger$1(n) {
      return n.isInteger() && n.gte(0);
    }

    var name$F = 'gamma';
    var dependencies$F = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];
    var createGamma = /* #__PURE__ */factory(name$F, dependencies$F, _ref => {
      var {
        typed,
        config,
        multiplyScalar,
        pow,
        BigNumber: _BigNumber,
        Complex: _Complex
      } = _ref;

      /**
       * Compute the gamma function of a value using Lanczos approximation for
       * small values, and an extended Stirling approximation for large values.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.gamma(n)
       *
       * Examples:
       *
       *    math.gamma(5)       // returns 24
       *    math.gamma(-0.5)    // returns -3.5449077018110335
       *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i
       *
       * See also:
       *
       *    combinations, factorial, permutations
       *
       * @param {number | Array | Matrix} n   A real or complex number
       * @return {number | Array | Matrix}    The gamma of `n`
       */
      return typed(name$F, {
        number: gammaNumber,
        Complex: function Complex(n) {
          if (n.im === 0) {
            return this(n.re);
          } // Lanczos approximation doesn't work well with real part lower than 0.5
          // So reflection formula is required


          if (n.re < 0.5) {
            // Euler's reflection formula
            // gamma(1-z) * gamma(z) = PI / sin(PI * z)
            // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]
            // thanks to imperfect sin implementation sin(PI * n) != 0
            // we can safely use it anyway
            var _t = new _Complex(1 - n.re, -n.im);

            var r = new _Complex(Math.PI * n.re, Math.PI * n.im);
            return new _Complex(Math.PI).div(r.sin()).div(this(_t));
          } // Lanczos approximation
          // z -= 1


          n = new _Complex(n.re - 1, n.im); // x = gammaPval[0]

          var x = new _Complex(gammaP[0], 0); // for (i, gammaPval) in enumerate(gammaP):

          for (var i = 1; i < gammaP.length; ++i) {
            // x += gammaPval / (z + i)
            var gammaPval = new _Complex(gammaP[i], 0);
            x = x.add(gammaPval.div(n.add(i)));
          } // t = z + gammaG + 0.5


          var t = new _Complex(n.re + gammaG + 0.5, n.im); // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x

          var twoPiSqrt = Math.sqrt(2 * Math.PI);
          var tpow = t.pow(n.add(0.5));
          var expt = t.neg().exp(); // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]

          return x.mul(twoPiSqrt).mul(tpow).mul(expt);
        },
        BigNumber: function BigNumber(n) {
          if (n.isInteger()) {
            return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));
          }

          if (!n.isFinite()) {
            return new _BigNumber(n.isNegative() ? NaN : Infinity);
          }

          throw new Error('Integer BigNumber expected');
        },
        'Array | Matrix': function ArrayMatrix(n) {
          return deepMap(n, this);
        }
      });
      /**
       * Calculate factorial for a BigNumber
       * @param {BigNumber} n
       * @returns {BigNumber} Returns the factorial of n
       */

      function bigFactorial(n) {
        if (n < 8) {
          return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);
        }

        var precision = config.precision + (Math.log(n.toNumber()) | 0);

        var Big = _BigNumber.clone({
          precision
        });

        if (n % 2 === 1) {
          return n.times(bigFactorial(new _BigNumber(n - 1)));
        }

        var p = n;
        var prod = new Big(n);
        var sum = n.toNumber();

        while (p > 2) {
          p -= 2;
          sum += p;
          prod = prod.times(sum);
        }

        return new _BigNumber(prod.toPrecision(_BigNumber.precision));
      }
    });

    /* eslint-disable no-loss-of-precision */
    var name$E = 'lgamma';
    var dependencies$E = ['Complex', 'typed'];
    var createLgamma = /* #__PURE__ */factory(name$E, dependencies$E, _ref => {
      var {
        Complex: _Complex,
        typed
      } = _ref;
      // Stirling series is non-convergent, we need to use the recurrence `lgamma(z) = lgamma(z+1) - log z` to get
      // sufficient accuracy.
      //
      // These two values are copied from Scipy implementation:
      // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L37
      var SMALL_RE = 7;
      var SMALL_IM = 7;
      /**
       * The coefficients are B[2*n]/(2*n*(2*n - 1)) where B[2*n] is the (2*n)th Bernoulli number. See (1.1) in [1].
       *
       * If you cannot access the paper, can also get these values from the formula in [2].
       *
       *    1 /     12 = 0.00833333333333333333333333333333
       *    1 /    360 = 0.00277777777777777777777777777778
       * ...
       * 3617 / 133400 = 0.02955065359477124183006535947712
       */

      var coeffs = [-2.955065359477124183e-2, 6.4102564102564102564e-3, -1.9175269175269175269e-3, 8.4175084175084175084e-4, -5.952380952380952381e-4, 7.9365079365079365079e-4, -2.7777777777777777778e-3, 8.3333333333333333333e-2];
      /**
       * Logarithm of the gamma function for real, positive numbers and complex numbers,
       * using Lanczos approximation for numbers and Stirling series for complex numbers.
       *
       * Syntax:
       *
       *    math.lgamma(n)
       *
       * Examples:
       *
       *    math.lgamma(5)       // returns 3.178053830347945
       *    math.lgamma(0)       // returns Infinity
       *    math.lgamma(-0.5)    // returns NaN
       *    math.lgamma(math.i)  // returns -0.6509231993018536 - 1.8724366472624294i
       *
       * See also:
       *
       *    gamma
       *
       * @param {number | Complex} n   A real or complex number
       * @return {number | Complex}    The log gamma of `n`
       */

      return typed(name$E, {
        number: lgammaNumber,
        Complex: function Complex(n) {
          var TWOPI = 6.2831853071795864769252842; // 2*pi

          var LOGPI = 1.1447298858494001741434262; // log(pi)

          var REFLECTION = 0.1;

          if (n.isNaN()) {
            return new _Complex(NaN, NaN);
          } else if (n.im === 0) {
            return new _Complex(lgammaNumber(n.re), 0);
          } else if (n.re >= SMALL_RE || Math.abs(n.im) >= SMALL_IM) {
            return lgammaStirling(n);
          } else if (n.re <= REFLECTION) {
            // Reflection formula. see Proposition 3.1 in [1]
            var tmp = copysign(TWOPI, n.im) * Math.floor(0.5 * n.re + 0.25); // TODO: `complex.js sin` doesn't have extremely high precision, so this value `a` may lose a little precision,
            // causing the computation results to be less accurate than the lgamma of real numbers

            var a = n.mul(Math.PI).sin().log();
            var b = this(new _Complex(1 - n.re, -n.im));
            return new _Complex(LOGPI, tmp).sub(a).sub(b);
          } else if (n.im >= 0) {
            return lgammaRecurrence(n);
          } else {
            return lgammaRecurrence(n.conjugate()).conjugate();
          }
        },
        BigNumber: function BigNumber() {
          throw new Error("mathjs doesn't yet provide an implementation of the algorithm lgamma for BigNumber");
        }
      });

      function lgammaStirling(z) {
        // formula ref in [2]
        // computation ref:
        // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L101
        // left part
        // x (log(x) - 1) + 1/2 (log(2PI) - log(x))
        // => (x - 0.5) * log(x) - x + log(2PI) / 2
        var leftPart = z.sub(0.5).mul(z.log()).sub(z).add(lnSqrt2PI); // right part

        var rz = new _Complex(1, 0).div(z);
        var rzz = rz.div(z);
        var a = coeffs[0];
        var b = coeffs[1];
        var r = 2 * rzz.re;
        var s = rzz.re * rzz.re + rzz.im * rzz.im;

        for (var i = 2; i < 8; i++) {
          var tmp = b;
          b = -s * a + coeffs[i];
          a = r * a + tmp;
        }

        var rightPart = rz.mul(rzz.mul(a).add(b)); // plus left and right

        return leftPart.add(rightPart);
      }

      function lgammaRecurrence(z) {
        // computation ref:
        // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L78
        var signflips = 0;
        var sb = 0;
        var shiftprod = z;
        z = z.add(1);

        while (z.re <= SMALL_RE) {
          shiftprod = shiftprod.mul(z);
          var nsb = shiftprod.im < 0 ? 1 : 0;
          if (nsb !== 0 && sb === 0) signflips++;
          sb = nsb;
          z = z.add(1);
        }

        return lgammaStirling(z).sub(shiftprod.log()).sub(new _Complex(0, signflips * 2 * Math.PI * 1));
      }
    });

    var name$D = 'factorial';
    var dependencies$D = ['typed', 'gamma'];
    var createFactorial = /* #__PURE__ */factory(name$D, dependencies$D, _ref => {
      var {
        typed,
        gamma
      } = _ref;

      /**
       * Compute the factorial of a value
       *
       * Factorial only supports an integer value as argument.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.factorial(n)
       *
       * Examples:
       *
       *    math.factorial(5)    // returns 120
       *    math.factorial(3)    // returns 6
       *
       * See also:
       *
       *    combinations, combinationsWithRep, gamma, permutations
       *
       * @param {number | BigNumber | Array | Matrix} n   An integer number
       * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
       */
      return typed(name$D, {
        number: function number(n) {
          if (n < 0) {
            throw new Error('Value must be non-negative');
          }

          return gamma(n + 1);
        },
        BigNumber: function BigNumber(n) {
          if (n.isNegative()) {
            throw new Error('Value must be non-negative');
          }

          return gamma(n.plus(1));
        },
        'Array | Matrix': function ArrayMatrix(n) {
          return deepMap(n, this);
        }
      });
    });

    var name$C = 'kldivergence';
    var dependencies$C = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'dotDivide', 'log', 'isNumeric'];
    var createKldivergence = /* #__PURE__ */factory(name$C, dependencies$C, _ref => {
      var {
        typed,
        matrix,
        divide,
        sum,
        multiply,
        dotDivide,
        log,
        isNumeric
      } = _ref;

      /**
         * Calculate the Kullback-Leibler (KL) divergence  between two distributions
         *
         * Syntax:
         *
         *     math.kldivergence(x, y)
         *
         * Examples:
         *
         *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153
         *
         *
         * @param  {Array | Matrix} q    First vector
         * @param  {Array | Matrix} p    Second vector
         * @return {number}              Returns distance between q and p
         */
      return typed(name$C, {
        'Array, Array': function ArrayArray(q, p) {
          return _kldiv(matrix(q), matrix(p));
        },
        'Matrix, Array': function MatrixArray(q, p) {
          return _kldiv(q, matrix(p));
        },
        'Array, Matrix': function ArrayMatrix(q, p) {
          return _kldiv(matrix(q), p);
        },
        'Matrix, Matrix': function MatrixMatrix(q, p) {
          return _kldiv(q, p);
        }
      });

      function _kldiv(q, p) {
        var plength = p.size().length;
        var qlength = q.size().length;

        if (plength > 1) {
          throw new Error('first object must be one dimensional');
        }

        if (qlength > 1) {
          throw new Error('second object must be one dimensional');
        }

        if (plength !== qlength) {
          throw new Error('Length of two vectors must be equal');
        } // Before calculation, apply normalization


        var sumq = sum(q);

        if (sumq === 0) {
          throw new Error('Sum of elements in first object must be non zero');
        }

        var sump = sum(p);

        if (sump === 0) {
          throw new Error('Sum of elements in second object must be non zero');
        }

        var qnorm = divide(q, sum(q));
        var pnorm = divide(p, sum(p));
        var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));

        if (isNumeric(result)) {
          return result;
        } else {
          return Number.NaN;
        }
      }
    });

    var name$B = 'multinomial';
    var dependencies$B = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];
    var createMultinomial = /* #__PURE__ */factory(name$B, dependencies$B, _ref => {
      var {
        typed,
        add,
        divide,
        multiply,
        factorial,
        isInteger,
        isPositive
      } = _ref;

      /**
       * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
       *
       * multinomial takes one array of integers as an argument.
       * The following condition must be enforced: every ai <= 0
       *
       * Syntax:
       *
       *     math.multinomial(a) // a is an array type
       *
       * Examples:
       *
       *    math.multinomial([1,2,1]) // returns 12
       *
       * See also:
       *
       *    combinations, factorial
       *
       * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
       * @return {Number | BigNumber}         Multinomial coefficient.
       */
      return typed(name$B, {
        'Array | Matrix': function ArrayMatrix(a) {
          var sum = 0;
          var denom = 1;
          deepForEach(a, function (ai) {
            if (!isInteger(ai) || !isPositive(ai)) {
              throw new TypeError('Positive integer value expected in function multinomial');
            }

            sum = add(sum, ai);
            denom = multiply(denom, factorial(ai));
          });
          return divide(factorial(sum), denom);
        }
      });
    });

    var name$A = 'permutations';
    var dependencies$A = ['typed', 'factorial'];
    var createPermutations = /* #__PURE__ */factory(name$A, dependencies$A, _ref => {
      var {
        typed,
        factorial
      } = _ref;

      /**
       * Compute the number of ways of obtaining an ordered subset of `k` elements
       * from a set of `n` elements.
       *
       * Permutations only takes integer arguments.
       * The following condition must be enforced: k <= n.
       *
       * Syntax:
       *
       *     math.permutations(n)
       *     math.permutations(n, k)
       *
       * Examples:
       *
       *    math.permutations(5)     // 120
       *    math.permutations(5, 3)  // 60
       *
       * See also:
       *
       *    combinations, combinationsWithRep, factorial
       *
       * @param {number | BigNumber} n   The number of objects in total
       * @param {number | BigNumber} [k] The number of objects in the subset
       * @return {number | BigNumber}    The number of permutations
       */
      return typed(name$A, {
        'number | BigNumber': factorial,
        'number, number': function numberNumber(n, k) {
          if (!isInteger$1(n) || n < 0) {
            throw new TypeError('Positive integer value expected in function permutations');
          }

          if (!isInteger$1(k) || k < 0) {
            throw new TypeError('Positive integer value expected in function permutations');
          }

          if (k > n) {
            throw new TypeError('second argument k must be less than or equal to first argument n');
          } // Permute n objects, k at a time


          return product(n - k + 1, n);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
          var result, i;

          if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
            throw new TypeError('Positive integer value expected in function permutations');
          }

          if (k.gt(n)) {
            throw new TypeError('second argument k must be less than or equal to first argument n');
          }

          var one = n.mul(0).add(1);
          result = one;

          for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
            result = result.times(i);
          }

          return result;
        } // TODO: implement support for collection in permutations

      });
    });
    /**
     * Test whether BigNumber n is a positive integer
     * @param {BigNumber} n
     * @returns {boolean} isPositiveInteger
     */

    function isPositiveInteger(n) {
      return n.isInteger() && n.gte(0);
    }

    var alea = createCommonjsModule(function (module) {
    // A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
    // http://baagoe.com/en/RandomMusings/javascript/
    // https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
    // Original work is under MIT license -

    // Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal
    // in the Software without restriction, including without limitation the rights
    // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    // copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    // THE SOFTWARE.



    (function(global, module, define) {

    function Alea(seed) {
      var me = this, mash = Mash();

      me.next = function() {
        var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
        me.s0 = me.s1;
        me.s1 = me.s2;
        return me.s2 = t - (me.c = t | 0);
      };

      // Apply the seeding algorithm from Baagoe.
      me.c = 1;
      me.s0 = mash(' ');
      me.s1 = mash(' ');
      me.s2 = mash(' ');
      me.s0 -= mash(seed);
      if (me.s0 < 0) { me.s0 += 1; }
      me.s1 -= mash(seed);
      if (me.s1 < 0) { me.s1 += 1; }
      me.s2 -= mash(seed);
      if (me.s2 < 0) { me.s2 += 1; }
      mash = null;
    }

    function copy(f, t) {
      t.c = f.c;
      t.s0 = f.s0;
      t.s1 = f.s1;
      t.s2 = f.s2;
      return t;
    }

    function impl(seed, opts) {
      var xg = new Alea(seed),
          state = opts && opts.state,
          prng = xg.next;
      prng.int32 = function() { return (xg.next() * 0x100000000) | 0; };
      prng.double = function() {
        return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
      };
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    function Mash() {
      var n = 0xefc8249d;

      var mash = function(data) {
        data = String(data);
        for (var i = 0; i < data.length; i++) {
          n += data.charCodeAt(i);
          var h = 0.02519603282416938 * n;
          n = h >>> 0;
          h -= n;
          h *= n;
          n = h >>> 0;
          h -= n;
          n += h * 0x100000000; // 2^32
        }
        return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
      };

      return mash;
    }


    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.alea = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    });

    var xor128 = createCommonjsModule(function (module) {
    // A Javascript implementaion of the "xor128" prng algorithm by
    // George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this, strseed = '';

      me.x = 0;
      me.y = 0;
      me.z = 0;
      me.w = 0;

      // Set up generator function.
      me.next = function() {
        var t = me.x ^ (me.x << 11);
        me.x = me.y;
        me.y = me.z;
        me.z = me.w;
        return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
      };

      if (seed === (seed | 0)) {
        // Integer seed.
        me.x = seed;
      } else {
        // String seed.
        strseed += seed;
      }

      // Mix in string seed, then discard an initial batch of 64 values.
      for (var k = 0; k < strseed.length + 64; k++) {
        me.x ^= strseed.charCodeAt(k) | 0;
        me.next();
      }
    }

    function copy(f, t) {
      t.x = f.x;
      t.y = f.y;
      t.z = f.z;
      t.w = f.w;
      return t;
    }

    function impl(seed, opts) {
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xor128 = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    });

    var xorwow = createCommonjsModule(function (module) {
    // A Javascript implementaion of the "xorwow" prng algorithm by
    // George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this, strseed = '';

      // Set up generator function.
      me.next = function() {
        var t = (me.x ^ (me.x >>> 2));
        me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
        return (me.d = (me.d + 362437 | 0)) +
           (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
      };

      me.x = 0;
      me.y = 0;
      me.z = 0;
      me.w = 0;
      me.v = 0;

      if (seed === (seed | 0)) {
        // Integer seed.
        me.x = seed;
      } else {
        // String seed.
        strseed += seed;
      }

      // Mix in string seed, then discard an initial batch of 64 values.
      for (var k = 0; k < strseed.length + 64; k++) {
        me.x ^= strseed.charCodeAt(k) | 0;
        if (k == strseed.length) {
          me.d = me.x << 10 ^ me.x >>> 4;
        }
        me.next();
      }
    }

    function copy(f, t) {
      t.x = f.x;
      t.y = f.y;
      t.z = f.z;
      t.w = f.w;
      t.v = f.v;
      t.d = f.d;
      return t;
    }

    function impl(seed, opts) {
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xorwow = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    });

    var xorshift7 = createCommonjsModule(function (module) {
    // A Javascript implementaion of the "xorshift7" algorithm by
    // François Panneton and Pierre L'ecuyer:
    // "On the Xorgshift Random Number Generators"
    // http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this;

      // Set up generator function.
      me.next = function() {
        // Update xor generator.
        var X = me.x, i = me.i, t, v;
        t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
        t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
        t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
        t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
        t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
        X[i] = v;
        me.i = (i + 1) & 7;
        return v;
      };

      function init(me, seed) {
        var j, X = [];

        if (seed === (seed | 0)) {
          // Seed state array using a 32-bit integer.
          X[0] = seed;
        } else {
          // Seed state using a string.
          seed = '' + seed;
          for (j = 0; j < seed.length; ++j) {
            X[j & 7] = (X[j & 7] << 15) ^
                (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
          }
        }
        // Enforce an array length of 8, not all zeroes.
        while (X.length < 8) X.push(0);
        for (j = 0; j < 8 && X[j] === 0; ++j);
        if (j == 8) X[7] = -1;

        me.x = X;
        me.i = 0;

        // Discard an initial 256 values.
        for (j = 256; j > 0; --j) {
          me.next();
        }
      }

      init(me, seed);
    }

    function copy(f, t) {
      t.x = f.x.slice();
      t.i = f.i;
      return t;
    }

    function impl(seed, opts) {
      if (seed == null) seed = +(new Date);
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (state.x) copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xorshift7 = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    });

    var xor4096 = createCommonjsModule(function (module) {
    // A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
    //
    // This fast non-cryptographic random number generator is designed for
    // use in Monte-Carlo algorithms. It combines a long-period xorshift
    // generator with a Weyl generator, and it passes all common batteries
    // of stasticial tests for randomness while consuming only a few nanoseconds
    // for each prng generated.  For background on the generator, see Brent's
    // paper: "Some long-period random number generators using shifts and xors."
    // http://arxiv.org/pdf/1004.3115v1.pdf
    //
    // Usage:
    //
    // var xor4096 = require('xor4096');
    // random = xor4096(1);                        // Seed with int32 or string.
    // assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
    // assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
    //
    // For nonzero numeric keys, this impelementation provides a sequence
    // identical to that by Brent's xorgens 3 implementaion in C.  This
    // implementation also provides for initalizing the generator with
    // string seeds, or for saving and restoring the state of the generator.
    //
    // On Chrome, this prng benchmarks about 2.1 times slower than
    // Javascript's built-in Math.random().

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this;

      // Set up generator function.
      me.next = function() {
        var w = me.w,
            X = me.X, i = me.i, t, v;
        // Update Weyl generator.
        me.w = w = (w + 0x61c88647) | 0;
        // Update xor generator.
        v = X[(i + 34) & 127];
        t = X[i = ((i + 1) & 127)];
        v ^= v << 13;
        t ^= t << 17;
        v ^= v >>> 15;
        t ^= t >>> 12;
        // Update Xor generator array state.
        v = X[i] = v ^ t;
        me.i = i;
        // Result is the combination.
        return (v + (w ^ (w >>> 16))) | 0;
      };

      function init(me, seed) {
        var t, v, i, j, w, X = [], limit = 128;
        if (seed === (seed | 0)) {
          // Numeric seeds initialize v, which is used to generates X.
          v = seed;
          seed = null;
        } else {
          // String seeds are mixed into v and X one character at a time.
          seed = seed + '\0';
          v = 0;
          limit = Math.max(limit, seed.length);
        }
        // Initialize circular array and weyl value.
        for (i = 0, j = -32; j < limit; ++j) {
          // Put the unicode characters into the array, and shuffle them.
          if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
          // After 32 shuffles, take v as the starting w value.
          if (j === 0) w = v;
          v ^= v << 10;
          v ^= v >>> 15;
          v ^= v << 4;
          v ^= v >>> 13;
          if (j >= 0) {
            w = (w + 0x61c88647) | 0;     // Weyl.
            t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
            i = (0 == t) ? i + 1 : 0;     // Count zeroes.
          }
        }
        // We have detected all zeroes; make the key nonzero.
        if (i >= 128) {
          X[(seed && seed.length || 0) & 127] = -1;
        }
        // Run the generator 512 times to further mix the state before using it.
        // Factoring this as a function slows the main generator, so it is just
        // unrolled here.  The weyl generator is not advanced while warming up.
        i = 127;
        for (j = 4 * 128; j > 0; --j) {
          v = X[(i + 34) & 127];
          t = X[i = ((i + 1) & 127)];
          v ^= v << 13;
          t ^= t << 17;
          v ^= v >>> 15;
          t ^= t >>> 12;
          X[i] = v ^ t;
        }
        // Storing state as object members is faster than using closure variables.
        me.w = w;
        me.X = X;
        me.i = i;
      }

      init(me, seed);
    }

    function copy(f, t) {
      t.i = f.i;
      t.w = f.w;
      t.X = f.X.slice();
      return t;
    }
    function impl(seed, opts) {
      if (seed == null) seed = +(new Date);
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (state.X) copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xor4096 = impl;
    }

    })(
      commonjsGlobal,                                     // window object or global
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    });

    var tychei = createCommonjsModule(function (module) {
    // A Javascript implementaion of the "Tyche-i" prng algorithm by
    // Samuel Neves and Filipe Araujo.
    // See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this, strseed = '';

      // Set up generator function.
      me.next = function() {
        var b = me.b, c = me.c, d = me.d, a = me.a;
        b = (b << 25) ^ (b >>> 7) ^ c;
        c = (c - d) | 0;
        d = (d << 24) ^ (d >>> 8) ^ a;
        a = (a - b) | 0;
        me.b = b = (b << 20) ^ (b >>> 12) ^ c;
        me.c = c = (c - d) | 0;
        me.d = (d << 16) ^ (c >>> 16) ^ a;
        return me.a = (a - b) | 0;
      };

      /* The following is non-inverted tyche, which has better internal
       * bit diffusion, but which is about 25% slower than tyche-i in JS.
      me.next = function() {
        var a = me.a, b = me.b, c = me.c, d = me.d;
        a = (me.a + me.b | 0) >>> 0;
        d = me.d ^ a; d = d << 16 ^ d >>> 16;
        c = me.c + d | 0;
        b = me.b ^ c; b = b << 12 ^ d >>> 20;
        me.a = a = a + b | 0;
        d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
        me.c = c = c + d | 0;
        b = b ^ c;
        return me.b = (b << 7 ^ b >>> 25);
      }
      */

      me.a = 0;
      me.b = 0;
      me.c = 2654435769 | 0;
      me.d = 1367130551;

      if (seed === Math.floor(seed)) {
        // Integer seed.
        me.a = (seed / 0x100000000) | 0;
        me.b = seed | 0;
      } else {
        // String seed.
        strseed += seed;
      }

      // Mix in string seed, then discard an initial batch of 64 values.
      for (var k = 0; k < strseed.length + 20; k++) {
        me.b ^= strseed.charCodeAt(k) | 0;
        me.next();
      }
    }

    function copy(f, t) {
      t.a = f.a;
      t.b = f.b;
      t.c = f.c;
      t.d = f.d;
      return t;
    }
    function impl(seed, opts) {
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.tychei = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    });

    var _nodeResolve_empty = {};

    var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _nodeResolve_empty
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

    /*
    Copyright 2019 David Bau.

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    */

    var seedrandom$1 = createCommonjsModule(function (module) {
    (function (global, pool, math) {
    //
    // The following constants are related to IEEE 754 limits.
    //

    var width = 256,        // each RC4 output is 0 <= x < 256
        chunks = 6,         // at least six RC4 outputs for each double
        digits = 52,        // there are 52 significant digits in a double
        rngname = 'random', // rngname: name for Math.random and Math.seedrandom
        startdenom = math.pow(width, chunks),
        significance = math.pow(2, digits),
        overflow = significance * 2,
        mask = width - 1,
        nodecrypto;         // node.js crypto module, initialized at the bottom.

    //
    // seedrandom()
    // This is the seedrandom function described above.
    //
    function seedrandom(seed, options, callback) {
      var key = [];
      options = (options == true) ? { entropy: true } : (options || {});

      // Flatten the seed string or build one from local entropy if needed.
      var shortseed = mixkey(flatten(
        options.entropy ? [seed, tostring(pool)] :
        (seed == null) ? autoseed() : seed, 3), key);

      // Use the seed to initialize an ARC4 generator.
      var arc4 = new ARC4(key);

      // This function returns a random double in [0, 1) that contains
      // randomness in every bit of the mantissa of the IEEE 754 value.
      var prng = function() {
        var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
            d = startdenom,                 //   and denominator d = 2 ^ 48.
            x = 0;                          //   and no 'extra last byte'.
        while (n < significance) {          // Fill up all significant digits by
          n = (n + x) * width;              //   shifting numerator and
          d *= width;                       //   denominator and generating a
          x = arc4.g(1);                    //   new least-significant-byte.
        }
        while (n >= overflow) {             // To avoid rounding up, before adding
          n /= 2;                           //   last byte, shift everything
          d /= 2;                           //   right using integer math until
          x >>>= 1;                         //   we have exactly the desired bits.
        }
        return (n + x) / d;                 // Form the number within [0, 1).
      };

      prng.int32 = function() { return arc4.g(4) | 0; };
      prng.quick = function() { return arc4.g(4) / 0x100000000; };
      prng.double = prng;

      // Mix the randomness into accumulated entropy.
      mixkey(tostring(arc4.S), pool);

      // Calling convention: what to return as a function of prng, seed, is_math.
      return (options.pass || callback ||
          function(prng, seed, is_math_call, state) {
            if (state) {
              // Load the arc4 state from the given state if it has an S array.
              if (state.S) { copy(state, arc4); }
              // Only provide the .state method if requested via options.state.
              prng.state = function() { return copy(arc4, {}); };
            }

            // If called as a method of Math (Math.seedrandom()), mutate
            // Math.random because that is how seedrandom.js has worked since v1.0.
            if (is_math_call) { math[rngname] = prng; return seed; }

            // Otherwise, it is a newer calling convention, so return the
            // prng directly.
            else return prng;
          })(
      prng,
      shortseed,
      'global' in options ? options.global : (this == math),
      options.state);
    }

    //
    // ARC4
    //
    // An ARC4 implementation.  The constructor takes a key in the form of
    // an array of at most (width) integers that should be 0 <= x < (width).
    //
    // The g(count) method returns a pseudorandom integer that concatenates
    // the next (count) outputs from ARC4.  Its return value is a number x
    // that is in the range 0 <= x < (width ^ count).
    //
    function ARC4(key) {
      var t, keylen = key.length,
          me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

      // The empty key [] is treated as [0].
      if (!keylen) { key = [keylen++]; }

      // Set up S using the standard key scheduling algorithm.
      while (i < width) {
        s[i] = i++;
      }
      for (i = 0; i < width; i++) {
        s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
        s[j] = t;
      }

      // The "g" method returns the next (count) outputs as one number.
      (me.g = function(count) {
        // Using instance members instead of closure state nearly doubles speed.
        var t, r = 0,
            i = me.i, j = me.j, s = me.S;
        while (count--) {
          t = s[i = mask & (i + 1)];
          r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
        }
        me.i = i; me.j = j;
        return r;
        // For robust unpredictability, the function call below automatically
        // discards an initial batch of values.  This is called RC4-drop[256].
        // See http://google.com/search?q=rsa+fluhrer+response&btnI
      })(width);
    }

    //
    // copy()
    // Copies internal state of ARC4 to or from a plain object.
    //
    function copy(f, t) {
      t.i = f.i;
      t.j = f.j;
      t.S = f.S.slice();
      return t;
    }
    //
    // flatten()
    // Converts an object tree to nested arrays of strings.
    //
    function flatten(obj, depth) {
      var result = [], typ = (typeof obj), prop;
      if (depth && typ == 'object') {
        for (prop in obj) {
          try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
        }
      }
      return (result.length ? result : typ == 'string' ? obj : obj + '\0');
    }

    //
    // mixkey()
    // Mixes a string seed into a key that is an array of integers, and
    // returns a shortened string seed that is equivalent to the result key.
    //
    function mixkey(seed, key) {
      var stringseed = seed + '', smear, j = 0;
      while (j < stringseed.length) {
        key[mask & j] =
          mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
      }
      return tostring(key);
    }

    //
    // autoseed()
    // Returns an object for autoseeding, using window.crypto and Node crypto
    // module if available.
    //
    function autoseed() {
      try {
        var out;
        if (nodecrypto && (out = nodecrypto.randomBytes)) {
          // The use of 'out' to remember randomBytes makes tight minified code.
          out = out(width);
        } else {
          out = new Uint8Array(width);
          (global.crypto || global.msCrypto).getRandomValues(out);
        }
        return tostring(out);
      } catch (e) {
        var browser = global.navigator,
            plugins = browser && browser.plugins;
        return [+new Date, global, plugins, global.screen, tostring(pool)];
      }
    }

    //
    // tostring()
    // Converts an array of charcodes to a string
    //
    function tostring(a) {
      return String.fromCharCode.apply(0, a);
    }

    //
    // When seedrandom.js is loaded, we immediately mix a few bits
    // from the built-in RNG into the entropy pool.  Because we do
    // not want to interfere with deterministic PRNG state later,
    // seedrandom will not call math.random on its own again after
    // initialization.
    //
    mixkey(math.random(), pool);

    //
    // Nodejs and AMD support: export the implementation as a module using
    // either convention.
    //
    if (module.exports) {
      module.exports = seedrandom;
      // When in node.js, try using crypto package for autoseeding.
      try {
        nodecrypto = require$$0;
      } catch (ex) {}
    } else {
      // When included as a plain script, set up Math.seedrandom global.
      math['seed' + rngname] = seedrandom;
    }


    // End anonymous scope, and pass initial values.
    })(
      // global: `self` in browsers (including strict mode and web workers),
      // otherwise `this` in Node and other environments
      (typeof self !== 'undefined') ? self : commonjsGlobal,
      [],     // pool: entropy pool starts empty
      Math    // math: package containing random, pow, and seedrandom
    );
    });

    // A library of seedable RNGs implemented in Javascript.
    //
    // Usage:
    //
    // var seedrandom = require('seedrandom');
    // var random = seedrandom(1); // or any seed.
    // var x = random();       // 0 <= x < 1.  Every bit is random.
    // var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

    // alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
    // Period: ~2^116
    // Reported to pass all BigCrush tests.


    // xor128, a pure xor-shift generator by George Marsaglia.
    // Period: 2^128-1.
    // Reported to fail: MatrixRank and LinearComp.


    // xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
    // Period: 2^192-2^32
    // Reported to fail: CollisionOver, SimpPoker, and LinearComp.


    // xorshift7, by François Panneton and Pierre L'ecuyer, takes
    // a different approach: it adds robustness by allowing more shifts
    // than Marsaglia's original three.  It is a 7-shift generator
    // with 256 bits, that passes BigCrush with no systmatic failures.
    // Period 2^256-1.
    // No systematic BigCrush failures reported.


    // xor4096, by Richard Brent, is a 4096-bit xor-shift with a
    // very long period that also adds a Weyl generator. It also passes
    // BigCrush with no systematic failures.  Its long period may
    // be useful if you have many generators and need to avoid
    // collisions.
    // Period: 2^4128-2^32.
    // No systematic BigCrush failures reported.


    // Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
    // number generator derived from ChaCha, a modern stream cipher.
    // https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
    // Period: ~2^127
    // No systematic BigCrush failures reported.


    // The original ARC4-based prng included in this library.
    // Period: ~2^1600


    seedrandom$1.alea = alea;
    seedrandom$1.xor128 = xor128;
    seedrandom$1.xorwow = xorwow;
    seedrandom$1.xorshift7 = xorshift7;
    seedrandom$1.xor4096 = xor4096;
    seedrandom$1.tychei = tychei;

    var seedrandom = seedrandom$1;

    var singletonRandom = /* #__PURE__ */seedrandom(Date.now());
    function createRng(randomSeed) {
      var random; // create a new random generator with given seed

      function setSeed(seed) {
        random = seed === null ? singletonRandom : seedrandom(String(seed));
      } // initialize a seeded pseudo random number generator with config's random seed


      setSeed(randomSeed); // wrapper function so the rng can be updated via generator

      function rng() {
        return random();
      }

      return rng;
    }

    var name$z = 'pickRandom';
    var dependencies$z = ['typed', 'config', '?on'];
    var createPickRandom = /* #__PURE__ */factory(name$z, dependencies$z, _ref => {
      var {
        typed,
        config,
        on
      } = _ref;
      // seeded pseudo random number generator
      var rng = createRng(config.randomSeed);

      if (on) {
        on('config', function (curr, prev) {
          if (curr.randomSeed !== prev.randomSeed) {
            rng = createRng(curr.randomSeed);
          }
        });
      }
      /**
       * Random pick one or more values from a one dimensional array.
       * Array elements are picked using a random function with uniform or weighted distribution.
       *
       * Syntax:
       *
       *     math.pickRandom(array)
       *     math.pickRandom(array, number)
       *     math.pickRandom(array, weights)
       *     math.pickRandom(array, number, weights)
       *     math.pickRandom(array, weights, number)
       *     math.pickRandom(array, { weights, number, elementWise })
       *
       * Examples:
       *
       *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array
       *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array
       *     math.pickRandom([3, 6, 12, 2], { number: 2 })   // returns an array of two of the values in the array
       *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution
       *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution
       *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution
       *
       *     math.pickRandom([{x: 1.0, y: 2.0}, {x: 1.1, y: 2.0}], { elementWise: false })
       *         // returns one of the items in the array
       *
       * See also:
       *
       *     random, randomInt
       *
       * @param {Array | Matrix} array     A one dimensional array
       * @param {Int} number               An int or float
       * @param {Array | Matrix} weights   An array of ints or floats
       * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.
       *                                   Returns an array with the configured number of elements when number is > 1.
       */


      return typed(name$z, {
        'Array | Matrix': function ArrayMatrix(possibles) {
          return _pickRandom(possibles, {});
        },
        'Array | Matrix, Object': function ArrayMatrixObject(possibles, options) {
          return _pickRandom(possibles, options);
        },
        'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {
          return _pickRandom(possibles, {
            number
          });
        },
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(possibles, weights) {
          return _pickRandom(possibles, {
            weights
          });
        },
        'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {
          return _pickRandom(possibles, {
            number,
            weights
          });
        },
        'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {
          return _pickRandom(possibles, {
            number,
            weights
          });
        }
      });
      /**
       * @param {Array | Matrix} possibles
       * @param {{
       *   number?: number,
       *   weights?: Array | Matrix,
       *   elementWise: boolean
       * }} options
       * @returns {number | Array}
       * @private
       */

      function _pickRandom(possibles, _ref2) {
        var {
          number,
          weights,
          elementWise = true
        } = _ref2;
        var single = typeof number === 'undefined';

        if (single) {
          number = 1;
        }

        var createMatrix = isMatrix(possibles) ? possibles.create : isMatrix(weights) ? weights.create : null;
        possibles = possibles.valueOf(); // get Array

        if (weights) {
          weights = weights.valueOf(); // get Array
        }

        if (elementWise === true) {
          possibles = flatten$2(possibles);
          weights = flatten$2(weights);
        }

        var totalWeights = 0;

        if (typeof weights !== 'undefined') {
          if (weights.length !== possibles.length) {
            throw new Error('Weights must have the same length as possibles');
          }

          for (var i = 0, len = weights.length; i < len; i++) {
            if (!isNumber(weights[i]) || weights[i] < 0) {
              throw new Error('Weights must be an array of positive numbers');
            }

            totalWeights += weights[i];
          }
        }

        var length = possibles.length;
        var result = [];
        var pick;

        while (result.length < number) {
          if (typeof weights === 'undefined') {
            pick = possibles[Math.floor(rng() * length)];
          } else {
            var randKey = rng() * totalWeights;

            for (var _i = 0, _len = possibles.length; _i < _len; _i++) {
              randKey -= weights[_i];

              if (randKey < 0) {
                pick = possibles[_i];
                break;
              }
            }
          }

          result.push(pick);
        }

        return single ? result[0] : createMatrix ? createMatrix(result) : result;
      }
    });

    /**
     * This is a util function for generating a random matrix recursively.
     * @param {number[]} size
     * @param {function} random
     * @returns {Array}
     */
    function randomMatrix(size, random) {
      var data = [];
      size = size.slice(0);

      if (size.length > 1) {
        for (var i = 0, length = size.shift(); i < length; i++) {
          data.push(randomMatrix(size, random));
        }
      } else {
        for (var _i = 0, _length = size.shift(); _i < _length; _i++) {
          data.push(random());
        }
      }

      return data;
    }

    var name$y = 'random';
    var dependencies$y = ['typed', 'config', '?on'];
    var createRandom = /* #__PURE__ */factory(name$y, dependencies$y, _ref => {
      var {
        typed,
        config,
        on
      } = _ref;
      // seeded pseudo random number generator
      var rng = createRng(config.randomSeed);

      if (on) {
        on('config', function (curr, prev) {
          if (curr.randomSeed !== prev.randomSeed) {
            rng = createRng(curr.randomSeed);
          }
        });
      }
      /**
       * Return a random number larger or equal to `min` and smaller than `max`
       * using a uniform distribution.
       *
       * Syntax:
       *
       *     math.random()                // generate a random number between 0 and 1
       *     math.random(max)             // generate a random number between 0 and max
       *     math.random(min, max)        // generate a random number between min and max
       *     math.random(size)            // generate a matrix with random numbers between 0 and 1
       *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
       *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
       *
       * Examples:
       *
       *     math.random()       // returns a random number between 0 and 1
       *     math.random(100)    // returns a random number between 0 and 100
       *     math.random(30, 40) // returns a random number between 30 and 40
       *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1
       *
       * See also:
       *
       *     randomInt, pickRandom
       *
       * @param {Array | Matrix} [size] If provided, an array or matrix with given
       *                                size and filled with random values is returned
       * @param {number} [min]  Minimum boundary for the random value, included
       * @param {number} [max]  Maximum boundary for the random value, excluded
       * @return {number | Array | Matrix} A random number
       */


      return typed(name$y, {
        '': () => _random(0, 1),
        number: max => _random(0, max),
        'number, number': (min, max) => _random(min, max),
        'Array | Matrix': size => _randomMatrix(size, 0, 1),
        'Array | Matrix, number': (size, max) => _randomMatrix(size, 0, max),
        'Array | Matrix, number, number': (size, min, max) => _randomMatrix(size, min, max)
      });

      function _randomMatrix(size, min, max) {
        var res = randomMatrix(size.valueOf(), () => _random(min, max));
        return isMatrix(size) ? size.create(res) : res;
      }

      function _random(min, max) {
        return min + rng() * (max - min);
      }
    }); // number only implementation of random, no matrix support

    var name$x = 'randomInt';
    var dependencies$x = ['typed', 'config', '?on'];
    var createRandomInt = /* #__PURE__ */factory(name$x, dependencies$x, _ref => {
      var {
        typed,
        config,
        on
      } = _ref;
      // seeded pseudo random number generator
      var rng = createRng(config.randomSeed);

      if (on) {
        on('config', function (curr, prev) {
          if (curr.randomSeed !== prev.randomSeed) {
            rng = createRng(curr.randomSeed);
          }
        });
      }
      /**
       * Return a random integer number larger or equal to `min` and smaller than `max`
       * using a uniform distribution.
       *
       * Syntax:
       *
       *     math.randomInt()                // generate a random integer between 0 and 1
       *     math.randomInt(max)             // generate a random integer between 0 and max
       *     math.randomInt(min, max)        // generate a random integer between min and max
       *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
       *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
       *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
       *
       * Examples:
       *
       *     math.randomInt(100)    // returns a random integer between 0 and 100
       *     math.randomInt(30, 40) // returns a random integer between 30 and 40
       *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1
       *
       * See also:
       *
       *     random, pickRandom
       *
       * @param {Array | Matrix} [size] If provided, an array or matrix with given
       *                                size and filled with random values is returned
       * @param {number} [min]  Minimum boundary for the random value, included
       * @param {number} [max]  Maximum boundary for the random value, excluded
       * @return {number | Array | Matrix} A random integer value
       */


      return typed(name$x, {
        '': () => _randomInt(0, 1),
        number: max => _randomInt(0, max),
        'number, number': (min, max) => _randomInt(min, max),
        'Array | Matrix': size => _randomIntMatrix(size, 0, 1),
        'Array | Matrix, number': (size, max) => _randomIntMatrix(size, 0, max),
        'Array | Matrix, number, number': (size, min, max) => _randomIntMatrix(size, min, max)
      });

      function _randomIntMatrix(size, min, max) {
        var res = randomMatrix(size.valueOf(), () => _randomInt(min, max));
        return isMatrix(size) ? size.create(res) : res;
      }

      function _randomInt(min, max) {
        return Math.floor(min + rng() * (max - min));
      }
    });

    var name$w = 'stirlingS2';
    var dependencies$w = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'number', '?bignumber', 'larger'];
    var createStirlingS2 = /* #__PURE__ */factory(name$w, dependencies$w, _ref => {
      var {
        typed,
        addScalar,
        subtract,
        multiplyScalar,
        divideScalar,
        pow,
        factorial,
        combinations,
        isNegative,
        isInteger,
        number,
        bignumber,
        larger
      } = _ref;
      var smallCache = [];
      var bigCache = [];
      /**
       * The Stirling numbers of the second kind, counts the number of ways to partition
       * a set of n labelled objects into k nonempty unlabelled subsets.
       * stirlingS2 only takes integer arguments.
       * The following condition must be enforced: k <= n.
       *
       *  If n = k or k = 1 <= n, then s(n,k) = 1
       *  If k = 0 < n, then s(n,k) = 0
       *
       * Note that if either n or k is supplied as a BigNumber, the result will be
       * as well.
       *
       * Syntax:
       *
       *   math.stirlingS2(n, k)
       *
       * Examples:
       *
       *    math.stirlingS2(5, 3) //returns 25
       *
       * See also:
       *
       *    bellNumbers
       *
       * @param {Number | BigNumber} n    Total number of objects in the set
       * @param {Number | BigNumber} k    Number of objects in the subset
       * @return {Number | BigNumber}     S(n,k)
       */

      return typed(name$w, {
        'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
          if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
            throw new TypeError('Non-negative integer value expected in function stirlingS2');
          } else if (larger(k, n)) {
            throw new TypeError('k must be less than or equal to n in function stirlingS2');
          }

          var big = !(isNumber(n) && isNumber(k));
          var cache = big ? bigCache : smallCache;
          var make = big ? bignumber : number;
          var nn = number(n);
          var nk = number(k);
          /* See if we already have the value: */

          if (cache[nn] && cache[nn].length > nk) {
            return cache[nn][nk];
          }
          /* Fill the cache */


          for (var m = 0; m <= nn; ++m) {
            if (!cache[m]) {
              cache[m] = [m === 0 ? make(1) : make(0)];
            }

            if (m === 0) continue;
            var row = cache[m];
            var prev = cache[m - 1];

            for (var i = row.length; i <= m && i <= nk; ++i) {
              if (i === m) {
                row[i] = 1;
              } else {
                row[i] = addScalar(multiplyScalar(make(i), prev[i]), prev[i - 1]);
              }
            }
          }

          return cache[nn][nk];
        }
      });
    });

    var name$v = 'bellNumbers';
    var dependencies$v = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];
    var createBellNumbers = /* #__PURE__ */factory(name$v, dependencies$v, _ref => {
      var {
        typed,
        addScalar,
        isNegative,
        isInteger,
        stirlingS2
      } = _ref;

      /**
       * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
       * bellNumbers only takes integer arguments.
       * The following condition must be enforced: n >= 0
       *
       * Syntax:
       *
       *   math.bellNumbers(n)
       *
       * Examples:
       *
       *    math.bellNumbers(3) // returns 5
       *    math.bellNumbers(8) // returns 4140
       *
       * See also:
       *
       *    stirlingS2
       *
       * @param {Number | BigNumber} n    Total number of objects in the set
       * @return {Number | BigNumber}     B(n)
       */
      return typed(name$v, {
        'number | BigNumber': function numberBigNumber(n) {
          if (!isInteger(n) || isNegative(n)) {
            throw new TypeError('Non-negative integer value expected in function bellNumbers');
          } // Sum (k=0, n) S(n,k).


          var result = 0;

          for (var i = 0; i <= n; i++) {
            result = addScalar(result, stirlingS2(n, i));
          }

          return result;
        }
      });
    });

    var name$u = 'catalan';
    var dependencies$u = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];
    var createCatalan = /* #__PURE__ */factory(name$u, dependencies$u, _ref => {
      var {
        typed,
        addScalar,
        divideScalar,
        multiplyScalar,
        combinations,
        isNegative,
        isInteger
      } = _ref;

      /**
       * The Catalan Numbers enumerate combinatorial structures of many different types.
       * catalan only takes integer arguments.
       * The following condition must be enforced: n >= 0
       *
       * Syntax:
       *
       *   math.catalan(n)
       *
       * Examples:
       *
       *    math.catalan(3) // returns 5
       *    math.catalan(8) // returns 1430
       *
       * See also:
       *
       *    bellNumbers
       *
       * @param {Number | BigNumber} n    nth Catalan number
       * @return {Number | BigNumber}     Cn(n)
       */
      return typed(name$u, {
        'number | BigNumber': function numberBigNumber(n) {
          if (!isInteger(n) || isNegative(n)) {
            throw new TypeError('Non-negative integer value expected in function catalan');
          }

          return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));
        }
      });
    });

    var name$t = 'composition';
    var dependencies$t = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];
    var createComposition = /* #__PURE__ */factory(name$t, dependencies$t, _ref => {
      var {
        typed,
        addScalar,
        combinations,
        isPositive,
        isNegative,
        isInteger,
        larger
      } = _ref;

      /**
       * The composition counts of n into k parts.
       *
       * composition only takes integer arguments.
       * The following condition must be enforced: k <= n.
       *
       * Syntax:
       *
       *   math.composition(n, k)
       *
       * Examples:
       *
       *    math.composition(5, 3) // returns 6
       *
       * See also:
       *
       *    combinations
       *
       * @param {Number | BigNumber} n    Total number of objects in the set
       * @param {Number | BigNumber} k    Number of objects in the subset
       * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
       */
      return typed(name$t, {
        'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
          if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
            throw new TypeError('Positive integer value expected in function composition');
          } else if (larger(k, n)) {
            throw new TypeError('k must be less than or equal to n in function composition');
          }

          return combinations(addScalar(n, -1), addScalar(k, -1));
        }
      });
    });

    var name$s = 'leafCount';
    var dependencies$s = ['parse', 'typed'];
    var createLeafCount = /* #__PURE__ */factory(name$s, dependencies$s, _ref => {
      var {
        parse,
        typed
      } = _ref;

      // This does the real work, but we don't have to recurse through
      // a typed call if we separate it out
      function countLeaves(node) {
        var count = 0;
        node.forEach(n => {
          count += countLeaves(n);
        });
        return count || 1;
      }
      /**
       * Gives the number of "leaf nodes" in the parse tree of the given expression
       * A leaf node is one that has no subexpressions, essentially either a
       * symbol or a constant. Note that `5!` has just one leaf, the '5'; the
       * unary factorial operator does not add a leaf. On the other hand,
       * function symbols do add leaves, so `sin(x)/cos(x)` has four leaves.
       *
       * The `simplify()` function should generally not increase the `leafCount()`
       * of an expression, although currently there is no guarantee that it never
       * does so. In many cases, `simplify()` reduces the leaf count.
       *
       * Syntax:
       *
       *     leafCount(expr)
       *
       * Examples:
       *
       *     math.leafCount('x') // 1
       *     math.leafCount(math.parse('a*d-b*c')) // 4
       *     math.leafCount('[a,b;c,d][0,1]') // 6
       *
       * See also:
       *
       *     simplify
       *
       * @param {Node|string} expr    The expression to count the leaves of
       *
       * @return {number}  The number of leaves of `expr`
       *
       */


      return typed(name$s, {
        string: function string(expr) {
          return this(parse(expr));
        },
        Node: function Node(expr) {
          return countLeaves(expr);
        }
      });
    });

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
    var name$r = 'simplifyUtil';
    var dependencies$r = ['FunctionNode', 'OperatorNode', 'SymbolNode'];
    var createUtil = /* #__PURE__ */factory(name$r, dependencies$r, _ref => {
      var {
        FunctionNode,
        OperatorNode,
        SymbolNode
      } = _ref;
      // TODO commutative/associative properties rely on the arguments
      // e.g. multiply is not commutative for matrices
      // The properties should be calculated from an argument to simplify, or possibly something in math.config
      // the other option is for typed() to specify a return type so that we can evaluate the type of arguments

      /* So that properties of an operator fit on one line: */
      var T = true;
      var F = false;
      var defaultName = 'defaultF';
      var defaultContext = {
        /*      */
        add: {
          trivial: T,
          total: T,
          commutative: T,
          associative: T
        },

        /**/
        unaryPlus: {
          trivial: T,
          total: T,
          commutative: T,
          associative: T
        },

        /* */
        subtract: {
          trivial: F,
          total: T,
          commutative: F,
          associative: F
        },

        /* */
        multiply: {
          trivial: T,
          total: T,
          commutative: T,
          associative: T
        },

        /*   */
        divide: {
          trivial: F,
          total: T,
          commutative: F,
          associative: F
        },

        /*    */
        paren: {
          trivial: T,
          total: T,
          commutative: T,
          associative: F
        },

        /* */
        defaultF: {
          trivial: F,
          total: T,
          commutative: F,
          associative: F
        }
      };
      var realContext = {
        divide: {
          total: F
        },
        log: {
          total: F
        }
      };
      var positiveContext = {
        subtract: {
          total: F
        },
        abs: {
          trivial: T
        },
        log: {
          total: T
        }
      };

      function hasProperty(nodeOrName, property) {
        var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultContext;
        var name = defaultName;

        if (typeof nodeOrName === 'string') {
          name = nodeOrName;
        } else if (isOperatorNode(nodeOrName)) {
          name = nodeOrName.fn.toString();
        } else if (isFunctionNode(nodeOrName)) {
          name = nodeOrName.name;
        } else if (isParenthesisNode(nodeOrName)) {
          name = 'paren';
        }

        if (hasOwnProperty$1(context, name)) {
          var properties = context[name];

          if (hasOwnProperty$1(properties, property)) {
            return properties[property];
          }

          if (hasOwnProperty$1(defaultContext, name)) {
            return defaultContext[name][property];
          }
        }

        if (hasOwnProperty$1(context, defaultName)) {
          var _properties = context[defaultName];

          if (hasOwnProperty$1(_properties, property)) {
            return _properties[property];
          }

          return defaultContext[defaultName][property];
        }
        /* name not found in context and context has no global default */

        /* So use default context. */


        if (hasOwnProperty$1(defaultContext, name)) {
          var _properties2 = defaultContext[name];

          if (hasOwnProperty$1(_properties2, property)) {
            return _properties2[property];
          }
        }

        return defaultContext[defaultName][property];
      }

      function isCommutative(node) {
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultContext;
        return hasProperty(node, 'commutative', context);
      }

      function isAssociative(node) {
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultContext;
        return hasProperty(node, 'associative', context);
      }
      /**
       * Merge the given contexts, with primary overriding secondary
       * wherever they might conflict
       */


      function mergeContext(primary, secondary) {
        var merged = _objectSpread({}, primary);

        for (var prop in secondary) {
          if (hasOwnProperty$1(primary, prop)) {
            merged[prop] = _objectSpread(_objectSpread({}, secondary[prop]), primary[prop]);
          } else {
            merged[prop] = secondary[prop];
          }
        }

        return merged;
      }
      /**
       * Flatten all associative operators in an expression tree.
       * Assumes parentheses have already been removed.
       */


      function flatten(node, context) {
        if (!node.args || node.args.length === 0) {
          return node;
        }

        node.args = allChildren(node, context);

        for (var i = 0; i < node.args.length; i++) {
          flatten(node.args[i], context);
        }
      }
      /**
       * Get the children of a node as if it has been flattened.
       * TODO implement for FunctionNodes
       */


      function allChildren(node, context) {
        var op;
        var children = [];

        var findChildren = function findChildren(node) {
          for (var i = 0; i < node.args.length; i++) {
            var child = node.args[i];

            if (isOperatorNode(child) && op === child.op) {
              findChildren(child);
            } else {
              children.push(child);
            }
          }
        };

        if (isAssociative(node, context)) {
          op = node.op;
          findChildren(node);
          return children;
        } else {
          return node.args;
        }
      }
      /**
       *  Unflatten all flattened operators to a right-heavy binary tree.
       */


      function unflattenr(node, context) {
        if (!node.args || node.args.length === 0) {
          return;
        }

        var makeNode = createMakeNodeFunction(node);
        var l = node.args.length;

        for (var i = 0; i < l; i++) {
          unflattenr(node.args[i], context);
        }

        if (l > 2 && isAssociative(node, context)) {
          var curnode = node.args.pop();

          while (node.args.length > 0) {
            curnode = makeNode([node.args.pop(), curnode]);
          }

          node.args = curnode.args;
        }
      }
      /**
       *  Unflatten all flattened operators to a left-heavy binary tree.
       */


      function unflattenl(node, context) {
        if (!node.args || node.args.length === 0) {
          return;
        }

        var makeNode = createMakeNodeFunction(node);
        var l = node.args.length;

        for (var i = 0; i < l; i++) {
          unflattenl(node.args[i], context);
        }

        if (l > 2 && isAssociative(node, context)) {
          var curnode = node.args.shift();

          while (node.args.length > 0) {
            curnode = makeNode([curnode, node.args.shift()]);
          }

          node.args = curnode.args;
        }
      }

      function createMakeNodeFunction(node) {
        if (isOperatorNode(node)) {
          return function (args) {
            try {
              return new OperatorNode(node.op, node.fn, args, node.implicit);
            } catch (err) {
              console.error(err);
              return [];
            }
          };
        } else {
          return function (args) {
            return new FunctionNode(new SymbolNode(node.name), args);
          };
        }
      }

      return {
        createMakeNodeFunction,
        hasProperty,
        isCommutative,
        isAssociative,
        mergeContext,
        flatten,
        allChildren,
        unflattenr,
        unflattenl,
        defaultContext,
        realContext,
        positiveContext
      };
    });

    // TODO this could be improved by simplifying seperated constants under associative and commutative operators
    var name$q = 'simplifyConstant';
    var dependencies$q = ['typed', 'config', 'mathWithTransform', 'matrix', '?fraction', '?bignumber', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode'];
    var createSimplifyConstant = /* #__PURE__ */factory(name$q, dependencies$q, _ref => {
      var {
        typed,
        config,
        mathWithTransform,
        matrix,
        fraction,
        bignumber,
        AccessorNode,
        ArrayNode,
        ConstantNode,
        FunctionNode,
        IndexNode,
        ObjectNode,
        OperatorNode,
        SymbolNode
      } = _ref;
      var {
        isCommutative,
        isAssociative,
        allChildren,
        createMakeNodeFunction
      } = createUtil({
        FunctionNode,
        OperatorNode,
        SymbolNode
      });

      function simplifyConstant(expr, options) {
        return _ensureNode(foldFraction(expr, options));
      }

      function _removeFractions(thing) {
        if (isFraction(thing)) {
          return thing.valueOf();
        }

        if (thing instanceof Array) {
          return thing.map(_removeFractions);
        }

        if (isMatrix(thing)) {
          return matrix(_removeFractions(thing.valueOf()));
        }

        return thing;
      }

      function _eval(fnname, args, options) {
        try {
          return mathWithTransform[fnname].apply(null, args);
        } catch (ignore) {
          // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions
          args = args.map(_removeFractions);
          return _toNumber(mathWithTransform[fnname].apply(null, args), options);
        }
      }

      var _toNode = typed({
        Fraction: _fractionToNode,
        number: function number(n) {
          if (n < 0) {
            return unaryMinusNode(new ConstantNode(-n));
          }

          return new ConstantNode(n);
        },
        BigNumber: function BigNumber(n) {
          if (n < 0) {
            return unaryMinusNode(new ConstantNode(-n));
          }

          return new ConstantNode(n); // old parameters: (n.toString(), 'number')
        },
        Complex: function Complex(s) {
          throw new Error('Cannot convert Complex number to Node');
        },
        string: function string(s) {
          return new ConstantNode(s);
        },
        Matrix: function Matrix(m) {
          return new ArrayNode(m.valueOf().map(e => _toNode(e)));
        }
      });

      function _ensureNode(thing) {
        if (isNode(thing)) {
          return thing;
        }

        return _toNode(thing);
      } // convert a number to a fraction only if it can be expressed exactly,
      // and when both numerator and denominator are small enough


      function _exactFraction(n, options) {
        var exactFractions = options && options.exactFractions !== false;

        if (exactFractions && isFinite(n) && fraction) {
          var f = fraction(n);
          var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default

          if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {
            return f;
          }
        }

        return n;
      } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex
      // BigNumbers are left alone


      var _toNumber = typed({
        'string, Object': function stringObject(s, options) {
          if (config.number === 'BigNumber') {
            if (bignumber === undefined) {
              noBignumber();
            }

            return bignumber(s);
          } else if (config.number === 'Fraction') {
            if (fraction === undefined) {
              noFraction();
            }

            return fraction(s);
          } else {
            var n = parseFloat(s);
            return _exactFraction(n, options);
          }
        },
        'Fraction, Object': function FractionObject(s, options) {
          return s;
        },
        // we don't need options here
        'BigNumber, Object': function BigNumberObject(s, options) {
          return s;
        },
        // we don't need options here
        'number, Object': function numberObject(s, options) {
          return _exactFraction(s, options);
        },
        'Complex, Object': function ComplexObject(s, options) {
          if (s.im !== 0) {
            return s;
          }

          return _exactFraction(s.re, options);
        },
        'Matrix, Object': function MatrixObject(s, options) {
          return matrix(_exactFraction(s.valueOf()));
        },
        'Array, Object': function ArrayObject(s, options) {
          return s.map(_exactFraction);
        }
      });

      function unaryMinusNode(n) {
        return new OperatorNode('-', 'unaryMinus', [n]);
      }

      function _fractionToNode(f) {
        var n;
        var vn = f.s * f.n;

        if (vn < 0) {
          n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);
        } else {
          n = new ConstantNode(vn);
        }

        if (f.d === 1) {
          return n;
        }

        return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
      }
      /* Handles constant indexing of ArrayNodes, matrices, and ObjectNodes */


      function _foldAccessor(obj, index, options) {
        if (!isIndexNode(index)) {
          // don't know what to do with that...
          return new AccessorNode(_ensureNode(obj), _ensureNode(index));
        }

        if (isArrayNode(obj) || isMatrix(obj)) {
          var remainingDims = Array.from(index.dimensions);
          /* We will resolve constant indices one at a time, looking
           * just in the first or second dimensions because (a) arrays
           * of more than two dimensions are likely rare, and (b) pulling
           * out the third or higher dimension would be pretty intricate.
           * The price is that we miss simplifying [..3d array][x,y,1]
           */

          while (remainingDims.length > 0) {
            if (isConstantNode(remainingDims[0]) && typeof remainingDims[0].value !== 'string') {
              var first = _toNumber(remainingDims.shift().value, options);

              if (isArrayNode(obj)) {
                obj = obj.items[first - 1];
              } else {
                // matrix
                obj = obj.valueOf()[first - 1];

                if (obj instanceof Array) {
                  obj = matrix(obj);
                }
              }
            } else if (remainingDims.length > 1 && isConstantNode(remainingDims[1]) && typeof remainingDims[1].value !== 'string') {
              var second = _toNumber(remainingDims[1].value, options);

              var tryItems = [];
              var fromItems = isArrayNode(obj) ? obj.items : obj.valueOf();

              for (var item of fromItems) {
                if (isArrayNode(item)) {
                  tryItems.push(item.items[second - 1]);
                } else if (isMatrix(obj)) {
                  tryItems.push(item[second - 1]);
                } else {
                  break;
                }
              }

              if (tryItems.length === fromItems.length) {
                if (isArrayNode(obj)) {
                  obj = new ArrayNode(tryItems);
                } else {
                  // matrix
                  obj = matrix(tryItems);
                }

                remainingDims.splice(1, 1);
              } else {
                // extracting slice along 2nd dimension failed, give up
                break;
              }
            } else {
              // neither 1st or 2nd dimension is constant, give up
              break;
            }
          }

          if (remainingDims.length === index.dimensions.length) {
            /* No successful constant indexing */
            return new AccessorNode(_ensureNode(obj), index);
          }

          if (remainingDims.length > 0) {
            /* Indexed some but not all dimensions */
            index = new IndexNode(remainingDims);
            return new AccessorNode(_ensureNode(obj), index);
          }
          /* All dimensions were constant, access completely resolved */


          return obj;
        }

        if (isObjectNode(obj) && index.dimensions.length === 1 && isConstantNode(index.dimensions[0])) {
          var key = index.dimensions[0].value;

          if (key in obj.properties) {
            return obj.properties[key];
          }

          return new ConstantNode(); // undefined
        }
        /* Don't know how to index this sort of obj, at least not with this index */


        return new AccessorNode(_ensureNode(obj), index);
      }
      /*
       * Create a binary tree from a list of Fractions and Nodes.
       * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
       * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
       * @param args - list of Fractions and Nodes
       * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
       * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
       * if args.length is 1, returns args[0]
       * @return - Either a Node representing a binary expression or Fraction
       */


      function foldOp(fn, args, makeNode, options) {
        return args.reduce(function (a, b) {
          if (!isNode(a) && !isNode(b)) {
            try {
              return _eval(fn, [a, b], options);
            } catch (ignoreandcontinue) {}

            a = _toNode(a);
            b = _toNode(b);
          } else if (!isNode(a)) {
            a = _toNode(a);
          } else if (!isNode(b)) {
            b = _toNode(b);
          }

          return makeNode([a, b]);
        });
      } // destroys the original node and returns a folded one


      function foldFraction(node, options) {
        switch (node.type) {
          case 'SymbolNode':
            return node;

          case 'ConstantNode':
            switch (typeof node.value) {
              case 'number':
                return _toNumber(node.value, options);

              case 'string':
                return node.value;

              default:
                if (!isNaN(node.value)) return _toNumber(node.value, options);
            }

            return node;

          case 'FunctionNode':
            if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {
              return node;
            }

            {
              // Process operators as OperatorNode
              var operatorFunctions = ['add', 'multiply'];

              if (operatorFunctions.indexOf(node.name) === -1) {
                var args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers

                if (!args.some(isNode)) {
                  try {
                    return _eval(node.name, args, options);
                  } catch (ignoreandcontinue) {}
                } // Size of a matrix does not depend on entries


                if (node.name === 'size' && args.length === 1 && isArrayNode(args[0])) {
                  var sz = [];
                  var section = args[0];

                  while (isArrayNode(section)) {
                    sz.push(section.items.length);
                    section = section.items[0];
                  }

                  return matrix(sz);
                } // Convert all args to nodes and construct a symbolic function call


                return new FunctionNode(node.name, args.map(_ensureNode));
              }
            }

          /* falls through */

          case 'OperatorNode':
            {
              var fn = node.fn.toString();

              var _args;

              var res;
              var makeNode = createMakeNodeFunction(node);

              if (isOperatorNode(node) && node.isUnary()) {
                _args = [foldFraction(node.args[0], options)];

                if (!isNode(_args[0])) {
                  res = _eval(fn, _args, options);
                } else {
                  res = makeNode(_args);
                }
              } else if (isAssociative(node, options.context)) {
                _args = allChildren(node, options.context);
                _args = _args.map(arg => foldFraction(arg, options));

                if (isCommutative(fn, options.context)) {
                  // commutative binary operator
                  var consts = [];
                  var vars = [];

                  for (var i = 0; i < _args.length; i++) {
                    if (!isNode(_args[i])) {
                      consts.push(_args[i]);
                    } else {
                      vars.push(_args[i]);
                    }
                  }

                  if (consts.length > 1) {
                    res = foldOp(fn, consts, makeNode, options);
                    vars.unshift(res);
                    res = foldOp(fn, vars, makeNode, options);
                  } else {
                    // we won't change the children order since it's not neccessary
                    res = foldOp(fn, _args, makeNode, options);
                  }
                } else {
                  // non-commutative binary operator
                  res = foldOp(fn, _args, makeNode, options);
                }
              } else {
                // non-associative binary operator
                _args = node.args.map(arg => foldFraction(arg, options));
                res = foldOp(fn, _args, makeNode, options);
              }

              return res;
            }

          case 'ParenthesisNode':
            // remove the uneccessary parenthesis
            return foldFraction(node.content, options);

          case 'AccessorNode':
            return _foldAccessor(foldFraction(node.object, options), foldFraction(node.index, options), options);

          case 'ArrayNode':
            {
              var foldItems = node.items.map(item => foldFraction(item, options));

              if (foldItems.some(isNode)) {
                return new ArrayNode(foldItems.map(_ensureNode));
              }
              /* All literals -- return a Matrix so we can operate on it */


              return matrix(foldItems);
            }

          case 'IndexNode':
            {
              return new IndexNode(node.dimensions.map(n => simplifyConstant(n, options)));
            }

          case 'ObjectNode':
            {
              var foldProps = {};

              for (var prop in node.properties) {
                foldProps[prop] = simplifyConstant(node.properties[prop], options);
              }

              return new ObjectNode(foldProps);
            }

          case 'AssignmentNode':
          /* falls through */

          case 'BlockNode':
          /* falls through */

          case 'FunctionAssignmentNode':
          /* falls through */

          case 'RangeNode':
          /* falls through */

          case 'ConditionalNode':
          /* falls through */

          default:
            throw new Error("Unimplemented node type in simplifyConstant: ".concat(node.type));
        }
      }

      return simplifyConstant;
    });

    var name$p = 'simplify';
    var dependencies$p = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', 'resolve', 'simplifyCore', '?fraction', '?bignumber', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
    var createSimplify = /* #__PURE__ */factory(name$p, dependencies$p, _ref => {
      var {
        config,
        typed,
        parse,
        add,
        subtract,
        multiply,
        divide,
        pow,
        isZero,
        equal,
        resolve,
        simplifyCore,
        fraction,
        bignumber,
        mathWithTransform,
        matrix,
        AccessorNode,
        ArrayNode,
        ConstantNode,
        FunctionNode,
        IndexNode,
        ObjectNode,
        OperatorNode,
        ParenthesisNode,
        SymbolNode
      } = _ref;
      var simplifyConstant = createSimplifyConstant({
        typed,
        config,
        mathWithTransform,
        matrix,
        fraction,
        bignumber,
        AccessorNode,
        ArrayNode,
        ConstantNode,
        FunctionNode,
        IndexNode,
        ObjectNode,
        OperatorNode,
        SymbolNode
      });
      var {
        hasProperty,
        isCommutative,
        isAssociative,
        mergeContext,
        flatten,
        unflattenr,
        unflattenl,
        createMakeNodeFunction,
        defaultContext,
        realContext,
        positiveContext
      } = createUtil({
        FunctionNode,
        OperatorNode,
        SymbolNode
      });
      /**
       * Simplify an expression tree.
       *
       * A list of rules are applied to an expression, repeating over the list until
       * no further changes are made.
       * It's possible to pass a custom set of rules to the function as second
       * argument. A rule can be specified as an object, string, or function:
       *
       *     const rules = [
       *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
       *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
       *       function (node) {
       *         // ... return a new node or return the node unchanged
       *         return node
       *       }
       *     ]
       *
       * String and object rules consist of a left and right pattern. The left is
       * used to match against the expression and the right determines what matches
       * are replaced with. The main difference between a pattern and a normal
       * expression is that variables starting with the following characters are
       * interpreted as wildcards:
       *
       * - 'n' - matches any Node
       * - 'c' - matches any ConstantNode
       * - 'v' - matches any Node that is not a ConstantNode
       *
       * The default list of rules is exposed on the function as `simplify.rules`
       * and can be used as a basis to built a set of custom rules.
       *
       * To specify a rule as a string, separate the left and right pattern by '->'
       * When specifying a rule as an object, the following keys are meaningful:
       * - l - the left pattern
       * - r - the right pattern
       * - s - in lieu of l and r, the string form that is broken at -> to give them
       * - repeat - whether to repeat this rule until the expression stabilizes
       * - assuming - gives a context object, as in the 'context' option to
       *     simplify. Every property in the context object must match the current
       *     context in order, or else the rule will not be applied.
       * - imposeContext - gives a context object, as in the 'context' option to
       *     simplify. Any settings specified will override the incoming context
       *     for all matches of this rule.
       *
       * For more details on the theory, see:
       *
       * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
       * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
       *
       *  An optional `options` argument can be passed as last argument of `simplify`.
       *  Currently available options (defaults in parentheses):
       *  - `consoleDebug` (false): whether to write the expression being simplified
       *    and any changes to it, along with the rule responsible, to console
       *  - `context` (simplify.defaultContext): an object giving properties of
       *    each operator, which determine what simplifications are allowed. The
       *    currently meaningful properties are commutative, associative,
       *    total (whether the operation is defined for all arguments), and
       *    trivial (whether the operation applied to a single argument leaves
       *    that argument unchanged). The default context is very permissive and
       *    allows almost all simplifications. Only properties differing from
       *    the default need to be specified; the default context is used as a
       *    fallback. Additional contexts `simplify.realContext` and
       *    `simplify.positiveContext` are supplied to cause simplify to perform
       *    just simplifications guaranteed to preserve all values of the expression
       *    assuming all variables and subexpressions are real numbers or
       *    positive real numbers, respectively. (Note that these are in some cases
       *    more restrictive than the default context; for example, the default
       *    context will allow `x/x` to simplify to 1, whereas
       *    `simplify.realContext` will not, as `0/0` is not equal to 1.)
       *  - `exactFractions` (true): whether to try to convert all constants to
       *    exact rational numbers.
       *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will
       *    be expressed as fractions only when both numerator and denominator
       *    are smaller than `fractionsLimit`.
       *
       * Syntax:
       *
       *     simplify(expr)
       *     simplify(expr, rules)
       *     simplify(expr, rules)
       *     simplify(expr, rules, scope)
       *     simplify(expr, rules, scope, options)
       *     simplify(expr, scope)
       *     simplify(expr, scope, options)
       *
       * Examples:
       *
       *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node "2 * x"
       *     math.simplify('2 * 3 * x', {x: 4})        // Node "24"
       *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
       *     math.simplify(f)                          // Node "2 * x"
       *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node "x * 2 / 5"
       *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node "0.4 * x"
       *
       * See also:
       *
       *     simplifyCore, derivative, evaluate, parse, rationalize, resolve
       *
       * @param {Node | string} expr
       *            The expression to be simplified
       * @param {Array<{l:string, r: string} | string | function>} [rules]
       *            Optional list with custom rules
       * @return {Node} Returns the simplified form of `expr`
       */

      var simplify = typed('simplify', {
        string: function string(expr) {
          return this(parse(expr), this.rules, createEmptyMap(), {});
        },
        'string, Map | Object': function stringMapObject(expr, scope) {
          return this(parse(expr), this.rules, scope, {});
        },
        'string, Map | Object, Object': function stringMapObjectObject(expr, scope, options) {
          return this(parse(expr), this.rules, scope, options);
        },
        'string, Array': function stringArray(expr, rules) {
          return this(parse(expr), rules, createEmptyMap(), {});
        },
        'string, Array, Map | Object': function stringArrayMapObject(expr, rules, scope) {
          return this(parse(expr), rules, scope, {});
        },
        'string, Array, Map | Object, Object': function stringArrayMapObjectObject(expr, rules, scope, options) {
          return this(parse(expr), rules, scope, options);
        },
        'Node, Map | Object': function NodeMapObject(expr, scope) {
          return this(expr, this.rules, scope, {});
        },
        'Node, Map | Object, Object': function NodeMapObjectObject(expr, scope, options) {
          return this(expr, this.rules, scope, options);
        },
        Node: function Node(expr) {
          return this(expr, this.rules, createEmptyMap(), {});
        },
        'Node, Array': function NodeArray(expr, rules) {
          return this(expr, rules, createEmptyMap(), {});
        },
        'Node, Array, Map | Object': function NodeArrayMapObject(expr, rules, scope) {
          return this(expr, rules, scope, {});
        },
        'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {
          return this(expr, rules, createMap$1(scope), options);
        },
        'Node, Array, Map, Object': function NodeArrayMapObject(expr, rules, scope, options) {
          var debug = options.consoleDebug;
          rules = _buildRules(rules, options.context);
          var res = resolve(expr, scope);
          res = removeParens(res);
          var visited = {};
          var str = res.toString({
            parenthesis: 'all'
          });

          while (!visited[str]) {
            visited[str] = true;
            _lastsym = 0; // counter for placeholder symbols

            var laststr = str;
            if (debug) console.log('Working on: ', str);

            for (var i = 0; i < rules.length; i++) {
              var rulestr = '';

              if (typeof rules[i] === 'function') {
                res = rules[i](res, options);
                if (debug) rulestr = rules[i].name;
              } else {
                flatten(res, options.context);
                res = applyRule(res, rules[i], options.context);

                if (debug) {
                  rulestr = "".concat(rules[i].l.toString(), " -> ").concat(rules[i].r.toString());
                }
              }

              if (debug) {
                var newstr = res.toString({
                  parenthesis: 'all'
                });

                if (newstr !== laststr) {
                  console.log('Applying', rulestr, 'produced', newstr);
                  laststr = newstr;
                }
              }
              /* Use left-heavy binary tree internally,
               * since custom rule functions may expect it
               */


              unflattenl(res, options.context);
            }

            str = res.toString({
              parenthesis: 'all'
            });
          }

          return res;
        }
      });
      simplify.defaultContext = defaultContext;
      simplify.realContext = realContext;
      simplify.positiveContext = positiveContext;

      function removeParens(node) {
        return node.transform(function (node, path, parent) {
          return isParenthesisNode(node) ? removeParens(node.content) : node;
        });
      } // All constants that are allowed in rules


      var SUPPORTED_CONSTANTS = {
        true: true,
        false: true,
        e: true,
        i: true,
        Infinity: true,
        LN2: true,
        LN10: true,
        LOG2E: true,
        LOG10E: true,
        NaN: true,
        phi: true,
        pi: true,
        SQRT1_2: true,
        SQRT2: true,
        tau: true // null: false,
        // undefined: false,
        // version: false,

      }; // Array of strings, used to build the ruleSet.
      // Each l (left side) and r (right side) are parsed by
      // the expression parser into a node tree.
      // Left hand sides are matched to subtrees within the
      // expression to be parsed and replaced with the right
      // hand side.
      // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
      // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
      // It is possible to get into an infinite loop with conflicting rules

      simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore
      // { l: 'n^0', r: '1' },     // simplifyCore
      // { l: '0*n', r: '0' },     // simplifyCore
      // { l: 'n/n', r: '1'},      // simplifyCore
      // { l: 'n^1', r: 'n' },     // simplifyCore
      // { l: '+n1', r:'n1' },     // simplifyCore
      // { l: 'n--n1', r:'n+n1' }, // simplifyCore
      {
        l: 'log(e)',
        r: '1'
      }, // temporary rules
      // Note initially we tend constants to the right because like-term
      // collection prefers the left, and we would rather collect nonconstants
      {
        s: 'n-n1 -> n+-n1',
        // temporarily replace 'subtract' so we can further flatten the 'add' operator
        assuming: {
          subtract: {
            total: true
          }
        }
      }, {
        s: 'n-n -> 0',
        // partial alternative when we can't always subtract
        assuming: {
          subtract: {
            total: false
          }
        }
      }, {
        s: '-(c*v) -> v * (-c)',
        // make non-constant terms positive
        assuming: {
          multiply: {
            commutative: true
          },
          subtract: {
            total: true
          }
        }
      }, {
        s: '-(c*v) -> (-c) * v',
        // non-commutative version, part 1
        assuming: {
          multiply: {
            commutative: false
          },
          subtract: {
            total: true
          }
        }
      }, {
        s: '-(v*c) -> v * (-c)',
        // non-commutative version, part 2
        assuming: {
          multiply: {
            commutative: false
          },
          subtract: {
            total: true
          }
        }
      }, {
        l: '-(n1/n2)',
        r: '-n1/n2'
      }, {
        l: '-v',
        r: 'v * (-1)'
      }, // finish making non-constant terms positive
      {
        l: '(n1 + n2)*(-1)',
        r: 'n1*(-1) + n2*(-1)',
        repeat: true
      }, // expand negations to achieve as much sign cancellation as possible
      {
        l: 'n/n1^n2',
        r: 'n*n1^-n2'
      }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator
      {
        l: 'n/n1',
        r: 'n*n1^-1'
      }, {
        s: '(n1*n2)^n3 -> n1^n3 * n2^n3',
        assuming: {
          multiply: {
            commutative: true
          }
        }
      }, {
        s: '(n1*n2)^(-1) -> n2^(-1) * n1^(-1)',
        assuming: {
          multiply: {
            commutative: false
          }
        }
      }, // expand nested exponentiation
      {
        s: '(n ^ n1) ^ n2 -> n ^ (n1 * n2)',
        assuming: {
          divide: {
            total: true
          }
        } // 1/(1/n) = n needs 1/n to exist

      }, // collect like factors; into a sum, only do this for nonconstants
      {
        l: ' v   * ( v   * n1 + n2)',
        r: 'v^2       * n1 +  v   * n2'
      }, {
        s: ' v   * (v^n4 * n1 + n2)   ->  v^(1+n4)  * n1 +  v   * n2',
        assuming: {
          divide: {
            total: true
          }
        } // v*1/v = v^(1+-1) needs 1/v

      }, {
        s: 'v^n3 * ( v   * n1 + n2)   ->  v^(n3+1)  * n1 + v^n3 * n2',
        assuming: {
          divide: {
            total: true
          }
        }
      }, {
        s: 'v^n3 * (v^n4 * n1 + n2)   ->  v^(n3+n4) * n1 + v^n3 * n2',
        assuming: {
          divide: {
            total: true
          }
        }
      }, {
        l: 'n*n',
        r: 'n^2'
      }, {
        s: 'n * n^n1 -> n^(n1+1)',
        assuming: {
          divide: {
            total: true
          }
        } // n*1/n = n^(-1+1) needs 1/n

      }, {
        s: 'n^n1 * n^n2 -> n^(n1+n2)',
        assuming: {
          divide: {
            total: true
          }
        } // ditto for n^2*1/n^2

      }, // Unfortunately, to deal with more complicated cancellations, it
      // becomes necessary to simplify constants twice per pass. It's not
      // terribly expensive compared to matching rules, so this should not
      // pose a performance problem.
      simplifyConstant, // First: before collecting like terms
      // collect like terms
      {
        s: 'n+n -> 2*n',
        assuming: {
          add: {
            total: true
          }
        } // 2 = 1 + 1 needs to exist

      }, {
        l: 'n+-n',
        r: '0'
      }, {
        l: 'v*n + v',
        r: 'v*(n+1)'
      }, // NOTE: leftmost position is special:
      {
        l: 'n3*n1 + n3*n2',
        r: 'n3*(n1+n2)'
      }, // All sub-monomials tried there.
      {
        l: 'n3^(-n4)*n1 +   n3  * n2',
        r: 'n3^(-n4)*(n1 + n3^(n4+1) *n2)'
      }, {
        l: 'n3^(-n4)*n1 + n3^n5 * n2',
        r: 'n3^(-n4)*(n1 + n3^(n4+n5)*n2)'
      }, {
        s: 'n*v + v -> (n+1)*v',
        // noncommutative additional cases
        assuming: {
          multiply: {
            commutative: false
          }
        }
      }, {
        s: 'n1*n3 + n2*n3 -> (n1+n2)*n3',
        assuming: {
          multiply: {
            commutative: false
          }
        }
      }, {
        s: 'n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)',
        assuming: {
          multiply: {
            commutative: false
          }
        }
      }, {
        s: 'n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)',
        assuming: {
          multiply: {
            commutative: false
          }
        }
      }, {
        l: 'n*c + c',
        r: '(n+1)*c'
      }, {
        s: 'c*n + c -> c*(n+1)',
        assuming: {
          multiply: {
            commutative: false
          }
        }
      }, simplifyConstant, // Second: before returning expressions to "standard form"
      // make factors positive (and undo 'make non-constant terms positive')
      {
        s: '(-n)*n1 -> -(n*n1)',
        assuming: {
          subtract: {
            total: true
          }
        }
      }, {
        s: 'n1*(-n) -> -(n1*n)',
        // in case * non-commutative
        assuming: {
          subtract: {
            total: true
          },
          multiply: {
            commutative: false
          }
        }
      }, // final ordering of constants
      {
        s: 'c+v -> v+c',
        assuming: {
          add: {
            commutative: true
          }
        },
        imposeContext: {
          add: {
            commutative: false
          }
        }
      }, {
        s: 'v*c -> c*v',
        assuming: {
          multiply: {
            commutative: true
          }
        },
        imposeContext: {
          multiply: {
            commutative: false
          }
        }
      }, // undo temporary rules
      // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
      {
        l: 'n+-n1',
        r: 'n-n1'
      }, // undo replace 'subtract'
      {
        s: 'n*(n1^-1) -> n/n1',
        // undo replace 'divide'; for * commutative
        assuming: {
          multiply: {
            commutative: true
          }
        } // o.w. / not conventional

      }, {
        s: 'n*n1^-n2 -> n/n1^n2',
        assuming: {
          multiply: {
            commutative: true
          }
        } // o.w. / not conventional

      }, {
        s: 'n^-1 -> 1/n',
        assuming: {
          multiply: {
            commutative: true
          }
        } // o.w. / not conventional

      }, {
        l: 'n^1',
        r: 'n'
      }, // can be produced by power cancellation
      {
        s: 'n*(n1/n2) -> (n*n1)/n2',
        // '*' before '/'
        assuming: {
          multiply: {
            associative: true
          }
        }
      }, {
        s: 'n-(n1+n2) -> n-n1-n2',
        // '-' before '+'
        assuming: {
          addition: {
            associative: true,
            commutative: true
          }
        }
      }, // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
      // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
      // simplifyConstant can leave an extra factor of 1, which can always
      // be eliminated, since the identity always commutes
      {
        l: '1*n',
        r: 'n',
        imposeContext: {
          multiply: {
            commutative: true
          }
        }
      }, {
        s: 'n1/(n2/n3) -> (n1*n3)/n2',
        assuming: {
          multiply: {
            associative: true
          }
        }
      }, {
        l: 'n1/(-n2)',
        r: '-n1/n2'
      }];
      /**
       * Takes any rule object as allowed by the specification in simplify
       * and puts it in a standard form used by applyRule
       */

      function _canonicalizeRule(ruleObject, context) {
        var newRule = {};

        if (ruleObject.s) {
          var lr = ruleObject.s.split('->');

          if (lr.length === 2) {
            newRule.l = lr[0];
            newRule.r = lr[1];
          } else {
            throw SyntaxError('Could not parse rule: ' + ruleObject.s);
          }
        } else {
          newRule.l = ruleObject.l;
          newRule.r = ruleObject.r;
        }

        newRule.l = removeParens(parse(newRule.l));
        newRule.r = removeParens(parse(newRule.r));

        for (var prop of ['imposeContext', 'repeat', 'assuming']) {
          if (prop in ruleObject) {
            newRule[prop] = ruleObject[prop];
          }
        }

        if (ruleObject.evaluate) {
          newRule.evaluate = parse(ruleObject.evaluate);
        }

        if (isAssociative(newRule.l, context)) {
          var makeNode = createMakeNodeFunction(newRule.l);

          var expandsym = _getExpandPlaceholderSymbol();

          newRule.expanded = {};
          newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.
          // This helps to match the newRule against nodes returned from getSplits() later on.

          flatten(newRule.expanded.l, context);
          unflattenr(newRule.expanded.l, context);
          newRule.expanded.r = makeNode([newRule.r, expandsym]);
        }

        return newRule;
      }
      /**
       * Parse the string array of rules into nodes
       *
       * Example syntax for rules:
       *
       * Position constants to the left in a product:
       * { l: 'n1 * c1', r: 'c1 * n1' }
       * n1 is any Node, and c1 is a ConstantNode.
       *
       * Apply difference of squares formula:
       * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
       * n1, n2 mean any Node.
       *
       * Short hand notation:
       * 'n1 * c1 -> c1 * n1'
       */


      function _buildRules(rules, context) {
        // Array of rules to be used to simplify expressions
        var ruleSet = [];

        for (var i = 0; i < rules.length; i++) {
          var rule = rules[i];
          var newRule = void 0;
          var ruleType = typeof rule;

          switch (ruleType) {
            case 'string':
              rule = {
                s: rule
              };

            /* falls through */

            case 'object':
              newRule = _canonicalizeRule(rule, context);
              break;

            case 'function':
              newRule = rule;
              break;

            default:
              throw TypeError('Unsupported type of rule: ' + ruleType);
          } // console.log('Adding rule: ' + rules[i])
          // console.log(newRule)


          ruleSet.push(newRule);
        }

        return ruleSet;
      }

      var _lastsym = 0;

      function _getExpandPlaceholderSymbol() {
        return new SymbolNode('_p' + _lastsym++);
      }

      function mapRule(nodes, rule, context) {
        var resNodes = nodes;

        if (nodes) {
          for (var i = 0; i < nodes.length; ++i) {
            var newNode = applyRule(nodes[i], rule, context);

            if (newNode !== nodes[i]) {
              if (resNodes === nodes) {
                resNodes = nodes.slice();
              }

              resNodes[i] = newNode;
            }
          }
        }

        return resNodes;
      }
      /**
       * Returns a simplfied form of node, or the original node if no simplification was possible.
       *
       * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
       * @param  {Object | Function} rule
       * @param  {Object} context -- information about assumed properties of operators
       * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
       */


      function applyRule(node, rule, context) {
        //    console.log('Entering applyRule("', rule.l.toString({parenthesis:'all'}), '->', rule.r.toString({parenthesis:'all'}), '",', node.toString({parenthesis:'all'}),')')
        // check that the assumptions for this rule are satisfied by the current
        // context:
        if (rule.assuming) {
          for (var symbol in rule.assuming) {
            for (var property in rule.assuming[symbol]) {
              if (hasProperty(symbol, property, context) !== rule.assuming[symbol][property]) {
                return node;
              }
            }
          }
        }

        var mergedContext = mergeContext(rule.imposeContext, context); // Do not clone node unless we find a match

        var res = node; // First replace our child nodes with their simplified versions
        // If a child could not be simplified, applying the rule to it
        // will have no effect since the node is returned unchanged

        if (res instanceof OperatorNode || res instanceof FunctionNode) {
          var newArgs = mapRule(res.args, rule, context);

          if (newArgs !== res.args) {
            res = res.clone();
            res.args = newArgs;
          }
        } else if (res instanceof ParenthesisNode) {
          if (res.content) {
            var newContent = applyRule(res.content, rule, context);

            if (newContent !== res.content) {
              res = new ParenthesisNode(newContent);
            }
          }
        } else if (res instanceof ArrayNode) {
          var newItems = mapRule(res.items, rule, context);

          if (newItems !== res.items) {
            res = new ArrayNode(newItems);
          }
        } else if (res instanceof AccessorNode) {
          var newObj = res.object;

          if (res.object) {
            newObj = applyRule(res.object, rule, context);
          }

          var newIndex = res.index;

          if (res.index) {
            newIndex = applyRule(res.index, rule, context);
          }

          if (newObj !== res.object || newIndex !== res.index) {
            res = new AccessorNode(newObj, newIndex);
          }
        } else if (res instanceof IndexNode) {
          var newDims = mapRule(res.dimensions, rule, context);

          if (newDims !== res.dimensions) {
            res = new IndexNode(newDims);
          }
        } else if (res instanceof ObjectNode) {
          var changed = false;
          var newProps = {};

          for (var prop in res.properties) {
            newProps[prop] = applyRule(res.properties[prop], rule, context);

            if (newProps[prop] !== res.properties[prop]) {
              changed = true;
            }
          }

          if (changed) {
            res = new ObjectNode(newProps);
          }
        } // Try to match a rule against this node


        var repl = rule.r;

        var matches = _ruleMatch(rule.l, res, mergedContext)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.
        // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.


        if (!matches && rule.expanded) {
          repl = rule.expanded.r;
          matches = _ruleMatch(rule.expanded.l, res, mergedContext)[0];
        }

        if (matches) {
          // const before = res.toString({parenthesis: 'all'})
          // Create a new node by cloning the rhs of the matched rule
          // we keep any implicit multiplication state if relevant
          var implicit = res.implicit;
          res = repl.clone();

          if (implicit && 'implicit' in repl) {
            res.implicit = true;
          } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes


          res = res.transform(function (node) {
            if (node.isSymbolNode && hasOwnProperty$1(matches.placeholders, node.name)) {
              return matches.placeholders[node.name].clone();
            } else {
              return node;
            }
          }); // const after = res.toString({parenthesis: 'all'})
          // console.log('Simplified ' + before + ' to ' + after)
        }

        if (rule.repeat && res !== node) {
          res = applyRule(res, rule, context);
        }

        return res;
      }
      /**
       * Get (binary) combinations of a flattened binary node
       * e.g. +(node1, node2, node3) -> [
       *        +(node1,  +(node2, node3)),
       *        +(node2,  +(node1, node3)),
       *        +(node3,  +(node1, node2))]
       *
       */


      function getSplits(node, context) {
        var res = [];
        var right, rightArgs;
        var makeNode = createMakeNodeFunction(node);

        if (isCommutative(node, context)) {
          for (var i = 0; i < node.args.length; i++) {
            rightArgs = node.args.slice(0);
            rightArgs.splice(i, 1);
            right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
            res.push(makeNode([node.args[i], right]));
          }
        } else {
          // Keep order, but try all parenthesizations
          for (var _i = 1; _i < node.args.length; _i++) {
            var left = node.args[0];

            if (_i > 1) {
              left = makeNode(node.args.slice(0, _i));
            }

            rightArgs = node.args.slice(_i);
            right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
            res.push(makeNode([left, right]));
          }
        }

        return res;
      }
      /**
       * Returns the set union of two match-placeholders or null if there is a conflict.
       */


      function mergeMatch(match1, match2) {
        var res = {
          placeholders: {}
        }; // Some matches may not have placeholders; this is OK

        if (!match1.placeholders && !match2.placeholders) {
          return res;
        } else if (!match1.placeholders) {
          return match2;
        } else if (!match2.placeholders) {
          return match1;
        } // Placeholders with the same key must match exactly


        for (var key in match1.placeholders) {
          if (hasOwnProperty$1(match1.placeholders, key)) {
            res.placeholders[key] = match1.placeholders[key];

            if (hasOwnProperty$1(match2.placeholders, key)) {
              if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {
                return null;
              }
            }
          }
        }

        for (var _key in match2.placeholders) {
          if (hasOwnProperty$1(match2.placeholders, _key)) {
            res.placeholders[_key] = match2.placeholders[_key];
          }
        }

        return res;
      }
      /**
       * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
       * Each list represents matches found in one child of a node.
       */


      function combineChildMatches(list1, list2) {
        var res = [];

        if (list1.length === 0 || list2.length === 0) {
          return res;
        }

        var merged;

        for (var i1 = 0; i1 < list1.length; i1++) {
          for (var i2 = 0; i2 < list2.length; i2++) {
            merged = mergeMatch(list1[i1], list2[i2]);

            if (merged) {
              res.push(merged);
            }
          }
        }

        return res;
      }
      /**
       * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
       * Each list represents matches found in one child of a node.
       * Returns a list of unique matches.
       */


      function mergeChildMatches(childMatches) {
        if (childMatches.length === 0) {
          return childMatches;
        }

        var sets = childMatches.reduce(combineChildMatches);
        var uniqueSets = [];
        var unique = {};

        for (var i = 0; i < sets.length; i++) {
          var s = JSON.stringify(sets[i]);

          if (!unique[s]) {
            unique[s] = true;
            uniqueSets.push(sets[i]);
          }
        }

        return uniqueSets;
      }
      /**
       * Determines whether node matches rule.
       *
       * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
       * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
       * @param {Object} context -- provides assumed properties of operators
       * @param {Boolean} isSplit -- whether we are in process of splitting an
       *                    n-ary operator node into possible binary combinations.
       *                    Defaults to false.
       * @return {Object} Information about the match, if it exists.
       */


      function _ruleMatch(rule, node, context, isSplit) {
        //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')
        //    console.log('rule = ' + rule)
        //    console.log('node = ' + node)
        //    console.log('Entering _ruleMatch(', rule.toString({parenthesis:'all'}), ', ', node.toString({parenthesis:'all'}), ', ', context, ')')
        var res = [{
          placeholders: {}
        }];

        if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {
          // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
          if (rule instanceof OperatorNode) {
            if (rule.op !== node.op || rule.fn !== node.fn) {
              return [];
            }
          } else if (rule instanceof FunctionNode) {
            if (rule.name !== node.name) {
              return [];
            }
          } // rule and node match. Search the children of rule and node.


          if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node, context) && node.args.length === rule.args.length || isSplit) {
            // Expect non-associative operators to match exactly,
            // except in any order if operator is commutative
            var childMatches = [];

            for (var i = 0; i < rule.args.length; i++) {
              var childMatch = _ruleMatch(rule.args[i], node.args[i], context);

              if (childMatch.length === 0) {
                // Child did not match, so stop searching immediately
                break;
              } // The child matched, so add the information returned from the child to our result


              childMatches.push(childMatch);
            }

            if (childMatches.length !== rule.args.length) {
              if (!isCommutative(node, context) || // exact match in order needed
              rule.args.length === 1) {
                // nothing to commute
                return [];
              }

              if (rule.args.length > 2) {
                /* Need to generate all permutations and try them.
                 * It's a bit complicated, and unlikely to come up since there
                 * are very few ternary or higher operators. So punt for now.
                 */
                throw new Error('permuting >2 commutative non-associative rule arguments not yet implemented');
              }
              /* Exactly two arguments, try them reversed */


              var leftMatch = _ruleMatch(rule.args[0], node.args[1], context);

              if (leftMatch.length === 0) {
                return [];
              }

              var rightMatch = _ruleMatch(rule.args[1], node.args[0], context);

              if (rightMatch.length === 0) {
                return [];
              }

              childMatches = [leftMatch, rightMatch];
            }

            res = mergeChildMatches(childMatches);
          } else if (node.args.length >= 2 && rule.args.length === 2) {
            // node is flattened, rule is not
            // Associative operators/functions can be split in different ways so we check if the rule matches each
            // them and return their union.
            var splits = getSplits(node, context);
            var splitMatches = [];

            for (var _i2 = 0; _i2 < splits.length; _i2++) {
              var matchSet = _ruleMatch(rule, splits[_i2], context, true); // recursing at the same tree depth here


              splitMatches = splitMatches.concat(matchSet);
            }

            return splitMatches;
          } else if (rule.args.length > 2) {
            throw Error('Unexpected non-binary associative function: ' + rule.toString());
          } else {
            // Incorrect number of arguments in rule and node, so no match
            return [];
          }
        } else if (rule instanceof SymbolNode) {
          // If the rule is a SymbolNode, then it carries a special meaning
          // according to the first character of the symbol node name.
          // c.* matches a ConstantNode
          // n.* matches any node
          if (rule.name.length === 0) {
            throw new Error('Symbol in rule has 0 length...!?');
          }

          if (SUPPORTED_CONSTANTS[rule.name]) {
            // built-in constant must match exactly
            if (rule.name !== node.name) {
              return [];
            }
          } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {
            // rule matches _anything_, so assign this node to the rule.name placeholder
            // Assign node to the rule.name placeholder.
            // Our parent will check for matches among placeholders.
            res[0].placeholders[rule.name] = node;
          } else if (rule.name[0] === 'v') {
            // rule matches any variable thing (not a ConstantNode)
            if (!isConstantNode(node)) {
              res[0].placeholders[rule.name] = node;
            } else {
              // Mis-match: rule was expecting something other than a ConstantNode
              return [];
            }
          } else if (rule.name[0] === 'c') {
            // rule matches any ConstantNode
            if (node instanceof ConstantNode) {
              res[0].placeholders[rule.name] = node;
            } else {
              // Mis-match: rule was expecting a ConstantNode
              return [];
            }
          } else {
            throw new Error('Invalid symbol in rule: ' + rule.name);
          }
        } else if (rule instanceof ConstantNode) {
          // Literal constant must match exactly
          if (!equal(rule.value, node.value)) {
            return [];
          }
        } else {
          // Some other node was encountered which we aren't prepared for, so no match
          return [];
        } // It's a match!
        // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')


        return res;
      }
      /**
       * Determines whether p and q (and all their children nodes) are identical.
       *
       * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
       * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
       * @return {Object} Information about the match, if it exists.
       */


      function _exactMatch(p, q) {
        if (p instanceof ConstantNode && q instanceof ConstantNode) {
          if (!equal(p.value, q.value)) {
            return false;
          }
        } else if (p instanceof SymbolNode && q instanceof SymbolNode) {
          if (p.name !== q.name) {
            return false;
          }
        } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {
          if (p instanceof OperatorNode) {
            if (p.op !== q.op || p.fn !== q.fn) {
              return false;
            }
          } else if (p instanceof FunctionNode) {
            if (p.name !== q.name) {
              return false;
            }
          }

          if (p.args.length !== q.args.length) {
            return false;
          }

          for (var i = 0; i < p.args.length; i++) {
            if (!_exactMatch(p.args[i], q.args[i])) {
              return false;
            }
          }
        } else {
          return false;
        }

        return true;
      }

      return simplify;
    });

    var name$o = 'simplifyCore';
    var dependencies$o = ['equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
    var createSimplifyCore = /* #__PURE__ */factory(name$o, dependencies$o, _ref => {
      var {
        equal,
        isZero,
        add,
        subtract,
        multiply,
        divide,
        pow,
        AccessorNode,
        ArrayNode,
        ConstantNode,
        FunctionNode,
        IndexNode,
        ObjectNode,
        OperatorNode,
        ParenthesisNode,
        SymbolNode
      } = _ref;
      var node0 = new ConstantNode(0);
      var node1 = new ConstantNode(1);
      var {
        hasProperty,
        isCommutative
      } = createUtil({
        FunctionNode,
        OperatorNode,
        SymbolNode
      });
      /**
       * simplifyCore() performs single pass simplification suitable for
       * applications requiring ultimate performance. In contrast, simplify()
       * extends simplifyCore() with additional passes to provide deeper
       * simplification.
       *
       * Syntax:
       *
       *     simplifyCore(expr)
       *
       * Examples:
       *
       *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
       *     math.simpifyCore(f)                          // Node {2 * x}
       *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplifyCore]) // Node {2 * x}
       *
       * See also:
       *
       *     simplify, resolve, derivative
       *
       * @param {Node} node
       *     The expression to be simplified
       * @param {Object} options
       *     Simplification options, as per simplify()
       * @return {Node} Returns expression with basic simplifications applied
       */

      function simplifyCore(node, options) {
        var context = options ? options.context : undefined;

        if (hasProperty(node, 'trivial', context)) {
          // This node does nothing if it has only one argument, so if so,
          // return that argument simplified
          if (isFunctionNode(node) && node.args.length === 1) {
            return simplifyCore(node.args[0], options);
          } // For other node types, we try the generic methods


          var simpChild = false;
          var childCount = 0;
          node.forEach(c => {
            ++childCount;

            if (childCount === 1) {
              simpChild = simplifyCore(c, options);
            }
          });

          if (childCount === 1) {
            return simpChild;
          }
        }

        if (isOperatorNode(node) && node.isUnary()) {
          var a0 = simplifyCore(node.args[0], options);

          if (node.op === '-') {
            // unary minus
            if (isOperatorNode(a0)) {
              if (a0.isUnary() && a0.op === '-') {
                return a0.args[0];
              } else if (a0.isBinary() && a0.fn === 'subtract') {
                return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);
              }
            }

            return new OperatorNode(node.op, node.fn, [a0]);
          }
        } else if (isOperatorNode(node) && node.isBinary()) {
          var _a = simplifyCore(node.args[0], options);

          var a1 = simplifyCore(node.args[1], options);

          if (node.op === '+') {
            if (isConstantNode(_a)) {
              if (isZero(_a.value)) {
                return a1;
              } else if (isConstantNode(a1)) {
                return new ConstantNode(add(_a.value, a1.value));
              }
            }

            if (isConstantNode(a1) && isZero(a1.value)) {
              return _a;
            }

            if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {
              return new OperatorNode('-', 'subtract', [_a, a1.args[0]]);
            }

            return new OperatorNode(node.op, node.fn, a1 ? [_a, a1] : [_a]);
          } else if (node.op === '-') {
            if (isConstantNode(_a) && a1) {
              if (isConstantNode(a1)) {
                return new ConstantNode(subtract(_a.value, a1.value));
              } else if (isZero(_a.value)) {
                return new OperatorNode('-', 'unaryMinus', [a1]);
              }
            } // if (node.fn === "subtract" && node.args.length === 2) {


            if (node.fn === 'subtract') {
              if (isConstantNode(a1) && isZero(a1.value)) {
                return _a;
              }

              if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {
                return simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]), options);
              }

              return new OperatorNode(node.op, node.fn, [_a, a1]);
            }
          } else if (node.op === '*') {
            if (isConstantNode(_a)) {
              if (isZero(_a.value)) {
                return node0;
              } else if (equal(_a.value, 1)) {
                return a1;
              } else if (isConstantNode(a1)) {
                return new ConstantNode(multiply(_a.value, a1.value));
              }
            }

            if (isConstantNode(a1)) {
              if (isZero(a1.value)) {
                return node0;
              } else if (equal(a1.value, 1)) {
                return _a;
              } else if (isOperatorNode(_a) && _a.isBinary() && _a.op === node.op && isCommutative(node, context)) {
                var a00 = _a.args[0];

                if (isConstantNode(a00)) {
                  var a00a1 = new ConstantNode(multiply(a00.value, a1.value));
                  return new OperatorNode(node.op, node.fn, [a00a1, _a.args[1]], node.implicit); // constants on left
                }
              }

              if (isCommutative(node, context)) {
                return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left
              } else {
                return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);
              }
            }

            return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);
          } else if (node.op === '/') {
            if (isConstantNode(_a)) {
              if (isZero(_a.value)) {
                return node0;
              } else if (isConstantNode(a1) && (equal(a1.value, 1) || equal(a1.value, 2) || equal(a1.value, 4))) {
                return new ConstantNode(divide(_a.value, a1.value));
              }
            }

            return new OperatorNode(node.op, node.fn, [_a, a1]);
          } else if (node.op === '^') {
            if (isConstantNode(a1)) {
              if (isZero(a1.value)) {
                return node1;
              } else if (equal(a1.value, 1)) {
                return _a;
              } else {
                if (isConstantNode(_a)) {
                  // fold constant
                  return new ConstantNode(pow(_a.value, a1.value));
                } else if (isOperatorNode(_a) && _a.isBinary() && _a.op === '^') {
                  var a01 = _a.args[1];

                  if (isConstantNode(a01)) {
                    return new OperatorNode(node.op, node.fn, [_a.args[0], new ConstantNode(multiply(a01.value, a1.value))]);
                  }
                }
              }
            }
          }

          return new OperatorNode(node.op, node.fn, [_a, a1]);
        } else if (isFunctionNode(node)) {
          return new FunctionNode(simplifyCore(node.fn), node.args.map(n => simplifyCore(n, options)));
        } else if (isArrayNode(node)) {
          return new ArrayNode(node.items.map(n => simplifyCore(n, options)));
        } else if (isAccessorNode(node)) {
          return new AccessorNode(simplifyCore(node.object, options), simplifyCore(node.index, options));
        } else if (isIndexNode(node)) {
          return new IndexNode(node.dimensions.map(n => simplifyCore(n, options)));
        } else if (isObjectNode(node)) {
          var newProps = {};

          for (var prop in node.properties) {
            newProps[prop] = simplifyCore(node.properties[prop], options);
          }

          return new ObjectNode(newProps);
        } else ;

        return node;
      }

      return simplifyCore;
    });

    var name$n = 'resolve';
    var dependencies$n = ['parse', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];
    var createResolve = /* #__PURE__ */factory(name$n, dependencies$n, _ref => {
      var {
        parse,
        ConstantNode,
        FunctionNode,
        OperatorNode,
        ParenthesisNode
      } = _ref;

      /**
       * resolve(expr, scope) replaces variable nodes with their scoped values
       *
       * Syntax:
       *
       *     resolve(expr, scope)
       *
       * Examples:
       *
       *     math.resolve('x + y', {x:1, y:2})           // Node {1 + 2}
       *     math.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
       *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // "6"
       *
       * See also:
       *
       *     simplify, evaluate
       *
       * @param {Node | Node[]} node
       *     The expression tree (or trees) to be simplified
       * @param {Object} scope
       *     Scope specifying variables to be resolved
       * @return {Node | Node[]} Returns `node` with variables recursively substituted.
       * @throws {ReferenceError}
       *     If there is a cyclic dependency among the variables in `scope`,
       *     resolution is impossible and a ReferenceError is thrown.
       */
      function resolve(node, scope) {
        var within = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();

        // note `within`:
        // `within` is not documented, since it is for internal cycle
        // detection only
        if (!scope) {
          return node;
        }

        if (!isMap(scope)) {
          scope = createMap$1(scope);
        }

        if (isSymbolNode(node)) {
          if (within.has(node.name)) {
            var variables = Array.from(within).join(', ');
            throw new ReferenceError("recursive loop of variable definitions among {".concat(variables, "}"));
          }

          var value = scope.get(node.name);

          if (isNode(value)) {
            var nextWithin = new Set(within);
            nextWithin.add(node.name);
            return resolve(value, scope, nextWithin);
          } else if (typeof value === 'number') {
            return parse(String(value));
          } else if (value !== undefined) {
            return new ConstantNode(value);
          } else {
            return node;
          }
        } else if (isOperatorNode(node)) {
          var args = node.args.map(function (arg) {
            return resolve(arg, scope, within);
          });
          return new OperatorNode(node.op, node.fn, args, node.implicit);
        } else if (isParenthesisNode(node)) {
          return new ParenthesisNode(resolve(node.content, scope, within));
        } else if (isFunctionNode(node)) {
          var _args = node.args.map(function (arg) {
            return resolve(arg, scope, within);
          });

          return new FunctionNode(node.name, _args);
        } // Otherwise just recursively resolve any children (might also work
        // for some of the above special cases)


        return node.map(child => resolve(child, scope, within));
      }

      return resolve;
    });

    var name$m = 'symbolicEqual';
    var dependencies$m = ['parse', 'simplify', 'typed', 'OperatorNode'];
    var createSymbolicEqual = /* #__PURE__ */factory(name$m, dependencies$m, _ref => {
      var {
        parse,
        simplify,
        typed,
        OperatorNode
      } = _ref;

      /**
       * Attempts to determine if two expressions are symbolically equal, i.e.
       * one is the result of valid algebraic manipulations on the other.
       * Currently, this simply checks if the difference of the two expressions
       * simplifies down to 0. So there are two important caveats:
       * 1. whether two expressions are symbolically equal depends on the
       *     manipulations allowed. Therefore, this function takes an optional
       *     third argument, which are the options that control the behavior
       *     as documented for the `simplify()` function.
       * 2. it is in general intractable to find the minimal simplification of
       *     an arbitrarily complicated expression. So while a `true` value
       *     of `symbolicEqual` ensures that the two expressions can be manipulated
       *     to match each other, a `false` value does not absolutely rule this out.
       *
       * Syntax:
       *
       *    symbolicEqual(expr1, expr2)
       *    symbolicEqual(expr1, expr2, options)
       *
       * Examples:
       *
       *    symbolicEqual('x*y', 'y*x') // true
       *    symbolicEqual('x*y', 'y*x', {context: {multiply: {commutative: false}}})
       *        //false
       *    symbolicEqual('x/y', '(y*x^(-1))^(-1)') // true
       *    symbolicEqual('abs(x)','x') // false
       *    symbolicEqual('abs(x)','x', simplify.positiveContext) // true
       *
       * See also:
       *
       *    simplify, evaluate
       *
       * @param {Node|string} expr1  The first expression to compare
       * @param {Node|string} expr2  The second expression to compare
       * @param {Object} [options] Optional option object, passed to simplify
       * @returns {boolean}
       *     Returns true if a valid manipulation making the expressions equal
       *     is found.
       */
      return typed(name$m, {
        'string, string': function stringString(s1, s2) {
          return this(parse(s1), parse(s2), {});
        },
        'string, string, Object': function stringStringObject(s1, s2, options) {
          return this(parse(s1), parse(s2), options);
        },
        'Node, string': function NodeString(e1, s2) {
          return this(e1, parse(s2), {});
        },
        'Node, string, Object': function NodeStringObject(e1, s2, options) {
          return this(e1, parse(s2), options);
        },
        'string, Node': function stringNode(s1, e2) {
          return this(parse(s1), e2, {});
        },
        'string, Node, Object': function stringNodeObject(s1, e2, options) {
          return this(parse(s1), e2, options);
        },
        'Node, Node': function NodeNode(e1, e2) {
          return this(e1, e2, {});
        },
        'Node, Node, Object': function NodeNodeObject(e1, e2, options) {
          var diff = new OperatorNode('-', 'subtract', [e1, e2]);
          var simplified = simplify(diff, {}, options);
          return isConstantNode(simplified) && !simplified.value;
        }
      });
    });

    var name$l = 'derivative';
    var dependencies$l = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
    var createDerivative = /* #__PURE__ */factory(name$l, dependencies$l, _ref => {
      var {
        typed,
        config,
        parse,
        simplify,
        equal,
        isZero,
        numeric,
        ConstantNode,
        FunctionNode,
        OperatorNode,
        ParenthesisNode,
        SymbolNode
      } = _ref;

      /**
       * Takes the derivative of an expression expressed in parser Nodes.
       * The derivative will be taken over the supplied variable in the
       * second parameter. If there are multiple variables in the expression,
       * it will return a partial derivative.
       *
       * This uses rules of differentiation which can be found here:
       *
       * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)
       *
       * Syntax:
       *
       *     derivative(expr, variable)
       *     derivative(expr, variable, options)
       *
       * Examples:
       *
       *     math.derivative('x^2', 'x')                     // Node {2 * x}
       *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)
       *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}
       *     math.derivative('2*x', 'x').evaluate()          // number 2
       *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8
       *     const f = math.parse('x^2')
       *     const x = math.parse('x')
       *     math.derivative(f, x)                           // Node {2 * x}
       *
       * See also:
       *
       *     simplify, parse, evaluate
       *
       * @param  {Node | string} expr           The expression to differentiate
       * @param  {SymbolNode | string} variable The variable over which to differentiate
       * @param  {{simplify: boolean}} [options]
       *                         There is one option available, `simplify`, which
       *                         is true by default. When false, output will not
       *                         be simplified.
       * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
       */
      var derivative = typed('derivative', {
        'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {
          var constNodes = {};
          constTag(constNodes, expr, variable.name);

          var res = _derivative(expr, constNodes);

          return options.simplify ? simplify(res) : res;
        },
        'Node, SymbolNode': function NodeSymbolNode(expr, variable) {
          return this(expr, variable, {
            simplify: true
          });
        },
        'string, SymbolNode': function stringSymbolNode(expr, variable) {
          return this(parse(expr), variable);
        },
        'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {
          return this(parse(expr), variable, options);
        },
        'string, string': function stringString(expr, variable) {
          return this(parse(expr), parse(variable));
        },
        'string, string, Object': function stringStringObject(expr, variable, options) {
          return this(parse(expr), parse(variable), options);
        },
        'Node, string': function NodeString(expr, variable) {
          return this(expr, parse(variable));
        },
        'Node, string, Object': function NodeStringObject(expr, variable, options) {
          return this(expr, parse(variable), options);
        } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments

        /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
        'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
          let res = expr
          for (let i = 0; i < order; i++) {
            let constNodes = {}
            constTag(constNodes, expr, variable.name)
            res = _derivative(res, constNodes)
          }
          return res
        }
        */

      });
      derivative._simplify = true;

      derivative.toTex = function (deriv) {
        return _derivTex.apply(null, deriv.args);
      }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.
      // NOTE: the optional "order" parameter here is currently unused


      var _derivTex = typed('_derivTex', {
        'Node, SymbolNode': function NodeSymbolNode(expr, x) {
          if (isConstantNode(expr) && typeOf$1(expr.value) === 'string') {
            return _derivTex(parse(expr.value).toString(), x.toString(), 1);
          } else {
            return _derivTex(expr.toTex(), x.toString(), 1);
          }
        },
        'Node, ConstantNode': function NodeConstantNode(expr, x) {
          if (typeOf$1(x.value) === 'string') {
            return _derivTex(expr, parse(x.value));
          } else {
            throw new Error("The second parameter to 'derivative' is a non-string constant");
          }
        },
        'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {
          return _derivTex(expr.toString(), x.name, order.value);
        },
        'string, string, number': function stringStringNumber(expr, x, order) {
          var d;

          if (order === 1) {
            d = '{d\\over d' + x + '}';
          } else {
            d = '{d^{' + order + '}\\over d' + x + '^{' + order + '}}';
          }

          return d + "\\left[".concat(expr, "\\right]");
        }
      });
      /**
       * Does a depth-first search on the expression tree to identify what Nodes
       * are constants (e.g. 2 + 2), and stores the ones that are constants in
       * constNodes. Classification is done as follows:
       *
       *   1. ConstantNodes are constants.
       *   2. If there exists a SymbolNode, of which we are differentiating over,
       *      in the subtree it is not constant.
       *
       * @param  {Object} constNodes  Holds the nodes that are constant
       * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
       * @param  {string} varName     Variable that we are differentiating
       * @return {boolean}  if node is constant
       */
      // TODO: can we rewrite constTag into a pure function?


      var constTag = typed('constTag', {
        'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {
          constNodes[node] = true;
          return true;
        },
        'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {
          // Treat other variables like constants. For reasoning, see:
          //   https://en.wikipedia.org/wiki/Partial_derivative
          if (node.name !== varName) {
            constNodes[node] = true;
            return true;
          }

          return false;
        },
        'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {
          return constTag(constNodes, node.content, varName);
        },
        'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {
          if (node.params.indexOf(varName) === -1) {
            constNodes[node] = true;
            return true;
          }

          return constTag(constNodes, node.expr, varName);
        },
        'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {
          if (node.args.length > 0) {
            var isConst = constTag(constNodes, node.args[0], varName);

            for (var i = 1; i < node.args.length; ++i) {
              isConst = constTag(constNodes, node.args[i], varName) && isConst;
            }

            if (isConst) {
              constNodes[node] = true;
              return true;
            }
          }

          return false;
        }
      });
      /**
       * Applies differentiation rules.
       *
       * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
       * @param  {Object} constNodes  Holds the nodes that are constant
       * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
       */

      var _derivative = typed('_derivative', {
        'ConstantNode, Object': function ConstantNodeObject(node) {
          return createConstantNode(0);
        },
        'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {
          if (constNodes[node] !== undefined) {
            return createConstantNode(0);
          }

          return createConstantNode(1);
        },
        'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {
          return new ParenthesisNode(_derivative(node.content, constNodes));
        },
        'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {
          if (constNodes[node] !== undefined) {
            return createConstantNode(0);
          }

          return _derivative(node.expr, constNodes);
        },
        'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {
          if (node.args.length !== 1) {
            funcArgsCheck(node);
          }

          if (constNodes[node] !== undefined) {
            return createConstantNode(0);
          }

          var arg0 = node.args[0];
          var arg1;
          var div = false; // is output a fraction?

          var negative = false; // is output negative?

          var funcDerivative;

          switch (node.name) {
            case 'cbrt':
              // d/dx(cbrt(x)) = 1 / (3x^(2/3))
              div = true;
              funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);
              break;

            case 'sqrt':
            case 'nthRoot':
              // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
              if (node.args.length === 1) {
                div = true;
                funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);
              } else if (node.args.length === 2) {
                // Rearrange from nthRoot(x, a) -> x^(1/a)
                arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?

                constNodes[arg1] = constNodes[node.args[1]];
                return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);
              }

              break;

            case 'log10':
              arg1 = createConstantNode(10);

            /* fall through! */

            case 'log':
              if (!arg1 && node.args.length === 1) {
                // d/dx(log(x)) = 1 / x
                funcDerivative = arg0.clone();
                div = true;
              } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {
                // d/dx(log(x, c)) = 1 / (x*ln(c))
                funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);
                div = true;
              } else if (node.args.length === 2) {
                // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
                return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);
              }

              break;

            case 'pow':
              constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser

              return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);

            case 'exp':
              // d/dx(e^x) = e^x
              funcDerivative = new FunctionNode('exp', [arg0.clone()]);
              break;

            case 'sin':
              // d/dx(sin(x)) = cos(x)
              funcDerivative = new FunctionNode('cos', [arg0.clone()]);
              break;

            case 'cos':
              // d/dx(cos(x)) = -sin(x)
              funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);
              break;

            case 'tan':
              // d/dx(tan(x)) = sec(x)^2
              funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);
              break;

            case 'sec':
              // d/dx(sec(x)) = sec(x)tan(x)
              funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);
              break;

            case 'csc':
              // d/dx(csc(x)) = -csc(x)cot(x)
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);
              break;

            case 'cot':
              // d/dx(cot(x)) = -csc(x)^2
              negative = true;
              funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);
              break;

            case 'asin':
              // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
              div = true;
              funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
              break;

            case 'acos':
              // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
              div = true;
              negative = true;
              funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
              break;

            case 'atan':
              // d/dx(atan(x)) = 1 / (x^2 + 1)
              div = true;
              funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
              break;

            case 'asec':
              // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
              div = true;
              funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
              break;

            case 'acsc':
              // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
              div = true;
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
              break;

            case 'acot':
              // d/dx(acot(x)) = -1 / (x^2 + 1)
              div = true;
              negative = true;
              funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
              break;

            case 'sinh':
              // d/dx(sinh(x)) = cosh(x)
              funcDerivative = new FunctionNode('cosh', [arg0.clone()]);
              break;

            case 'cosh':
              // d/dx(cosh(x)) = sinh(x)
              funcDerivative = new FunctionNode('sinh', [arg0.clone()]);
              break;

            case 'tanh':
              // d/dx(tanh(x)) = sech(x)^2
              funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);
              break;

            case 'sech':
              // d/dx(sech(x)) = -sech(x)tanh(x)
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);
              break;

            case 'csch':
              // d/dx(csch(x)) = -csch(x)coth(x)
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);
              break;

            case 'coth':
              // d/dx(coth(x)) = -csch(x)^2
              negative = true;
              funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);
              break;

            case 'asinh':
              // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
              div = true;
              funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
              break;

            case 'acosh':
              // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
              div = true;
              funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
              break;

            case 'atanh':
              // d/dx(atanh(x)) = 1 / (1 - x^2)
              div = true;
              funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
              break;

            case 'asech':
              // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
              div = true;
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);
              break;

            case 'acsch':
              // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
              div = true;
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
              break;

            case 'acoth':
              // d/dx(acoth(x)) = -1 / (1 - x^2)
              div = true;
              negative = true;
              funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
              break;

            case 'abs':
              // d/dx(abs(x)) = abs(x)/x
              funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);
              break;

            case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)

            default:
              throw new Error('Function "' + node.name + '" is not supported by derivative, or a wrong number of arguments is passed');
          }

          var op, func;

          if (div) {
            op = '/';
            func = 'divide';
          } else {
            op = '*';
            func = 'multiply';
          }
          /* Apply chain rule to all functions:
             F(x)  = f(g(x))
             F'(x) = g'(x)*f'(g(x)) */


          var chainDerivative = _derivative(arg0, constNodes);

          if (negative) {
            chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);
          }

          return new OperatorNode(op, func, [chainDerivative, funcDerivative]);
        },
        'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {
          if (constNodes[node] !== undefined) {
            return createConstantNode(0);
          }

          if (node.op === '+') {
            // d/dx(sum(f(x)) = sum(f'(x))
            return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {
              return _derivative(arg, constNodes);
            }));
          }

          if (node.op === '-') {
            // d/dx(+/-f(x)) = +/-f'(x)
            if (node.isUnary()) {
              return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);
            } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)


            if (node.isBinary()) {
              return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);
            }
          }

          if (node.op === '*') {
            // d/dx(c*f(x)) = c*f'(x)
            var constantTerms = node.args.filter(function (arg) {
              return constNodes[arg] !== undefined;
            });

            if (constantTerms.length > 0) {
              var nonConstantTerms = node.args.filter(function (arg) {
                return constNodes[arg] === undefined;
              });
              var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);
              var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));
              return new OperatorNode('*', 'multiply', newArgs);
            } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)


            return new OperatorNode('+', 'add', node.args.map(function (argOuter) {
              return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {
                return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();
              }));
            }));
          }

          if (node.op === '/' && node.isBinary()) {
            var arg0 = node.args[0];
            var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c

            if (constNodes[arg1] !== undefined) {
              return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);
            } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)


            if (constNodes[arg0] !== undefined) {
              return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);
            } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2


            return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);
          }

          if (node.op === '^' && node.isBinary()) {
            var _arg = node.args[0];
            var _arg2 = node.args[1];

            if (constNodes[_arg] !== undefined) {
              // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
              if (isConstantNode(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {
                return createConstantNode(0);
              } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)


              return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);
            }

            if (constNodes[_arg2] !== undefined) {
              if (isConstantNode(_arg2)) {
                // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
                if (isZero(_arg2.value)) {
                  return createConstantNode(0);
                } // Ignore exponent; f(x)^1 = f(x)


                if (equal(_arg2.value, 1)) {
                  return _derivative(_arg, constNodes);
                }
              } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)


              var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);
              return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);
            } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]


            return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);
          }

          throw new Error('Operator "' + node.op + '" is not supported by derivative, or a wrong number of arguments is passed');
        }
      });
      /**
       * Ensures the number of arguments for a function are correct,
       * and will throw an error otherwise.
       *
       * @param {FunctionNode} node
       */


      function funcArgsCheck(node) {
        // TODO add min, max etc
        if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {
          return;
        } // There should be an incorrect number of arguments if we reach here
        // Change all args to constants to avoid unidentified
        // symbol error when compiling function


        for (var i = 0; i < node.args.length; ++i) {
          node.args[i] = createConstantNode(0);
        }

        node.compile().evaluate();
        throw new Error('Expected TypeError, but none found');
      }
      /**
       * Helper function to create a constant node with a specific type
       * (number, BigNumber, Fraction)
       * @param {number} value
       * @param {string} [valueType]
       * @return {ConstantNode}
       */


      function createConstantNode(value, valueType) {
        return new ConstantNode(numeric(value, valueType || config.number));
      }

      return derivative;
    });

    var name$k = 'rationalize';
    var dependencies$k = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplifyCore', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode', 'ParenthesisNode'];
    var createRationalize = /* #__PURE__ */factory(name$k, dependencies$k, _ref => {
      var {
        config,
        typed,
        equal,
        isZero,
        add,
        subtract,
        multiply,
        divide,
        pow,
        parse,
        simplifyCore,
        simplify,
        fraction,
        bignumber,
        mathWithTransform,
        matrix,
        AccessorNode,
        ArrayNode,
        ConstantNode,
        FunctionNode,
        IndexNode,
        ObjectNode,
        OperatorNode,
        SymbolNode,
        ParenthesisNode
      } = _ref;
      var simplifyConstant = createSimplifyConstant({
        typed,
        config,
        mathWithTransform,
        matrix,
        fraction,
        bignumber,
        AccessorNode,
        ArrayNode,
        ConstantNode,
        FunctionNode,
        IndexNode,
        ObjectNode,
        OperatorNode,
        SymbolNode
      });
      /**
       * Transform a rationalizable expression in a rational fraction.
       * If rational fraction is one variable polynomial then converts
       * the numerator and denominator in canonical form, with decreasing
       * exponents, returning the coefficients of numerator.
       *
       * Syntax:
       *
       *     rationalize(expr)
       *     rationalize(expr, detailed)
       *     rationalize(expr, scope)
       *     rationalize(expr, scope, detailed)
       *
       * Examples:
       *
       *     math.rationalize('sin(x)+y')
       *                   //  Error: There is an unsolved function call
       *     math.rationalize('2x/y - y/(x+1)')
       *                   // (2*x^2-y^2+2*x)/(x*y+y)
       *     math.rationalize('(2x+1)^6')
       *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1
       *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')
       *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)
       *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =
       *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/
       *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)
       *
       *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1
       *     math.rationalize('x+x+x+y',{})    // 3*x+y
       *
       *     const ret = math.rationalize('x+x+x+y',{},true)
       *                   // ret.expression=3*x+y, ret.variables = ["x","y"]
       *     const ret = math.rationalize('-2+5x^2',{},true)
       *                   // ret.expression=5*x^2-2, ret.variables = ["x"], ret.coefficients=[-2,0,5]
       *
       * See also:
       *
       *     simplify
       *
       * @param  {Node|string} expr    The expression to check if is a polynomial expression
       * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input
       * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)
       *
       * @return {Object | Node}    The rational polynomial of `expr` or an object
       *            `{expression, numerator, denominator, variables, coefficients}`, where
       *              `expression` is a `Node` with the node simplified expression,
       *              `numerator` is a `Node` with the simplified numerator of expression,
       *              `denominator` is a `Node` or `boolean` with the simplified denominator or `false` (if there is no denominator),
       *              `variables` is an array with variable names,
       *              and `coefficients` is an array with coefficients of numerator sorted by increased exponent
       *           {Expression Node}  node simplified expression
       *
       */

      return typed(name$k, {
        string: function string(expr) {
          return this(parse(expr), {}, false);
        },
        'string, boolean': function stringBoolean(expr, detailed) {
          return this(parse(expr), {}, detailed);
        },
        'string, Object': function stringObject(expr, scope) {
          return this(parse(expr), scope, false);
        },
        'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {
          return this(parse(expr), scope, detailed);
        },
        Node: function Node(expr) {
          return this(expr, {}, false);
        },
        'Node, boolean': function NodeBoolean(expr, detailed) {
          return this(expr, {}, detailed);
        },
        'Node, Object': function NodeObject(expr, scope) {
          return this(expr, scope, false);
        },
        'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {
          var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form

          var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial

          var nVars = polyRet.variables.length;
          var noExactFractions = {
            exactFractions: false
          };
          var withExactFractions = {
            exactFractions: true
          };
          expr = polyRet.expression;

          if (nVars >= 1) {
            // If expression in not a constant
            expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)

            var sBefore; // Previous expression

            var rules;
            var eDistrDiv = true;
            var redoInic = false; // Apply the initial rules, including succ div rules:

            expr = simplify(expr, setRules.firstRules, {}, noExactFractions);
            var s;

            while (true) {
              // Alternate applying successive division rules and distr.div.rules
              // until there are no more changes:
              rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;
              expr = simplify(expr, rules, {}, withExactFractions);
              eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules

              s = expr.toString();

              if (s === sBefore) {
                break; // No changes : end of the loop
              }

              redoInic = true;
              sBefore = s;
            }

            if (redoInic) {
              // Apply first rules again without succ div rules (if there are changes)
              expr = simplify(expr, setRules.firstRulesAgain, {}, noExactFractions);
            } // Apply final rules:


            expr = simplify(expr, setRules.finalRules, {}, noExactFractions);
          } // NVars >= 1


          var coefficients = [];
          var retRationalize = {};

          if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {
            // Separate numerator from denominator
            if (nVars === 1) {
              expr.args[0] = polyToCanonical(expr.args[0], coefficients);
              expr.args[1] = polyToCanonical(expr.args[1]);
            }

            if (detailed) {
              retRationalize.numerator = expr.args[0];
              retRationalize.denominator = expr.args[1];
            }
          } else {
            if (nVars === 1) {
              expr = polyToCanonical(expr, coefficients);
            }

            if (detailed) {
              retRationalize.numerator = expr;
              retRationalize.denominator = null;
            }
          } // nVars


          if (!detailed) return expr;
          retRationalize.coefficients = coefficients;
          retRationalize.variables = polyRet.variables;
          retRationalize.expression = expr;
          return retRationalize;
        } // ^^^^^^^ end of rationalize ^^^^^^^^

      }); // end of typed rationalize

      /**
       *  Function to simplify an expression using an optional scope and
       *  return it if the expression is a polynomial expression, i.e.
       *  an expression with one or more variables and the operators
       *  +, -, *, and ^, where the exponent can only be a positive integer.
       *
       * Syntax:
       *
       *     polynomial(expr,scope,extended, rules)
       *
       * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression
       * @param  {object} scope           Optional scope for expression simplification
       * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.
       * @param  {array}  rules           Optional. Default is no rule.
       *
       *
       * @return {Object}
       *            {Object} node:   node simplified expression
       *            {Array}  variables:  variable names
       */

      function polynomial(expr, scope, extended, rules) {
        var variables = [];
        var node = simplify(expr, rules, scope, {
          exactFractions: false
        }); // Resolves any variables and functions with all defined parameters

        extended = !!extended;
        var oper = '+-*' + (extended ? '/' : '');
        recPoly(node);
        var retFunc = {};
        retFunc.expression = node;
        retFunc.variables = variables;
        return retFunc; // -------------------------------------------------------------------------------------------------------

        /**
         *  Function to simplify an expression using an optional scope and
         *  return it if the expression is a polynomial expression, i.e.
         *  an expression with one or more variables and the operators
         *  +, -, *, and ^, where the exponent can only be a positive integer.
         *
         * Syntax:
         *
         *     recPoly(node)
         *
         *
         * @param  {Node} node               The current sub tree expression in recursion
         *
         * @return                           nothing, throw an exception if error
         */

        function recPoly(node) {
          var tp = node.type; // node type

          if (tp === 'FunctionNode') {
            // No function call in polynomial expression
            throw new Error('There is an unsolved function call');
          } else if (tp === 'OperatorNode') {
            if (node.op === '^') {
              // TODO: handle negative exponents like in '1/x^(-2)'
              if (node.args[1].type !== 'ConstantNode' || !isInteger$1(parseFloat(node.args[1].value))) {
                throw new Error('There is a non-integer exponent');
              } else {
                recPoly(node.args[0]);
              }
            } else {
              if (oper.indexOf(node.op) === -1) {
                throw new Error('Operator ' + node.op + ' invalid in polynomial expression');
              }

              for (var i = 0; i < node.args.length; i++) {
                recPoly(node.args[i]);
              }
            } // type of operator

          } else if (tp === 'SymbolNode') {
            var _name = node.name; // variable name

            var pos = variables.indexOf(_name);

            if (pos === -1) {
              // new variable in expression
              variables.push(_name);
            }
          } else if (tp === 'ParenthesisNode') {
            recPoly(node.content);
          } else if (tp !== 'ConstantNode') {
            throw new Error('type ' + tp + ' is not allowed in polynomial expression');
          }
        } // end of recPoly

      } // end of polynomial
      // ---------------------------------------------------------------------------------------

      /**
       * Return a rule set to rationalize an polynomial expression in rationalize
       *
       * Syntax:
       *
       *     rulesRationalize()
       *
       * @return {array}        rule set to rationalize an polynomial expression
       */


      function rulesRationalize() {
        var oldRules = [simplifyCore, // sCore
        {
          l: 'n+n',
          r: '2*n'
        }, {
          l: 'n+-n',
          r: '0'
        }, simplifyConstant, // sConstant
        {
          l: 'n*(n1^-1)',
          r: 'n/n1'
        }, {
          l: 'n*n1^-n2',
          r: 'n/n1^n2'
        }, {
          l: 'n1^-1',
          r: '1/n1'
        }, {
          l: 'n*(n1/n2)',
          r: '(n*n1)/n2'
        }, {
          l: '1*n',
          r: 'n'
        }];
        var rulesFirst = [{
          l: '(-n1)/(-n2)',
          r: 'n1/n2'
        }, // Unary division
        {
          l: '(-n1)*(-n2)',
          r: 'n1*n2'
        }, // Unary multiplication
        {
          l: 'n1--n2',
          r: 'n1+n2'
        }, // '--' elimination
        {
          l: 'n1-n2',
          r: 'n1+(-n2)'
        }, // Subtraction turn into add with un�ry minus
        {
          l: '(n1+n2)*n3',
          r: '(n1*n3 + n2*n3)'
        }, // Distributive 1
        {
          l: 'n1*(n2+n3)',
          r: '(n1*n2+n1*n3)'
        }, // Distributive 2
        {
          l: 'c1*n + c2*n',
          r: '(c1+c2)*n'
        }, // Joining constants
        {
          l: 'c1*n + n',
          r: '(c1+1)*n'
        }, // Joining constants
        {
          l: 'c1*n - c2*n',
          r: '(c1-c2)*n'
        }, // Joining constants
        {
          l: 'c1*n - n',
          r: '(c1-1)*n'
        }, // Joining constants
        {
          l: 'v/c',
          r: '(1/c)*v'
        }, // variable/constant (new!)
        {
          l: 'v/-c',
          r: '-(1/c)*v'
        }, // variable/constant (new!)
        {
          l: '-v*-c',
          r: 'c*v'
        }, // Inversion constant and variable 1
        {
          l: '-v*c',
          r: '-c*v'
        }, // Inversion constant and variable 2
        {
          l: 'v*-c',
          r: '-c*v'
        }, // Inversion constant and variable 3
        {
          l: 'v*c',
          r: 'c*v'
        }, // Inversion constant and variable 4
        {
          l: '-(-n1*n2)',
          r: '(n1*n2)'
        }, // Unary propagation
        {
          l: '-(n1*n2)',
          r: '(-n1*n2)'
        }, // Unary propagation
        {
          l: '-(-n1+n2)',
          r: '(n1-n2)'
        }, // Unary propagation
        {
          l: '-(n1+n2)',
          r: '(-n1-n2)'
        }, // Unary propagation
        {
          l: '(n1^n2)^n3',
          r: '(n1^(n2*n3))'
        }, // Power to Power
        {
          l: '-(-n1/n2)',
          r: '(n1/n2)'
        }, // Division and Unary
        {
          l: '-(n1/n2)',
          r: '(-n1/n2)'
        }]; // Divisao and Unary

        var rulesDistrDiv = [{
          l: '(n1/n2 + n3/n4)',
          r: '((n1*n4 + n3*n2)/(n2*n4))'
        }, // Sum of fractions
        {
          l: '(n1/n2 + n3)',
          r: '((n1 + n3*n2)/n2)'
        }, // Sum fraction with number 1
        {
          l: '(n1 + n2/n3)',
          r: '((n1*n3 + n2)/n3)'
        }]; // Sum fraction with number 1

        var rulesSucDiv = [{
          l: '(n1/(n2/n3))',
          r: '((n1*n3)/n2)'
        }, // Division simplification
        {
          l: '(n1/n2/n3)',
          r: '(n1/(n2*n3))'
        }];
        var setRules = {}; // rules set in 4 steps.
        // All rules => infinite loop
        // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)

        setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set

        setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules

        setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules

        setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.
        // Division simplification
        // Second rule set.
        // There is no aggregate expression with parentesis, but the only variable can be scattered.

        setRules.finalRules = [simplifyCore, // simplify.rules[0]
        {
          l: 'n*-n',
          r: '-n^2'
        }, // Joining multiply with power 1
        {
          l: 'n*n',
          r: 'n^2'
        }, // Joining multiply with power 2
        simplifyConstant, // simplify.rules[14] old 3rd index in oldRules
        {
          l: 'n*-n^n1',
          r: '-n^(n1+1)'
        }, // Joining multiply with power 3
        {
          l: 'n*n^n1',
          r: 'n^(n1+1)'
        }, // Joining multiply with power 4
        {
          l: 'n^n1*-n^n2',
          r: '-n^(n1+n2)'
        }, // Joining multiply with power 5
        {
          l: 'n^n1*n^n2',
          r: 'n^(n1+n2)'
        }, // Joining multiply with power 6
        {
          l: 'n^n1*-n',
          r: '-n^(n1+1)'
        }, // Joining multiply with power 7
        {
          l: 'n^n1*n',
          r: 'n^(n1+1)'
        }, // Joining multiply with power 8
        {
          l: 'n^n1/-n',
          r: '-n^(n1-1)'
        }, // Joining multiply with power 8
        {
          l: 'n^n1/n',
          r: 'n^(n1-1)'
        }, // Joining division with power 1
        {
          l: 'n/-n^n1',
          r: '-n^(1-n1)'
        }, // Joining division with power 2
        {
          l: 'n/n^n1',
          r: 'n^(1-n1)'
        }, // Joining division with power 3
        {
          l: 'n^n1/-n^n2',
          r: 'n^(n1-n2)'
        }, // Joining division with power 4
        {
          l: 'n^n1/n^n2',
          r: 'n^(n1-n2)'
        }, // Joining division with power 5
        {
          l: 'n1+(-n2*n3)',
          r: 'n1-n2*n3'
        }, // Solving useless parenthesis 1
        {
          l: 'v*(-c)',
          r: '-c*v'
        }, // Solving useless unary 2
        {
          l: 'n1+-n2',
          r: 'n1-n2'
        }, // Solving +- together (new!)
        {
          l: 'v*c',
          r: 'c*v'
        }, // inversion constant with variable
        {
          l: '(n1^n2)^n3',
          r: '(n1^(n2*n3))'
        } // Power to Power
        ];
        return setRules;
      } // End rulesRationalize
      // ---------------------------------------------------------------------------------------

      /**
       *  Expand recursively a tree node for handling with expressions with exponents
       *  (it's not for constants, symbols or functions with exponents)
       *  PS: The other parameters are internal for recursion
       *
       * Syntax:
       *
       *     expandPower(node)
       *
       * @param  {Node} node         Current expression node
       * @param  {node} parent       Parent current node inside the recursion
       * @param  (int}               Parent number of chid inside the rercursion
       *
       * @return {node}        node expression with all powers expanded.
       */


      function expandPower(node, parent, indParent) {
        var tp = node.type;
        var internal = arguments.length > 1; // TRUE in internal calls

        if (tp === 'OperatorNode' && node.isBinary()) {
          var does = false;
          var val;

          if (node.op === '^') {
            // First operator: Parenthesis or UnaryMinus
            if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {
              // Second operator: Constant
              val = parseFloat(node.args[1].value);
              does = val >= 2 && isInteger$1(val);
            }
          }

          if (does) {
            // Exponent >= 2
            // Before:
            //            operator A --> Subtree
            // parent pow
            //            constant
            //
            if (val > 2) {
              // Exponent > 2,
              // AFTER:  (exponent > 2)
              //             operator A --> Subtree
              // parent  *
              //                 deep clone (operator A --> Subtree
              //             pow
              //                 constant - 1
              //
              var nEsqTopo = node.args[0];
              var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);
              node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);
            } else {
              // Expo = 2 - no power
              // AFTER:  (exponent =  2)
              //             operator A --> Subtree
              // parent   oper
              //            deep clone (operator A --> Subtree)
              //
              node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);
            }

            if (internal) {
              // Change parent references in internal recursive calls
              if (indParent === 'content') {
                parent.content = node;
              } else {
                parent.args[indParent] = node;
              }
            }
          } // does

        } // binary OperatorNode


        if (tp === 'ParenthesisNode') {
          // Recursion
          expandPower(node.content, node, 'content');
        } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {
          for (var i = 0; i < node.args.length; i++) {
            expandPower(node.args[i], node, i);
          }
        }

        if (!internal) {
          // return the root node
          return node;
        }
      } // End expandPower
      // ---------------------------------------------------------------------------------------

      /**
       * Auxilary function for rationalize
       * Convert near canonical polynomial in one variable in a canonical polynomial
       * with one term for each exponent in decreasing order
       *
       * Syntax:
       *
       *     polyToCanonical(node [, coefficients])
       *
       * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression
       *
       *        The string or tree expression needs to be at below syntax, with free spaces:
       *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+
       *       Where 'var' is one variable with any valid name
       *             'cte' are real numeric constants with any value. It can be omitted if equal than 1
       *             'expo' are integers greater than 0. It can be omitted if equal than 1.
       *
       * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent
       *
       *
       * @return {node}        new node tree with one variable polynomial or string error.
       */


      function polyToCanonical(node, coefficients) {
        if (coefficients === undefined) {
          coefficients = [];
        } // coefficients.


        coefficients[0] = 0; // index is the exponent

        var o = {};
        o.cte = 1;
        o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to "" with + and -.
        //       It is used to deduce the exponent: 1 for *, 0 for "".

        o.fire = '';
        var maxExpo = 0; // maximum exponent

        var varname = ''; // variable name

        recurPol(node, null, o);
        maxExpo = coefficients.length - 1;
        var first = true;
        var no;

        for (var i = maxExpo; i >= 0; i--) {
          if (coefficients[i] === 0) continue;
          var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));
          var op = coefficients[i] < 0 ? '-' : '+';

          if (i > 0) {
            // Is not a constant without variable
            var n2 = new SymbolNode(varname);

            if (i > 1) {
              var n3 = new ConstantNode(i);
              n2 = new OperatorNode('^', 'pow', [n2, n3]);
            }

            if (coefficients[i] === -1 && first) {
              n1 = new OperatorNode('-', 'unaryMinus', [n2]);
            } else if (Math.abs(coefficients[i]) === 1) {
              n1 = n2;
            } else {
              n1 = new OperatorNode('*', 'multiply', [n1, n2]);
            }
          }

          if (first) {
            no = n1;
          } else if (op === '+') {
            no = new OperatorNode('+', 'add', [no, n1]);
          } else {
            no = new OperatorNode('-', 'subtract', [no, n1]);
          }

          first = false;
        } // for


        if (first) {
          return new ConstantNode(0);
        } else {
          return no;
        }
        /**
         * Recursive auxilary function inside polyToCanonical for
         * converting expression in canonical form
         *
         * Syntax:
         *
         *     recurPol(node, noPai, obj)
         *
         * @param  {Node} node        The current subpolynomial expression
         * @param  {Node | Null}  noPai   The current parent node
         * @param  {object}    obj        Object with many internal flags
         *
         * @return {}                    No return. If error, throws an exception
         */


        function recurPol(node, noPai, o) {
          var tp = node.type;

          if (tp === 'FunctionNode') {
            // ***** FunctionName *****
            // No function call in polynomial expression
            throw new Error('There is an unsolved function call');
          } else if (tp === 'OperatorNode') {
            // ***** OperatorName *****
            if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');

            if (noPai !== null) {
              // -(unary),^  : children of *,+,-
              if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {
                throw new Error('Invalid ' + node.op + ' placing');
              } // -,+,* : children of +,-


              if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {
                throw new Error('Invalid ' + node.op + ' placing');
              } // -,+ : first child


              if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {
                throw new Error('Invalid ' + node.op + ' placing');
              }
            } // Has parent
            // Firers: ^,*       Old:   ^,&,-(unary): firers


            if (node.op === '^' || node.op === '*') {
              o.fire = node.op;
            }

            for (var _i = 0; _i < node.args.length; _i++) {
              // +,-: reset fire
              if (node.fn === 'unaryMinus') o.oper = '-';

              if (node.op === '+' || node.fn === 'subtract') {
                o.fire = '';
                o.cte = 1; // default if there is no constant

                o.oper = _i === 0 ? '+' : node.op;
              }

              o.noFil = _i; // number of son

              recurPol(node.args[_i], node, o);
            } // for in children

          } else if (tp === 'SymbolNode') {
            // ***** SymbolName *****
            if (node.name !== varname && varname !== '') {
              throw new Error('There is more than one variable');
            }

            varname = node.name;

            if (noPai === null) {
              coefficients[1] = 1;
              return;
            } // ^: Symbol is First child


            if (noPai.op === '^' && o.noFil !== 0) {
              throw new Error('In power the variable should be the first parameter');
            } // *: Symbol is Second child


            if (noPai.op === '*' && o.noFil !== 1) {
              throw new Error('In multiply the variable should be the second parameter');
            } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)


            if (o.fire === '' || o.fire === '*') {
              if (maxExpo < 1) coefficients[1] = 0;
              coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);
              maxExpo = Math.max(1, maxExpo);
            }
          } else if (tp === 'ConstantNode') {
            var valor = parseFloat(node.value);

            if (noPai === null) {
              coefficients[0] = valor;
              return;
            }

            if (noPai.op === '^') {
              // cte: second  child of power
              if (o.noFil !== 1) throw new Error('Constant cannot be powered');

              if (!isInteger$1(valor) || valor <= 0) {
                throw new Error('Non-integer exponent is not allowed');
              }

              for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {
                coefficients[_i2] = 0;
              }

              if (valor > maxExpo) coefficients[valor] = 0;
              coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);
              maxExpo = Math.max(valor, maxExpo);
              return;
            }

            o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.

            if (o.fire === '') {
              coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);
            }
          } else {
            throw new Error('Type ' + tp + ' is not allowed');
          }
        } // End of recurPol

      } // End of polyToCanonical

    });

    var name$j = 'reviver';
    var dependencies$j = ['classes'];
    var createReviver = /* #__PURE__ */factory(name$j, dependencies$j, _ref => {
      var {
        classes
      } = _ref;

      /**
       * Instantiate mathjs data types from their JSON representation
       * @param {string} key
       * @param {*} value
       * @returns {*} Returns the revived object
       */
      return function reviver(key, value) {
        var constructor = classes[value && value.mathjs];

        if (constructor && typeof constructor.fromJSON === 'function') {
          return constructor.fromJSON(value);
        }

        return value;
      };
    });

    var name$i = 'replacer';
    var dependencies$i = [];
    var createReplacer = /* #__PURE__ */factory(name$i, dependencies$i, () => {
      /**
       * Stringify data types into their JSON representation.
       * Most data types can be serialized using their `.toJSON` method,
       * but not all, for example the number `Infinity`. For these cases you have
       * to use the replacer. Example usage:
       *
       *     JSON.stringify([2, Infinity], math.replacer)
       *
       * @param {string} key
       * @param {*} value
       * @returns {*} Returns the replaced object
       */
      return function replacer(key, value) {
        // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON
        if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {
          return {
            mathjs: 'number',
            value: String(value)
          };
        }

        return value;
      };
    });

    var version$1 = '10.6.1'; // Note: This file is automatically generated when building math.js.
    // Changes made in this file will be overwritten.

    var createTrue = /* #__PURE__ */factory('true', [], () => true);
    var createFalse = /* #__PURE__ */factory('false', [], () => false);
    var createNull = /* #__PURE__ */factory('null', [], () => null);
    var createInfinity = /* #__PURE__ */recreateFactory('Infinity', ['config', '?BigNumber'], _ref => {
      var {
        config,
        BigNumber
      } = _ref;
      return config.number === 'BigNumber' ? new BigNumber(Infinity) : Infinity;
    });
    var createNaN = /* #__PURE__ */recreateFactory('NaN', ['config', '?BigNumber'], _ref2 => {
      var {
        config,
        BigNumber
      } = _ref2;
      return config.number === 'BigNumber' ? new BigNumber(NaN) : NaN;
    });
    var createPi = /* #__PURE__ */recreateFactory('pi', ['config', '?BigNumber'], _ref3 => {
      var {
        config,
        BigNumber
      } = _ref3;
      return config.number === 'BigNumber' ? createBigNumberPi(BigNumber) : pi$1;
    });
    var createTau = /* #__PURE__ */recreateFactory('tau', ['config', '?BigNumber'], _ref4 => {
      var {
        config,
        BigNumber
      } = _ref4;
      return config.number === 'BigNumber' ? createBigNumberTau(BigNumber) : tau$1;
    });
    var createE = /* #__PURE__ */recreateFactory('e', ['config', '?BigNumber'], _ref5 => {
      var {
        config,
        BigNumber
      } = _ref5;
      return config.number === 'BigNumber' ? createBigNumberE(BigNumber) : e$1;
    }); // golden ratio, (1+sqrt(5))/2

    var createPhi = /* #__PURE__ */recreateFactory('phi', ['config', '?BigNumber'], _ref6 => {
      var {
        config,
        BigNumber
      } = _ref6;
      return config.number === 'BigNumber' ? createBigNumberPhi(BigNumber) : phi$1;
    });
    var createLN2 = /* #__PURE__ */recreateFactory('LN2', ['config', '?BigNumber'], _ref7 => {
      var {
        config,
        BigNumber
      } = _ref7;
      return config.number === 'BigNumber' ? new BigNumber(2).ln() : Math.LN2;
    });
    var createLN10 = /* #__PURE__ */recreateFactory('LN10', ['config', '?BigNumber'], _ref8 => {
      var {
        config,
        BigNumber
      } = _ref8;
      return config.number === 'BigNumber' ? new BigNumber(10).ln() : Math.LN10;
    });
    var createLOG2E = /* #__PURE__ */recreateFactory('LOG2E', ['config', '?BigNumber'], _ref9 => {
      var {
        config,
        BigNumber
      } = _ref9;
      return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(2).ln()) : Math.LOG2E;
    });
    var createLOG10E = /* #__PURE__ */recreateFactory('LOG10E', ['config', '?BigNumber'], _ref10 => {
      var {
        config,
        BigNumber
      } = _ref10;
      return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(10).ln()) : Math.LOG10E;
    });
    var createSQRT1_2 = /* #__PURE__ */recreateFactory( // eslint-disable-line camelcase
    'SQRT1_2', ['config', '?BigNumber'], _ref11 => {
      var {
        config,
        BigNumber
      } = _ref11;
      return config.number === 'BigNumber' ? new BigNumber('0.5').sqrt() : Math.SQRT1_2;
    });
    var createSQRT2 = /* #__PURE__ */recreateFactory('SQRT2', ['config', '?BigNumber'], _ref12 => {
      var {
        config,
        BigNumber
      } = _ref12;
      return config.number === 'BigNumber' ? new BigNumber(2).sqrt() : Math.SQRT2;
    });
    var createI = /* #__PURE__ */recreateFactory('i', ['Complex'], _ref13 => {
      var {
        Complex
      } = _ref13;
      return Complex.I;
    }); // for backward compatibility with v5
    var createVersion = /* #__PURE__ */factory('version', [], () => version$1); // helper function to create a factory with a flag recreateOnConfigChange
    // idea: allow passing optional properties to be attached to the factory function as 4th argument?

    function recreateFactory(name, dependencies, create) {
      return factory(name, dependencies, create, {
        recreateOnConfigChange: true
      });
    }

    // Universal constants

    var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');
    var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');
    var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');
    var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants

    var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');
    var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');
    var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');
    var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');
    var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');
    var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');
    var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');
    var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');
    var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');
    var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');
    var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');
    // Atomic and nuclear constants

    var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');
    var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');
    var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');
    var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');
    var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);
    var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');
    var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');
    var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');
    var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');
    var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');
    var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');
    var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');
    var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);
    var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants

    var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');
    var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');
    var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');
    var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');
    var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); 

    var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');
    var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');
    var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');
    var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');
    var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);
    var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');
    var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');
    var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values

    var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');
    var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');
    var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js
    // Natural units

    var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');
    var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');
    var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');
    var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');
    var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,
    // a Unit with either a number value or a BigNumber value depending on the configuration

    function unitFactory(name, valueStr, unitStr) {
      var dependencies = ['config', 'Unit', 'BigNumber'];
      return factory(name, dependencies, _ref => {
        var {
          config,
          Unit,
          BigNumber
        } = _ref;
        // Note that we can parse into number or BigNumber.
        // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values
        // Therefore we dont use Unit.parse()
        var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);
        var unit = new Unit(value, unitStr);
        unit.fixPrefix = true;
        return unit;
      });
    } // helper function to create a factory function which creates a numeric constant,
    // either a number or BigNumber depending on the configuration


    function numberFactory(name, value) {
      var dependencies = ['config', 'BigNumber'];
      return factory(name, dependencies, _ref2 => {
        var {
          config,
          BigNumber
        } = _ref2;
        return config.number === 'BigNumber' ? new BigNumber(value) : value;
      });
    }

    var name$h = 'apply';
    var dependencies$h = ['typed', 'isInteger'];
    /**
     * Attach a transform function to math.apply
     * Adds a property transform containing the transform function.
     *
     * This transform changed the last `dim` parameter of function apply
     * from one-based to zero based
     */

    var createApplyTransform = /* #__PURE__ */factory(name$h, dependencies$h, _ref => {
      var {
        typed,
        isInteger
      } = _ref;
      var apply = createApply({
        typed,
        isInteger
      }); // @see: comment of concat itself

      return typed('apply', {
        '...any': function any(args) {
          // change dim from one-based to zero-based
          var dim = args[1];

          if (isNumber(dim)) {
            args[1] = dim - 1;
          } else if (isBigNumber(dim)) {
            args[1] = dim.minus(1);
          }

          try {
            return apply.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$g = 'column';
    var dependencies$g = ['typed', 'Index', 'matrix', 'range'];
    /**
     * Attach a transform function to matrix.column
     * Adds a property transform containing the transform function.
     *
     * This transform changed the last `index` parameter of function column
     * from zero-based to one-based
     */

    var createColumnTransform = /* #__PURE__ */factory(name$g, dependencies$g, _ref => {
      var {
        typed,
        Index,
        matrix,
        range
      } = _ref;
      var column = createColumn({
        typed,
        Index,
        matrix,
        range
      }); // @see: comment of column itself

      return typed('column', {
        '...any': function any(args) {
          // change last argument from zero-based to one-based
          var lastIndex = args.length - 1;
          var last = args[lastIndex];

          if (isNumber(last)) {
            args[lastIndex] = last - 1;
          }

          try {
            return column.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    /**
     * Compile an inline expression like "x > 0"
     * @param {Node} expression
     * @param {Object} math
     * @param {Object} scope
     * @return {function} Returns a function with one argument which fills in the
     *                    undefined variable (like "x") and evaluates the expression
     */

    function compileInlineExpression(expression, math, scope) {
      // find an undefined symbol
      var symbol = expression.filter(function (node) {
        return isSymbolNode(node) && !(node.name in math) && !scope.has(node.name);
      })[0];

      if (!symbol) {
        throw new Error('No undefined variable found in inline expression "' + expression + '"');
      } // create a test function for this equation


      var name = symbol.name; // variable name

      var subScope = createSubScope(scope);
      var eq = expression.compile();
      return function inlineExpression(x) {
        subScope.set(name, x);
        return eq.evaluate(subScope);
      };
    }

    var name$f = 'filter';
    var dependencies$f = ['typed'];
    var createFilterTransform = /* #__PURE__ */factory(name$f, dependencies$f, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Attach a transform function to math.filter
       * Adds a property transform containing the transform function.
       *
       * This transform adds support for equations as test function for math.filter,
       * so you can do something like 'filter([3, -2, 5], x > 0)'.
       */
      function filterTransform(args, math, scope) {
        var x, callback;

        if (args[0]) {
          x = args[0].compile().evaluate(scope);
        }

        if (args[1]) {
          if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {
            // a function pointer, like filter([3, -2, 5], myTestFunction)
            callback = args[1].compile().evaluate(scope);
          } else {
            // an expression like filter([3, -2, 5], x > 0)
            callback = compileInlineExpression(args[1], math, scope);
          }
        }

        return filter(x, callback);
      }

      filterTransform.rawArgs = true; // one based version of function filter

      var filter = typed('filter', {
        'Array, function': _filter,
        'Matrix, function': function MatrixFunction(x, test) {
          return x.create(_filter(x.toArray(), test));
        },
        'Array, RegExp': filterRegExp,
        'Matrix, RegExp': function MatrixRegExp(x, test) {
          return x.create(filterRegExp(x.toArray(), test));
        }
      });
      return filterTransform;
    }, {
      isTransformFunction: true
    });
    /**
     * Filter values in a callback given a callback function
     *
     * !!! Passes a one-based index !!!
     *
     * @param {Array} x
     * @param {Function} callback
     * @return {Array} Returns the filtered array
     * @private
     */

    function _filter(x, callback) {
      // figure out what number of arguments the callback function expects
      var args = maxArgumentCount(callback);
      return filter$1(x, function (value, index, array) {
        // invoke the callback function with the right number of arguments
        if (args === 1) {
          return callback(value);
        } else if (args === 2) {
          return callback(value, [index + 1]);
        } else {
          // 3 or -1
          return callback(value, [index + 1], array);
        }
      });
    }

    var name$e = 'forEach';
    var dependencies$e = ['typed'];
    var createForEachTransform = /* #__PURE__ */factory(name$e, dependencies$e, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Attach a transform function to math.forEach
       * Adds a property transform containing the transform function.
       *
       * This transform creates a one-based index instead of a zero-based index
       */
      function forEachTransform(args, math, scope) {
        var x, callback;

        if (args[0]) {
          x = args[0].compile().evaluate(scope);
        }

        if (args[1]) {
          if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {
            // a function pointer, like forEach([3, -2, 5], myTestFunction)
            callback = args[1].compile().evaluate(scope);
          } else {
            // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )
            callback = compileInlineExpression(args[1], math, scope);
          }
        }

        return _forEach(x, callback);
      }

      forEachTransform.rawArgs = true; // one-based version of forEach

      var _forEach = typed('forEach', {
        'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {
          // figure out what number of arguments the callback function expects
          var args = maxArgumentCount(callback);

          var recurse = function recurse(value, index) {
            if (Array.isArray(value)) {
              forEach$1(value, function (child, i) {
                // we create a copy of the index array and append the new index value
                recurse(child, index.concat(i + 1)); // one based index, hence i+1
              });
            } else {
              // invoke the callback function with the right number of arguments
              if (args === 1) {
                callback(value);
              } else if (args === 2) {
                callback(value, index);
              } else {
                // 3 or -1
                callback(value, index, array);
              }
            }
          };

          recurse(array.valueOf(), []); // pass Array
        }
      });

      return forEachTransform;
    }, {
      isTransformFunction: true
    });

    var name$d = 'index';
    var dependencies$d = ['Index'];
    var createIndexTransform = /* #__PURE__ */factory(name$d, dependencies$d, _ref => {
      var {
        Index
      } = _ref;

      /**
       * Attach a transform function to math.index
       * Adds a property transform containing the transform function.
       *
       * This transform creates a one-based index instead of a zero-based index
       */
      return function indexTransform() {
        var args = [];

        for (var i = 0, ii = arguments.length; i < ii; i++) {
          var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number

          if (isRange(arg)) {
            arg.start--;
            arg.end -= arg.step > 0 ? 0 : 2;
          } else if (arg && arg.isSet === true) {
            arg = arg.map(function (v) {
              return v - 1;
            });
          } else if (isArray(arg) || isMatrix(arg)) {
            arg = arg.map(function (v) {
              return v - 1;
            });
          } else if (isNumber(arg)) {
            arg--;
          } else if (isBigNumber(arg)) {
            arg = arg.toNumber() - 1;
          } else if (typeof arg === 'string') ; else {
            throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
          }

          args[i] = arg;
        }

        var res = new Index();
        Index.apply(res, args);
        return res;
      };
    }, {
      isTransformFunction: true
    });

    var name$c = 'map';
    var dependencies$c = ['typed'];
    var createMapTransform = /* #__PURE__ */factory(name$c, dependencies$c, _ref => {
      var {
        typed
      } = _ref;

      /**
       * Attach a transform function to math.map
       * Adds a property transform containing the transform function.
       *
       * This transform creates a one-based index instead of a zero-based index
       */
      function mapTransform(args, math, scope) {
        var x, callback;

        if (args[0]) {
          x = args[0].compile().evaluate(scope);
        }

        if (args[1]) {
          if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {
            // a function pointer, like filter([3, -2, 5], myTestFunction)
            callback = args[1].compile().evaluate(scope);
          } else {
            // an expression like filter([3, -2, 5], x > 0)
            callback = compileInlineExpression(args[1], math, scope);
          }
        }

        return map(x, callback);
      }

      mapTransform.rawArgs = true; // one-based version of map function

      var map = typed('map', {
        'Array, function': function ArrayFunction(x, callback) {
          return _map(x, callback, x);
        },
        'Matrix, function': function MatrixFunction(x, callback) {
          return x.create(_map(x.valueOf(), callback, x));
        }
      });
      return mapTransform;
    }, {
      isTransformFunction: true
    });
    /**
     * Map for a multi dimensional array. One-based indexes
     * @param {Array} array
     * @param {function} callback
     * @param {Array} orig
     * @return {Array}
     * @private
     */

    function _map(array, callback, orig) {
      // figure out what number of arguments the callback function expects
      var argsCount = maxArgumentCount(callback);

      function recurse(value, index) {
        if (Array.isArray(value)) {
          return map$1(value, function (child, i) {
            // we create a copy of the index array and append the new index value
            return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
          });
        } else {
          // invoke the (typed) callback function with the right number of arguments
          if (argsCount === 1) {
            return callback(value);
          } else if (argsCount === 2) {
            return callback(value, index);
          } else {
            // 3 or -1
            return callback(value, index, orig);
          }
        }
      }

      return recurse(array, []);
    }

    /**
     * Change last argument dim from one-based to zero-based.
     */

    function lastDimToZeroBase(args) {
      if (args.length === 2 && isCollection(args[0])) {
        args = args.slice();
        var dim = args[1];

        if (isNumber(dim)) {
          args[1] = dim - 1;
        } else if (isBigNumber(dim)) {
          args[1] = dim.minus(1);
        }
      }

      return args;
    }

    var name$b = 'max';
    var dependencies$b = ['typed', 'config', 'numeric', 'larger'];
    var createMaxTransform = /* #__PURE__ */factory(name$b, dependencies$b, _ref => {
      var {
        typed,
        config,
        numeric,
        larger
      } = _ref;
      var max = createMax({
        typed,
        config,
        numeric,
        larger
      });
      /**
       * Attach a transform function to math.max
       * Adds a property transform containing the transform function.
       *
       * This transform changed the last `dim` parameter of function max
       * from one-based to zero based
       */

      return typed('max', {
        '...any': function any(args) {
          args = lastDimToZeroBase(args);

          try {
            return max.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$a = 'mean';
    var dependencies$a = ['typed', 'add', 'divide'];
    var createMeanTransform = /* #__PURE__ */factory(name$a, dependencies$a, _ref => {
      var {
        typed,
        add,
        divide
      } = _ref;
      var mean = createMean({
        typed,
        add,
        divide
      });
      /**
       * Attach a transform function to math.mean
       * Adds a property transform containing the transform function.
       *
       * This transform changed the last `dim` parameter of function mean
       * from one-based to zero based
       */

      return typed('mean', {
        '...any': function any(args) {
          args = lastDimToZeroBase(args);

          try {
            return mean.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$9 = 'min';
    var dependencies$9 = ['typed', 'config', 'numeric', 'smaller'];
    var createMinTransform = /* #__PURE__ */factory(name$9, dependencies$9, _ref => {
      var {
        typed,
        config,
        numeric,
        smaller
      } = _ref;
      var min = createMin({
        typed,
        config,
        numeric,
        smaller
      });
      /**
       * Attach a transform function to math.min
       * Adds a property transform containing the transform function.
       *
       * This transform changed the last `dim` parameter of function min
       * from one-based to zero based
       */

      return typed('min', {
        '...any': function any(args) {
          args = lastDimToZeroBase(args);

          try {
            return min.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$8 = 'range';
    var dependencies$8 = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
    var createRangeTransform = /* #__PURE__ */factory(name$8, dependencies$8, _ref => {
      var {
        typed,
        config,
        matrix,
        bignumber,
        smaller,
        smallerEq,
        larger,
        largerEq
      } = _ref;
      var range = createRange({
        typed,
        config,
        matrix,
        bignumber,
        smaller,
        smallerEq,
        larger,
        largerEq
      });
      /**
       * Attach a transform function to math.range
       * Adds a property transform containing the transform function.
       *
       * This transform creates a range which includes the end value
       */

      return typed('range', {
        '...any': function any(args) {
          var lastIndex = args.length - 1;
          var last = args[lastIndex];

          if (typeof last !== 'boolean') {
            // append a parameter includeEnd=true
            args.push(true);
          }

          return range.apply(null, args);
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$7 = 'row';
    var dependencies$7 = ['typed', 'Index', 'matrix', 'range'];
    /**
     * Attach a transform function to matrix.column
     * Adds a property transform containing the transform function.
     *
     * This transform changed the last `index` parameter of function column
     * from zero-based to one-based
     */

    var createRowTransform = /* #__PURE__ */factory(name$7, dependencies$7, _ref => {
      var {
        typed,
        Index,
        matrix,
        range
      } = _ref;
      var row = createRow({
        typed,
        Index,
        matrix,
        range
      }); // @see: comment of row itself

      return typed('row', {
        '...any': function any(args) {
          // change last argument from zero-based to one-based
          var lastIndex = args.length - 1;
          var last = args[lastIndex];

          if (isNumber(last)) {
            args[lastIndex] = last - 1;
          }

          try {
            return row.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$6 = 'subset';
    var dependencies$6 = ['typed', 'matrix'];
    var createSubsetTransform = /* #__PURE__ */factory(name$6, dependencies$6, _ref => {
      var {
        typed,
        matrix
      } = _ref;
      var subset = createSubset({
        typed,
        matrix
      });
      /**
       * Attach a transform function to math.subset
       * Adds a property transform containing the transform function.
       *
       * This transform creates a range which includes the end value
       */

      return typed('subset', {
        '...any': function any(args) {
          try {
            return subset.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$5 = 'concat';
    var dependencies$5 = ['typed', 'matrix', 'isInteger'];
    var createConcatTransform = /* #__PURE__ */factory(name$5, dependencies$5, _ref => {
      var {
        typed,
        matrix,
        isInteger
      } = _ref;
      var concat = createConcat({
        typed,
        matrix,
        isInteger
      });
      /**
       * Attach a transform function to math.range
       * Adds a property transform containing the transform function.
       *
       * This transform changed the last `dim` parameter of function concat
       * from one-based to zero based
       */

      return typed('concat', {
        '...any': function any(args) {
          // change last argument from one-based to zero-based
          var lastIndex = args.length - 1;
          var last = args[lastIndex];

          if (isNumber(last)) {
            args[lastIndex] = last - 1;
          } else if (isBigNumber(last)) {
            args[lastIndex] = last.minus(1);
          }

          try {
            return concat.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$4 = 'diff';
    var dependencies$4 = ['typed', 'matrix', 'subtract', 'number', 'bignumber'];
    var createDiffTransform = /* #__PURE__ */factory(name$4, dependencies$4, _ref => {
      var {
        typed,
        matrix,
        subtract,
        number,
        bignumber
      } = _ref;
      var diff = createDiff({
        typed,
        matrix,
        subtract,
        number,
        bignumber
      });
      /**
       * Attach a transform function to math.diff
       * Adds a property transform containing the transform function.
       *
       * This transform creates a range which includes the end value
       */

      return typed(name$4, {
        '...any': function any(args) {
          args = lastDimToZeroBase(args);

          try {
            return diff.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$3 = 'std';
    var dependencies$3 = ['typed', 'sqrt', 'variance'];
    /**
     * Attach a transform function to math.std
     * Adds a property transform containing the transform function.
     *
     * This transform changed the `dim` parameter of function std
     * from one-based to zero based
     */

    var createStdTransform = /* #__PURE__ */factory(name$3, dependencies$3, _ref => {
      var {
        typed,
        sqrt,
        variance
      } = _ref;
      var std = createStd({
        typed,
        sqrt,
        variance
      });
      return typed('std', {
        '...any': function any(args) {
          args = lastDimToZeroBase(args);

          try {
            return std.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    /**
     * Attach a transform function to math.sum
     * Adds a property transform containing the transform function.
     *
     * This transform changed the last `dim` parameter of function sum
     * from one-based to zero based
     */

    var name$2 = 'sum';
    var dependencies$2 = ['typed', 'config', 'add', 'numeric'];
    var createSumTransform = /* #__PURE__ */factory(name$2, dependencies$2, _ref => {
      var {
        typed,
        config,
        add,
        numeric
      } = _ref;
      var sum = createSum({
        typed,
        config,
        add,
        numeric
      });
      return typed(name$2, {
        '...any': function any(args) {
          args = lastDimToZeroBase(args);

          try {
            return sum.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    /**
     * Attach a transform function to math.sum
     * Adds a property transform containing the transform function.
     *
     * This transform changed the last `dim` parameter of function sum
     * from one-based to zero based
     */

    var name$1 = 'cumsum';
    var dependencies$1 = ['typed', 'add', 'unaryPlus'];
    var createCumSumTransform = /* #__PURE__ */factory(name$1, dependencies$1, _ref => {
      var {
        typed,
        add,
        unaryPlus
      } = _ref;
      var cumsum = createCumSum({
        typed,
        add,
        unaryPlus
      });
      return typed(name$1, {
        '...any': function any(args) {
          // change last argument dim from one-based to zero-based
          if (args.length === 2 && isCollection(args[0])) {
            var dim = args[1];

            if (isNumber(dim)) {
              args[1] = dim - 1;
            } else if (isBigNumber(dim)) {
              args[1] = dim.minus(1);
            }
          }

          try {
            return cumsum.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name = 'variance';
    var dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
    /**
     * Attach a transform function to math.var
     * Adds a property transform containing the transform function.
     *
     * This transform changed the `dim` parameter of function var
     * from one-based to zero based
     */

    var createVarianceTransform = /* #__PURE__ */factory(name, dependencies, _ref => {
      var {
        typed,
        add,
        subtract,
        multiply,
        divide,
        apply,
        isNaN
      } = _ref;
      var variance = createVariance({
        typed,
        add,
        subtract,
        multiply,
        divide,
        apply,
        isNaN
      });
      return typed(name, {
        '...any': function any(args) {
          args = lastDimToZeroBase(args);

          try {
            return variance.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    /**
     * THIS FILE IS AUTO-GENERATED
     * DON'T MAKE CHANGES HERE
     */
    var BigNumber = /* #__PURE__ */createBigNumberClass({
      config
    });
    var Complex = /* #__PURE__ */createComplexClass({});
    var e = /* #__PURE__ */createE({
      BigNumber,
      config
    });
    var _false = /* #__PURE__ */createFalse({});
    var fineStructure = /* #__PURE__ */createFineStructure({
      BigNumber,
      config
    });
    var Fraction = /* #__PURE__ */createFractionClass({});
    var i$1 = /* #__PURE__ */createI({
      Complex
    });
    var _Infinity = /* #__PURE__ */createInfinity({
      BigNumber,
      config
    });
    var LN10 = /* #__PURE__ */createLN10({
      BigNumber,
      config
    });
    var LOG10E = /* #__PURE__ */createLOG10E({
      BigNumber,
      config
    });
    var Matrix = /* #__PURE__ */createMatrixClass({});
    var _NaN = /* #__PURE__ */createNaN({
      BigNumber,
      config
    });
    var _null = /* #__PURE__ */createNull({});
    var phi = /* #__PURE__ */createPhi({
      BigNumber,
      config
    });
    var Range = /* #__PURE__ */createRangeClass({});
    var ResultSet = /* #__PURE__ */createResultSet({});
    var SQRT1_2 = /* #__PURE__ */createSQRT1_2({
      BigNumber,
      config
    });
    var sackurTetrode = /* #__PURE__ */createSackurTetrode({
      BigNumber,
      config
    });
    var tau = /* #__PURE__ */createTau({
      BigNumber,
      config
    });
    var _true = /* #__PURE__ */createTrue({});
    var version = /* #__PURE__ */createVersion({});
    var DenseMatrix = /* #__PURE__ */createDenseMatrixClass({
      Matrix
    });
    var efimovFactor = /* #__PURE__ */createEfimovFactor({
      BigNumber,
      config
    });
    var LN2 = /* #__PURE__ */createLN2({
      BigNumber,
      config
    });
    var pi = /* #__PURE__ */createPi({
      BigNumber,
      config
    });
    var replacer = /* #__PURE__ */createReplacer({});
    var SQRT2 = /* #__PURE__ */createSQRT2({
      BigNumber,
      config
    });
    var typed = /* #__PURE__ */createTyped({
      BigNumber,
      Complex,
      DenseMatrix,
      Fraction
    });
    var unaryPlus = /* #__PURE__ */createUnaryPlus({
      BigNumber,
      config,
      typed
    });
    var weakMixingAngle = /* #__PURE__ */createWeakMixingAngle({
      BigNumber,
      config
    });
    var abs = /* #__PURE__ */createAbs({
      typed
    });
    var acos = /* #__PURE__ */createAcos({
      Complex,
      config,
      typed
    });
    var acot = /* #__PURE__ */createAcot({
      BigNumber,
      typed
    });
    var acsc = /* #__PURE__ */createAcsc({
      BigNumber,
      Complex,
      config,
      typed
    });
    var addScalar = /* #__PURE__ */createAddScalar({
      typed
    });
    var arg = /* #__PURE__ */createArg({
      typed
    });
    var asech = /* #__PURE__ */createAsech({
      BigNumber,
      Complex,
      config,
      typed
    });
    var asinh = /* #__PURE__ */createAsinh({
      typed
    });
    var atan = /* #__PURE__ */createAtan({
      typed
    });
    var atanh = /* #__PURE__ */createAtanh({
      Complex,
      config,
      typed
    });
    var bignumber = /* #__PURE__ */createBignumber({
      BigNumber,
      typed
    });
    var bitNot = /* #__PURE__ */createBitNot({
      typed
    });
    var boolean = /* #__PURE__ */createBoolean({
      typed
    });
    var clone = /* #__PURE__ */createClone({
      typed
    });
    var combinations = /* #__PURE__ */createCombinations({
      typed
    });
    var complex = /* #__PURE__ */createComplex({
      Complex,
      typed
    });
    var conj = /* #__PURE__ */createConj({
      typed
    });
    var cosh = /* #__PURE__ */createCosh({
      typed
    });
    var coth = /* #__PURE__ */createCoth({
      BigNumber,
      typed
    });
    var csc = /* #__PURE__ */createCsc({
      BigNumber,
      typed
    });
    var cube = /* #__PURE__ */createCube({
      typed
    });
    var equalScalar = /* #__PURE__ */createEqualScalar({
      config,
      typed
    });
    var erf = /* #__PURE__ */createErf({
      typed
    });
    var exp = /* #__PURE__ */createExp({
      typed
    });
    var expm1 = /* #__PURE__ */createExpm1({
      Complex,
      typed
    });
    var filter = /* #__PURE__ */createFilter({
      typed
    });
    var forEach = /* #__PURE__ */createForEach({
      typed
    });
    var format = /* #__PURE__ */createFormat({
      typed
    });
    var getMatrixDataType = /* #__PURE__ */createGetMatrixDataType({
      typed
    });
    var hex = /* #__PURE__ */createHex({
      format,
      typed
    });
    var im = /* #__PURE__ */createIm({
      typed
    });
    var isInteger = /* #__PURE__ */createIsInteger({
      typed
    });
    var isNegative = /* #__PURE__ */createIsNegative({
      typed
    });
    var isPositive = /* #__PURE__ */createIsPositive({
      typed
    });
    var isZero = /* #__PURE__ */createIsZero({
      typed
    });
    var LOG2E = /* #__PURE__ */createLOG2E({
      BigNumber,
      config
    });
    var lgamma = /* #__PURE__ */createLgamma({
      Complex,
      typed
    });
    var log10 = /* #__PURE__ */createLog10({
      Complex,
      config,
      typed
    });
    var log2 = /* #__PURE__ */createLog2({
      Complex,
      config,
      typed
    });
    var map = /* #__PURE__ */createMap({
      typed
    });
    var multiplyScalar = /* #__PURE__ */createMultiplyScalar({
      typed
    });
    var not = /* #__PURE__ */createNot({
      typed
    });
    var number = /* #__PURE__ */createNumber({
      typed
    });
    var oct = /* #__PURE__ */createOct({
      format,
      typed
    });
    var pickRandom = /* #__PURE__ */createPickRandom({
      config,
      typed
    });
    var print = /* #__PURE__ */createPrint({
      typed
    });
    var random = /* #__PURE__ */createRandom({
      config,
      typed
    });
    var re = /* #__PURE__ */createRe({
      typed
    });
    var sec = /* #__PURE__ */createSec({
      BigNumber,
      typed
    });
    var sign = /* #__PURE__ */createSign({
      BigNumber,
      Fraction,
      complex,
      typed
    });
    var sin = /* #__PURE__ */createSin({
      typed
    });
    var SparseMatrix = /* #__PURE__ */createSparseMatrixClass({
      Matrix,
      equalScalar,
      typed
    });
    var splitUnit = /* #__PURE__ */createSplitUnit({
      typed
    });
    var square = /* #__PURE__ */createSquare({
      typed
    });
    var string = /* #__PURE__ */createString({
      typed
    });
    var tan = /* #__PURE__ */createTan({
      typed
    });
    var typeOf = /* #__PURE__ */createTypeOf({
      typed
    });
    var acosh = /* #__PURE__ */createAcosh({
      Complex,
      config,
      typed
    });
    var acsch = /* #__PURE__ */createAcsch({
      BigNumber,
      typed
    });
    var apply = /* #__PURE__ */createApply({
      isInteger,
      typed
    });
    var asec = /* #__PURE__ */createAsec({
      BigNumber,
      Complex,
      config,
      typed
    });
    var bin$1 = /* #__PURE__ */createBin({
      format,
      typed
    });
    var combinationsWithRep = /* #__PURE__ */createCombinationsWithRep({
      typed
    });
    var cos = /* #__PURE__ */createCos({
      typed
    });
    var csch = /* #__PURE__ */createCsch({
      BigNumber,
      typed
    });
    var isNaN$1 = /* #__PURE__ */createIsNaN({
      typed
    });
    var isPrime = /* #__PURE__ */createIsPrime({
      typed
    });
    var randomInt = /* #__PURE__ */createRandomInt({
      config,
      typed
    });
    var sech = /* #__PURE__ */createSech({
      BigNumber,
      typed
    });
    var sinh = /* #__PURE__ */createSinh({
      typed
    });
    var sparse = /* #__PURE__ */createSparse({
      SparseMatrix,
      typed
    });
    var sqrt = /* #__PURE__ */createSqrt({
      Complex,
      config,
      typed
    });
    var tanh = /* #__PURE__ */createTanh({
      typed
    });
    var unaryMinus = /* #__PURE__ */createUnaryMinus({
      typed
    });
    var acoth = /* #__PURE__ */createAcoth({
      BigNumber,
      Complex,
      config,
      typed
    });
    var cot = /* #__PURE__ */createCot({
      BigNumber,
      typed
    });
    var fraction = /* #__PURE__ */createFraction({
      Fraction,
      typed
    });
    var isNumeric = /* #__PURE__ */createIsNumeric({
      typed
    });
    var matrix = /* #__PURE__ */createMatrix({
      DenseMatrix,
      Matrix,
      SparseMatrix,
      typed
    });
    var matrixFromFunction = /* #__PURE__ */createMatrixFromFunction({
      isZero,
      matrix,
      typed
    });
    var mod = /* #__PURE__ */createMod({
      DenseMatrix,
      equalScalar,
      matrix,
      typed
    });
    var nthRoot = /* #__PURE__ */createNthRoot({
      BigNumber,
      equalScalar,
      matrix,
      typed
    });
    var numeric = /* #__PURE__ */createNumeric({
      bignumber,
      fraction,
      number
    });
    var or = /* #__PURE__ */createOr({
      DenseMatrix,
      equalScalar,
      matrix,
      typed
    });
    var prod = /* #__PURE__ */createProd({
      config,
      multiplyScalar,
      numeric,
      typed
    });
    var reshape = /* #__PURE__ */createReshape({
      isInteger,
      matrix,
      typed
    });
    var size = /* #__PURE__ */createSize({
      matrix,
      config,
      typed
    });
    var smaller = /* #__PURE__ */createSmaller({
      DenseMatrix,
      config,
      matrix,
      typed
    });
    var squeeze = /* #__PURE__ */createSqueeze({
      matrix,
      typed
    });
    var subset = /* #__PURE__ */createSubset({
      matrix,
      typed
    });
    var subtract = /* #__PURE__ */createSubtract({
      DenseMatrix,
      addScalar,
      equalScalar,
      matrix,
      typed,
      unaryMinus
    });
    var to = /* #__PURE__ */createTo({
      matrix,
      typed
    });
    var transpose = /* #__PURE__ */createTranspose({
      matrix,
      typed
    });
    var xgcd = /* #__PURE__ */createXgcd({
      BigNumber,
      config,
      matrix,
      typed
    });
    var zeros = /* #__PURE__ */createZeros({
      BigNumber,
      config,
      matrix,
      typed
    });
    var and = /* #__PURE__ */createAnd({
      equalScalar,
      matrix,
      not,
      typed,
      zeros
    });
    var bitAnd = /* #__PURE__ */createBitAnd({
      equalScalar,
      matrix,
      typed
    });
    var bitXor = /* #__PURE__ */createBitXor({
      DenseMatrix,
      matrix,
      typed
    });
    var cbrt = /* #__PURE__ */createCbrt({
      BigNumber,
      Complex,
      Fraction,
      config,
      isNegative,
      matrix,
      typed,
      unaryMinus
    });
    var compare = /* #__PURE__ */createCompare({
      BigNumber,
      DenseMatrix,
      Fraction,
      config,
      equalScalar,
      matrix,
      typed
    });
    var compareText = /* #__PURE__ */createCompareText({
      matrix,
      typed
    });
    var concat = /* #__PURE__ */createConcat({
      isInteger,
      matrix,
      typed
    });
    var count = /* #__PURE__ */createCount({
      prod,
      size,
      typed
    });
    var ctranspose = /* #__PURE__ */createCtranspose({
      conj,
      transpose,
      typed
    });
    var diag = /* #__PURE__ */createDiag({
      DenseMatrix,
      SparseMatrix,
      matrix,
      typed
    });
    var divideScalar = /* #__PURE__ */createDivideScalar({
      numeric,
      typed
    });
    var dotDivide = /* #__PURE__ */createDotDivide({
      DenseMatrix,
      divideScalar,
      equalScalar,
      matrix,
      typed
    });
    var equal = /* #__PURE__ */createEqual({
      DenseMatrix,
      equalScalar,
      matrix,
      typed
    });
    var fft = /* #__PURE__ */createFft({
      addScalar,
      divideScalar,
      exp,
      i: i$1,
      matrix,
      multiplyScalar,
      tau,
      typed
    });
    var flatten$1 = /* #__PURE__ */createFlatten({
      matrix,
      typed
    });
    var gcd = /* #__PURE__ */createGcd({
      BigNumber,
      DenseMatrix,
      equalScalar,
      matrix,
      typed
    });
    var hasNumericValue = /* #__PURE__ */createHasNumericValue({
      isNumeric,
      typed
    });
    var hypot = /* #__PURE__ */createHypot({
      abs,
      addScalar,
      divideScalar,
      isPositive,
      multiplyScalar,
      smaller,
      sqrt,
      typed
    });
    var ifft = /* #__PURE__ */createIfft({
      conj,
      dotDivide,
      fft,
      typed
    });
    var kron = /* #__PURE__ */createKron({
      matrix,
      multiplyScalar,
      typed
    });
    var largerEq = /* #__PURE__ */createLargerEq({
      DenseMatrix,
      config,
      matrix,
      typed
    });
    var leftShift = /* #__PURE__ */createLeftShift({
      DenseMatrix,
      equalScalar,
      matrix,
      typed,
      zeros
    });
    var lsolve = /* #__PURE__ */createLsolve({
      DenseMatrix,
      divideScalar,
      equalScalar,
      matrix,
      multiplyScalar,
      subtract,
      typed
    });
    var matrixFromColumns = /* #__PURE__ */createMatrixFromColumns({
      flatten: flatten$1,
      matrix,
      size,
      typed
    });
    var min = /* #__PURE__ */createMin({
      config,
      numeric,
      smaller,
      typed
    });
    var mode = /* #__PURE__ */createMode({
      isNaN: isNaN$1,
      isNumeric,
      typed
    });
    var nthRoots = /* #__PURE__ */createNthRoots({
      Complex,
      config,
      divideScalar,
      typed
    });
    var ones = /* #__PURE__ */createOnes({
      BigNumber,
      config,
      matrix,
      typed
    });
    var partitionSelect = /* #__PURE__ */createPartitionSelect({
      compare,
      isNaN: isNaN$1,
      isNumeric,
      typed
    });
    var resize = /* #__PURE__ */createResize({
      config,
      matrix
    });
    var rightArithShift = /* #__PURE__ */createRightArithShift({
      DenseMatrix,
      equalScalar,
      matrix,
      typed,
      zeros
    });
    var round = /* #__PURE__ */createRound({
      BigNumber,
      DenseMatrix,
      equalScalar,
      matrix,
      typed,
      zeros
    });
    var smallerEq = /* #__PURE__ */createSmallerEq({
      DenseMatrix,
      config,
      matrix,
      typed
    });
    var unequal = /* #__PURE__ */createUnequal({
      DenseMatrix,
      config,
      equalScalar,
      matrix,
      typed
    });
    var usolve = /* #__PURE__ */createUsolve({
      DenseMatrix,
      divideScalar,
      equalScalar,
      matrix,
      multiplyScalar,
      subtract,
      typed
    });
    var xor = /* #__PURE__ */createXor({
      DenseMatrix,
      matrix,
      typed
    });
    var add = /* #__PURE__ */createAdd({
      DenseMatrix,
      SparseMatrix,
      addScalar,
      equalScalar,
      matrix,
      typed
    });
    var atan2 = /* #__PURE__ */createAtan2({
      BigNumber,
      DenseMatrix,
      equalScalar,
      matrix,
      typed
    });
    var bitOr = /* #__PURE__ */createBitOr({
      DenseMatrix,
      equalScalar,
      matrix,
      typed
    });
    var catalan = /* #__PURE__ */createCatalan({
      addScalar,
      combinations,
      divideScalar,
      isInteger,
      isNegative,
      multiplyScalar,
      typed
    });
    var compareNatural = /* #__PURE__ */createCompareNatural({
      compare,
      typed
    });
    var cumsum = /* #__PURE__ */createCumSum({
      add,
      typed,
      unaryPlus
    });
    var deepEqual = /* #__PURE__ */createDeepEqual({
      equal,
      typed
    });
    var diff = /* #__PURE__ */createDiff({
      matrix,
      number,
      subtract,
      typed
    });
    var dot = /* #__PURE__ */createDot({
      addScalar,
      conj,
      multiplyScalar,
      size,
      typed
    });
    var equalText = /* #__PURE__ */createEqualText({
      compareText,
      isZero,
      typed
    });
    var floor = /* #__PURE__ */createFloor({
      DenseMatrix,
      config,
      equalScalar,
      matrix,
      round,
      typed,
      zeros
    });
    var identity = /* #__PURE__ */createIdentity({
      BigNumber,
      DenseMatrix,
      SparseMatrix,
      config,
      matrix,
      typed
    });
    var invmod = /* #__PURE__ */createInvmod({
      BigNumber,
      add,
      config,
      equal,
      isInteger,
      mod,
      smaller,
      typed,
      xgcd
    });
    var larger = /* #__PURE__ */createLarger({
      DenseMatrix,
      config,
      matrix,
      typed
    });
    var log = /* #__PURE__ */createLog({
      Complex,
      config,
      divideScalar,
      typed
    });
    var lsolveAll = /* #__PURE__ */createLsolveAll({
      DenseMatrix,
      divideScalar,
      equalScalar,
      matrix,
      multiplyScalar,
      subtract,
      typed
    });
    var matrixFromRows = /* #__PURE__ */createMatrixFromRows({
      flatten: flatten$1,
      matrix,
      size,
      typed
    });
    var multiply = /* #__PURE__ */createMultiply({
      addScalar,
      dot,
      equalScalar,
      matrix,
      multiplyScalar,
      typed
    });
    var qr = /* #__PURE__ */createQr({
      addScalar,
      complex,
      conj,
      divideScalar,
      equal,
      identity,
      isZero,
      matrix,
      multiplyScalar,
      sign,
      sqrt,
      subtract,
      typed,
      unaryMinus,
      zeros
    });
    var range = /* #__PURE__ */createRange({
      bignumber,
      matrix,
      config,
      larger,
      largerEq,
      smaller,
      smallerEq,
      typed
    });
    var rightLogShift = /* #__PURE__ */createRightLogShift({
      DenseMatrix,
      equalScalar,
      matrix,
      typed,
      zeros
    });
    var setSize = /* #__PURE__ */createSetSize({
      compareNatural,
      typed
    });
    var slu = /* #__PURE__ */createSlu({
      SparseMatrix,
      abs,
      add,
      divideScalar,
      larger,
      largerEq,
      multiply,
      subtract,
      transpose,
      typed
    });
    var sum = /* #__PURE__ */createSum({
      add,
      config,
      numeric,
      typed
    });
    var trace = /* #__PURE__ */createTrace({
      add,
      matrix,
      typed
    });
    var usolveAll = /* #__PURE__ */createUsolveAll({
      DenseMatrix,
      divideScalar,
      equalScalar,
      matrix,
      multiplyScalar,
      subtract,
      typed
    });
    var asin = /* #__PURE__ */createAsin({
      Complex,
      config,
      typed
    });
    var ceil = /* #__PURE__ */createCeil({
      DenseMatrix,
      config,
      equalScalar,
      matrix,
      round,
      typed,
      zeros
    });
    var composition = /* #__PURE__ */createComposition({
      addScalar,
      combinations,
      isInteger,
      isNegative,
      isPositive,
      larger,
      typed
    });
    var cross = /* #__PURE__ */createCross({
      matrix,
      multiply,
      subtract,
      typed
    });
    var det = /* #__PURE__ */createDet({
      divideScalar,
      isZero,
      matrix,
      multiply,
      subtract,
      typed,
      unaryMinus
    });
    var distance = /* #__PURE__ */createDistance({
      abs,
      addScalar,
      divideScalar,
      multiplyScalar,
      sqrt,
      subtract,
      typed,
      unaryMinus
    });
    var dotMultiply = /* #__PURE__ */createDotMultiply({
      equalScalar,
      matrix,
      multiplyScalar,
      typed
    });
    var FibonacciHeap = /* #__PURE__ */createFibonacciHeapClass({
      larger,
      smaller
    });
    var fix = /* #__PURE__ */createFix({
      Complex,
      DenseMatrix,
      ceil,
      equalScalar,
      floor,
      matrix,
      typed,
      zeros
    });
    var ImmutableDenseMatrix = /* #__PURE__ */createImmutableDenseMatrixClass({
      DenseMatrix,
      smaller
    });
    var Index = /* #__PURE__ */createIndexClass({
      ImmutableDenseMatrix
    });
    var intersect = /* #__PURE__ */createIntersect({
      abs,
      add,
      addScalar,
      config,
      divideScalar,
      equalScalar,
      flatten: flatten$1,
      isNumeric,
      isZero,
      matrix,
      multiply,
      multiplyScalar,
      smaller,
      subtract,
      typed
    });
    var lcm = /* #__PURE__ */createLcm({
      equalScalar,
      matrix,
      typed
    });
    var log1p = /* #__PURE__ */createLog1p({
      Complex,
      config,
      divideScalar,
      log,
      typed
    });
    var max = /* #__PURE__ */createMax({
      config,
      larger,
      numeric,
      typed
    });
    var quantileSeq = /* #__PURE__ */createQuantileSeq({
      add,
      compare,
      multiply,
      partitionSelect,
      typed
    });
    var row = /* #__PURE__ */createRow({
      Index,
      matrix,
      range,
      typed
    });
    var setCartesian = /* #__PURE__ */createSetCartesian({
      DenseMatrix,
      Index,
      compareNatural,
      size,
      subset,
      typed
    });
    var setDistinct = /* #__PURE__ */createSetDistinct({
      DenseMatrix,
      Index,
      compareNatural,
      size,
      subset,
      typed
    });
    var setIsSubset = /* #__PURE__ */createSetIsSubset({
      Index,
      compareNatural,
      size,
      subset,
      typed
    });
    var setPowerset = /* #__PURE__ */createSetPowerset({
      Index,
      compareNatural,
      size,
      subset,
      typed
    });
    var sort = /* #__PURE__ */createSort({
      compare,
      compareNatural,
      matrix,
      typed
    });
    var column = /* #__PURE__ */createColumn({
      Index,
      matrix,
      range,
      typed
    });
    var index = /* #__PURE__ */createIndex({
      Index,
      typed
    });
    var inv = /* #__PURE__ */createInv({
      abs,
      addScalar,
      det,
      divideScalar,
      identity,
      matrix,
      multiply,
      typed,
      unaryMinus
    });
    var pinv = /* #__PURE__ */createPinv({
      Complex,
      add,
      ctranspose,
      deepEqual,
      divideScalar,
      dot,
      dotDivide,
      equal,
      inv,
      matrix,
      multiply,
      typed
    });
    var pow = /* #__PURE__ */createPow({
      Complex,
      config,
      fraction,
      identity,
      inv,
      matrix,
      multiply,
      number,
      typed
    });
    var setDifference = /* #__PURE__ */createSetDifference({
      DenseMatrix,
      Index,
      compareNatural,
      size,
      subset,
      typed
    });
    var setMultiplicity = /* #__PURE__ */createSetMultiplicity({
      Index,
      compareNatural,
      size,
      subset,
      typed
    });
    var Spa = /* #__PURE__ */createSpaClass({
      FibonacciHeap,
      addScalar,
      equalScalar
    });
    var sqrtm = /* #__PURE__ */createSqrtm({
      abs,
      add,
      identity,
      inv,
      max,
      multiply,
      size,
      sqrt,
      subtract,
      typed
    });
    var Unit = /* #__PURE__ */createUnitClass({
      BigNumber,
      Complex,
      Fraction,
      abs,
      addScalar,
      config,
      divideScalar,
      equal,
      fix,
      format,
      isNumeric,
      multiplyScalar,
      number,
      pow,
      round,
      subtract
    });
    var vacuumImpedance = /* #__PURE__ */createVacuumImpedance({
      BigNumber,
      Unit,
      config
    });
    var wienDisplacement = /* #__PURE__ */createWienDisplacement({
      BigNumber,
      Unit,
      config
    });
    var atomicMass = /* #__PURE__ */createAtomicMass({
      BigNumber,
      Unit,
      config
    });
    var bohrMagneton = /* #__PURE__ */createBohrMagneton({
      BigNumber,
      Unit,
      config
    });
    var boltzmann = /* #__PURE__ */createBoltzmann({
      BigNumber,
      Unit,
      config
    });
    var conductanceQuantum = /* #__PURE__ */createConductanceQuantum({
      BigNumber,
      Unit,
      config
    });
    var createUnit = /* #__PURE__ */createCreateUnit({
      Unit,
      typed
    });
    var deuteronMass = /* #__PURE__ */createDeuteronMass({
      BigNumber,
      Unit,
      config
    });
    var dotPow = /* #__PURE__ */createDotPow({
      DenseMatrix,
      equalScalar,
      matrix,
      pow,
      typed
    });
    var electricConstant = /* #__PURE__ */createElectricConstant({
      BigNumber,
      Unit,
      config
    });
    var elementaryCharge = /* #__PURE__ */createElementaryCharge({
      BigNumber,
      Unit,
      config
    });
    var expm = /* #__PURE__ */createExpm({
      abs,
      add,
      identity,
      inv,
      multiply,
      typed
    });
    var faraday = /* #__PURE__ */createFaraday({
      BigNumber,
      Unit,
      config
    });
    var firstRadiation = /* #__PURE__ */createFirstRadiation({
      BigNumber,
      Unit,
      config
    });
    var gamma = /* #__PURE__ */createGamma({
      BigNumber,
      Complex,
      config,
      multiplyScalar,
      pow,
      typed
    });
    var gravitationConstant = /* #__PURE__ */createGravitationConstant({
      BigNumber,
      Unit,
      config
    });
    var hartreeEnergy = /* #__PURE__ */createHartreeEnergy({
      BigNumber,
      Unit,
      config
    });
    var klitzing = /* #__PURE__ */createKlitzing({
      BigNumber,
      Unit,
      config
    });
    var loschmidt = /* #__PURE__ */createLoschmidt({
      BigNumber,
      Unit,
      config
    });
    var magneticConstant = /* #__PURE__ */createMagneticConstant({
      BigNumber,
      Unit,
      config
    });
    var molarMass = /* #__PURE__ */createMolarMass({
      BigNumber,
      Unit,
      config
    });
    var molarPlanckConstant = /* #__PURE__ */createMolarPlanckConstant({
      BigNumber,
      Unit,
      config
    });
    var neutronMass = /* #__PURE__ */createNeutronMass({
      BigNumber,
      Unit,
      config
    });
    var nuclearMagneton = /* #__PURE__ */createNuclearMagneton({
      BigNumber,
      Unit,
      config
    });
    var planckCharge = /* #__PURE__ */createPlanckCharge({
      BigNumber,
      Unit,
      config
    });
    var planckLength = /* #__PURE__ */createPlanckLength({
      BigNumber,
      Unit,
      config
    });
    var planckTemperature = /* #__PURE__ */createPlanckTemperature({
      BigNumber,
      Unit,
      config
    });
    var protonMass = /* #__PURE__ */createProtonMass({
      BigNumber,
      Unit,
      config
    });
    var reducedPlanckConstant = /* #__PURE__ */createReducedPlanckConstant({
      BigNumber,
      Unit,
      config
    });
    var rydberg = /* #__PURE__ */createRydberg({
      BigNumber,
      Unit,
      config
    });
    var setIntersect = /* #__PURE__ */createSetIntersect({
      DenseMatrix,
      Index,
      compareNatural,
      size,
      subset,
      typed
    });
    var speedOfLight = /* #__PURE__ */createSpeedOfLight({
      BigNumber,
      Unit,
      config
    });
    var stefanBoltzmann = /* #__PURE__ */createStefanBoltzmann({
      BigNumber,
      Unit,
      config
    });
    var thomsonCrossSection = /* #__PURE__ */createThomsonCrossSection({
      BigNumber,
      Unit,
      config
    });
    var avogadro = /* #__PURE__ */createAvogadro({
      BigNumber,
      Unit,
      config
    });
    var bohrRadius = /* #__PURE__ */createBohrRadius({
      BigNumber,
      Unit,
      config
    });
    var coulomb = /* #__PURE__ */createCoulomb({
      BigNumber,
      Unit,
      config
    });
    var divide = /* #__PURE__ */createDivide({
      divideScalar,
      equalScalar,
      inv,
      matrix,
      multiply,
      typed
    });
    var electronMass = /* #__PURE__ */createElectronMass({
      BigNumber,
      Unit,
      config
    });
    var factorial = /* #__PURE__ */createFactorial({
      gamma,
      typed
    });
    var gravity = /* #__PURE__ */createGravity({
      BigNumber,
      Unit,
      config
    });
    var inverseConductanceQuantum = /* #__PURE__ */createInverseConductanceQuantum({
      BigNumber,
      Unit,
      config
    });
    var lup = /* #__PURE__ */createLup({
      DenseMatrix,
      Spa,
      SparseMatrix,
      abs,
      addScalar,
      divideScalar,
      equalScalar,
      larger,
      matrix,
      multiplyScalar,
      subtract,
      typed,
      unaryMinus
    });
    var magneticFluxQuantum = /* #__PURE__ */createMagneticFluxQuantum({
      BigNumber,
      Unit,
      config
    });
    var molarMassC12 = /* #__PURE__ */createMolarMassC12({
      BigNumber,
      Unit,
      config
    });
    var multinomial = /* #__PURE__ */createMultinomial({
      add,
      divide,
      factorial,
      isInteger,
      isPositive,
      multiply,
      typed
    });
    var permutations = /* #__PURE__ */createPermutations({
      factorial,
      typed
    });
    var planckMass = /* #__PURE__ */createPlanckMass({
      BigNumber,
      Unit,
      config
    });
    var quantumOfCirculation = /* #__PURE__ */createQuantumOfCirculation({
      BigNumber,
      Unit,
      config
    });
    var secondRadiation = /* #__PURE__ */createSecondRadiation({
      BigNumber,
      Unit,
      config
    });
    var stirlingS2 = /* #__PURE__ */createStirlingS2({
      bignumber,
      addScalar,
      combinations,
      divideScalar,
      factorial,
      isInteger,
      isNegative,
      larger,
      multiplyScalar,
      number,
      pow,
      subtract,
      typed
    });
    var unit = /* #__PURE__ */createUnitFunction({
      Unit,
      typed
    });
    var bellNumbers = /* #__PURE__ */createBellNumbers({
      addScalar,
      isInteger,
      isNegative,
      stirlingS2,
      typed
    });
    var eigs = /* #__PURE__ */createEigs({
      abs,
      add,
      addScalar,
      atan,
      bignumber,
      column,
      complex,
      config,
      cos,
      diag,
      divideScalar,
      dot,
      equal,
      flatten: flatten$1,
      im,
      inv,
      larger,
      matrix,
      matrixFromColumns,
      multiply,
      multiplyScalar,
      number,
      qr,
      re,
      sin,
      smaller,
      sqrt,
      subtract,
      typed,
      usolve,
      usolveAll
    });
    var fermiCoupling = /* #__PURE__ */createFermiCoupling({
      BigNumber,
      Unit,
      config
    });
    var mean = /* #__PURE__ */createMean({
      add,
      divide,
      typed
    });
    var molarVolume = /* #__PURE__ */createMolarVolume({
      BigNumber,
      Unit,
      config
    });
    var planckConstant = /* #__PURE__ */createPlanckConstant({
      BigNumber,
      Unit,
      config
    });
    var setSymDifference = /* #__PURE__ */createSetSymDifference({
      Index,
      concat,
      setDifference,
      size,
      subset,
      typed
    });
    var classicalElectronRadius = /* #__PURE__ */createClassicalElectronRadius({
      BigNumber,
      Unit,
      config
    });
    var lusolve = /* #__PURE__ */createLusolve({
      DenseMatrix,
      lsolve,
      lup,
      matrix,
      slu,
      typed,
      usolve
    });
    var median = /* #__PURE__ */createMedian({
      add,
      compare,
      divide,
      partitionSelect,
      typed
    });
    var setUnion = /* #__PURE__ */createSetUnion({
      Index,
      concat,
      setIntersect,
      setSymDifference,
      size,
      subset,
      typed
    });
    var variance = /* #__PURE__ */createVariance({
      add,
      apply,
      divide,
      isNaN: isNaN$1,
      multiply,
      subtract,
      typed
    });
    var kldivergence = /* #__PURE__ */createKldivergence({
      divide,
      dotDivide,
      isNumeric,
      log,
      matrix,
      multiply,
      sum,
      typed
    });
    var norm = /* #__PURE__ */createNorm({
      abs,
      add,
      conj,
      ctranspose,
      eigs,
      equalScalar,
      larger,
      matrix,
      multiply,
      pow,
      smaller,
      sqrt,
      typed
    });
    var planckTime = /* #__PURE__ */createPlanckTime({
      BigNumber,
      Unit,
      config
    });
    var rotationMatrix = /* #__PURE__ */createRotationMatrix({
      BigNumber,
      DenseMatrix,
      SparseMatrix,
      addScalar,
      config,
      cos,
      matrix,
      multiplyScalar,
      norm,
      sin,
      typed,
      unaryMinus
    });
    var gasConstant = /* #__PURE__ */createGasConstant({
      BigNumber,
      Unit,
      config
    });
    var std = /* #__PURE__ */createStd({
      sqrt,
      typed,
      variance
    });
    var mad = /* #__PURE__ */createMad({
      abs,
      map,
      median,
      subtract,
      typed
    });
    var rotate = /* #__PURE__ */createRotate({
      multiply,
      rotationMatrix,
      typed
    });

    var math$1 = {}; // NOT pure!

    var mathWithTransform = {}; // NOT pure!

    var classes = {}; // NOT pure!

    var Chain = createChainClass({
      math: math$1
    });
    var Node = createNode({
      mathWithTransform
    });
    var ObjectNode = createObjectNode({
      Node
    });
    var OperatorNode = createOperatorNode({
      Node
    });
    var ParenthesisNode = createParenthesisNode({
      Node
    });
    var RelationalNode = createRelationalNode({
      Node
    });
    var ArrayNode = createArrayNode({
      Node
    });
    var BlockNode = createBlockNode({
      Node,
      ResultSet
    });
    var ConditionalNode = createConditionalNode({
      Node
    });
    var ConstantNode = createConstantNode({
      Node
    });
    var RangeNode = createRangeNode({
      Node
    });
    var reviver = createReviver({
      classes
    });
    var chain = createChain({
      Chain,
      typed
    });
    var FunctionAssignmentNode = createFunctionAssignmentNode({
      Node,
      typed
    });
    var AccessorNode = createAccessorNode({
      Node,
      subset
    });
    var AssignmentNode = createAssignmentNode({
      matrix,
      Node,
      subset
    });
    var IndexNode = createIndexNode({
      Node,
      size
    });
    var SymbolNode$1 = createSymbolNode({
      Unit,
      Node,
      math: math$1
    });
    var FunctionNode = createFunctionNode({
      Node,
      SymbolNode: SymbolNode$1,
      math: math$1
    });
    var parse = createParse({
      AccessorNode,
      ArrayNode,
      AssignmentNode,
      BlockNode,
      ConditionalNode,
      ConstantNode,
      FunctionAssignmentNode,
      FunctionNode,
      IndexNode,
      ObjectNode,
      OperatorNode,
      ParenthesisNode,
      RangeNode,
      RelationalNode,
      SymbolNode: SymbolNode$1,
      config,
      numeric,
      typed
    });
    var resolve = createResolve({
      ConstantNode,
      FunctionNode,
      OperatorNode,
      ParenthesisNode,
      parse
    });
    var simplifyCore = createSimplifyCore({
      AccessorNode,
      ArrayNode,
      ConstantNode,
      FunctionNode,
      IndexNode,
      ObjectNode,
      OperatorNode,
      ParenthesisNode,
      SymbolNode: SymbolNode$1,
      add,
      divide,
      equal,
      isZero,
      multiply,
      pow,
      subtract
    });
    var compile = createCompile({
      parse,
      typed
    });
    var Help = createHelpClass({
      parse
    });
    var leafCount = createLeafCount({
      parse,
      typed
    });
    var simplify = createSimplify({
      bignumber,
      fraction,
      AccessorNode,
      ArrayNode,
      ConstantNode,
      FunctionNode,
      IndexNode,
      ObjectNode,
      OperatorNode,
      ParenthesisNode,
      SymbolNode: SymbolNode$1,
      add,
      config,
      divide,
      equal,
      isZero,
      mathWithTransform,
      matrix,
      multiply,
      parse,
      pow,
      resolve,
      simplifyCore,
      subtract,
      typed
    });
    var symbolicEqual = createSymbolicEqual({
      OperatorNode,
      parse,
      simplify,
      typed
    });
    var evaluate = createEvaluate({
      parse,
      typed
    });
    var help = createHelp({
      Help,
      mathWithTransform,
      typed
    });
    var Parser$1 = createParserClass({
      evaluate
    });
    var rationalize = createRationalize({
      bignumber,
      fraction,
      AccessorNode,
      ArrayNode,
      ConstantNode,
      FunctionNode,
      IndexNode,
      ObjectNode,
      OperatorNode,
      ParenthesisNode,
      SymbolNode: SymbolNode$1,
      add,
      config,
      divide,
      equal,
      isZero,
      mathWithTransform,
      matrix,
      multiply,
      parse,
      pow,
      simplify,
      simplifyCore,
      subtract,
      typed
    });
    var derivative = createDerivative({
      ConstantNode,
      FunctionNode,
      OperatorNode,
      ParenthesisNode,
      SymbolNode: SymbolNode$1,
      config,
      equal,
      isZero,
      numeric,
      parse,
      simplify,
      typed
    });
    var parser = createParser({
      Parser: Parser$1,
      typed
    });

    _extends$1(math$1, {
      e,
      false: _false,
      fineStructure,
      i: i$1,
      Infinity: _Infinity,
      LN10,
      LOG10E,
      NaN: _NaN,
      null: _null,
      phi,
      SQRT1_2,
      sackurTetrode,
      tau,
      true: _true,
      'E': e,
      version,
      efimovFactor,
      LN2,
      pi,
      replacer,
      reviver,
      SQRT2,
      typed,
      unaryPlus,
      'PI': pi,
      weakMixingAngle,
      abs,
      acos,
      acot,
      acsc,
      addScalar,
      arg,
      asech,
      asinh,
      atan,
      atanh,
      bignumber,
      bitNot,
      boolean,
      chain,
      clone,
      combinations,
      complex,
      conj,
      cosh,
      coth,
      csc,
      cube,
      equalScalar,
      erf,
      exp,
      expm1,
      filter,
      forEach,
      format,
      getMatrixDataType,
      hex,
      im,
      isInteger,
      isNegative,
      isPositive,
      isZero,
      LOG2E,
      lgamma,
      log10,
      log2,
      map,
      multiplyScalar,
      not,
      number,
      oct,
      pickRandom,
      print,
      random,
      re,
      sec,
      sign,
      sin,
      splitUnit,
      square,
      string,
      tan,
      typeOf,
      acosh,
      acsch,
      apply,
      asec,
      bin: bin$1,
      combinationsWithRep,
      cos,
      csch,
      isNaN: isNaN$1,
      isPrime,
      randomInt,
      sech,
      sinh,
      sparse,
      sqrt,
      tanh,
      unaryMinus,
      acoth,
      cot,
      fraction,
      isNumeric,
      matrix,
      matrixFromFunction,
      mod,
      nthRoot,
      numeric,
      or,
      prod,
      reshape,
      size,
      smaller,
      squeeze,
      subset,
      subtract,
      to,
      transpose,
      xgcd,
      zeros,
      and,
      bitAnd,
      bitXor,
      cbrt,
      compare,
      compareText,
      concat,
      count,
      ctranspose,
      diag,
      divideScalar,
      dotDivide,
      equal,
      fft,
      flatten: flatten$1,
      gcd,
      hasNumericValue,
      hypot,
      ifft,
      kron,
      largerEq,
      leftShift,
      lsolve,
      matrixFromColumns,
      min,
      mode,
      nthRoots,
      ones,
      partitionSelect,
      resize,
      rightArithShift,
      round,
      smallerEq,
      unequal,
      usolve,
      xor,
      add,
      atan2,
      bitOr,
      catalan,
      compareNatural,
      cumsum,
      deepEqual,
      diff,
      dot,
      equalText,
      floor,
      identity,
      invmod,
      larger,
      log,
      lsolveAll,
      matrixFromRows,
      multiply,
      qr,
      range,
      rightLogShift,
      setSize,
      slu,
      sum,
      trace,
      usolveAll,
      asin,
      ceil,
      composition,
      cross,
      det,
      distance,
      dotMultiply,
      fix,
      intersect,
      lcm,
      log1p,
      max,
      quantileSeq,
      row,
      setCartesian,
      setDistinct,
      setIsSubset,
      setPowerset,
      sort,
      column,
      index,
      inv,
      pinv,
      pow,
      setDifference,
      setMultiplicity,
      sqrtm,
      vacuumImpedance,
      wienDisplacement,
      atomicMass,
      bohrMagneton,
      boltzmann,
      conductanceQuantum,
      createUnit,
      deuteronMass,
      dotPow,
      electricConstant,
      elementaryCharge,
      expm,
      faraday,
      firstRadiation,
      gamma,
      gravitationConstant,
      hartreeEnergy,
      klitzing,
      loschmidt,
      magneticConstant,
      molarMass,
      molarPlanckConstant,
      neutronMass,
      nuclearMagneton,
      planckCharge,
      planckLength,
      planckTemperature,
      protonMass,
      reducedPlanckConstant,
      rydberg,
      setIntersect,
      speedOfLight,
      stefanBoltzmann,
      thomsonCrossSection,
      avogadro,
      bohrRadius,
      coulomb,
      divide,
      electronMass,
      factorial,
      gravity,
      inverseConductanceQuantum,
      lup,
      magneticFluxQuantum,
      molarMassC12,
      multinomial,
      parse,
      permutations,
      planckMass,
      quantumOfCirculation,
      resolve,
      secondRadiation,
      simplifyCore,
      stirlingS2,
      unit,
      bellNumbers,
      compile,
      eigs,
      fermiCoupling,
      leafCount,
      mean,
      molarVolume,
      planckConstant,
      setSymDifference,
      simplify,
      symbolicEqual,
      classicalElectronRadius,
      evaluate,
      help,
      lusolve,
      median,
      rationalize,
      setUnion,
      variance,
      derivative,
      kldivergence,
      norm,
      planckTime,
      rotationMatrix,
      gasConstant,
      parser,
      std,
      mad,
      rotate,
      config
    });

    _extends$1(mathWithTransform, math$1, {
      filter: createFilterTransform({
        typed
      }),
      forEach: createForEachTransform({
        typed
      }),
      map: createMapTransform({
        typed
      }),
      apply: createApplyTransform({
        isInteger,
        typed
      }),
      diff: createDiffTransform({
        bignumber,
        matrix,
        number,
        subtract,
        typed
      }),
      subset: createSubsetTransform({
        matrix,
        typed
      }),
      concat: createConcatTransform({
        isInteger,
        matrix,
        typed
      }),
      max: createMaxTransform({
        config,
        larger,
        numeric,
        typed
      }),
      min: createMinTransform({
        config,
        numeric,
        smaller,
        typed
      }),
      range: createRangeTransform({
        bignumber,
        matrix,
        config,
        larger,
        largerEq,
        smaller,
        smallerEq,
        typed
      }),
      sum: createSumTransform({
        add,
        config,
        numeric,
        typed
      }),
      cumsum: createCumSumTransform({
        add,
        typed,
        unaryPlus
      }),
      row: createRowTransform({
        Index,
        matrix,
        range,
        typed
      }),
      column: createColumnTransform({
        Index,
        matrix,
        range,
        typed
      }),
      index: createIndexTransform({
        Index
      }),
      mean: createMeanTransform({
        add,
        divide,
        typed
      }),
      variance: createVarianceTransform({
        add,
        apply,
        divide,
        isNaN: isNaN$1,
        multiply,
        subtract,
        typed
      }),
      std: createStdTransform({
        sqrt,
        typed,
        variance
      })
    });

    _extends$1(classes, {
      BigNumber,
      Chain,
      Complex,
      Fraction,
      Matrix,
      Node,
      ObjectNode,
      OperatorNode,
      ParenthesisNode,
      Range,
      RelationalNode,
      ResultSet,
      ArrayNode,
      BlockNode,
      ConditionalNode,
      ConstantNode,
      DenseMatrix,
      RangeNode,
      FunctionAssignmentNode,
      SparseMatrix,
      AccessorNode,
      AssignmentNode,
      IndexNode,
      FibonacciHeap,
      ImmutableDenseMatrix,
      Index,
      Spa,
      Unit,
      SymbolNode: SymbolNode$1,
      FunctionNode,
      Help,
      Parser: Parser$1
    });

    Chain.createProxy(math$1);

    /**
     * Lexing or parsing positional information for error reporting.
     * This object is immutable.
     */
    class SourceLocation {
      // The + prefix indicates that these fields aren't writeable
      // Lexer holding the input string.
      // Start offset, zero-based inclusive.
      // End offset, zero-based exclusive.
      constructor(lexer, start, end) {
        this.lexer = void 0;
        this.start = void 0;
        this.end = void 0;
        this.lexer = lexer;
        this.start = start;
        this.end = end;
      }
      /**
       * Merges two `SourceLocation`s from location providers, given they are
       * provided in order of appearance.
       * - Returns the first one's location if only the first is provided.
       * - Returns a merged range of the first and the last if both are provided
       *   and their lexers match.
       * - Otherwise, returns null.
       */


      static range(first, second) {
        if (!second) {
          return first && first.loc;
        } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
          return null;
        } else {
          return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
        }
      }

    }

    /**
     * Interface required to break circular dependency between Token, Lexer, and
     * ParseError.
     */

    /**
     * The resulting token returned from `lex`.
     *
     * It consists of the token text plus some position information.
     * The position information is essentially a range in an input string,
     * but instead of referencing the bare input string, we refer to the lexer.
     * That way it is possible to attach extra metadata to the input string,
     * like for example a file name or similar.
     *
     * The position information is optional, so it is OK to construct synthetic
     * tokens if appropriate. Not providing available position information may
     * lead to degraded error reporting, though.
     */
    class Token {
      // don't expand the token
      // used in \noexpand
      constructor(text, // the text of this token
      loc) {
        this.text = void 0;
        this.loc = void 0;
        this.noexpand = void 0;
        this.treatAsRelax = void 0;
        this.text = text;
        this.loc = loc;
      }
      /**
       * Given a pair of tokens (this and endToken), compute a `Token` encompassing
       * the whole input range enclosed by these two.
       */


      range(endToken, // last token of the range, inclusive
      text // the text of the newly constructed token
      ) {
        return new Token(text, SourceLocation.range(this, endToken));
      }

    }

    /**
     * This is the ParseError class, which is the main error thrown by KaTeX
     * functions when something has gone wrong. This is used to distinguish internal
     * errors from errors in the expression that the user provided.
     *
     * If possible, a caller should provide a Token or ParseNode with information
     * about where in the source string the problem occurred.
     */
    class ParseError {
      // Error position based on passed-in Token or ParseNode.
      constructor(message, // The error message
      token // An object providing position information
      ) {
        this.position = void 0;
        var error = "KaTeX parse error: " + message;
        var start;
        var loc = token && token.loc;

        if (loc && loc.start <= loc.end) {
          // If we have the input and a position, make the error a bit fancier
          // Get the input
          var input = loc.lexer.input; // Prepend some information

          start = loc.start;
          var end = loc.end;

          if (start === input.length) {
            error += " at end of input: ";
          } else {
            error += " at position " + (start + 1) + ": ";
          } // Underline token in question using combining underscores


          var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332"); // Extract some context from the input and add it to the error

          var left;

          if (start > 15) {
            left = "…" + input.slice(start - 15, start);
          } else {
            left = input.slice(0, start);
          }

          var right;

          if (end + 15 < input.length) {
            right = input.slice(end, end + 15) + "…";
          } else {
            right = input.slice(end);
          }

          error += left + underlined + right;
        } // Some hackery to make ParseError a prototype of Error
        // See http://stackoverflow.com/a/8460753


        var self = new Error(error);
        self.name = "ParseError"; // $FlowFixMe

        self.__proto__ = ParseError.prototype; // $FlowFixMe

        self.position = start;
        return self;
      }

    } // $FlowFixMe More hackery


    ParseError.prototype.__proto__ = Error.prototype;

    /**
     * This file contains a list of utility functions which are useful in other
     * files.
     */

    /**
     * Return whether an element is contained in a list
     */
    var contains = function contains(list, elem) {
      return list.indexOf(elem) !== -1;
    };
    /**
     * Provide a default value if a setting is undefined
     * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.
     */


    var deflt = function deflt(setting, defaultIfUndefined) {
      return setting === undefined ? defaultIfUndefined : setting;
    }; // hyphenate and escape adapted from Facebook's React under Apache 2 license


    var uppercase = /([A-Z])/g;

    var hyphenate = function hyphenate(str) {
      return str.replace(uppercase, "-$1").toLowerCase();
    };

    var ESCAPE_LOOKUP = {
      "&": "&amp;",
      ">": "&gt;",
      "<": "&lt;",
      "\"": "&quot;",
      "'": "&#x27;"
    };
    var ESCAPE_REGEX = /[&><"']/g;
    /**
     * Escapes text to prevent scripting attacks.
     */

    function escape(text) {
      return String(text).replace(ESCAPE_REGEX, match => ESCAPE_LOOKUP[match]);
    }
    /**
     * Sometimes we want to pull out the innermost element of a group. In most
     * cases, this will just be the group itself, but when ordgroups and colors have
     * a single element, we want to pull that out.
     */


    var getBaseElem = function getBaseElem(group) {
      if (group.type === "ordgroup") {
        if (group.body.length === 1) {
          return getBaseElem(group.body[0]);
        } else {
          return group;
        }
      } else if (group.type === "color") {
        if (group.body.length === 1) {
          return getBaseElem(group.body[0]);
        } else {
          return group;
        }
      } else if (group.type === "font") {
        return getBaseElem(group.body);
      } else {
        return group;
      }
    };
    /**
     * TeXbook algorithms often reference "character boxes", which are simply groups
     * with a single character in them. To decide if something is a character box,
     * we find its innermost group, and see if it is a single character.
     */


    var isCharacterBox = function isCharacterBox(group) {
      var baseElem = getBaseElem(group); // These are all they types of groups which hold single characters

      return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom";
    };

    var assert = function assert(value) {
      if (!value) {
        throw new Error('Expected non-null, but got ' + String(value));
      }

      return value;
    };
    /**
     * Return the protocol of a URL, or "_relative" if the URL does not specify a
     * protocol (and thus is relative).
     */

    var protocolFromUrl = function protocolFromUrl(url) {
      var protocol = /^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(url);
      return protocol != null ? protocol[1] : "_relative";
    };
    var utils = {
      contains,
      deflt,
      escape,
      hyphenate,
      getBaseElem,
      isCharacterBox,
      protocolFromUrl
    };

    /* eslint no-console:0 */
    // TODO: automatically generate documentation
    // TODO: check all properties on Settings exist
    // TODO: check the type of a property on Settings matches
    var SETTINGS_SCHEMA = {
      displayMode: {
        type: "boolean",
        description: "Render math in display mode, which puts the math in " + "display style (so \\int and \\sum are large, for example), and " + "centers the math on the page on its own line.",
        cli: "-d, --display-mode"
      },
      output: {
        type: {
          enum: ["htmlAndMathml", "html", "mathml"]
        },
        description: "Determines the markup language of the output.",
        cli: "-F, --format <type>"
      },
      leqno: {
        type: "boolean",
        description: "Render display math in leqno style (left-justified tags)."
      },
      fleqn: {
        type: "boolean",
        description: "Render display math flush left."
      },
      throwOnError: {
        type: "boolean",
        default: true,
        cli: "-t, --no-throw-on-error",
        cliDescription: "Render errors (in the color given by --error-color) ins" + "tead of throwing a ParseError exception when encountering an error."
      },
      errorColor: {
        type: "string",
        default: "#cc0000",
        cli: "-c, --error-color <color>",
        cliDescription: "A color string given in the format 'rgb' or 'rrggbb' " + "(no #). This option determines the color of errors rendered by the " + "-t option.",
        cliProcessor: color => "#" + color
      },
      macros: {
        type: "object",
        cli: "-m, --macro <def>",
        cliDescription: "Define custom macro of the form '\\foo:expansion' (use " + "multiple -m arguments for multiple macros).",
        cliDefault: [],
        cliProcessor: (def, defs) => {
          defs.push(def);
          return defs;
        }
      },
      minRuleThickness: {
        type: "number",
        description: "Specifies a minimum thickness, in ems, for fraction lines," + " `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, " + "`\\hdashline`, `\\underline`, `\\overline`, and the borders of " + "`\\fbox`, `\\boxed`, and `\\fcolorbox`.",
        processor: t => Math.max(0, t),
        cli: "--min-rule-thickness <size>",
        cliProcessor: parseFloat
      },
      colorIsTextColor: {
        type: "boolean",
        description: "Makes \\color behave like LaTeX's 2-argument \\textcolor, " + "instead of LaTeX's one-argument \\color mode change.",
        cli: "-b, --color-is-text-color"
      },
      strict: {
        type: [{
          enum: ["warn", "ignore", "error"]
        }, "boolean", "function"],
        description: "Turn on strict / LaTeX faithfulness mode, which throws an " + "error if the input uses features that are not supported by LaTeX.",
        cli: "-S, --strict",
        cliDefault: false
      },
      trust: {
        type: ["boolean", "function"],
        description: "Trust the input, enabling all HTML features such as \\url.",
        cli: "-T, --trust"
      },
      maxSize: {
        type: "number",
        default: Infinity,
        description: "If non-zero, all user-specified sizes, e.g. in " + "\\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, " + "elements and spaces can be arbitrarily large",
        processor: s => Math.max(0, s),
        cli: "-s, --max-size <n>",
        cliProcessor: parseInt
      },
      maxExpand: {
        type: "number",
        default: 1000,
        description: "Limit the number of macro expansions to the specified " + "number, to prevent e.g. infinite macro loops. If set to Infinity, " + "the macro expander will try to fully expand as in LaTeX.",
        processor: n => Math.max(0, n),
        cli: "-e, --max-expand <n>",
        cliProcessor: n => n === "Infinity" ? Infinity : parseInt(n)
      },
      globalGroup: {
        type: "boolean",
        cli: false
      }
    };

    function getDefaultValue(schema) {
      if (schema.default) {
        return schema.default;
      }

      var type = schema.type;
      var defaultType = Array.isArray(type) ? type[0] : type;

      if (typeof defaultType !== 'string') {
        return defaultType.enum[0];
      }

      switch (defaultType) {
        case 'boolean':
          return false;

        case 'string':
          return '';

        case 'number':
          return 0;

        case 'object':
          return {};
      }
    }
    /**
     * The main Settings object
     *
     * The current options stored are:
     *  - displayMode: Whether the expression should be typeset as inline math
     *                 (false, the default), meaning that the math starts in
     *                 \textstyle and is placed in an inline-block); or as display
     *                 math (true), meaning that the math starts in \displaystyle
     *                 and is placed in a block with vertical margin.
     */


    class Settings {
      constructor(options) {
        this.displayMode = void 0;
        this.output = void 0;
        this.leqno = void 0;
        this.fleqn = void 0;
        this.throwOnError = void 0;
        this.errorColor = void 0;
        this.macros = void 0;
        this.minRuleThickness = void 0;
        this.colorIsTextColor = void 0;
        this.strict = void 0;
        this.trust = void 0;
        this.maxSize = void 0;
        this.maxExpand = void 0;
        this.globalGroup = void 0;
        // allow null options
        options = options || {};

        for (var prop in SETTINGS_SCHEMA) {
          if (SETTINGS_SCHEMA.hasOwnProperty(prop)) {
            // $FlowFixMe
            var schema = SETTINGS_SCHEMA[prop]; // TODO: validate options
            // $FlowFixMe

            this[prop] = options[prop] !== undefined ? schema.processor ? schema.processor(options[prop]) : options[prop] : getDefaultValue(schema);
          }
        }
      }
      /**
       * Report nonstrict (non-LaTeX-compatible) input.
       * Can safely not be called if `this.strict` is false in JavaScript.
       */


      reportNonstrict(errorCode, errorMsg, token) {
        var strict = this.strict;

        if (typeof strict === "function") {
          // Allow return value of strict function to be boolean or string
          // (or null/undefined, meaning no further processing).
          strict = strict(errorCode, errorMsg, token);
        }

        if (!strict || strict === "ignore") {
          return;
        } else if (strict === true || strict === "error") {
          throw new ParseError("LaTeX-incompatible input and strict mode is set to 'error': " + (errorMsg + " [" + errorCode + "]"), token);
        } else if (strict === "warn") {
          typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
        } else {
          // won't happen in type-safe code
          typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
        }
      }
      /**
       * Check whether to apply strict (LaTeX-adhering) behavior for unusual
       * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
       * instead, "error" translates to a return value of `true`, while "ignore"
       * translates to a return value of `false`.  May still print a warning:
       * "warn" prints a warning and returns `false`.
       * This is for the second category of `errorCode`s listed in the README.
       */


      useStrictBehavior(errorCode, errorMsg, token) {
        var strict = this.strict;

        if (typeof strict === "function") {
          // Allow return value of strict function to be boolean or string
          // (or null/undefined, meaning no further processing).
          // But catch any exceptions thrown by function, treating them
          // like "error".
          try {
            strict = strict(errorCode, errorMsg, token);
          } catch (error) {
            strict = "error";
          }
        }

        if (!strict || strict === "ignore") {
          return false;
        } else if (strict === true || strict === "error") {
          return true;
        } else if (strict === "warn") {
          typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
          return false;
        } else {
          // won't happen in type-safe code
          typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
          return false;
        }
      }
      /**
       * Check whether to test potentially dangerous input, and return
       * `true` (trusted) or `false` (untrusted).  The sole argument `context`
       * should be an object with `command` field specifying the relevant LaTeX
       * command (as a string starting with `\`), and any other arguments, etc.
       * If `context` has a `url` field, a `protocol` field will automatically
       * get added by this function (changing the specified object).
       */


      isTrusted(context) {
        if (context.url && !context.protocol) {
          context.protocol = utils.protocolFromUrl(context.url);
        }

        var trust = typeof this.trust === "function" ? this.trust(context) : this.trust;
        return Boolean(trust);
      }

    }

    /**
     * This file contains information and classes for the various kinds of styles
     * used in TeX. It provides a generic `Style` class, which holds information
     * about a specific style. It then provides instances of all the different kinds
     * of styles possible, and provides functions to move between them and get
     * information about them.
     */

    /**
     * The main style class. Contains a unique id for the style, a size (which is
     * the same for cramped and uncramped version of a style), and a cramped flag.
     */
    class Style {
      constructor(id, size, cramped) {
        this.id = void 0;
        this.size = void 0;
        this.cramped = void 0;
        this.id = id;
        this.size = size;
        this.cramped = cramped;
      }
      /**
       * Get the style of a superscript given a base in the current style.
       */


      sup() {
        return styles[sup[this.id]];
      }
      /**
       * Get the style of a subscript given a base in the current style.
       */


      sub() {
        return styles[sub[this.id]];
      }
      /**
       * Get the style of a fraction numerator given the fraction in the current
       * style.
       */


      fracNum() {
        return styles[fracNum[this.id]];
      }
      /**
       * Get the style of a fraction denominator given the fraction in the current
       * style.
       */


      fracDen() {
        return styles[fracDen[this.id]];
      }
      /**
       * Get the cramped version of a style (in particular, cramping a cramped style
       * doesn't change the style).
       */


      cramp() {
        return styles[cramp[this.id]];
      }
      /**
       * Get a text or display version of this style.
       */


      text() {
        return styles[text$1[this.id]];
      }
      /**
       * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
       */


      isTight() {
        return this.size >= 2;
      }

    } // Export an interface for type checking, but don't expose the implementation.
    // This way, no more styles can be generated.


    // IDs of the different styles
    var D = 0;
    var Dc = 1;
    var T = 2;
    var Tc = 3;
    var S = 4;
    var Sc = 5;
    var SS = 6;
    var SSc = 7; // Instances of the different styles

    var styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)]; // Lookup tables for switching from one style to another

    var sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
    var sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
    var fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
    var fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
    var cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
    var text$1 = [D, Dc, T, Tc, T, Tc, T, Tc]; // We only export some of the styles.

    var Style$1 = {
      DISPLAY: styles[D],
      TEXT: styles[T],
      SCRIPT: styles[S],
      SCRIPTSCRIPT: styles[SS]
    };

    /*
     * This file defines the Unicode scripts and script families that we
     * support. To add new scripts or families, just add a new entry to the
     * scriptData array below. Adding scripts to the scriptData array allows
     * characters from that script to appear in \text{} environments.
     */

    /**
     * Each script or script family has a name and an array of blocks.
     * Each block is an array of two numbers which specify the start and
     * end points (inclusive) of a block of Unicode codepoints.
     */

    /**
     * Unicode block data for the families of scripts we support in \text{}.
     * Scripts only need to appear here if they do not have font metrics.
     */
    var scriptData = [{
      // Latin characters beyond the Latin-1 characters we have metrics for.
      // Needed for Czech, Hungarian and Turkish text, for example.
      name: 'latin',
      blocks: [[0x0100, 0x024f], // Latin Extended-A and Latin Extended-B
      [0x0300, 0x036f] // Combining Diacritical marks
      ]
    }, {
      // The Cyrillic script used by Russian and related languages.
      // A Cyrillic subset used to be supported as explicitly defined
      // symbols in symbols.js
      name: 'cyrillic',
      blocks: [[0x0400, 0x04ff]]
    }, {
      // Armenian
      name: 'armenian',
      blocks: [[0x0530, 0x058F]]
    }, {
      // The Brahmic scripts of South and Southeast Asia
      // Devanagari (0900–097F)
      // Bengali (0980–09FF)
      // Gurmukhi (0A00–0A7F)
      // Gujarati (0A80–0AFF)
      // Oriya (0B00–0B7F)
      // Tamil (0B80–0BFF)
      // Telugu (0C00–0C7F)
      // Kannada (0C80–0CFF)
      // Malayalam (0D00–0D7F)
      // Sinhala (0D80–0DFF)
      // Thai (0E00–0E7F)
      // Lao (0E80–0EFF)
      // Tibetan (0F00–0FFF)
      // Myanmar (1000–109F)
      name: 'brahmic',
      blocks: [[0x0900, 0x109F]]
    }, {
      name: 'georgian',
      blocks: [[0x10A0, 0x10ff]]
    }, {
      // Chinese and Japanese.
      // The "k" in cjk is for Korean, but we've separated Korean out
      name: "cjk",
      blocks: [[0x3000, 0x30FF], // CJK symbols and punctuation, Hiragana, Katakana
      [0x4E00, 0x9FAF], // CJK ideograms
      [0xFF00, 0xFF60] // Fullwidth punctuation
      // TODO: add halfwidth Katakana and Romanji glyphs
      ]
    }, {
      // Korean
      name: 'hangul',
      blocks: [[0xAC00, 0xD7AF]]
    }];
    /**
     * Given a codepoint, return the name of the script or script family
     * it is from, or null if it is not part of a known block
     */

    function scriptFromCodepoint(codepoint) {
      for (var i = 0; i < scriptData.length; i++) {
        var script = scriptData[i];

        for (var _i = 0; _i < script.blocks.length; _i++) {
          var block = script.blocks[_i];

          if (codepoint >= block[0] && codepoint <= block[1]) {
            return script.name;
          }
        }
      }

      return null;
    }
    /**
     * A flattened version of all the supported blocks in a single array.
     * This is an optimization to make supportedCodepoint() fast.
     */

    var allBlocks = [];
    scriptData.forEach(s => s.blocks.forEach(b => allBlocks.push(...b)));
    /**
     * Given a codepoint, return true if it falls within one of the
     * scripts or script families defined above and false otherwise.
     *
     * Micro benchmarks shows that this is faster than
     * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
     * in Firefox, Chrome and Node.
     */

    function supportedCodepoint(codepoint) {
      for (var i = 0; i < allBlocks.length; i += 2) {
        if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
          return true;
        }
      }

      return false;
    }

    /**
     * This file provides support to domTree.js and delimiter.js.
     * It's a storehouse of path geometry for SVG images.
     */
    // In all paths below, the viewBox-to-em scale is 1000:1.
    var hLinePad = 80; // padding above a sqrt viniculum. Prevents image cropping.
    // The viniculum of a \sqrt can be made thicker by a KaTeX rendering option.
    // Think of variable extraViniculum as two detours in the SVG path.
    // The detour begins at the lower left of the area labeled extraViniculum below.
    // The detour proceeds one extraViniculum distance up and slightly to the right,
    // displacing the radiused corner between surd and viniculum. The radius is
    // traversed as usual, then the detour resumes. It goes right, to the end of
    // the very long viniculumn, then down one extraViniculum distance,
    // after which it resumes regular path geometry for the radical.

    /*                                                  viniculum
                                                       /
             /▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒←extraViniculum
            / █████████████████████←0.04em (40 unit) std viniculum thickness
           / /
          / /
         / /\
        / / surd
    */

    var sqrtMain = function sqrtMain(extraViniculum, hLinePad) {
      // sqrtMain path geometry is from glyph U221A in the font KaTeX Main
      return "M95," + (622 + extraViniculum + hLinePad) + "\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl" + extraViniculum / 2.075 + " -" + extraViniculum + "\nc5.3,-9.3,12,-14,20,-14\nH400000v" + (40 + extraViniculum) + "H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM" + (834 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
    };

    var sqrtSize1 = function sqrtSize1(extraViniculum, hLinePad) {
      // size1 is from glyph U221A in the font KaTeX_Size1-Regular
      return "M263," + (601 + extraViniculum + hLinePad) + "c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl" + extraViniculum / 2.084 + " -" + extraViniculum + "\nc4.7,-7.3,11,-11,19,-11\nH40000v" + (40 + extraViniculum) + "H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
    };

    var sqrtSize2 = function sqrtSize2(extraViniculum, hLinePad) {
      // size2 is from glyph U221A in the font KaTeX_Size2-Regular
      return "M983 " + (10 + extraViniculum + hLinePad) + "\nl" + extraViniculum / 3.13 + " -" + extraViniculum + "\nc4,-6.7,10,-10,18,-10 H400000v" + (40 + extraViniculum) + "\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
    };

    var sqrtSize3 = function sqrtSize3(extraViniculum, hLinePad) {
      // size3 is from glyph U221A in the font KaTeX_Size3-Regular
      return "M424," + (2398 + extraViniculum + hLinePad) + "\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl" + extraViniculum / 4.223 + " -" + extraViniculum + "c4,-6.7,10,-10,18,-10 H400000\nv" + (40 + extraViniculum) + "H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M" + (1001 + extraViniculum) + " " + hLinePad + "\nh400000v" + (40 + extraViniculum) + "h-400000z";
    };

    var sqrtSize4 = function sqrtSize4(extraViniculum, hLinePad) {
      // size4 is from glyph U221A in the font KaTeX_Size4-Regular
      return "M473," + (2713 + extraViniculum + hLinePad) + "\nc339.3,-1799.3,509.3,-2700,510,-2702 l" + extraViniculum / 5.298 + " -" + extraViniculum + "\nc3.3,-7.3,9.3,-11,18,-11 H400000v" + (40 + extraViniculum) + "H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "H1017.7z";
    };

    var phasePath = function phasePath(y) {
      var x = y / 2; // x coordinate at top of angle

      return "M400000 " + y + " H0 L" + x + " 0 l65 45 L145 " + (y - 80) + " H400000z";
    };

    var sqrtTall = function sqrtTall(extraViniculum, hLinePad, viewBoxHeight) {
      // sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
      // One path edge has a variable length. It runs vertically from the viniculumn
      // to a point near (14 units) the bottom of the surd. The viniculum
      // is normally 40 units thick. So the length of the line in question is:
      var vertSegment = viewBoxHeight - 54 - hLinePad - extraViniculum;
      return "M702 " + (extraViniculum + hLinePad) + "H400000" + (40 + extraViniculum) + "\nH742v" + vertSegment + "l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 " + hLinePad + "H400000v" + (40 + extraViniculum) + "H742z";
    };

    var sqrtPath = function sqrtPath(size, extraViniculum, viewBoxHeight) {
      extraViniculum = 1000 * extraViniculum; // Convert from document ems to viewBox.

      var path = "";

      switch (size) {
        case "sqrtMain":
          path = sqrtMain(extraViniculum, hLinePad);
          break;

        case "sqrtSize1":
          path = sqrtSize1(extraViniculum, hLinePad);
          break;

        case "sqrtSize2":
          path = sqrtSize2(extraViniculum, hLinePad);
          break;

        case "sqrtSize3":
          path = sqrtSize3(extraViniculum, hLinePad);
          break;

        case "sqrtSize4":
          path = sqrtSize4(extraViniculum, hLinePad);
          break;

        case "sqrtTall":
          path = sqrtTall(extraViniculum, hLinePad, viewBoxHeight);
      }

      return path;
    };
    var innerPath = function innerPath(name, height) {
      // The inner part of stretchy tall delimiters
      switch (name) {
        case "\u239c":
          return "M291 0 H417 V" + height + " H291z M291 0 H417 V" + height + " H291z";

        case "\u2223":
          return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z";

        case "\u2225":
          return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z" + ("M367 0 H410 V" + height + " H367z M367 0 H410 V" + height + " H367z");

        case "\u239f":
          return "M457 0 H583 V" + height + " H457z M457 0 H583 V" + height + " H457z";

        case "\u23a2":
          return "M319 0 H403 V" + height + " H319z M319 0 H403 V" + height + " H319z";

        case "\u23a5":
          return "M263 0 H347 V" + height + " H263z M263 0 H347 V" + height + " H263z";

        case "\u23aa":
          return "M384 0 H504 V" + height + " H384z M384 0 H504 V" + height + " H384z";

        case "\u23d0":
          return "M312 0 H355 V" + height + " H312z M312 0 H355 V" + height + " H312z";

        case "\u2016":
          return "M257 0 H300 V" + height + " H257z M257 0 H300 V" + height + " H257z" + ("M478 0 H521 V" + height + " H478z M478 0 H521 V" + height + " H478z");

        default:
          return "";
      }
    };
    var path = {
      // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
      doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
      // doublerightarrow is from glyph U+21D2 in font KaTeX Main
      doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
      // leftarrow is from glyph U+2190 in font KaTeX Main
      leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
      // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
      leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
      leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
      // overgroup is from the MnSymbol package (public domain)
      leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
      leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
      // Harpoons are from glyph U+21BD in font KaTeX Main
      leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
      leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
      leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
      leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
      // hook is from glyph U+21A9 in font KaTeX Main
      lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
      leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
      leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
      // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
      leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
      longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
      midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
      midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
      oiintSize1: "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
      oiintSize2: "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
      oiiintSize1: "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
      oiiintSize2: "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
      rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
      rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
      rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
      rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
      rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
      rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
      rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
      rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
      rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
      righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
      rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
      rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
      // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
      twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
      twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
      // tilde1 is a modified version of a glyph from the MnSymbol package
      tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
      // ditto tilde2, tilde3, & tilde4
      tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
      tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
      tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
      // vec is from glyph U+20D7 in font KaTeX Main
      vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
      // widehat1 is a modified version of a glyph from the MnSymbol package
      widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
      // ditto widehat2, widehat3, & widehat4
      widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
      widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
      widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
      // widecheck paths are all inverted versions of widehat
      widecheck1: "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
      widecheck2: "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
      widecheck3: "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
      widecheck4: "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
      // The next ten paths support reaction arrows from the mhchem package.
      // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
      // baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main
      baraboveleftarrow: "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
      // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
      rightarrowabovebar: "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
      // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
      // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
      baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
      rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
      shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
      shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
    };

    /**
     * This node represents a document fragment, which contains elements, but when
     * placed into the DOM doesn't have any representation itself. It only contains
     * children and doesn't have any DOM node properties.
     */
    class DocumentFragment {
      // HtmlDomNode
      // Never used; needed for satisfying interface.
      constructor(children) {
        this.children = void 0;
        this.classes = void 0;
        this.height = void 0;
        this.depth = void 0;
        this.maxFontSize = void 0;
        this.style = void 0;
        this.children = children;
        this.classes = [];
        this.height = 0;
        this.depth = 0;
        this.maxFontSize = 0;
        this.style = {};
      }

      hasClass(className) {
        return utils.contains(this.classes, className);
      }
      /** Convert the fragment into a node. */


      toNode() {
        var frag = document.createDocumentFragment();

        for (var i = 0; i < this.children.length; i++) {
          frag.appendChild(this.children[i].toNode());
        }

        return frag;
      }
      /** Convert the fragment into HTML markup. */


      toMarkup() {
        var markup = ""; // Simply concatenate the markup for the children together.

        for (var i = 0; i < this.children.length; i++) {
          markup += this.children[i].toMarkup();
        }

        return markup;
      }
      /**
       * Converts the math node into a string, similar to innerText. Applies to
       * MathDomNode's only.
       */


      toText() {
        // To avoid this, we would subclass documentFragment separately for
        // MathML, but polyfills for subclassing is expensive per PR 1469.
        // $FlowFixMe: Only works for ChildType = MathDomNode.
        var toText = child => child.toText();

        return this.children.map(toText).join("");
      }

    }

    // This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.
    var fontMetricsData = {
      "AMS-Regular": {
        "32": [0, 0, 0, 0, 0.25],
        "65": [0, 0.68889, 0, 0, 0.72222],
        "66": [0, 0.68889, 0, 0, 0.66667],
        "67": [0, 0.68889, 0, 0, 0.72222],
        "68": [0, 0.68889, 0, 0, 0.72222],
        "69": [0, 0.68889, 0, 0, 0.66667],
        "70": [0, 0.68889, 0, 0, 0.61111],
        "71": [0, 0.68889, 0, 0, 0.77778],
        "72": [0, 0.68889, 0, 0, 0.77778],
        "73": [0, 0.68889, 0, 0, 0.38889],
        "74": [0.16667, 0.68889, 0, 0, 0.5],
        "75": [0, 0.68889, 0, 0, 0.77778],
        "76": [0, 0.68889, 0, 0, 0.66667],
        "77": [0, 0.68889, 0, 0, 0.94445],
        "78": [0, 0.68889, 0, 0, 0.72222],
        "79": [0.16667, 0.68889, 0, 0, 0.77778],
        "80": [0, 0.68889, 0, 0, 0.61111],
        "81": [0.16667, 0.68889, 0, 0, 0.77778],
        "82": [0, 0.68889, 0, 0, 0.72222],
        "83": [0, 0.68889, 0, 0, 0.55556],
        "84": [0, 0.68889, 0, 0, 0.66667],
        "85": [0, 0.68889, 0, 0, 0.72222],
        "86": [0, 0.68889, 0, 0, 0.72222],
        "87": [0, 0.68889, 0, 0, 1.0],
        "88": [0, 0.68889, 0, 0, 0.72222],
        "89": [0, 0.68889, 0, 0, 0.72222],
        "90": [0, 0.68889, 0, 0, 0.66667],
        "107": [0, 0.68889, 0, 0, 0.55556],
        "160": [0, 0, 0, 0, 0.25],
        "165": [0, 0.675, 0.025, 0, 0.75],
        "174": [0.15559, 0.69224, 0, 0, 0.94666],
        "240": [0, 0.68889, 0, 0, 0.55556],
        "295": [0, 0.68889, 0, 0, 0.54028],
        "710": [0, 0.825, 0, 0, 2.33334],
        "732": [0, 0.9, 0, 0, 2.33334],
        "770": [0, 0.825, 0, 0, 2.33334],
        "771": [0, 0.9, 0, 0, 2.33334],
        "989": [0.08167, 0.58167, 0, 0, 0.77778],
        "1008": [0, 0.43056, 0.04028, 0, 0.66667],
        "8245": [0, 0.54986, 0, 0, 0.275],
        "8463": [0, 0.68889, 0, 0, 0.54028],
        "8487": [0, 0.68889, 0, 0, 0.72222],
        "8498": [0, 0.68889, 0, 0, 0.55556],
        "8502": [0, 0.68889, 0, 0, 0.66667],
        "8503": [0, 0.68889, 0, 0, 0.44445],
        "8504": [0, 0.68889, 0, 0, 0.66667],
        "8513": [0, 0.68889, 0, 0, 0.63889],
        "8592": [-0.03598, 0.46402, 0, 0, 0.5],
        "8594": [-0.03598, 0.46402, 0, 0, 0.5],
        "8602": [-0.13313, 0.36687, 0, 0, 1.0],
        "8603": [-0.13313, 0.36687, 0, 0, 1.0],
        "8606": [0.01354, 0.52239, 0, 0, 1.0],
        "8608": [0.01354, 0.52239, 0, 0, 1.0],
        "8610": [0.01354, 0.52239, 0, 0, 1.11111],
        "8611": [0.01354, 0.52239, 0, 0, 1.11111],
        "8619": [0, 0.54986, 0, 0, 1.0],
        "8620": [0, 0.54986, 0, 0, 1.0],
        "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
        "8622": [-0.13313, 0.36687, 0, 0, 1.0],
        "8624": [0, 0.69224, 0, 0, 0.5],
        "8625": [0, 0.69224, 0, 0, 0.5],
        "8630": [0, 0.43056, 0, 0, 1.0],
        "8631": [0, 0.43056, 0, 0, 1.0],
        "8634": [0.08198, 0.58198, 0, 0, 0.77778],
        "8635": [0.08198, 0.58198, 0, 0, 0.77778],
        "8638": [0.19444, 0.69224, 0, 0, 0.41667],
        "8639": [0.19444, 0.69224, 0, 0, 0.41667],
        "8642": [0.19444, 0.69224, 0, 0, 0.41667],
        "8643": [0.19444, 0.69224, 0, 0, 0.41667],
        "8644": [0.1808, 0.675, 0, 0, 1.0],
        "8646": [0.1808, 0.675, 0, 0, 1.0],
        "8647": [0.1808, 0.675, 0, 0, 1.0],
        "8648": [0.19444, 0.69224, 0, 0, 0.83334],
        "8649": [0.1808, 0.675, 0, 0, 1.0],
        "8650": [0.19444, 0.69224, 0, 0, 0.83334],
        "8651": [0.01354, 0.52239, 0, 0, 1.0],
        "8652": [0.01354, 0.52239, 0, 0, 1.0],
        "8653": [-0.13313, 0.36687, 0, 0, 1.0],
        "8654": [-0.13313, 0.36687, 0, 0, 1.0],
        "8655": [-0.13313, 0.36687, 0, 0, 1.0],
        "8666": [0.13667, 0.63667, 0, 0, 1.0],
        "8667": [0.13667, 0.63667, 0, 0, 1.0],
        "8669": [-0.13313, 0.37788, 0, 0, 1.0],
        "8672": [-0.064, 0.437, 0, 0, 1.334],
        "8674": [-0.064, 0.437, 0, 0, 1.334],
        "8705": [0, 0.825, 0, 0, 0.5],
        "8708": [0, 0.68889, 0, 0, 0.55556],
        "8709": [0.08167, 0.58167, 0, 0, 0.77778],
        "8717": [0, 0.43056, 0, 0, 0.42917],
        "8722": [-0.03598, 0.46402, 0, 0, 0.5],
        "8724": [0.08198, 0.69224, 0, 0, 0.77778],
        "8726": [0.08167, 0.58167, 0, 0, 0.77778],
        "8733": [0, 0.69224, 0, 0, 0.77778],
        "8736": [0, 0.69224, 0, 0, 0.72222],
        "8737": [0, 0.69224, 0, 0, 0.72222],
        "8738": [0.03517, 0.52239, 0, 0, 0.72222],
        "8739": [0.08167, 0.58167, 0, 0, 0.22222],
        "8740": [0.25142, 0.74111, 0, 0, 0.27778],
        "8741": [0.08167, 0.58167, 0, 0, 0.38889],
        "8742": [0.25142, 0.74111, 0, 0, 0.5],
        "8756": [0, 0.69224, 0, 0, 0.66667],
        "8757": [0, 0.69224, 0, 0, 0.66667],
        "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
        "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
        "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
        "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
        "8774": [0.30274, 0.79383, 0, 0, 0.77778],
        "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
        "8778": [0.08167, 0.58167, 0, 0, 0.77778],
        "8782": [0.06062, 0.54986, 0, 0, 0.77778],
        "8783": [0.06062, 0.54986, 0, 0, 0.77778],
        "8785": [0.08198, 0.58198, 0, 0, 0.77778],
        "8786": [0.08198, 0.58198, 0, 0, 0.77778],
        "8787": [0.08198, 0.58198, 0, 0, 0.77778],
        "8790": [0, 0.69224, 0, 0, 0.77778],
        "8791": [0.22958, 0.72958, 0, 0, 0.77778],
        "8796": [0.08198, 0.91667, 0, 0, 0.77778],
        "8806": [0.25583, 0.75583, 0, 0, 0.77778],
        "8807": [0.25583, 0.75583, 0, 0, 0.77778],
        "8808": [0.25142, 0.75726, 0, 0, 0.77778],
        "8809": [0.25142, 0.75726, 0, 0, 0.77778],
        "8812": [0.25583, 0.75583, 0, 0, 0.5],
        "8814": [0.20576, 0.70576, 0, 0, 0.77778],
        "8815": [0.20576, 0.70576, 0, 0, 0.77778],
        "8816": [0.30274, 0.79383, 0, 0, 0.77778],
        "8817": [0.30274, 0.79383, 0, 0, 0.77778],
        "8818": [0.22958, 0.72958, 0, 0, 0.77778],
        "8819": [0.22958, 0.72958, 0, 0, 0.77778],
        "8822": [0.1808, 0.675, 0, 0, 0.77778],
        "8823": [0.1808, 0.675, 0, 0, 0.77778],
        "8828": [0.13667, 0.63667, 0, 0, 0.77778],
        "8829": [0.13667, 0.63667, 0, 0, 0.77778],
        "8830": [0.22958, 0.72958, 0, 0, 0.77778],
        "8831": [0.22958, 0.72958, 0, 0, 0.77778],
        "8832": [0.20576, 0.70576, 0, 0, 0.77778],
        "8833": [0.20576, 0.70576, 0, 0, 0.77778],
        "8840": [0.30274, 0.79383, 0, 0, 0.77778],
        "8841": [0.30274, 0.79383, 0, 0, 0.77778],
        "8842": [0.13597, 0.63597, 0, 0, 0.77778],
        "8843": [0.13597, 0.63597, 0, 0, 0.77778],
        "8847": [0.03517, 0.54986, 0, 0, 0.77778],
        "8848": [0.03517, 0.54986, 0, 0, 0.77778],
        "8858": [0.08198, 0.58198, 0, 0, 0.77778],
        "8859": [0.08198, 0.58198, 0, 0, 0.77778],
        "8861": [0.08198, 0.58198, 0, 0, 0.77778],
        "8862": [0, 0.675, 0, 0, 0.77778],
        "8863": [0, 0.675, 0, 0, 0.77778],
        "8864": [0, 0.675, 0, 0, 0.77778],
        "8865": [0, 0.675, 0, 0, 0.77778],
        "8872": [0, 0.69224, 0, 0, 0.61111],
        "8873": [0, 0.69224, 0, 0, 0.72222],
        "8874": [0, 0.69224, 0, 0, 0.88889],
        "8876": [0, 0.68889, 0, 0, 0.61111],
        "8877": [0, 0.68889, 0, 0, 0.61111],
        "8878": [0, 0.68889, 0, 0, 0.72222],
        "8879": [0, 0.68889, 0, 0, 0.72222],
        "8882": [0.03517, 0.54986, 0, 0, 0.77778],
        "8883": [0.03517, 0.54986, 0, 0, 0.77778],
        "8884": [0.13667, 0.63667, 0, 0, 0.77778],
        "8885": [0.13667, 0.63667, 0, 0, 0.77778],
        "8888": [0, 0.54986, 0, 0, 1.11111],
        "8890": [0.19444, 0.43056, 0, 0, 0.55556],
        "8891": [0.19444, 0.69224, 0, 0, 0.61111],
        "8892": [0.19444, 0.69224, 0, 0, 0.61111],
        "8901": [0, 0.54986, 0, 0, 0.27778],
        "8903": [0.08167, 0.58167, 0, 0, 0.77778],
        "8905": [0.08167, 0.58167, 0, 0, 0.77778],
        "8906": [0.08167, 0.58167, 0, 0, 0.77778],
        "8907": [0, 0.69224, 0, 0, 0.77778],
        "8908": [0, 0.69224, 0, 0, 0.77778],
        "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
        "8910": [0, 0.54986, 0, 0, 0.76042],
        "8911": [0, 0.54986, 0, 0, 0.76042],
        "8912": [0.03517, 0.54986, 0, 0, 0.77778],
        "8913": [0.03517, 0.54986, 0, 0, 0.77778],
        "8914": [0, 0.54986, 0, 0, 0.66667],
        "8915": [0, 0.54986, 0, 0, 0.66667],
        "8916": [0, 0.69224, 0, 0, 0.66667],
        "8918": [0.0391, 0.5391, 0, 0, 0.77778],
        "8919": [0.0391, 0.5391, 0, 0, 0.77778],
        "8920": [0.03517, 0.54986, 0, 0, 1.33334],
        "8921": [0.03517, 0.54986, 0, 0, 1.33334],
        "8922": [0.38569, 0.88569, 0, 0, 0.77778],
        "8923": [0.38569, 0.88569, 0, 0, 0.77778],
        "8926": [0.13667, 0.63667, 0, 0, 0.77778],
        "8927": [0.13667, 0.63667, 0, 0, 0.77778],
        "8928": [0.30274, 0.79383, 0, 0, 0.77778],
        "8929": [0.30274, 0.79383, 0, 0, 0.77778],
        "8934": [0.23222, 0.74111, 0, 0, 0.77778],
        "8935": [0.23222, 0.74111, 0, 0, 0.77778],
        "8936": [0.23222, 0.74111, 0, 0, 0.77778],
        "8937": [0.23222, 0.74111, 0, 0, 0.77778],
        "8938": [0.20576, 0.70576, 0, 0, 0.77778],
        "8939": [0.20576, 0.70576, 0, 0, 0.77778],
        "8940": [0.30274, 0.79383, 0, 0, 0.77778],
        "8941": [0.30274, 0.79383, 0, 0, 0.77778],
        "8994": [0.19444, 0.69224, 0, 0, 0.77778],
        "8995": [0.19444, 0.69224, 0, 0, 0.77778],
        "9416": [0.15559, 0.69224, 0, 0, 0.90222],
        "9484": [0, 0.69224, 0, 0, 0.5],
        "9488": [0, 0.69224, 0, 0, 0.5],
        "9492": [0, 0.37788, 0, 0, 0.5],
        "9496": [0, 0.37788, 0, 0, 0.5],
        "9585": [0.19444, 0.68889, 0, 0, 0.88889],
        "9586": [0.19444, 0.74111, 0, 0, 0.88889],
        "9632": [0, 0.675, 0, 0, 0.77778],
        "9633": [0, 0.675, 0, 0, 0.77778],
        "9650": [0, 0.54986, 0, 0, 0.72222],
        "9651": [0, 0.54986, 0, 0, 0.72222],
        "9654": [0.03517, 0.54986, 0, 0, 0.77778],
        "9660": [0, 0.54986, 0, 0, 0.72222],
        "9661": [0, 0.54986, 0, 0, 0.72222],
        "9664": [0.03517, 0.54986, 0, 0, 0.77778],
        "9674": [0.11111, 0.69224, 0, 0, 0.66667],
        "9733": [0.19444, 0.69224, 0, 0, 0.94445],
        "10003": [0, 0.69224, 0, 0, 0.83334],
        "10016": [0, 0.69224, 0, 0, 0.83334],
        "10731": [0.11111, 0.69224, 0, 0, 0.66667],
        "10846": [0.19444, 0.75583, 0, 0, 0.61111],
        "10877": [0.13667, 0.63667, 0, 0, 0.77778],
        "10878": [0.13667, 0.63667, 0, 0, 0.77778],
        "10885": [0.25583, 0.75583, 0, 0, 0.77778],
        "10886": [0.25583, 0.75583, 0, 0, 0.77778],
        "10887": [0.13597, 0.63597, 0, 0, 0.77778],
        "10888": [0.13597, 0.63597, 0, 0, 0.77778],
        "10889": [0.26167, 0.75726, 0, 0, 0.77778],
        "10890": [0.26167, 0.75726, 0, 0, 0.77778],
        "10891": [0.48256, 0.98256, 0, 0, 0.77778],
        "10892": [0.48256, 0.98256, 0, 0, 0.77778],
        "10901": [0.13667, 0.63667, 0, 0, 0.77778],
        "10902": [0.13667, 0.63667, 0, 0, 0.77778],
        "10933": [0.25142, 0.75726, 0, 0, 0.77778],
        "10934": [0.25142, 0.75726, 0, 0, 0.77778],
        "10935": [0.26167, 0.75726, 0, 0, 0.77778],
        "10936": [0.26167, 0.75726, 0, 0, 0.77778],
        "10937": [0.26167, 0.75726, 0, 0, 0.77778],
        "10938": [0.26167, 0.75726, 0, 0, 0.77778],
        "10949": [0.25583, 0.75583, 0, 0, 0.77778],
        "10950": [0.25583, 0.75583, 0, 0, 0.77778],
        "10955": [0.28481, 0.79383, 0, 0, 0.77778],
        "10956": [0.28481, 0.79383, 0, 0, 0.77778],
        "57350": [0.08167, 0.58167, 0, 0, 0.22222],
        "57351": [0.08167, 0.58167, 0, 0, 0.38889],
        "57352": [0.08167, 0.58167, 0, 0, 0.77778],
        "57353": [0, 0.43056, 0.04028, 0, 0.66667],
        "57356": [0.25142, 0.75726, 0, 0, 0.77778],
        "57357": [0.25142, 0.75726, 0, 0, 0.77778],
        "57358": [0.41951, 0.91951, 0, 0, 0.77778],
        "57359": [0.30274, 0.79383, 0, 0, 0.77778],
        "57360": [0.30274, 0.79383, 0, 0, 0.77778],
        "57361": [0.41951, 0.91951, 0, 0, 0.77778],
        "57366": [0.25142, 0.75726, 0, 0, 0.77778],
        "57367": [0.25142, 0.75726, 0, 0, 0.77778],
        "57368": [0.25142, 0.75726, 0, 0, 0.77778],
        "57369": [0.25142, 0.75726, 0, 0, 0.77778],
        "57370": [0.13597, 0.63597, 0, 0, 0.77778],
        "57371": [0.13597, 0.63597, 0, 0, 0.77778]
      },
      "Caligraphic-Regular": {
        "32": [0, 0, 0, 0, 0.25],
        "65": [0, 0.68333, 0, 0.19445, 0.79847],
        "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
        "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
        "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
        "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
        "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
        "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
        "72": [0, 0.68333, 0.00965, 0.11111, 0.84452],
        "73": [0, 0.68333, 0.07382, 0, 0.54452],
        "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
        "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
        "76": [0, 0.68333, 0, 0.13889, 0.68972],
        "77": [0, 0.68333, 0, 0.13889, 1.2009],
        "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
        "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
        "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
        "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
        "82": [0, 0.68333, 0, 0.08334, 0.8475],
        "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
        "84": [0, 0.68333, 0.25417, 0, 0.54464],
        "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
        "86": [0, 0.68333, 0.08222, 0, 0.61278],
        "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
        "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
        "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
        "90": [0, 0.68333, 0.07944, 0.13889, 0.72473],
        "160": [0, 0, 0, 0, 0.25]
      },
      "Fraktur-Regular": {
        "32": [0, 0, 0, 0, 0.25],
        "33": [0, 0.69141, 0, 0, 0.29574],
        "34": [0, 0.69141, 0, 0, 0.21471],
        "38": [0, 0.69141, 0, 0, 0.73786],
        "39": [0, 0.69141, 0, 0, 0.21201],
        "40": [0.24982, 0.74947, 0, 0, 0.38865],
        "41": [0.24982, 0.74947, 0, 0, 0.38865],
        "42": [0, 0.62119, 0, 0, 0.27764],
        "43": [0.08319, 0.58283, 0, 0, 0.75623],
        "44": [0, 0.10803, 0, 0, 0.27764],
        "45": [0.08319, 0.58283, 0, 0, 0.75623],
        "46": [0, 0.10803, 0, 0, 0.27764],
        "47": [0.24982, 0.74947, 0, 0, 0.50181],
        "48": [0, 0.47534, 0, 0, 0.50181],
        "49": [0, 0.47534, 0, 0, 0.50181],
        "50": [0, 0.47534, 0, 0, 0.50181],
        "51": [0.18906, 0.47534, 0, 0, 0.50181],
        "52": [0.18906, 0.47534, 0, 0, 0.50181],
        "53": [0.18906, 0.47534, 0, 0, 0.50181],
        "54": [0, 0.69141, 0, 0, 0.50181],
        "55": [0.18906, 0.47534, 0, 0, 0.50181],
        "56": [0, 0.69141, 0, 0, 0.50181],
        "57": [0.18906, 0.47534, 0, 0, 0.50181],
        "58": [0, 0.47534, 0, 0, 0.21606],
        "59": [0.12604, 0.47534, 0, 0, 0.21606],
        "61": [-0.13099, 0.36866, 0, 0, 0.75623],
        "63": [0, 0.69141, 0, 0, 0.36245],
        "65": [0, 0.69141, 0, 0, 0.7176],
        "66": [0, 0.69141, 0, 0, 0.88397],
        "67": [0, 0.69141, 0, 0, 0.61254],
        "68": [0, 0.69141, 0, 0, 0.83158],
        "69": [0, 0.69141, 0, 0, 0.66278],
        "70": [0.12604, 0.69141, 0, 0, 0.61119],
        "71": [0, 0.69141, 0, 0, 0.78539],
        "72": [0.06302, 0.69141, 0, 0, 0.7203],
        "73": [0, 0.69141, 0, 0, 0.55448],
        "74": [0.12604, 0.69141, 0, 0, 0.55231],
        "75": [0, 0.69141, 0, 0, 0.66845],
        "76": [0, 0.69141, 0, 0, 0.66602],
        "77": [0, 0.69141, 0, 0, 1.04953],
        "78": [0, 0.69141, 0, 0, 0.83212],
        "79": [0, 0.69141, 0, 0, 0.82699],
        "80": [0.18906, 0.69141, 0, 0, 0.82753],
        "81": [0.03781, 0.69141, 0, 0, 0.82699],
        "82": [0, 0.69141, 0, 0, 0.82807],
        "83": [0, 0.69141, 0, 0, 0.82861],
        "84": [0, 0.69141, 0, 0, 0.66899],
        "85": [0, 0.69141, 0, 0, 0.64576],
        "86": [0, 0.69141, 0, 0, 0.83131],
        "87": [0, 0.69141, 0, 0, 1.04602],
        "88": [0, 0.69141, 0, 0, 0.71922],
        "89": [0.18906, 0.69141, 0, 0, 0.83293],
        "90": [0.12604, 0.69141, 0, 0, 0.60201],
        "91": [0.24982, 0.74947, 0, 0, 0.27764],
        "93": [0.24982, 0.74947, 0, 0, 0.27764],
        "94": [0, 0.69141, 0, 0, 0.49965],
        "97": [0, 0.47534, 0, 0, 0.50046],
        "98": [0, 0.69141, 0, 0, 0.51315],
        "99": [0, 0.47534, 0, 0, 0.38946],
        "100": [0, 0.62119, 0, 0, 0.49857],
        "101": [0, 0.47534, 0, 0, 0.40053],
        "102": [0.18906, 0.69141, 0, 0, 0.32626],
        "103": [0.18906, 0.47534, 0, 0, 0.5037],
        "104": [0.18906, 0.69141, 0, 0, 0.52126],
        "105": [0, 0.69141, 0, 0, 0.27899],
        "106": [0, 0.69141, 0, 0, 0.28088],
        "107": [0, 0.69141, 0, 0, 0.38946],
        "108": [0, 0.69141, 0, 0, 0.27953],
        "109": [0, 0.47534, 0, 0, 0.76676],
        "110": [0, 0.47534, 0, 0, 0.52666],
        "111": [0, 0.47534, 0, 0, 0.48885],
        "112": [0.18906, 0.52396, 0, 0, 0.50046],
        "113": [0.18906, 0.47534, 0, 0, 0.48912],
        "114": [0, 0.47534, 0, 0, 0.38919],
        "115": [0, 0.47534, 0, 0, 0.44266],
        "116": [0, 0.62119, 0, 0, 0.33301],
        "117": [0, 0.47534, 0, 0, 0.5172],
        "118": [0, 0.52396, 0, 0, 0.5118],
        "119": [0, 0.52396, 0, 0, 0.77351],
        "120": [0.18906, 0.47534, 0, 0, 0.38865],
        "121": [0.18906, 0.47534, 0, 0, 0.49884],
        "122": [0.18906, 0.47534, 0, 0, 0.39054],
        "160": [0, 0, 0, 0, 0.25],
        "8216": [0, 0.69141, 0, 0, 0.21471],
        "8217": [0, 0.69141, 0, 0, 0.21471],
        "58112": [0, 0.62119, 0, 0, 0.49749],
        "58113": [0, 0.62119, 0, 0, 0.4983],
        "58114": [0.18906, 0.69141, 0, 0, 0.33328],
        "58115": [0.18906, 0.69141, 0, 0, 0.32923],
        "58116": [0.18906, 0.47534, 0, 0, 0.50343],
        "58117": [0, 0.69141, 0, 0, 0.33301],
        "58118": [0, 0.62119, 0, 0, 0.33409],
        "58119": [0, 0.47534, 0, 0, 0.50073]
      },
      "Main-Bold": {
        "32": [0, 0, 0, 0, 0.25],
        "33": [0, 0.69444, 0, 0, 0.35],
        "34": [0, 0.69444, 0, 0, 0.60278],
        "35": [0.19444, 0.69444, 0, 0, 0.95833],
        "36": [0.05556, 0.75, 0, 0, 0.575],
        "37": [0.05556, 0.75, 0, 0, 0.95833],
        "38": [0, 0.69444, 0, 0, 0.89444],
        "39": [0, 0.69444, 0, 0, 0.31944],
        "40": [0.25, 0.75, 0, 0, 0.44722],
        "41": [0.25, 0.75, 0, 0, 0.44722],
        "42": [0, 0.75, 0, 0, 0.575],
        "43": [0.13333, 0.63333, 0, 0, 0.89444],
        "44": [0.19444, 0.15556, 0, 0, 0.31944],
        "45": [0, 0.44444, 0, 0, 0.38333],
        "46": [0, 0.15556, 0, 0, 0.31944],
        "47": [0.25, 0.75, 0, 0, 0.575],
        "48": [0, 0.64444, 0, 0, 0.575],
        "49": [0, 0.64444, 0, 0, 0.575],
        "50": [0, 0.64444, 0, 0, 0.575],
        "51": [0, 0.64444, 0, 0, 0.575],
        "52": [0, 0.64444, 0, 0, 0.575],
        "53": [0, 0.64444, 0, 0, 0.575],
        "54": [0, 0.64444, 0, 0, 0.575],
        "55": [0, 0.64444, 0, 0, 0.575],
        "56": [0, 0.64444, 0, 0, 0.575],
        "57": [0, 0.64444, 0, 0, 0.575],
        "58": [0, 0.44444, 0, 0, 0.31944],
        "59": [0.19444, 0.44444, 0, 0, 0.31944],
        "60": [0.08556, 0.58556, 0, 0, 0.89444],
        "61": [-0.10889, 0.39111, 0, 0, 0.89444],
        "62": [0.08556, 0.58556, 0, 0, 0.89444],
        "63": [0, 0.69444, 0, 0, 0.54305],
        "64": [0, 0.69444, 0, 0, 0.89444],
        "65": [0, 0.68611, 0, 0, 0.86944],
        "66": [0, 0.68611, 0, 0, 0.81805],
        "67": [0, 0.68611, 0, 0, 0.83055],
        "68": [0, 0.68611, 0, 0, 0.88194],
        "69": [0, 0.68611, 0, 0, 0.75555],
        "70": [0, 0.68611, 0, 0, 0.72361],
        "71": [0, 0.68611, 0, 0, 0.90416],
        "72": [0, 0.68611, 0, 0, 0.9],
        "73": [0, 0.68611, 0, 0, 0.43611],
        "74": [0, 0.68611, 0, 0, 0.59444],
        "75": [0, 0.68611, 0, 0, 0.90138],
        "76": [0, 0.68611, 0, 0, 0.69166],
        "77": [0, 0.68611, 0, 0, 1.09166],
        "78": [0, 0.68611, 0, 0, 0.9],
        "79": [0, 0.68611, 0, 0, 0.86388],
        "80": [0, 0.68611, 0, 0, 0.78611],
        "81": [0.19444, 0.68611, 0, 0, 0.86388],
        "82": [0, 0.68611, 0, 0, 0.8625],
        "83": [0, 0.68611, 0, 0, 0.63889],
        "84": [0, 0.68611, 0, 0, 0.8],
        "85": [0, 0.68611, 0, 0, 0.88472],
        "86": [0, 0.68611, 0.01597, 0, 0.86944],
        "87": [0, 0.68611, 0.01597, 0, 1.18888],
        "88": [0, 0.68611, 0, 0, 0.86944],
        "89": [0, 0.68611, 0.02875, 0, 0.86944],
        "90": [0, 0.68611, 0, 0, 0.70277],
        "91": [0.25, 0.75, 0, 0, 0.31944],
        "92": [0.25, 0.75, 0, 0, 0.575],
        "93": [0.25, 0.75, 0, 0, 0.31944],
        "94": [0, 0.69444, 0, 0, 0.575],
        "95": [0.31, 0.13444, 0.03194, 0, 0.575],
        "97": [0, 0.44444, 0, 0, 0.55902],
        "98": [0, 0.69444, 0, 0, 0.63889],
        "99": [0, 0.44444, 0, 0, 0.51111],
        "100": [0, 0.69444, 0, 0, 0.63889],
        "101": [0, 0.44444, 0, 0, 0.52708],
        "102": [0, 0.69444, 0.10903, 0, 0.35139],
        "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
        "104": [0, 0.69444, 0, 0, 0.63889],
        "105": [0, 0.69444, 0, 0, 0.31944],
        "106": [0.19444, 0.69444, 0, 0, 0.35139],
        "107": [0, 0.69444, 0, 0, 0.60694],
        "108": [0, 0.69444, 0, 0, 0.31944],
        "109": [0, 0.44444, 0, 0, 0.95833],
        "110": [0, 0.44444, 0, 0, 0.63889],
        "111": [0, 0.44444, 0, 0, 0.575],
        "112": [0.19444, 0.44444, 0, 0, 0.63889],
        "113": [0.19444, 0.44444, 0, 0, 0.60694],
        "114": [0, 0.44444, 0, 0, 0.47361],
        "115": [0, 0.44444, 0, 0, 0.45361],
        "116": [0, 0.63492, 0, 0, 0.44722],
        "117": [0, 0.44444, 0, 0, 0.63889],
        "118": [0, 0.44444, 0.01597, 0, 0.60694],
        "119": [0, 0.44444, 0.01597, 0, 0.83055],
        "120": [0, 0.44444, 0, 0, 0.60694],
        "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
        "122": [0, 0.44444, 0, 0, 0.51111],
        "123": [0.25, 0.75, 0, 0, 0.575],
        "124": [0.25, 0.75, 0, 0, 0.31944],
        "125": [0.25, 0.75, 0, 0, 0.575],
        "126": [0.35, 0.34444, 0, 0, 0.575],
        "160": [0, 0, 0, 0, 0.25],
        "163": [0, 0.69444, 0, 0, 0.86853],
        "168": [0, 0.69444, 0, 0, 0.575],
        "172": [0, 0.44444, 0, 0, 0.76666],
        "176": [0, 0.69444, 0, 0, 0.86944],
        "177": [0.13333, 0.63333, 0, 0, 0.89444],
        "184": [0.17014, 0, 0, 0, 0.51111],
        "198": [0, 0.68611, 0, 0, 1.04166],
        "215": [0.13333, 0.63333, 0, 0, 0.89444],
        "216": [0.04861, 0.73472, 0, 0, 0.89444],
        "223": [0, 0.69444, 0, 0, 0.59722],
        "230": [0, 0.44444, 0, 0, 0.83055],
        "247": [0.13333, 0.63333, 0, 0, 0.89444],
        "248": [0.09722, 0.54167, 0, 0, 0.575],
        "305": [0, 0.44444, 0, 0, 0.31944],
        "338": [0, 0.68611, 0, 0, 1.16944],
        "339": [0, 0.44444, 0, 0, 0.89444],
        "567": [0.19444, 0.44444, 0, 0, 0.35139],
        "710": [0, 0.69444, 0, 0, 0.575],
        "711": [0, 0.63194, 0, 0, 0.575],
        "713": [0, 0.59611, 0, 0, 0.575],
        "714": [0, 0.69444, 0, 0, 0.575],
        "715": [0, 0.69444, 0, 0, 0.575],
        "728": [0, 0.69444, 0, 0, 0.575],
        "729": [0, 0.69444, 0, 0, 0.31944],
        "730": [0, 0.69444, 0, 0, 0.86944],
        "732": [0, 0.69444, 0, 0, 0.575],
        "733": [0, 0.69444, 0, 0, 0.575],
        "915": [0, 0.68611, 0, 0, 0.69166],
        "916": [0, 0.68611, 0, 0, 0.95833],
        "920": [0, 0.68611, 0, 0, 0.89444],
        "923": [0, 0.68611, 0, 0, 0.80555],
        "926": [0, 0.68611, 0, 0, 0.76666],
        "928": [0, 0.68611, 0, 0, 0.9],
        "931": [0, 0.68611, 0, 0, 0.83055],
        "933": [0, 0.68611, 0, 0, 0.89444],
        "934": [0, 0.68611, 0, 0, 0.83055],
        "936": [0, 0.68611, 0, 0, 0.89444],
        "937": [0, 0.68611, 0, 0, 0.83055],
        "8211": [0, 0.44444, 0.03194, 0, 0.575],
        "8212": [0, 0.44444, 0.03194, 0, 1.14999],
        "8216": [0, 0.69444, 0, 0, 0.31944],
        "8217": [0, 0.69444, 0, 0, 0.31944],
        "8220": [0, 0.69444, 0, 0, 0.60278],
        "8221": [0, 0.69444, 0, 0, 0.60278],
        "8224": [0.19444, 0.69444, 0, 0, 0.51111],
        "8225": [0.19444, 0.69444, 0, 0, 0.51111],
        "8242": [0, 0.55556, 0, 0, 0.34444],
        "8407": [0, 0.72444, 0.15486, 0, 0.575],
        "8463": [0, 0.69444, 0, 0, 0.66759],
        "8465": [0, 0.69444, 0, 0, 0.83055],
        "8467": [0, 0.69444, 0, 0, 0.47361],
        "8472": [0.19444, 0.44444, 0, 0, 0.74027],
        "8476": [0, 0.69444, 0, 0, 0.83055],
        "8501": [0, 0.69444, 0, 0, 0.70277],
        "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
        "8593": [0.19444, 0.69444, 0, 0, 0.575],
        "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
        "8595": [0.19444, 0.69444, 0, 0, 0.575],
        "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
        "8597": [0.25, 0.75, 0, 0, 0.575],
        "8598": [0.19444, 0.69444, 0, 0, 1.14999],
        "8599": [0.19444, 0.69444, 0, 0, 1.14999],
        "8600": [0.19444, 0.69444, 0, 0, 1.14999],
        "8601": [0.19444, 0.69444, 0, 0, 1.14999],
        "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
        "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
        "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
        "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
        "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
        "8657": [0.19444, 0.69444, 0, 0, 0.70277],
        "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
        "8659": [0.19444, 0.69444, 0, 0, 0.70277],
        "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
        "8661": [0.25, 0.75, 0, 0, 0.70277],
        "8704": [0, 0.69444, 0, 0, 0.63889],
        "8706": [0, 0.69444, 0.06389, 0, 0.62847],
        "8707": [0, 0.69444, 0, 0, 0.63889],
        "8709": [0.05556, 0.75, 0, 0, 0.575],
        "8711": [0, 0.68611, 0, 0, 0.95833],
        "8712": [0.08556, 0.58556, 0, 0, 0.76666],
        "8715": [0.08556, 0.58556, 0, 0, 0.76666],
        "8722": [0.13333, 0.63333, 0, 0, 0.89444],
        "8723": [0.13333, 0.63333, 0, 0, 0.89444],
        "8725": [0.25, 0.75, 0, 0, 0.575],
        "8726": [0.25, 0.75, 0, 0, 0.575],
        "8727": [-0.02778, 0.47222, 0, 0, 0.575],
        "8728": [-0.02639, 0.47361, 0, 0, 0.575],
        "8729": [-0.02639, 0.47361, 0, 0, 0.575],
        "8730": [0.18, 0.82, 0, 0, 0.95833],
        "8733": [0, 0.44444, 0, 0, 0.89444],
        "8734": [0, 0.44444, 0, 0, 1.14999],
        "8736": [0, 0.69224, 0, 0, 0.72222],
        "8739": [0.25, 0.75, 0, 0, 0.31944],
        "8741": [0.25, 0.75, 0, 0, 0.575],
        "8743": [0, 0.55556, 0, 0, 0.76666],
        "8744": [0, 0.55556, 0, 0, 0.76666],
        "8745": [0, 0.55556, 0, 0, 0.76666],
        "8746": [0, 0.55556, 0, 0, 0.76666],
        "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
        "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
        "8768": [0.19444, 0.69444, 0, 0, 0.31944],
        "8771": [0.00222, 0.50222, 0, 0, 0.89444],
        "8773": [0.027, 0.638, 0, 0, 0.894],
        "8776": [0.02444, 0.52444, 0, 0, 0.89444],
        "8781": [0.00222, 0.50222, 0, 0, 0.89444],
        "8801": [0.00222, 0.50222, 0, 0, 0.89444],
        "8804": [0.19667, 0.69667, 0, 0, 0.89444],
        "8805": [0.19667, 0.69667, 0, 0, 0.89444],
        "8810": [0.08556, 0.58556, 0, 0, 1.14999],
        "8811": [0.08556, 0.58556, 0, 0, 1.14999],
        "8826": [0.08556, 0.58556, 0, 0, 0.89444],
        "8827": [0.08556, 0.58556, 0, 0, 0.89444],
        "8834": [0.08556, 0.58556, 0, 0, 0.89444],
        "8835": [0.08556, 0.58556, 0, 0, 0.89444],
        "8838": [0.19667, 0.69667, 0, 0, 0.89444],
        "8839": [0.19667, 0.69667, 0, 0, 0.89444],
        "8846": [0, 0.55556, 0, 0, 0.76666],
        "8849": [0.19667, 0.69667, 0, 0, 0.89444],
        "8850": [0.19667, 0.69667, 0, 0, 0.89444],
        "8851": [0, 0.55556, 0, 0, 0.76666],
        "8852": [0, 0.55556, 0, 0, 0.76666],
        "8853": [0.13333, 0.63333, 0, 0, 0.89444],
        "8854": [0.13333, 0.63333, 0, 0, 0.89444],
        "8855": [0.13333, 0.63333, 0, 0, 0.89444],
        "8856": [0.13333, 0.63333, 0, 0, 0.89444],
        "8857": [0.13333, 0.63333, 0, 0, 0.89444],
        "8866": [0, 0.69444, 0, 0, 0.70277],
        "8867": [0, 0.69444, 0, 0, 0.70277],
        "8868": [0, 0.69444, 0, 0, 0.89444],
        "8869": [0, 0.69444, 0, 0, 0.89444],
        "8900": [-0.02639, 0.47361, 0, 0, 0.575],
        "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
        "8902": [-0.02778, 0.47222, 0, 0, 0.575],
        "8968": [0.25, 0.75, 0, 0, 0.51111],
        "8969": [0.25, 0.75, 0, 0, 0.51111],
        "8970": [0.25, 0.75, 0, 0, 0.51111],
        "8971": [0.25, 0.75, 0, 0, 0.51111],
        "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
        "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
        "9651": [0.19444, 0.69444, 0, 0, 1.02222],
        "9657": [-0.02778, 0.47222, 0, 0, 0.575],
        "9661": [0.19444, 0.69444, 0, 0, 1.02222],
        "9667": [-0.02778, 0.47222, 0, 0, 0.575],
        "9711": [0.19444, 0.69444, 0, 0, 1.14999],
        "9824": [0.12963, 0.69444, 0, 0, 0.89444],
        "9825": [0.12963, 0.69444, 0, 0, 0.89444],
        "9826": [0.12963, 0.69444, 0, 0, 0.89444],
        "9827": [0.12963, 0.69444, 0, 0, 0.89444],
        "9837": [0, 0.75, 0, 0, 0.44722],
        "9838": [0.19444, 0.69444, 0, 0, 0.44722],
        "9839": [0.19444, 0.69444, 0, 0, 0.44722],
        "10216": [0.25, 0.75, 0, 0, 0.44722],
        "10217": [0.25, 0.75, 0, 0, 0.44722],
        "10815": [0, 0.68611, 0, 0, 0.9],
        "10927": [0.19667, 0.69667, 0, 0, 0.89444],
        "10928": [0.19667, 0.69667, 0, 0, 0.89444],
        "57376": [0.19444, 0.69444, 0, 0, 0]
      },
      "Main-BoldItalic": {
        "32": [0, 0, 0, 0, 0.25],
        "33": [0, 0.69444, 0.11417, 0, 0.38611],
        "34": [0, 0.69444, 0.07939, 0, 0.62055],
        "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
        "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
        "38": [0, 0.69444, 0.08528, 0, 0.88555],
        "39": [0, 0.69444, 0.12945, 0, 0.35555],
        "40": [0.25, 0.75, 0.15806, 0, 0.47333],
        "41": [0.25, 0.75, 0.03306, 0, 0.47333],
        "42": [0, 0.75, 0.14333, 0, 0.59111],
        "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
        "44": [0.19444, 0.14722, 0, 0, 0.35555],
        "45": [0, 0.44444, 0.02611, 0, 0.41444],
        "46": [0, 0.14722, 0, 0, 0.35555],
        "47": [0.25, 0.75, 0.15806, 0, 0.59111],
        "48": [0, 0.64444, 0.13167, 0, 0.59111],
        "49": [0, 0.64444, 0.13167, 0, 0.59111],
        "50": [0, 0.64444, 0.13167, 0, 0.59111],
        "51": [0, 0.64444, 0.13167, 0, 0.59111],
        "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
        "53": [0, 0.64444, 0.13167, 0, 0.59111],
        "54": [0, 0.64444, 0.13167, 0, 0.59111],
        "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
        "56": [0, 0.64444, 0.13167, 0, 0.59111],
        "57": [0, 0.64444, 0.13167, 0, 0.59111],
        "58": [0, 0.44444, 0.06695, 0, 0.35555],
        "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
        "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
        "63": [0, 0.69444, 0.11472, 0, 0.59111],
        "64": [0, 0.69444, 0.09208, 0, 0.88555],
        "65": [0, 0.68611, 0, 0, 0.86555],
        "66": [0, 0.68611, 0.0992, 0, 0.81666],
        "67": [0, 0.68611, 0.14208, 0, 0.82666],
        "68": [0, 0.68611, 0.09062, 0, 0.87555],
        "69": [0, 0.68611, 0.11431, 0, 0.75666],
        "70": [0, 0.68611, 0.12903, 0, 0.72722],
        "71": [0, 0.68611, 0.07347, 0, 0.89527],
        "72": [0, 0.68611, 0.17208, 0, 0.8961],
        "73": [0, 0.68611, 0.15681, 0, 0.47166],
        "74": [0, 0.68611, 0.145, 0, 0.61055],
        "75": [0, 0.68611, 0.14208, 0, 0.89499],
        "76": [0, 0.68611, 0, 0, 0.69777],
        "77": [0, 0.68611, 0.17208, 0, 1.07277],
        "78": [0, 0.68611, 0.17208, 0, 0.8961],
        "79": [0, 0.68611, 0.09062, 0, 0.85499],
        "80": [0, 0.68611, 0.0992, 0, 0.78721],
        "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
        "82": [0, 0.68611, 0.02559, 0, 0.85944],
        "83": [0, 0.68611, 0.11264, 0, 0.64999],
        "84": [0, 0.68611, 0.12903, 0, 0.7961],
        "85": [0, 0.68611, 0.17208, 0, 0.88083],
        "86": [0, 0.68611, 0.18625, 0, 0.86555],
        "87": [0, 0.68611, 0.18625, 0, 1.15999],
        "88": [0, 0.68611, 0.15681, 0, 0.86555],
        "89": [0, 0.68611, 0.19803, 0, 0.86555],
        "90": [0, 0.68611, 0.14208, 0, 0.70888],
        "91": [0.25, 0.75, 0.1875, 0, 0.35611],
        "93": [0.25, 0.75, 0.09972, 0, 0.35611],
        "94": [0, 0.69444, 0.06709, 0, 0.59111],
        "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
        "97": [0, 0.44444, 0.09426, 0, 0.59111],
        "98": [0, 0.69444, 0.07861, 0, 0.53222],
        "99": [0, 0.44444, 0.05222, 0, 0.53222],
        "100": [0, 0.69444, 0.10861, 0, 0.59111],
        "101": [0, 0.44444, 0.085, 0, 0.53222],
        "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
        "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
        "104": [0, 0.69444, 0.09426, 0, 0.59111],
        "105": [0, 0.69326, 0.11387, 0, 0.35555],
        "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
        "107": [0, 0.69444, 0.11111, 0, 0.53222],
        "108": [0, 0.69444, 0.10861, 0, 0.29666],
        "109": [0, 0.44444, 0.09426, 0, 0.94444],
        "110": [0, 0.44444, 0.09426, 0, 0.64999],
        "111": [0, 0.44444, 0.07861, 0, 0.59111],
        "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
        "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
        "114": [0, 0.44444, 0.11111, 0, 0.50167],
        "115": [0, 0.44444, 0.08167, 0, 0.48694],
        "116": [0, 0.63492, 0.09639, 0, 0.385],
        "117": [0, 0.44444, 0.09426, 0, 0.62055],
        "118": [0, 0.44444, 0.11111, 0, 0.53222],
        "119": [0, 0.44444, 0.11111, 0, 0.76777],
        "120": [0, 0.44444, 0.12583, 0, 0.56055],
        "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
        "122": [0, 0.44444, 0.13889, 0, 0.49055],
        "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
        "160": [0, 0, 0, 0, 0.25],
        "168": [0, 0.69444, 0.11473, 0, 0.59111],
        "176": [0, 0.69444, 0, 0, 0.94888],
        "184": [0.17014, 0, 0, 0, 0.53222],
        "198": [0, 0.68611, 0.11431, 0, 1.02277],
        "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
        "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
        "230": [0, 0.44444, 0.085, 0, 0.82666],
        "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
        "305": [0, 0.44444, 0.09426, 0, 0.35555],
        "338": [0, 0.68611, 0.11431, 0, 1.14054],
        "339": [0, 0.44444, 0.085, 0, 0.82666],
        "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
        "710": [0, 0.69444, 0.06709, 0, 0.59111],
        "711": [0, 0.63194, 0.08271, 0, 0.59111],
        "713": [0, 0.59444, 0.10444, 0, 0.59111],
        "714": [0, 0.69444, 0.08528, 0, 0.59111],
        "715": [0, 0.69444, 0, 0, 0.59111],
        "728": [0, 0.69444, 0.10333, 0, 0.59111],
        "729": [0, 0.69444, 0.12945, 0, 0.35555],
        "730": [0, 0.69444, 0, 0, 0.94888],
        "732": [0, 0.69444, 0.11472, 0, 0.59111],
        "733": [0, 0.69444, 0.11472, 0, 0.59111],
        "915": [0, 0.68611, 0.12903, 0, 0.69777],
        "916": [0, 0.68611, 0, 0, 0.94444],
        "920": [0, 0.68611, 0.09062, 0, 0.88555],
        "923": [0, 0.68611, 0, 0, 0.80666],
        "926": [0, 0.68611, 0.15092, 0, 0.76777],
        "928": [0, 0.68611, 0.17208, 0, 0.8961],
        "931": [0, 0.68611, 0.11431, 0, 0.82666],
        "933": [0, 0.68611, 0.10778, 0, 0.88555],
        "934": [0, 0.68611, 0.05632, 0, 0.82666],
        "936": [0, 0.68611, 0.10778, 0, 0.88555],
        "937": [0, 0.68611, 0.0992, 0, 0.82666],
        "8211": [0, 0.44444, 0.09811, 0, 0.59111],
        "8212": [0, 0.44444, 0.09811, 0, 1.18221],
        "8216": [0, 0.69444, 0.12945, 0, 0.35555],
        "8217": [0, 0.69444, 0.12945, 0, 0.35555],
        "8220": [0, 0.69444, 0.16772, 0, 0.62055],
        "8221": [0, 0.69444, 0.07939, 0, 0.62055]
      },
      "Main-Italic": {
        "32": [0, 0, 0, 0, 0.25],
        "33": [0, 0.69444, 0.12417, 0, 0.30667],
        "34": [0, 0.69444, 0.06961, 0, 0.51444],
        "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
        "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
        "38": [0, 0.69444, 0.09694, 0, 0.76666],
        "39": [0, 0.69444, 0.12417, 0, 0.30667],
        "40": [0.25, 0.75, 0.16194, 0, 0.40889],
        "41": [0.25, 0.75, 0.03694, 0, 0.40889],
        "42": [0, 0.75, 0.14917, 0, 0.51111],
        "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
        "44": [0.19444, 0.10556, 0, 0, 0.30667],
        "45": [0, 0.43056, 0.02826, 0, 0.35778],
        "46": [0, 0.10556, 0, 0, 0.30667],
        "47": [0.25, 0.75, 0.16194, 0, 0.51111],
        "48": [0, 0.64444, 0.13556, 0, 0.51111],
        "49": [0, 0.64444, 0.13556, 0, 0.51111],
        "50": [0, 0.64444, 0.13556, 0, 0.51111],
        "51": [0, 0.64444, 0.13556, 0, 0.51111],
        "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
        "53": [0, 0.64444, 0.13556, 0, 0.51111],
        "54": [0, 0.64444, 0.13556, 0, 0.51111],
        "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
        "56": [0, 0.64444, 0.13556, 0, 0.51111],
        "57": [0, 0.64444, 0.13556, 0, 0.51111],
        "58": [0, 0.43056, 0.0582, 0, 0.30667],
        "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
        "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
        "63": [0, 0.69444, 0.1225, 0, 0.51111],
        "64": [0, 0.69444, 0.09597, 0, 0.76666],
        "65": [0, 0.68333, 0, 0, 0.74333],
        "66": [0, 0.68333, 0.10257, 0, 0.70389],
        "67": [0, 0.68333, 0.14528, 0, 0.71555],
        "68": [0, 0.68333, 0.09403, 0, 0.755],
        "69": [0, 0.68333, 0.12028, 0, 0.67833],
        "70": [0, 0.68333, 0.13305, 0, 0.65277],
        "71": [0, 0.68333, 0.08722, 0, 0.77361],
        "72": [0, 0.68333, 0.16389, 0, 0.74333],
        "73": [0, 0.68333, 0.15806, 0, 0.38555],
        "74": [0, 0.68333, 0.14028, 0, 0.525],
        "75": [0, 0.68333, 0.14528, 0, 0.76888],
        "76": [0, 0.68333, 0, 0, 0.62722],
        "77": [0, 0.68333, 0.16389, 0, 0.89666],
        "78": [0, 0.68333, 0.16389, 0, 0.74333],
        "79": [0, 0.68333, 0.09403, 0, 0.76666],
        "80": [0, 0.68333, 0.10257, 0, 0.67833],
        "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
        "82": [0, 0.68333, 0.03868, 0, 0.72944],
        "83": [0, 0.68333, 0.11972, 0, 0.56222],
        "84": [0, 0.68333, 0.13305, 0, 0.71555],
        "85": [0, 0.68333, 0.16389, 0, 0.74333],
        "86": [0, 0.68333, 0.18361, 0, 0.74333],
        "87": [0, 0.68333, 0.18361, 0, 0.99888],
        "88": [0, 0.68333, 0.15806, 0, 0.74333],
        "89": [0, 0.68333, 0.19383, 0, 0.74333],
        "90": [0, 0.68333, 0.14528, 0, 0.61333],
        "91": [0.25, 0.75, 0.1875, 0, 0.30667],
        "93": [0.25, 0.75, 0.10528, 0, 0.30667],
        "94": [0, 0.69444, 0.06646, 0, 0.51111],
        "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
        "97": [0, 0.43056, 0.07671, 0, 0.51111],
        "98": [0, 0.69444, 0.06312, 0, 0.46],
        "99": [0, 0.43056, 0.05653, 0, 0.46],
        "100": [0, 0.69444, 0.10333, 0, 0.51111],
        "101": [0, 0.43056, 0.07514, 0, 0.46],
        "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
        "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
        "104": [0, 0.69444, 0.07671, 0, 0.51111],
        "105": [0, 0.65536, 0.1019, 0, 0.30667],
        "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
        "107": [0, 0.69444, 0.10764, 0, 0.46],
        "108": [0, 0.69444, 0.10333, 0, 0.25555],
        "109": [0, 0.43056, 0.07671, 0, 0.81777],
        "110": [0, 0.43056, 0.07671, 0, 0.56222],
        "111": [0, 0.43056, 0.06312, 0, 0.51111],
        "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
        "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
        "114": [0, 0.43056, 0.10764, 0, 0.42166],
        "115": [0, 0.43056, 0.08208, 0, 0.40889],
        "116": [0, 0.61508, 0.09486, 0, 0.33222],
        "117": [0, 0.43056, 0.07671, 0, 0.53666],
        "118": [0, 0.43056, 0.10764, 0, 0.46],
        "119": [0, 0.43056, 0.10764, 0, 0.66444],
        "120": [0, 0.43056, 0.12042, 0, 0.46389],
        "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
        "122": [0, 0.43056, 0.12292, 0, 0.40889],
        "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
        "160": [0, 0, 0, 0, 0.25],
        "168": [0, 0.66786, 0.10474, 0, 0.51111],
        "176": [0, 0.69444, 0, 0, 0.83129],
        "184": [0.17014, 0, 0, 0, 0.46],
        "198": [0, 0.68333, 0.12028, 0, 0.88277],
        "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
        "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
        "230": [0, 0.43056, 0.07514, 0, 0.71555],
        "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
        "338": [0, 0.68333, 0.12028, 0, 0.98499],
        "339": [0, 0.43056, 0.07514, 0, 0.71555],
        "710": [0, 0.69444, 0.06646, 0, 0.51111],
        "711": [0, 0.62847, 0.08295, 0, 0.51111],
        "713": [0, 0.56167, 0.10333, 0, 0.51111],
        "714": [0, 0.69444, 0.09694, 0, 0.51111],
        "715": [0, 0.69444, 0, 0, 0.51111],
        "728": [0, 0.69444, 0.10806, 0, 0.51111],
        "729": [0, 0.66786, 0.11752, 0, 0.30667],
        "730": [0, 0.69444, 0, 0, 0.83129],
        "732": [0, 0.66786, 0.11585, 0, 0.51111],
        "733": [0, 0.69444, 0.1225, 0, 0.51111],
        "915": [0, 0.68333, 0.13305, 0, 0.62722],
        "916": [0, 0.68333, 0, 0, 0.81777],
        "920": [0, 0.68333, 0.09403, 0, 0.76666],
        "923": [0, 0.68333, 0, 0, 0.69222],
        "926": [0, 0.68333, 0.15294, 0, 0.66444],
        "928": [0, 0.68333, 0.16389, 0, 0.74333],
        "931": [0, 0.68333, 0.12028, 0, 0.71555],
        "933": [0, 0.68333, 0.11111, 0, 0.76666],
        "934": [0, 0.68333, 0.05986, 0, 0.71555],
        "936": [0, 0.68333, 0.11111, 0, 0.76666],
        "937": [0, 0.68333, 0.10257, 0, 0.71555],
        "8211": [0, 0.43056, 0.09208, 0, 0.51111],
        "8212": [0, 0.43056, 0.09208, 0, 1.02222],
        "8216": [0, 0.69444, 0.12417, 0, 0.30667],
        "8217": [0, 0.69444, 0.12417, 0, 0.30667],
        "8220": [0, 0.69444, 0.1685, 0, 0.51444],
        "8221": [0, 0.69444, 0.06961, 0, 0.51444],
        "8463": [0, 0.68889, 0, 0, 0.54028]
      },
      "Main-Regular": {
        "32": [0, 0, 0, 0, 0.25],
        "33": [0, 0.69444, 0, 0, 0.27778],
        "34": [0, 0.69444, 0, 0, 0.5],
        "35": [0.19444, 0.69444, 0, 0, 0.83334],
        "36": [0.05556, 0.75, 0, 0, 0.5],
        "37": [0.05556, 0.75, 0, 0, 0.83334],
        "38": [0, 0.69444, 0, 0, 0.77778],
        "39": [0, 0.69444, 0, 0, 0.27778],
        "40": [0.25, 0.75, 0, 0, 0.38889],
        "41": [0.25, 0.75, 0, 0, 0.38889],
        "42": [0, 0.75, 0, 0, 0.5],
        "43": [0.08333, 0.58333, 0, 0, 0.77778],
        "44": [0.19444, 0.10556, 0, 0, 0.27778],
        "45": [0, 0.43056, 0, 0, 0.33333],
        "46": [0, 0.10556, 0, 0, 0.27778],
        "47": [0.25, 0.75, 0, 0, 0.5],
        "48": [0, 0.64444, 0, 0, 0.5],
        "49": [0, 0.64444, 0, 0, 0.5],
        "50": [0, 0.64444, 0, 0, 0.5],
        "51": [0, 0.64444, 0, 0, 0.5],
        "52": [0, 0.64444, 0, 0, 0.5],
        "53": [0, 0.64444, 0, 0, 0.5],
        "54": [0, 0.64444, 0, 0, 0.5],
        "55": [0, 0.64444, 0, 0, 0.5],
        "56": [0, 0.64444, 0, 0, 0.5],
        "57": [0, 0.64444, 0, 0, 0.5],
        "58": [0, 0.43056, 0, 0, 0.27778],
        "59": [0.19444, 0.43056, 0, 0, 0.27778],
        "60": [0.0391, 0.5391, 0, 0, 0.77778],
        "61": [-0.13313, 0.36687, 0, 0, 0.77778],
        "62": [0.0391, 0.5391, 0, 0, 0.77778],
        "63": [0, 0.69444, 0, 0, 0.47222],
        "64": [0, 0.69444, 0, 0, 0.77778],
        "65": [0, 0.68333, 0, 0, 0.75],
        "66": [0, 0.68333, 0, 0, 0.70834],
        "67": [0, 0.68333, 0, 0, 0.72222],
        "68": [0, 0.68333, 0, 0, 0.76389],
        "69": [0, 0.68333, 0, 0, 0.68056],
        "70": [0, 0.68333, 0, 0, 0.65278],
        "71": [0, 0.68333, 0, 0, 0.78472],
        "72": [0, 0.68333, 0, 0, 0.75],
        "73": [0, 0.68333, 0, 0, 0.36111],
        "74": [0, 0.68333, 0, 0, 0.51389],
        "75": [0, 0.68333, 0, 0, 0.77778],
        "76": [0, 0.68333, 0, 0, 0.625],
        "77": [0, 0.68333, 0, 0, 0.91667],
        "78": [0, 0.68333, 0, 0, 0.75],
        "79": [0, 0.68333, 0, 0, 0.77778],
        "80": [0, 0.68333, 0, 0, 0.68056],
        "81": [0.19444, 0.68333, 0, 0, 0.77778],
        "82": [0, 0.68333, 0, 0, 0.73611],
        "83": [0, 0.68333, 0, 0, 0.55556],
        "84": [0, 0.68333, 0, 0, 0.72222],
        "85": [0, 0.68333, 0, 0, 0.75],
        "86": [0, 0.68333, 0.01389, 0, 0.75],
        "87": [0, 0.68333, 0.01389, 0, 1.02778],
        "88": [0, 0.68333, 0, 0, 0.75],
        "89": [0, 0.68333, 0.025, 0, 0.75],
        "90": [0, 0.68333, 0, 0, 0.61111],
        "91": [0.25, 0.75, 0, 0, 0.27778],
        "92": [0.25, 0.75, 0, 0, 0.5],
        "93": [0.25, 0.75, 0, 0, 0.27778],
        "94": [0, 0.69444, 0, 0, 0.5],
        "95": [0.31, 0.12056, 0.02778, 0, 0.5],
        "97": [0, 0.43056, 0, 0, 0.5],
        "98": [0, 0.69444, 0, 0, 0.55556],
        "99": [0, 0.43056, 0, 0, 0.44445],
        "100": [0, 0.69444, 0, 0, 0.55556],
        "101": [0, 0.43056, 0, 0, 0.44445],
        "102": [0, 0.69444, 0.07778, 0, 0.30556],
        "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
        "104": [0, 0.69444, 0, 0, 0.55556],
        "105": [0, 0.66786, 0, 0, 0.27778],
        "106": [0.19444, 0.66786, 0, 0, 0.30556],
        "107": [0, 0.69444, 0, 0, 0.52778],
        "108": [0, 0.69444, 0, 0, 0.27778],
        "109": [0, 0.43056, 0, 0, 0.83334],
        "110": [0, 0.43056, 0, 0, 0.55556],
        "111": [0, 0.43056, 0, 0, 0.5],
        "112": [0.19444, 0.43056, 0, 0, 0.55556],
        "113": [0.19444, 0.43056, 0, 0, 0.52778],
        "114": [0, 0.43056, 0, 0, 0.39167],
        "115": [0, 0.43056, 0, 0, 0.39445],
        "116": [0, 0.61508, 0, 0, 0.38889],
        "117": [0, 0.43056, 0, 0, 0.55556],
        "118": [0, 0.43056, 0.01389, 0, 0.52778],
        "119": [0, 0.43056, 0.01389, 0, 0.72222],
        "120": [0, 0.43056, 0, 0, 0.52778],
        "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
        "122": [0, 0.43056, 0, 0, 0.44445],
        "123": [0.25, 0.75, 0, 0, 0.5],
        "124": [0.25, 0.75, 0, 0, 0.27778],
        "125": [0.25, 0.75, 0, 0, 0.5],
        "126": [0.35, 0.31786, 0, 0, 0.5],
        "160": [0, 0, 0, 0, 0.25],
        "163": [0, 0.69444, 0, 0, 0.76909],
        "167": [0.19444, 0.69444, 0, 0, 0.44445],
        "168": [0, 0.66786, 0, 0, 0.5],
        "172": [0, 0.43056, 0, 0, 0.66667],
        "176": [0, 0.69444, 0, 0, 0.75],
        "177": [0.08333, 0.58333, 0, 0, 0.77778],
        "182": [0.19444, 0.69444, 0, 0, 0.61111],
        "184": [0.17014, 0, 0, 0, 0.44445],
        "198": [0, 0.68333, 0, 0, 0.90278],
        "215": [0.08333, 0.58333, 0, 0, 0.77778],
        "216": [0.04861, 0.73194, 0, 0, 0.77778],
        "223": [0, 0.69444, 0, 0, 0.5],
        "230": [0, 0.43056, 0, 0, 0.72222],
        "247": [0.08333, 0.58333, 0, 0, 0.77778],
        "248": [0.09722, 0.52778, 0, 0, 0.5],
        "305": [0, 0.43056, 0, 0, 0.27778],
        "338": [0, 0.68333, 0, 0, 1.01389],
        "339": [0, 0.43056, 0, 0, 0.77778],
        "567": [0.19444, 0.43056, 0, 0, 0.30556],
        "710": [0, 0.69444, 0, 0, 0.5],
        "711": [0, 0.62847, 0, 0, 0.5],
        "713": [0, 0.56778, 0, 0, 0.5],
        "714": [0, 0.69444, 0, 0, 0.5],
        "715": [0, 0.69444, 0, 0, 0.5],
        "728": [0, 0.69444, 0, 0, 0.5],
        "729": [0, 0.66786, 0, 0, 0.27778],
        "730": [0, 0.69444, 0, 0, 0.75],
        "732": [0, 0.66786, 0, 0, 0.5],
        "733": [0, 0.69444, 0, 0, 0.5],
        "915": [0, 0.68333, 0, 0, 0.625],
        "916": [0, 0.68333, 0, 0, 0.83334],
        "920": [0, 0.68333, 0, 0, 0.77778],
        "923": [0, 0.68333, 0, 0, 0.69445],
        "926": [0, 0.68333, 0, 0, 0.66667],
        "928": [0, 0.68333, 0, 0, 0.75],
        "931": [0, 0.68333, 0, 0, 0.72222],
        "933": [0, 0.68333, 0, 0, 0.77778],
        "934": [0, 0.68333, 0, 0, 0.72222],
        "936": [0, 0.68333, 0, 0, 0.77778],
        "937": [0, 0.68333, 0, 0, 0.72222],
        "8211": [0, 0.43056, 0.02778, 0, 0.5],
        "8212": [0, 0.43056, 0.02778, 0, 1.0],
        "8216": [0, 0.69444, 0, 0, 0.27778],
        "8217": [0, 0.69444, 0, 0, 0.27778],
        "8220": [0, 0.69444, 0, 0, 0.5],
        "8221": [0, 0.69444, 0, 0, 0.5],
        "8224": [0.19444, 0.69444, 0, 0, 0.44445],
        "8225": [0.19444, 0.69444, 0, 0, 0.44445],
        "8230": [0, 0.123, 0, 0, 1.172],
        "8242": [0, 0.55556, 0, 0, 0.275],
        "8407": [0, 0.71444, 0.15382, 0, 0.5],
        "8463": [0, 0.68889, 0, 0, 0.54028],
        "8465": [0, 0.69444, 0, 0, 0.72222],
        "8467": [0, 0.69444, 0, 0.11111, 0.41667],
        "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
        "8476": [0, 0.69444, 0, 0, 0.72222],
        "8501": [0, 0.69444, 0, 0, 0.61111],
        "8592": [-0.13313, 0.36687, 0, 0, 1.0],
        "8593": [0.19444, 0.69444, 0, 0, 0.5],
        "8594": [-0.13313, 0.36687, 0, 0, 1.0],
        "8595": [0.19444, 0.69444, 0, 0, 0.5],
        "8596": [-0.13313, 0.36687, 0, 0, 1.0],
        "8597": [0.25, 0.75, 0, 0, 0.5],
        "8598": [0.19444, 0.69444, 0, 0, 1.0],
        "8599": [0.19444, 0.69444, 0, 0, 1.0],
        "8600": [0.19444, 0.69444, 0, 0, 1.0],
        "8601": [0.19444, 0.69444, 0, 0, 1.0],
        "8614": [0.011, 0.511, 0, 0, 1.0],
        "8617": [0.011, 0.511, 0, 0, 1.126],
        "8618": [0.011, 0.511, 0, 0, 1.126],
        "8636": [-0.13313, 0.36687, 0, 0, 1.0],
        "8637": [-0.13313, 0.36687, 0, 0, 1.0],
        "8640": [-0.13313, 0.36687, 0, 0, 1.0],
        "8641": [-0.13313, 0.36687, 0, 0, 1.0],
        "8652": [0.011, 0.671, 0, 0, 1.0],
        "8656": [-0.13313, 0.36687, 0, 0, 1.0],
        "8657": [0.19444, 0.69444, 0, 0, 0.61111],
        "8658": [-0.13313, 0.36687, 0, 0, 1.0],
        "8659": [0.19444, 0.69444, 0, 0, 0.61111],
        "8660": [-0.13313, 0.36687, 0, 0, 1.0],
        "8661": [0.25, 0.75, 0, 0, 0.61111],
        "8704": [0, 0.69444, 0, 0, 0.55556],
        "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
        "8707": [0, 0.69444, 0, 0, 0.55556],
        "8709": [0.05556, 0.75, 0, 0, 0.5],
        "8711": [0, 0.68333, 0, 0, 0.83334],
        "8712": [0.0391, 0.5391, 0, 0, 0.66667],
        "8715": [0.0391, 0.5391, 0, 0, 0.66667],
        "8722": [0.08333, 0.58333, 0, 0, 0.77778],
        "8723": [0.08333, 0.58333, 0, 0, 0.77778],
        "8725": [0.25, 0.75, 0, 0, 0.5],
        "8726": [0.25, 0.75, 0, 0, 0.5],
        "8727": [-0.03472, 0.46528, 0, 0, 0.5],
        "8728": [-0.05555, 0.44445, 0, 0, 0.5],
        "8729": [-0.05555, 0.44445, 0, 0, 0.5],
        "8730": [0.2, 0.8, 0, 0, 0.83334],
        "8733": [0, 0.43056, 0, 0, 0.77778],
        "8734": [0, 0.43056, 0, 0, 1.0],
        "8736": [0, 0.69224, 0, 0, 0.72222],
        "8739": [0.25, 0.75, 0, 0, 0.27778],
        "8741": [0.25, 0.75, 0, 0, 0.5],
        "8743": [0, 0.55556, 0, 0, 0.66667],
        "8744": [0, 0.55556, 0, 0, 0.66667],
        "8745": [0, 0.55556, 0, 0, 0.66667],
        "8746": [0, 0.55556, 0, 0, 0.66667],
        "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
        "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
        "8768": [0.19444, 0.69444, 0, 0, 0.27778],
        "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
        "8773": [-0.022, 0.589, 0, 0, 0.778],
        "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
        "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
        "8784": [-0.133, 0.673, 0, 0, 0.778],
        "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
        "8804": [0.13597, 0.63597, 0, 0, 0.77778],
        "8805": [0.13597, 0.63597, 0, 0, 0.77778],
        "8810": [0.0391, 0.5391, 0, 0, 1.0],
        "8811": [0.0391, 0.5391, 0, 0, 1.0],
        "8826": [0.0391, 0.5391, 0, 0, 0.77778],
        "8827": [0.0391, 0.5391, 0, 0, 0.77778],
        "8834": [0.0391, 0.5391, 0, 0, 0.77778],
        "8835": [0.0391, 0.5391, 0, 0, 0.77778],
        "8838": [0.13597, 0.63597, 0, 0, 0.77778],
        "8839": [0.13597, 0.63597, 0, 0, 0.77778],
        "8846": [0, 0.55556, 0, 0, 0.66667],
        "8849": [0.13597, 0.63597, 0, 0, 0.77778],
        "8850": [0.13597, 0.63597, 0, 0, 0.77778],
        "8851": [0, 0.55556, 0, 0, 0.66667],
        "8852": [0, 0.55556, 0, 0, 0.66667],
        "8853": [0.08333, 0.58333, 0, 0, 0.77778],
        "8854": [0.08333, 0.58333, 0, 0, 0.77778],
        "8855": [0.08333, 0.58333, 0, 0, 0.77778],
        "8856": [0.08333, 0.58333, 0, 0, 0.77778],
        "8857": [0.08333, 0.58333, 0, 0, 0.77778],
        "8866": [0, 0.69444, 0, 0, 0.61111],
        "8867": [0, 0.69444, 0, 0, 0.61111],
        "8868": [0, 0.69444, 0, 0, 0.77778],
        "8869": [0, 0.69444, 0, 0, 0.77778],
        "8872": [0.249, 0.75, 0, 0, 0.867],
        "8900": [-0.05555, 0.44445, 0, 0, 0.5],
        "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
        "8902": [-0.03472, 0.46528, 0, 0, 0.5],
        "8904": [0.005, 0.505, 0, 0, 0.9],
        "8942": [0.03, 0.903, 0, 0, 0.278],
        "8943": [-0.19, 0.313, 0, 0, 1.172],
        "8945": [-0.1, 0.823, 0, 0, 1.282],
        "8968": [0.25, 0.75, 0, 0, 0.44445],
        "8969": [0.25, 0.75, 0, 0, 0.44445],
        "8970": [0.25, 0.75, 0, 0, 0.44445],
        "8971": [0.25, 0.75, 0, 0, 0.44445],
        "8994": [-0.14236, 0.35764, 0, 0, 1.0],
        "8995": [-0.14236, 0.35764, 0, 0, 1.0],
        "9136": [0.244, 0.744, 0, 0, 0.412],
        "9137": [0.244, 0.745, 0, 0, 0.412],
        "9651": [0.19444, 0.69444, 0, 0, 0.88889],
        "9657": [-0.03472, 0.46528, 0, 0, 0.5],
        "9661": [0.19444, 0.69444, 0, 0, 0.88889],
        "9667": [-0.03472, 0.46528, 0, 0, 0.5],
        "9711": [0.19444, 0.69444, 0, 0, 1.0],
        "9824": [0.12963, 0.69444, 0, 0, 0.77778],
        "9825": [0.12963, 0.69444, 0, 0, 0.77778],
        "9826": [0.12963, 0.69444, 0, 0, 0.77778],
        "9827": [0.12963, 0.69444, 0, 0, 0.77778],
        "9837": [0, 0.75, 0, 0, 0.38889],
        "9838": [0.19444, 0.69444, 0, 0, 0.38889],
        "9839": [0.19444, 0.69444, 0, 0, 0.38889],
        "10216": [0.25, 0.75, 0, 0, 0.38889],
        "10217": [0.25, 0.75, 0, 0, 0.38889],
        "10222": [0.244, 0.744, 0, 0, 0.412],
        "10223": [0.244, 0.745, 0, 0, 0.412],
        "10229": [0.011, 0.511, 0, 0, 1.609],
        "10230": [0.011, 0.511, 0, 0, 1.638],
        "10231": [0.011, 0.511, 0, 0, 1.859],
        "10232": [0.024, 0.525, 0, 0, 1.609],
        "10233": [0.024, 0.525, 0, 0, 1.638],
        "10234": [0.024, 0.525, 0, 0, 1.858],
        "10236": [0.011, 0.511, 0, 0, 1.638],
        "10815": [0, 0.68333, 0, 0, 0.75],
        "10927": [0.13597, 0.63597, 0, 0, 0.77778],
        "10928": [0.13597, 0.63597, 0, 0, 0.77778],
        "57376": [0.19444, 0.69444, 0, 0, 0]
      },
      "Math-BoldItalic": {
        "32": [0, 0, 0, 0, 0.25],
        "48": [0, 0.44444, 0, 0, 0.575],
        "49": [0, 0.44444, 0, 0, 0.575],
        "50": [0, 0.44444, 0, 0, 0.575],
        "51": [0.19444, 0.44444, 0, 0, 0.575],
        "52": [0.19444, 0.44444, 0, 0, 0.575],
        "53": [0.19444, 0.44444, 0, 0, 0.575],
        "54": [0, 0.64444, 0, 0, 0.575],
        "55": [0.19444, 0.44444, 0, 0, 0.575],
        "56": [0, 0.64444, 0, 0, 0.575],
        "57": [0.19444, 0.44444, 0, 0, 0.575],
        "65": [0, 0.68611, 0, 0, 0.86944],
        "66": [0, 0.68611, 0.04835, 0, 0.8664],
        "67": [0, 0.68611, 0.06979, 0, 0.81694],
        "68": [0, 0.68611, 0.03194, 0, 0.93812],
        "69": [0, 0.68611, 0.05451, 0, 0.81007],
        "70": [0, 0.68611, 0.15972, 0, 0.68889],
        "71": [0, 0.68611, 0, 0, 0.88673],
        "72": [0, 0.68611, 0.08229, 0, 0.98229],
        "73": [0, 0.68611, 0.07778, 0, 0.51111],
        "74": [0, 0.68611, 0.10069, 0, 0.63125],
        "75": [0, 0.68611, 0.06979, 0, 0.97118],
        "76": [0, 0.68611, 0, 0, 0.75555],
        "77": [0, 0.68611, 0.11424, 0, 1.14201],
        "78": [0, 0.68611, 0.11424, 0, 0.95034],
        "79": [0, 0.68611, 0.03194, 0, 0.83666],
        "80": [0, 0.68611, 0.15972, 0, 0.72309],
        "81": [0.19444, 0.68611, 0, 0, 0.86861],
        "82": [0, 0.68611, 0.00421, 0, 0.87235],
        "83": [0, 0.68611, 0.05382, 0, 0.69271],
        "84": [0, 0.68611, 0.15972, 0, 0.63663],
        "85": [0, 0.68611, 0.11424, 0, 0.80027],
        "86": [0, 0.68611, 0.25555, 0, 0.67778],
        "87": [0, 0.68611, 0.15972, 0, 1.09305],
        "88": [0, 0.68611, 0.07778, 0, 0.94722],
        "89": [0, 0.68611, 0.25555, 0, 0.67458],
        "90": [0, 0.68611, 0.06979, 0, 0.77257],
        "97": [0, 0.44444, 0, 0, 0.63287],
        "98": [0, 0.69444, 0, 0, 0.52083],
        "99": [0, 0.44444, 0, 0, 0.51342],
        "100": [0, 0.69444, 0, 0, 0.60972],
        "101": [0, 0.44444, 0, 0, 0.55361],
        "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
        "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
        "104": [0, 0.69444, 0, 0, 0.66759],
        "105": [0, 0.69326, 0, 0, 0.4048],
        "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
        "107": [0, 0.69444, 0.01852, 0, 0.6037],
        "108": [0, 0.69444, 0.0088, 0, 0.34815],
        "109": [0, 0.44444, 0, 0, 1.0324],
        "110": [0, 0.44444, 0, 0, 0.71296],
        "111": [0, 0.44444, 0, 0, 0.58472],
        "112": [0.19444, 0.44444, 0, 0, 0.60092],
        "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
        "114": [0, 0.44444, 0.03194, 0, 0.5287],
        "115": [0, 0.44444, 0, 0, 0.53125],
        "116": [0, 0.63492, 0, 0, 0.41528],
        "117": [0, 0.44444, 0, 0, 0.68102],
        "118": [0, 0.44444, 0.03704, 0, 0.56666],
        "119": [0, 0.44444, 0.02778, 0, 0.83148],
        "120": [0, 0.44444, 0, 0, 0.65903],
        "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
        "122": [0, 0.44444, 0.04213, 0, 0.55509],
        "160": [0, 0, 0, 0, 0.25],
        "915": [0, 0.68611, 0.15972, 0, 0.65694],
        "916": [0, 0.68611, 0, 0, 0.95833],
        "920": [0, 0.68611, 0.03194, 0, 0.86722],
        "923": [0, 0.68611, 0, 0, 0.80555],
        "926": [0, 0.68611, 0.07458, 0, 0.84125],
        "928": [0, 0.68611, 0.08229, 0, 0.98229],
        "931": [0, 0.68611, 0.05451, 0, 0.88507],
        "933": [0, 0.68611, 0.15972, 0, 0.67083],
        "934": [0, 0.68611, 0, 0, 0.76666],
        "936": [0, 0.68611, 0.11653, 0, 0.71402],
        "937": [0, 0.68611, 0.04835, 0, 0.8789],
        "945": [0, 0.44444, 0, 0, 0.76064],
        "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
        "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
        "948": [0, 0.69444, 0.03819, 0, 0.52222],
        "949": [0, 0.44444, 0, 0, 0.52882],
        "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
        "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
        "952": [0, 0.69444, 0.03194, 0, 0.5618],
        "953": [0, 0.44444, 0, 0, 0.41204],
        "954": [0, 0.44444, 0, 0, 0.66759],
        "955": [0, 0.69444, 0, 0, 0.67083],
        "956": [0.19444, 0.44444, 0, 0, 0.70787],
        "957": [0, 0.44444, 0.06898, 0, 0.57685],
        "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
        "959": [0, 0.44444, 0, 0, 0.58472],
        "960": [0, 0.44444, 0.03704, 0, 0.68241],
        "961": [0.19444, 0.44444, 0, 0, 0.6118],
        "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
        "963": [0, 0.44444, 0.03704, 0, 0.68588],
        "964": [0, 0.44444, 0.13472, 0, 0.52083],
        "965": [0, 0.44444, 0.03704, 0, 0.63055],
        "966": [0.19444, 0.44444, 0, 0, 0.74722],
        "967": [0.19444, 0.44444, 0, 0, 0.71805],
        "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
        "969": [0, 0.44444, 0.03704, 0, 0.71782],
        "977": [0, 0.69444, 0, 0, 0.69155],
        "981": [0.19444, 0.69444, 0, 0, 0.7125],
        "982": [0, 0.44444, 0.03194, 0, 0.975],
        "1009": [0.19444, 0.44444, 0, 0, 0.6118],
        "1013": [0, 0.44444, 0, 0, 0.48333],
        "57649": [0, 0.44444, 0, 0, 0.39352],
        "57911": [0.19444, 0.44444, 0, 0, 0.43889]
      },
      "Math-Italic": {
        "32": [0, 0, 0, 0, 0.25],
        "48": [0, 0.43056, 0, 0, 0.5],
        "49": [0, 0.43056, 0, 0, 0.5],
        "50": [0, 0.43056, 0, 0, 0.5],
        "51": [0.19444, 0.43056, 0, 0, 0.5],
        "52": [0.19444, 0.43056, 0, 0, 0.5],
        "53": [0.19444, 0.43056, 0, 0, 0.5],
        "54": [0, 0.64444, 0, 0, 0.5],
        "55": [0.19444, 0.43056, 0, 0, 0.5],
        "56": [0, 0.64444, 0, 0, 0.5],
        "57": [0.19444, 0.43056, 0, 0, 0.5],
        "65": [0, 0.68333, 0, 0.13889, 0.75],
        "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
        "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
        "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
        "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
        "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
        "71": [0, 0.68333, 0, 0.08334, 0.78625],
        "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
        "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
        "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
        "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
        "76": [0, 0.68333, 0, 0.02778, 0.68056],
        "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
        "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
        "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
        "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
        "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
        "82": [0, 0.68333, 0.00773, 0.08334, 0.75929],
        "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
        "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
        "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
        "86": [0, 0.68333, 0.22222, 0, 0.58333],
        "87": [0, 0.68333, 0.13889, 0, 0.94445],
        "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
        "89": [0, 0.68333, 0.22222, 0, 0.58056],
        "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
        "97": [0, 0.43056, 0, 0, 0.52859],
        "98": [0, 0.69444, 0, 0, 0.42917],
        "99": [0, 0.43056, 0, 0.05556, 0.43276],
        "100": [0, 0.69444, 0, 0.16667, 0.52049],
        "101": [0, 0.43056, 0, 0.05556, 0.46563],
        "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
        "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
        "104": [0, 0.69444, 0, 0, 0.57616],
        "105": [0, 0.65952, 0, 0, 0.34451],
        "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
        "107": [0, 0.69444, 0.03148, 0, 0.5206],
        "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
        "109": [0, 0.43056, 0, 0, 0.87801],
        "110": [0, 0.43056, 0, 0, 0.60023],
        "111": [0, 0.43056, 0, 0.05556, 0.48472],
        "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
        "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
        "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
        "115": [0, 0.43056, 0, 0.05556, 0.46875],
        "116": [0, 0.61508, 0, 0.08334, 0.36111],
        "117": [0, 0.43056, 0, 0.02778, 0.57246],
        "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
        "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
        "120": [0, 0.43056, 0, 0.02778, 0.57153],
        "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
        "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
        "160": [0, 0, 0, 0, 0.25],
        "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
        "916": [0, 0.68333, 0, 0.16667, 0.83334],
        "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
        "923": [0, 0.68333, 0, 0.16667, 0.69445],
        "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
        "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
        "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
        "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
        "934": [0, 0.68333, 0, 0.08334, 0.66667],
        "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
        "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
        "945": [0, 0.43056, 0.0037, 0.02778, 0.6397],
        "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
        "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
        "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
        "949": [0, 0.43056, 0, 0.08334, 0.46632],
        "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
        "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
        "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
        "953": [0, 0.43056, 0, 0.05556, 0.35394],
        "954": [0, 0.43056, 0, 0, 0.57616],
        "955": [0, 0.69444, 0, 0, 0.58334],
        "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
        "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
        "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
        "959": [0, 0.43056, 0, 0.05556, 0.48472],
        "960": [0, 0.43056, 0.03588, 0, 0.57003],
        "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
        "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
        "963": [0, 0.43056, 0.03588, 0, 0.57141],
        "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
        "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
        "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
        "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
        "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
        "969": [0, 0.43056, 0.03588, 0, 0.62245],
        "977": [0, 0.69444, 0, 0.08334, 0.59144],
        "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
        "982": [0, 0.43056, 0.02778, 0, 0.82813],
        "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
        "1013": [0, 0.43056, 0, 0.05556, 0.4059],
        "57649": [0, 0.43056, 0, 0.02778, 0.32246],
        "57911": [0.19444, 0.43056, 0, 0.08334, 0.38403]
      },
      "SansSerif-Bold": {
        "32": [0, 0, 0, 0, 0.25],
        "33": [0, 0.69444, 0, 0, 0.36667],
        "34": [0, 0.69444, 0, 0, 0.55834],
        "35": [0.19444, 0.69444, 0, 0, 0.91667],
        "36": [0.05556, 0.75, 0, 0, 0.55],
        "37": [0.05556, 0.75, 0, 0, 1.02912],
        "38": [0, 0.69444, 0, 0, 0.83056],
        "39": [0, 0.69444, 0, 0, 0.30556],
        "40": [0.25, 0.75, 0, 0, 0.42778],
        "41": [0.25, 0.75, 0, 0, 0.42778],
        "42": [0, 0.75, 0, 0, 0.55],
        "43": [0.11667, 0.61667, 0, 0, 0.85556],
        "44": [0.10556, 0.13056, 0, 0, 0.30556],
        "45": [0, 0.45833, 0, 0, 0.36667],
        "46": [0, 0.13056, 0, 0, 0.30556],
        "47": [0.25, 0.75, 0, 0, 0.55],
        "48": [0, 0.69444, 0, 0, 0.55],
        "49": [0, 0.69444, 0, 0, 0.55],
        "50": [0, 0.69444, 0, 0, 0.55],
        "51": [0, 0.69444, 0, 0, 0.55],
        "52": [0, 0.69444, 0, 0, 0.55],
        "53": [0, 0.69444, 0, 0, 0.55],
        "54": [0, 0.69444, 0, 0, 0.55],
        "55": [0, 0.69444, 0, 0, 0.55],
        "56": [0, 0.69444, 0, 0, 0.55],
        "57": [0, 0.69444, 0, 0, 0.55],
        "58": [0, 0.45833, 0, 0, 0.30556],
        "59": [0.10556, 0.45833, 0, 0, 0.30556],
        "61": [-0.09375, 0.40625, 0, 0, 0.85556],
        "63": [0, 0.69444, 0, 0, 0.51945],
        "64": [0, 0.69444, 0, 0, 0.73334],
        "65": [0, 0.69444, 0, 0, 0.73334],
        "66": [0, 0.69444, 0, 0, 0.73334],
        "67": [0, 0.69444, 0, 0, 0.70278],
        "68": [0, 0.69444, 0, 0, 0.79445],
        "69": [0, 0.69444, 0, 0, 0.64167],
        "70": [0, 0.69444, 0, 0, 0.61111],
        "71": [0, 0.69444, 0, 0, 0.73334],
        "72": [0, 0.69444, 0, 0, 0.79445],
        "73": [0, 0.69444, 0, 0, 0.33056],
        "74": [0, 0.69444, 0, 0, 0.51945],
        "75": [0, 0.69444, 0, 0, 0.76389],
        "76": [0, 0.69444, 0, 0, 0.58056],
        "77": [0, 0.69444, 0, 0, 0.97778],
        "78": [0, 0.69444, 0, 0, 0.79445],
        "79": [0, 0.69444, 0, 0, 0.79445],
        "80": [0, 0.69444, 0, 0, 0.70278],
        "81": [0.10556, 0.69444, 0, 0, 0.79445],
        "82": [0, 0.69444, 0, 0, 0.70278],
        "83": [0, 0.69444, 0, 0, 0.61111],
        "84": [0, 0.69444, 0, 0, 0.73334],
        "85": [0, 0.69444, 0, 0, 0.76389],
        "86": [0, 0.69444, 0.01528, 0, 0.73334],
        "87": [0, 0.69444, 0.01528, 0, 1.03889],
        "88": [0, 0.69444, 0, 0, 0.73334],
        "89": [0, 0.69444, 0.0275, 0, 0.73334],
        "90": [0, 0.69444, 0, 0, 0.67223],
        "91": [0.25, 0.75, 0, 0, 0.34306],
        "93": [0.25, 0.75, 0, 0, 0.34306],
        "94": [0, 0.69444, 0, 0, 0.55],
        "95": [0.35, 0.10833, 0.03056, 0, 0.55],
        "97": [0, 0.45833, 0, 0, 0.525],
        "98": [0, 0.69444, 0, 0, 0.56111],
        "99": [0, 0.45833, 0, 0, 0.48889],
        "100": [0, 0.69444, 0, 0, 0.56111],
        "101": [0, 0.45833, 0, 0, 0.51111],
        "102": [0, 0.69444, 0.07639, 0, 0.33611],
        "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
        "104": [0, 0.69444, 0, 0, 0.56111],
        "105": [0, 0.69444, 0, 0, 0.25556],
        "106": [0.19444, 0.69444, 0, 0, 0.28611],
        "107": [0, 0.69444, 0, 0, 0.53056],
        "108": [0, 0.69444, 0, 0, 0.25556],
        "109": [0, 0.45833, 0, 0, 0.86667],
        "110": [0, 0.45833, 0, 0, 0.56111],
        "111": [0, 0.45833, 0, 0, 0.55],
        "112": [0.19444, 0.45833, 0, 0, 0.56111],
        "113": [0.19444, 0.45833, 0, 0, 0.56111],
        "114": [0, 0.45833, 0.01528, 0, 0.37222],
        "115": [0, 0.45833, 0, 0, 0.42167],
        "116": [0, 0.58929, 0, 0, 0.40417],
        "117": [0, 0.45833, 0, 0, 0.56111],
        "118": [0, 0.45833, 0.01528, 0, 0.5],
        "119": [0, 0.45833, 0.01528, 0, 0.74445],
        "120": [0, 0.45833, 0, 0, 0.5],
        "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
        "122": [0, 0.45833, 0, 0, 0.47639],
        "126": [0.35, 0.34444, 0, 0, 0.55],
        "160": [0, 0, 0, 0, 0.25],
        "168": [0, 0.69444, 0, 0, 0.55],
        "176": [0, 0.69444, 0, 0, 0.73334],
        "180": [0, 0.69444, 0, 0, 0.55],
        "184": [0.17014, 0, 0, 0, 0.48889],
        "305": [0, 0.45833, 0, 0, 0.25556],
        "567": [0.19444, 0.45833, 0, 0, 0.28611],
        "710": [0, 0.69444, 0, 0, 0.55],
        "711": [0, 0.63542, 0, 0, 0.55],
        "713": [0, 0.63778, 0, 0, 0.55],
        "728": [0, 0.69444, 0, 0, 0.55],
        "729": [0, 0.69444, 0, 0, 0.30556],
        "730": [0, 0.69444, 0, 0, 0.73334],
        "732": [0, 0.69444, 0, 0, 0.55],
        "733": [0, 0.69444, 0, 0, 0.55],
        "915": [0, 0.69444, 0, 0, 0.58056],
        "916": [0, 0.69444, 0, 0, 0.91667],
        "920": [0, 0.69444, 0, 0, 0.85556],
        "923": [0, 0.69444, 0, 0, 0.67223],
        "926": [0, 0.69444, 0, 0, 0.73334],
        "928": [0, 0.69444, 0, 0, 0.79445],
        "931": [0, 0.69444, 0, 0, 0.79445],
        "933": [0, 0.69444, 0, 0, 0.85556],
        "934": [0, 0.69444, 0, 0, 0.79445],
        "936": [0, 0.69444, 0, 0, 0.85556],
        "937": [0, 0.69444, 0, 0, 0.79445],
        "8211": [0, 0.45833, 0.03056, 0, 0.55],
        "8212": [0, 0.45833, 0.03056, 0, 1.10001],
        "8216": [0, 0.69444, 0, 0, 0.30556],
        "8217": [0, 0.69444, 0, 0, 0.30556],
        "8220": [0, 0.69444, 0, 0, 0.55834],
        "8221": [0, 0.69444, 0, 0, 0.55834]
      },
      "SansSerif-Italic": {
        "32": [0, 0, 0, 0, 0.25],
        "33": [0, 0.69444, 0.05733, 0, 0.31945],
        "34": [0, 0.69444, 0.00316, 0, 0.5],
        "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
        "36": [0.05556, 0.75, 0.11156, 0, 0.5],
        "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
        "38": [0, 0.69444, 0.03058, 0, 0.75834],
        "39": [0, 0.69444, 0.07816, 0, 0.27778],
        "40": [0.25, 0.75, 0.13164, 0, 0.38889],
        "41": [0.25, 0.75, 0.02536, 0, 0.38889],
        "42": [0, 0.75, 0.11775, 0, 0.5],
        "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
        "44": [0.125, 0.08333, 0, 0, 0.27778],
        "45": [0, 0.44444, 0.01946, 0, 0.33333],
        "46": [0, 0.08333, 0, 0, 0.27778],
        "47": [0.25, 0.75, 0.13164, 0, 0.5],
        "48": [0, 0.65556, 0.11156, 0, 0.5],
        "49": [0, 0.65556, 0.11156, 0, 0.5],
        "50": [0, 0.65556, 0.11156, 0, 0.5],
        "51": [0, 0.65556, 0.11156, 0, 0.5],
        "52": [0, 0.65556, 0.11156, 0, 0.5],
        "53": [0, 0.65556, 0.11156, 0, 0.5],
        "54": [0, 0.65556, 0.11156, 0, 0.5],
        "55": [0, 0.65556, 0.11156, 0, 0.5],
        "56": [0, 0.65556, 0.11156, 0, 0.5],
        "57": [0, 0.65556, 0.11156, 0, 0.5],
        "58": [0, 0.44444, 0.02502, 0, 0.27778],
        "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
        "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
        "63": [0, 0.69444, 0.11809, 0, 0.47222],
        "64": [0, 0.69444, 0.07555, 0, 0.66667],
        "65": [0, 0.69444, 0, 0, 0.66667],
        "66": [0, 0.69444, 0.08293, 0, 0.66667],
        "67": [0, 0.69444, 0.11983, 0, 0.63889],
        "68": [0, 0.69444, 0.07555, 0, 0.72223],
        "69": [0, 0.69444, 0.11983, 0, 0.59722],
        "70": [0, 0.69444, 0.13372, 0, 0.56945],
        "71": [0, 0.69444, 0.11983, 0, 0.66667],
        "72": [0, 0.69444, 0.08094, 0, 0.70834],
        "73": [0, 0.69444, 0.13372, 0, 0.27778],
        "74": [0, 0.69444, 0.08094, 0, 0.47222],
        "75": [0, 0.69444, 0.11983, 0, 0.69445],
        "76": [0, 0.69444, 0, 0, 0.54167],
        "77": [0, 0.69444, 0.08094, 0, 0.875],
        "78": [0, 0.69444, 0.08094, 0, 0.70834],
        "79": [0, 0.69444, 0.07555, 0, 0.73611],
        "80": [0, 0.69444, 0.08293, 0, 0.63889],
        "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
        "82": [0, 0.69444, 0.08293, 0, 0.64584],
        "83": [0, 0.69444, 0.09205, 0, 0.55556],
        "84": [0, 0.69444, 0.13372, 0, 0.68056],
        "85": [0, 0.69444, 0.08094, 0, 0.6875],
        "86": [0, 0.69444, 0.1615, 0, 0.66667],
        "87": [0, 0.69444, 0.1615, 0, 0.94445],
        "88": [0, 0.69444, 0.13372, 0, 0.66667],
        "89": [0, 0.69444, 0.17261, 0, 0.66667],
        "90": [0, 0.69444, 0.11983, 0, 0.61111],
        "91": [0.25, 0.75, 0.15942, 0, 0.28889],
        "93": [0.25, 0.75, 0.08719, 0, 0.28889],
        "94": [0, 0.69444, 0.0799, 0, 0.5],
        "95": [0.35, 0.09444, 0.08616, 0, 0.5],
        "97": [0, 0.44444, 0.00981, 0, 0.48056],
        "98": [0, 0.69444, 0.03057, 0, 0.51667],
        "99": [0, 0.44444, 0.08336, 0, 0.44445],
        "100": [0, 0.69444, 0.09483, 0, 0.51667],
        "101": [0, 0.44444, 0.06778, 0, 0.44445],
        "102": [0, 0.69444, 0.21705, 0, 0.30556],
        "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
        "104": [0, 0.69444, 0.01778, 0, 0.51667],
        "105": [0, 0.67937, 0.09718, 0, 0.23889],
        "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
        "107": [0, 0.69444, 0.08336, 0, 0.48889],
        "108": [0, 0.69444, 0.09483, 0, 0.23889],
        "109": [0, 0.44444, 0.01778, 0, 0.79445],
        "110": [0, 0.44444, 0.01778, 0, 0.51667],
        "111": [0, 0.44444, 0.06613, 0, 0.5],
        "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
        "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
        "114": [0, 0.44444, 0.10836, 0, 0.34167],
        "115": [0, 0.44444, 0.0778, 0, 0.38333],
        "116": [0, 0.57143, 0.07225, 0, 0.36111],
        "117": [0, 0.44444, 0.04169, 0, 0.51667],
        "118": [0, 0.44444, 0.10836, 0, 0.46111],
        "119": [0, 0.44444, 0.10836, 0, 0.68334],
        "120": [0, 0.44444, 0.09169, 0, 0.46111],
        "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
        "122": [0, 0.44444, 0.08752, 0, 0.43472],
        "126": [0.35, 0.32659, 0.08826, 0, 0.5],
        "160": [0, 0, 0, 0, 0.25],
        "168": [0, 0.67937, 0.06385, 0, 0.5],
        "176": [0, 0.69444, 0, 0, 0.73752],
        "184": [0.17014, 0, 0, 0, 0.44445],
        "305": [0, 0.44444, 0.04169, 0, 0.23889],
        "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
        "710": [0, 0.69444, 0.0799, 0, 0.5],
        "711": [0, 0.63194, 0.08432, 0, 0.5],
        "713": [0, 0.60889, 0.08776, 0, 0.5],
        "714": [0, 0.69444, 0.09205, 0, 0.5],
        "715": [0, 0.69444, 0, 0, 0.5],
        "728": [0, 0.69444, 0.09483, 0, 0.5],
        "729": [0, 0.67937, 0.07774, 0, 0.27778],
        "730": [0, 0.69444, 0, 0, 0.73752],
        "732": [0, 0.67659, 0.08826, 0, 0.5],
        "733": [0, 0.69444, 0.09205, 0, 0.5],
        "915": [0, 0.69444, 0.13372, 0, 0.54167],
        "916": [0, 0.69444, 0, 0, 0.83334],
        "920": [0, 0.69444, 0.07555, 0, 0.77778],
        "923": [0, 0.69444, 0, 0, 0.61111],
        "926": [0, 0.69444, 0.12816, 0, 0.66667],
        "928": [0, 0.69444, 0.08094, 0, 0.70834],
        "931": [0, 0.69444, 0.11983, 0, 0.72222],
        "933": [0, 0.69444, 0.09031, 0, 0.77778],
        "934": [0, 0.69444, 0.04603, 0, 0.72222],
        "936": [0, 0.69444, 0.09031, 0, 0.77778],
        "937": [0, 0.69444, 0.08293, 0, 0.72222],
        "8211": [0, 0.44444, 0.08616, 0, 0.5],
        "8212": [0, 0.44444, 0.08616, 0, 1.0],
        "8216": [0, 0.69444, 0.07816, 0, 0.27778],
        "8217": [0, 0.69444, 0.07816, 0, 0.27778],
        "8220": [0, 0.69444, 0.14205, 0, 0.5],
        "8221": [0, 0.69444, 0.00316, 0, 0.5]
      },
      "SansSerif-Regular": {
        "32": [0, 0, 0, 0, 0.25],
        "33": [0, 0.69444, 0, 0, 0.31945],
        "34": [0, 0.69444, 0, 0, 0.5],
        "35": [0.19444, 0.69444, 0, 0, 0.83334],
        "36": [0.05556, 0.75, 0, 0, 0.5],
        "37": [0.05556, 0.75, 0, 0, 0.83334],
        "38": [0, 0.69444, 0, 0, 0.75834],
        "39": [0, 0.69444, 0, 0, 0.27778],
        "40": [0.25, 0.75, 0, 0, 0.38889],
        "41": [0.25, 0.75, 0, 0, 0.38889],
        "42": [0, 0.75, 0, 0, 0.5],
        "43": [0.08333, 0.58333, 0, 0, 0.77778],
        "44": [0.125, 0.08333, 0, 0, 0.27778],
        "45": [0, 0.44444, 0, 0, 0.33333],
        "46": [0, 0.08333, 0, 0, 0.27778],
        "47": [0.25, 0.75, 0, 0, 0.5],
        "48": [0, 0.65556, 0, 0, 0.5],
        "49": [0, 0.65556, 0, 0, 0.5],
        "50": [0, 0.65556, 0, 0, 0.5],
        "51": [0, 0.65556, 0, 0, 0.5],
        "52": [0, 0.65556, 0, 0, 0.5],
        "53": [0, 0.65556, 0, 0, 0.5],
        "54": [0, 0.65556, 0, 0, 0.5],
        "55": [0, 0.65556, 0, 0, 0.5],
        "56": [0, 0.65556, 0, 0, 0.5],
        "57": [0, 0.65556, 0, 0, 0.5],
        "58": [0, 0.44444, 0, 0, 0.27778],
        "59": [0.125, 0.44444, 0, 0, 0.27778],
        "61": [-0.13, 0.37, 0, 0, 0.77778],
        "63": [0, 0.69444, 0, 0, 0.47222],
        "64": [0, 0.69444, 0, 0, 0.66667],
        "65": [0, 0.69444, 0, 0, 0.66667],
        "66": [0, 0.69444, 0, 0, 0.66667],
        "67": [0, 0.69444, 0, 0, 0.63889],
        "68": [0, 0.69444, 0, 0, 0.72223],
        "69": [0, 0.69444, 0, 0, 0.59722],
        "70": [0, 0.69444, 0, 0, 0.56945],
        "71": [0, 0.69444, 0, 0, 0.66667],
        "72": [0, 0.69444, 0, 0, 0.70834],
        "73": [0, 0.69444, 0, 0, 0.27778],
        "74": [0, 0.69444, 0, 0, 0.47222],
        "75": [0, 0.69444, 0, 0, 0.69445],
        "76": [0, 0.69444, 0, 0, 0.54167],
        "77": [0, 0.69444, 0, 0, 0.875],
        "78": [0, 0.69444, 0, 0, 0.70834],
        "79": [0, 0.69444, 0, 0, 0.73611],
        "80": [0, 0.69444, 0, 0, 0.63889],
        "81": [0.125, 0.69444, 0, 0, 0.73611],
        "82": [0, 0.69444, 0, 0, 0.64584],
        "83": [0, 0.69444, 0, 0, 0.55556],
        "84": [0, 0.69444, 0, 0, 0.68056],
        "85": [0, 0.69444, 0, 0, 0.6875],
        "86": [0, 0.69444, 0.01389, 0, 0.66667],
        "87": [0, 0.69444, 0.01389, 0, 0.94445],
        "88": [0, 0.69444, 0, 0, 0.66667],
        "89": [0, 0.69444, 0.025, 0, 0.66667],
        "90": [0, 0.69444, 0, 0, 0.61111],
        "91": [0.25, 0.75, 0, 0, 0.28889],
        "93": [0.25, 0.75, 0, 0, 0.28889],
        "94": [0, 0.69444, 0, 0, 0.5],
        "95": [0.35, 0.09444, 0.02778, 0, 0.5],
        "97": [0, 0.44444, 0, 0, 0.48056],
        "98": [0, 0.69444, 0, 0, 0.51667],
        "99": [0, 0.44444, 0, 0, 0.44445],
        "100": [0, 0.69444, 0, 0, 0.51667],
        "101": [0, 0.44444, 0, 0, 0.44445],
        "102": [0, 0.69444, 0.06944, 0, 0.30556],
        "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
        "104": [0, 0.69444, 0, 0, 0.51667],
        "105": [0, 0.67937, 0, 0, 0.23889],
        "106": [0.19444, 0.67937, 0, 0, 0.26667],
        "107": [0, 0.69444, 0, 0, 0.48889],
        "108": [0, 0.69444, 0, 0, 0.23889],
        "109": [0, 0.44444, 0, 0, 0.79445],
        "110": [0, 0.44444, 0, 0, 0.51667],
        "111": [0, 0.44444, 0, 0, 0.5],
        "112": [0.19444, 0.44444, 0, 0, 0.51667],
        "113": [0.19444, 0.44444, 0, 0, 0.51667],
        "114": [0, 0.44444, 0.01389, 0, 0.34167],
        "115": [0, 0.44444, 0, 0, 0.38333],
        "116": [0, 0.57143, 0, 0, 0.36111],
        "117": [0, 0.44444, 0, 0, 0.51667],
        "118": [0, 0.44444, 0.01389, 0, 0.46111],
        "119": [0, 0.44444, 0.01389, 0, 0.68334],
        "120": [0, 0.44444, 0, 0, 0.46111],
        "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
        "122": [0, 0.44444, 0, 0, 0.43472],
        "126": [0.35, 0.32659, 0, 0, 0.5],
        "160": [0, 0, 0, 0, 0.25],
        "168": [0, 0.67937, 0, 0, 0.5],
        "176": [0, 0.69444, 0, 0, 0.66667],
        "184": [0.17014, 0, 0, 0, 0.44445],
        "305": [0, 0.44444, 0, 0, 0.23889],
        "567": [0.19444, 0.44444, 0, 0, 0.26667],
        "710": [0, 0.69444, 0, 0, 0.5],
        "711": [0, 0.63194, 0, 0, 0.5],
        "713": [0, 0.60889, 0, 0, 0.5],
        "714": [0, 0.69444, 0, 0, 0.5],
        "715": [0, 0.69444, 0, 0, 0.5],
        "728": [0, 0.69444, 0, 0, 0.5],
        "729": [0, 0.67937, 0, 0, 0.27778],
        "730": [0, 0.69444, 0, 0, 0.66667],
        "732": [0, 0.67659, 0, 0, 0.5],
        "733": [0, 0.69444, 0, 0, 0.5],
        "915": [0, 0.69444, 0, 0, 0.54167],
        "916": [0, 0.69444, 0, 0, 0.83334],
        "920": [0, 0.69444, 0, 0, 0.77778],
        "923": [0, 0.69444, 0, 0, 0.61111],
        "926": [0, 0.69444, 0, 0, 0.66667],
        "928": [0, 0.69444, 0, 0, 0.70834],
        "931": [0, 0.69444, 0, 0, 0.72222],
        "933": [0, 0.69444, 0, 0, 0.77778],
        "934": [0, 0.69444, 0, 0, 0.72222],
        "936": [0, 0.69444, 0, 0, 0.77778],
        "937": [0, 0.69444, 0, 0, 0.72222],
        "8211": [0, 0.44444, 0.02778, 0, 0.5],
        "8212": [0, 0.44444, 0.02778, 0, 1.0],
        "8216": [0, 0.69444, 0, 0, 0.27778],
        "8217": [0, 0.69444, 0, 0, 0.27778],
        "8220": [0, 0.69444, 0, 0, 0.5],
        "8221": [0, 0.69444, 0, 0, 0.5]
      },
      "Script-Regular": {
        "32": [0, 0, 0, 0, 0.25],
        "65": [0, 0.7, 0.22925, 0, 0.80253],
        "66": [0, 0.7, 0.04087, 0, 0.90757],
        "67": [0, 0.7, 0.1689, 0, 0.66619],
        "68": [0, 0.7, 0.09371, 0, 0.77443],
        "69": [0, 0.7, 0.18583, 0, 0.56162],
        "70": [0, 0.7, 0.13634, 0, 0.89544],
        "71": [0, 0.7, 0.17322, 0, 0.60961],
        "72": [0, 0.7, 0.29694, 0, 0.96919],
        "73": [0, 0.7, 0.19189, 0, 0.80907],
        "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
        "75": [0, 0.7, 0.31259, 0, 0.91364],
        "76": [0, 0.7, 0.19189, 0, 0.87373],
        "77": [0, 0.7, 0.15981, 0, 1.08031],
        "78": [0, 0.7, 0.3525, 0, 0.9015],
        "79": [0, 0.7, 0.08078, 0, 0.73787],
        "80": [0, 0.7, 0.08078, 0, 1.01262],
        "81": [0, 0.7, 0.03305, 0, 0.88282],
        "82": [0, 0.7, 0.06259, 0, 0.85],
        "83": [0, 0.7, 0.19189, 0, 0.86767],
        "84": [0, 0.7, 0.29087, 0, 0.74697],
        "85": [0, 0.7, 0.25815, 0, 0.79996],
        "86": [0, 0.7, 0.27523, 0, 0.62204],
        "87": [0, 0.7, 0.27523, 0, 0.80532],
        "88": [0, 0.7, 0.26006, 0, 0.94445],
        "89": [0, 0.7, 0.2939, 0, 0.70961],
        "90": [0, 0.7, 0.24037, 0, 0.8212],
        "160": [0, 0, 0, 0, 0.25]
      },
      "Size1-Regular": {
        "32": [0, 0, 0, 0, 0.25],
        "40": [0.35001, 0.85, 0, 0, 0.45834],
        "41": [0.35001, 0.85, 0, 0, 0.45834],
        "47": [0.35001, 0.85, 0, 0, 0.57778],
        "91": [0.35001, 0.85, 0, 0, 0.41667],
        "92": [0.35001, 0.85, 0, 0, 0.57778],
        "93": [0.35001, 0.85, 0, 0, 0.41667],
        "123": [0.35001, 0.85, 0, 0, 0.58334],
        "125": [0.35001, 0.85, 0, 0, 0.58334],
        "160": [0, 0, 0, 0, 0.25],
        "710": [0, 0.72222, 0, 0, 0.55556],
        "732": [0, 0.72222, 0, 0, 0.55556],
        "770": [0, 0.72222, 0, 0, 0.55556],
        "771": [0, 0.72222, 0, 0, 0.55556],
        "8214": [-0.00099, 0.601, 0, 0, 0.77778],
        "8593": [1e-05, 0.6, 0, 0, 0.66667],
        "8595": [1e-05, 0.6, 0, 0, 0.66667],
        "8657": [1e-05, 0.6, 0, 0, 0.77778],
        "8659": [1e-05, 0.6, 0, 0, 0.77778],
        "8719": [0.25001, 0.75, 0, 0, 0.94445],
        "8720": [0.25001, 0.75, 0, 0, 0.94445],
        "8721": [0.25001, 0.75, 0, 0, 1.05556],
        "8730": [0.35001, 0.85, 0, 0, 1.0],
        "8739": [-0.00599, 0.606, 0, 0, 0.33333],
        "8741": [-0.00599, 0.606, 0, 0, 0.55556],
        "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
        "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
        "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
        "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
        "8896": [0.25001, 0.75, 0, 0, 0.83334],
        "8897": [0.25001, 0.75, 0, 0, 0.83334],
        "8898": [0.25001, 0.75, 0, 0, 0.83334],
        "8899": [0.25001, 0.75, 0, 0, 0.83334],
        "8968": [0.35001, 0.85, 0, 0, 0.47222],
        "8969": [0.35001, 0.85, 0, 0, 0.47222],
        "8970": [0.35001, 0.85, 0, 0, 0.47222],
        "8971": [0.35001, 0.85, 0, 0, 0.47222],
        "9168": [-0.00099, 0.601, 0, 0, 0.66667],
        "10216": [0.35001, 0.85, 0, 0, 0.47222],
        "10217": [0.35001, 0.85, 0, 0, 0.47222],
        "10752": [0.25001, 0.75, 0, 0, 1.11111],
        "10753": [0.25001, 0.75, 0, 0, 1.11111],
        "10754": [0.25001, 0.75, 0, 0, 1.11111],
        "10756": [0.25001, 0.75, 0, 0, 0.83334],
        "10758": [0.25001, 0.75, 0, 0, 0.83334]
      },
      "Size2-Regular": {
        "32": [0, 0, 0, 0, 0.25],
        "40": [0.65002, 1.15, 0, 0, 0.59722],
        "41": [0.65002, 1.15, 0, 0, 0.59722],
        "47": [0.65002, 1.15, 0, 0, 0.81111],
        "91": [0.65002, 1.15, 0, 0, 0.47222],
        "92": [0.65002, 1.15, 0, 0, 0.81111],
        "93": [0.65002, 1.15, 0, 0, 0.47222],
        "123": [0.65002, 1.15, 0, 0, 0.66667],
        "125": [0.65002, 1.15, 0, 0, 0.66667],
        "160": [0, 0, 0, 0, 0.25],
        "710": [0, 0.75, 0, 0, 1.0],
        "732": [0, 0.75, 0, 0, 1.0],
        "770": [0, 0.75, 0, 0, 1.0],
        "771": [0, 0.75, 0, 0, 1.0],
        "8719": [0.55001, 1.05, 0, 0, 1.27778],
        "8720": [0.55001, 1.05, 0, 0, 1.27778],
        "8721": [0.55001, 1.05, 0, 0, 1.44445],
        "8730": [0.65002, 1.15, 0, 0, 1.0],
        "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
        "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
        "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
        "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
        "8896": [0.55001, 1.05, 0, 0, 1.11111],
        "8897": [0.55001, 1.05, 0, 0, 1.11111],
        "8898": [0.55001, 1.05, 0, 0, 1.11111],
        "8899": [0.55001, 1.05, 0, 0, 1.11111],
        "8968": [0.65002, 1.15, 0, 0, 0.52778],
        "8969": [0.65002, 1.15, 0, 0, 0.52778],
        "8970": [0.65002, 1.15, 0, 0, 0.52778],
        "8971": [0.65002, 1.15, 0, 0, 0.52778],
        "10216": [0.65002, 1.15, 0, 0, 0.61111],
        "10217": [0.65002, 1.15, 0, 0, 0.61111],
        "10752": [0.55001, 1.05, 0, 0, 1.51112],
        "10753": [0.55001, 1.05, 0, 0, 1.51112],
        "10754": [0.55001, 1.05, 0, 0, 1.51112],
        "10756": [0.55001, 1.05, 0, 0, 1.11111],
        "10758": [0.55001, 1.05, 0, 0, 1.11111]
      },
      "Size3-Regular": {
        "32": [0, 0, 0, 0, 0.25],
        "40": [0.95003, 1.45, 0, 0, 0.73611],
        "41": [0.95003, 1.45, 0, 0, 0.73611],
        "47": [0.95003, 1.45, 0, 0, 1.04445],
        "91": [0.95003, 1.45, 0, 0, 0.52778],
        "92": [0.95003, 1.45, 0, 0, 1.04445],
        "93": [0.95003, 1.45, 0, 0, 0.52778],
        "123": [0.95003, 1.45, 0, 0, 0.75],
        "125": [0.95003, 1.45, 0, 0, 0.75],
        "160": [0, 0, 0, 0, 0.25],
        "710": [0, 0.75, 0, 0, 1.44445],
        "732": [0, 0.75, 0, 0, 1.44445],
        "770": [0, 0.75, 0, 0, 1.44445],
        "771": [0, 0.75, 0, 0, 1.44445],
        "8730": [0.95003, 1.45, 0, 0, 1.0],
        "8968": [0.95003, 1.45, 0, 0, 0.58334],
        "8969": [0.95003, 1.45, 0, 0, 0.58334],
        "8970": [0.95003, 1.45, 0, 0, 0.58334],
        "8971": [0.95003, 1.45, 0, 0, 0.58334],
        "10216": [0.95003, 1.45, 0, 0, 0.75],
        "10217": [0.95003, 1.45, 0, 0, 0.75]
      },
      "Size4-Regular": {
        "32": [0, 0, 0, 0, 0.25],
        "40": [1.25003, 1.75, 0, 0, 0.79167],
        "41": [1.25003, 1.75, 0, 0, 0.79167],
        "47": [1.25003, 1.75, 0, 0, 1.27778],
        "91": [1.25003, 1.75, 0, 0, 0.58334],
        "92": [1.25003, 1.75, 0, 0, 1.27778],
        "93": [1.25003, 1.75, 0, 0, 0.58334],
        "123": [1.25003, 1.75, 0, 0, 0.80556],
        "125": [1.25003, 1.75, 0, 0, 0.80556],
        "160": [0, 0, 0, 0, 0.25],
        "710": [0, 0.825, 0, 0, 1.8889],
        "732": [0, 0.825, 0, 0, 1.8889],
        "770": [0, 0.825, 0, 0, 1.8889],
        "771": [0, 0.825, 0, 0, 1.8889],
        "8730": [1.25003, 1.75, 0, 0, 1.0],
        "8968": [1.25003, 1.75, 0, 0, 0.63889],
        "8969": [1.25003, 1.75, 0, 0, 0.63889],
        "8970": [1.25003, 1.75, 0, 0, 0.63889],
        "8971": [1.25003, 1.75, 0, 0, 0.63889],
        "9115": [0.64502, 1.155, 0, 0, 0.875],
        "9116": [1e-05, 0.6, 0, 0, 0.875],
        "9117": [0.64502, 1.155, 0, 0, 0.875],
        "9118": [0.64502, 1.155, 0, 0, 0.875],
        "9119": [1e-05, 0.6, 0, 0, 0.875],
        "9120": [0.64502, 1.155, 0, 0, 0.875],
        "9121": [0.64502, 1.155, 0, 0, 0.66667],
        "9122": [-0.00099, 0.601, 0, 0, 0.66667],
        "9123": [0.64502, 1.155, 0, 0, 0.66667],
        "9124": [0.64502, 1.155, 0, 0, 0.66667],
        "9125": [-0.00099, 0.601, 0, 0, 0.66667],
        "9126": [0.64502, 1.155, 0, 0, 0.66667],
        "9127": [1e-05, 0.9, 0, 0, 0.88889],
        "9128": [0.65002, 1.15, 0, 0, 0.88889],
        "9129": [0.90001, 0, 0, 0, 0.88889],
        "9130": [0, 0.3, 0, 0, 0.88889],
        "9131": [1e-05, 0.9, 0, 0, 0.88889],
        "9132": [0.65002, 1.15, 0, 0, 0.88889],
        "9133": [0.90001, 0, 0, 0, 0.88889],
        "9143": [0.88502, 0.915, 0, 0, 1.05556],
        "10216": [1.25003, 1.75, 0, 0, 0.80556],
        "10217": [1.25003, 1.75, 0, 0, 0.80556],
        "57344": [-0.00499, 0.605, 0, 0, 1.05556],
        "57345": [-0.00499, 0.605, 0, 0, 1.05556],
        "57680": [0, 0.12, 0, 0, 0.45],
        "57681": [0, 0.12, 0, 0, 0.45],
        "57682": [0, 0.12, 0, 0, 0.45],
        "57683": [0, 0.12, 0, 0, 0.45]
      },
      "Typewriter-Regular": {
        "32": [0, 0, 0, 0, 0.525],
        "33": [0, 0.61111, 0, 0, 0.525],
        "34": [0, 0.61111, 0, 0, 0.525],
        "35": [0, 0.61111, 0, 0, 0.525],
        "36": [0.08333, 0.69444, 0, 0, 0.525],
        "37": [0.08333, 0.69444, 0, 0, 0.525],
        "38": [0, 0.61111, 0, 0, 0.525],
        "39": [0, 0.61111, 0, 0, 0.525],
        "40": [0.08333, 0.69444, 0, 0, 0.525],
        "41": [0.08333, 0.69444, 0, 0, 0.525],
        "42": [0, 0.52083, 0, 0, 0.525],
        "43": [-0.08056, 0.53055, 0, 0, 0.525],
        "44": [0.13889, 0.125, 0, 0, 0.525],
        "45": [-0.08056, 0.53055, 0, 0, 0.525],
        "46": [0, 0.125, 0, 0, 0.525],
        "47": [0.08333, 0.69444, 0, 0, 0.525],
        "48": [0, 0.61111, 0, 0, 0.525],
        "49": [0, 0.61111, 0, 0, 0.525],
        "50": [0, 0.61111, 0, 0, 0.525],
        "51": [0, 0.61111, 0, 0, 0.525],
        "52": [0, 0.61111, 0, 0, 0.525],
        "53": [0, 0.61111, 0, 0, 0.525],
        "54": [0, 0.61111, 0, 0, 0.525],
        "55": [0, 0.61111, 0, 0, 0.525],
        "56": [0, 0.61111, 0, 0, 0.525],
        "57": [0, 0.61111, 0, 0, 0.525],
        "58": [0, 0.43056, 0, 0, 0.525],
        "59": [0.13889, 0.43056, 0, 0, 0.525],
        "60": [-0.05556, 0.55556, 0, 0, 0.525],
        "61": [-0.19549, 0.41562, 0, 0, 0.525],
        "62": [-0.05556, 0.55556, 0, 0, 0.525],
        "63": [0, 0.61111, 0, 0, 0.525],
        "64": [0, 0.61111, 0, 0, 0.525],
        "65": [0, 0.61111, 0, 0, 0.525],
        "66": [0, 0.61111, 0, 0, 0.525],
        "67": [0, 0.61111, 0, 0, 0.525],
        "68": [0, 0.61111, 0, 0, 0.525],
        "69": [0, 0.61111, 0, 0, 0.525],
        "70": [0, 0.61111, 0, 0, 0.525],
        "71": [0, 0.61111, 0, 0, 0.525],
        "72": [0, 0.61111, 0, 0, 0.525],
        "73": [0, 0.61111, 0, 0, 0.525],
        "74": [0, 0.61111, 0, 0, 0.525],
        "75": [0, 0.61111, 0, 0, 0.525],
        "76": [0, 0.61111, 0, 0, 0.525],
        "77": [0, 0.61111, 0, 0, 0.525],
        "78": [0, 0.61111, 0, 0, 0.525],
        "79": [0, 0.61111, 0, 0, 0.525],
        "80": [0, 0.61111, 0, 0, 0.525],
        "81": [0.13889, 0.61111, 0, 0, 0.525],
        "82": [0, 0.61111, 0, 0, 0.525],
        "83": [0, 0.61111, 0, 0, 0.525],
        "84": [0, 0.61111, 0, 0, 0.525],
        "85": [0, 0.61111, 0, 0, 0.525],
        "86": [0, 0.61111, 0, 0, 0.525],
        "87": [0, 0.61111, 0, 0, 0.525],
        "88": [0, 0.61111, 0, 0, 0.525],
        "89": [0, 0.61111, 0, 0, 0.525],
        "90": [0, 0.61111, 0, 0, 0.525],
        "91": [0.08333, 0.69444, 0, 0, 0.525],
        "92": [0.08333, 0.69444, 0, 0, 0.525],
        "93": [0.08333, 0.69444, 0, 0, 0.525],
        "94": [0, 0.61111, 0, 0, 0.525],
        "95": [0.09514, 0, 0, 0, 0.525],
        "96": [0, 0.61111, 0, 0, 0.525],
        "97": [0, 0.43056, 0, 0, 0.525],
        "98": [0, 0.61111, 0, 0, 0.525],
        "99": [0, 0.43056, 0, 0, 0.525],
        "100": [0, 0.61111, 0, 0, 0.525],
        "101": [0, 0.43056, 0, 0, 0.525],
        "102": [0, 0.61111, 0, 0, 0.525],
        "103": [0.22222, 0.43056, 0, 0, 0.525],
        "104": [0, 0.61111, 0, 0, 0.525],
        "105": [0, 0.61111, 0, 0, 0.525],
        "106": [0.22222, 0.61111, 0, 0, 0.525],
        "107": [0, 0.61111, 0, 0, 0.525],
        "108": [0, 0.61111, 0, 0, 0.525],
        "109": [0, 0.43056, 0, 0, 0.525],
        "110": [0, 0.43056, 0, 0, 0.525],
        "111": [0, 0.43056, 0, 0, 0.525],
        "112": [0.22222, 0.43056, 0, 0, 0.525],
        "113": [0.22222, 0.43056, 0, 0, 0.525],
        "114": [0, 0.43056, 0, 0, 0.525],
        "115": [0, 0.43056, 0, 0, 0.525],
        "116": [0, 0.55358, 0, 0, 0.525],
        "117": [0, 0.43056, 0, 0, 0.525],
        "118": [0, 0.43056, 0, 0, 0.525],
        "119": [0, 0.43056, 0, 0, 0.525],
        "120": [0, 0.43056, 0, 0, 0.525],
        "121": [0.22222, 0.43056, 0, 0, 0.525],
        "122": [0, 0.43056, 0, 0, 0.525],
        "123": [0.08333, 0.69444, 0, 0, 0.525],
        "124": [0.08333, 0.69444, 0, 0, 0.525],
        "125": [0.08333, 0.69444, 0, 0, 0.525],
        "126": [0, 0.61111, 0, 0, 0.525],
        "127": [0, 0.61111, 0, 0, 0.525],
        "160": [0, 0, 0, 0, 0.525],
        "176": [0, 0.61111, 0, 0, 0.525],
        "184": [0.19445, 0, 0, 0, 0.525],
        "305": [0, 0.43056, 0, 0, 0.525],
        "567": [0.22222, 0.43056, 0, 0, 0.525],
        "711": [0, 0.56597, 0, 0, 0.525],
        "713": [0, 0.56555, 0, 0, 0.525],
        "714": [0, 0.61111, 0, 0, 0.525],
        "715": [0, 0.61111, 0, 0, 0.525],
        "728": [0, 0.61111, 0, 0, 0.525],
        "730": [0, 0.61111, 0, 0, 0.525],
        "770": [0, 0.61111, 0, 0, 0.525],
        "771": [0, 0.61111, 0, 0, 0.525],
        "776": [0, 0.61111, 0, 0, 0.525],
        "915": [0, 0.61111, 0, 0, 0.525],
        "916": [0, 0.61111, 0, 0, 0.525],
        "920": [0, 0.61111, 0, 0, 0.525],
        "923": [0, 0.61111, 0, 0, 0.525],
        "926": [0, 0.61111, 0, 0, 0.525],
        "928": [0, 0.61111, 0, 0, 0.525],
        "931": [0, 0.61111, 0, 0, 0.525],
        "933": [0, 0.61111, 0, 0, 0.525],
        "934": [0, 0.61111, 0, 0, 0.525],
        "936": [0, 0.61111, 0, 0, 0.525],
        "937": [0, 0.61111, 0, 0, 0.525],
        "8216": [0, 0.61111, 0, 0, 0.525],
        "8217": [0, 0.61111, 0, 0, 0.525],
        "8242": [0, 0.61111, 0, 0, 0.525],
        "9251": [0.11111, 0.21944, 0, 0, 0.525]
      }
    };

    /**
     * This file contains metrics regarding fonts and individual symbols. The sigma
     * and xi variables, as well as the metricMap map contain data extracted from
     * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
     * `metrics` variable and the getCharacterMetrics function.
     */
    // In TeX, there are actually three sets of dimensions, one for each of
    // textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
    // 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
    // provided in the the arrays below, in that order.
    //
    // The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.
    // This was determined by running the following script:
    //
    //     latex -interaction=nonstopmode \
    //     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
    //     '$a$ \expandafter\show\the\textfont2' \
    //     '\expandafter\show\the\scriptfont2' \
    //     '\expandafter\show\the\scriptscriptfont2' \
    //     '\stop'
    //
    // The metrics themselves were retreived using the following commands:
    //
    //     tftopl cmsy10
    //     tftopl cmsy7
    //     tftopl cmsy5
    //
    // The output of each of these commands is quite lengthy.  The only part we
    // care about is the FONTDIMEN section. Each value is measured in EMs.
    var sigmasAndXis = {
      slant: [0.250, 0.250, 0.250],
      // sigma1
      space: [0.000, 0.000, 0.000],
      // sigma2
      stretch: [0.000, 0.000, 0.000],
      // sigma3
      shrink: [0.000, 0.000, 0.000],
      // sigma4
      xHeight: [0.431, 0.431, 0.431],
      // sigma5
      quad: [1.000, 1.171, 1.472],
      // sigma6
      extraSpace: [0.000, 0.000, 0.000],
      // sigma7
      num1: [0.677, 0.732, 0.925],
      // sigma8
      num2: [0.394, 0.384, 0.387],
      // sigma9
      num3: [0.444, 0.471, 0.504],
      // sigma10
      denom1: [0.686, 0.752, 1.025],
      // sigma11
      denom2: [0.345, 0.344, 0.532],
      // sigma12
      sup1: [0.413, 0.503, 0.504],
      // sigma13
      sup2: [0.363, 0.431, 0.404],
      // sigma14
      sup3: [0.289, 0.286, 0.294],
      // sigma15
      sub1: [0.150, 0.143, 0.200],
      // sigma16
      sub2: [0.247, 0.286, 0.400],
      // sigma17
      supDrop: [0.386, 0.353, 0.494],
      // sigma18
      subDrop: [0.050, 0.071, 0.100],
      // sigma19
      delim1: [2.390, 1.700, 1.980],
      // sigma20
      delim2: [1.010, 1.157, 1.420],
      // sigma21
      axisHeight: [0.250, 0.250, 0.250],
      // sigma22
      // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
      // they correspond to the font parameters of the extension fonts (family 3).
      // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
      // match cmex7, we'd use cmex7.tfm values for script and scriptscript
      // values.
      defaultRuleThickness: [0.04, 0.049, 0.049],
      // xi8; cmex7: 0.049
      bigOpSpacing1: [0.111, 0.111, 0.111],
      // xi9
      bigOpSpacing2: [0.166, 0.166, 0.166],
      // xi10
      bigOpSpacing3: [0.2, 0.2, 0.2],
      // xi11
      bigOpSpacing4: [0.6, 0.611, 0.611],
      // xi12; cmex7: 0.611
      bigOpSpacing5: [0.1, 0.143, 0.143],
      // xi13; cmex7: 0.143
      // The \sqrt rule width is taken from the height of the surd character.
      // Since we use the same font at all sizes, this thickness doesn't scale.
      sqrtRuleThickness: [0.04, 0.04, 0.04],
      // This value determines how large a pt is, for metrics which are defined
      // in terms of pts.
      // This value is also used in katex.less; if you change it make sure the
      // values match.
      ptPerEm: [10.0, 10.0, 10.0],
      // The space between adjacent `|` columns in an array definition. From
      // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
      doubleRuleSep: [0.2, 0.2, 0.2],
      // The width of separator lines in {array} environments. From
      // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
      arrayRuleWidth: [0.04, 0.04, 0.04],
      // Two values from LaTeX source2e:
      fboxsep: [0.3, 0.3, 0.3],
      //        3 pt / ptPerEm
      fboxrule: [0.04, 0.04, 0.04] // 0.4 pt / ptPerEm

    }; // This map contains a mapping from font name and character code to character
    // should have Latin-1 and Cyrillic characters, but may not depending on the
    // operating system.  The metrics do not account for extra height from the
    // accents.  In the case of Cyrillic characters which have both ascenders and
    // descenders we prefer approximations with ascenders, primarily to prevent
    // the fraction bar or root line from intersecting the glyph.
    // TODO(kevinb) allow union of multiple glyph metrics for better accuracy.

    var extraCharacterMap = {
      // Latin-1
      'Å': 'A',
      'Ð': 'D',
      'Þ': 'o',
      'å': 'a',
      'ð': 'd',
      'þ': 'o',
      // Cyrillic
      'А': 'A',
      'Б': 'B',
      'В': 'B',
      'Г': 'F',
      'Д': 'A',
      'Е': 'E',
      'Ж': 'K',
      'З': '3',
      'И': 'N',
      'Й': 'N',
      'К': 'K',
      'Л': 'N',
      'М': 'M',
      'Н': 'H',
      'О': 'O',
      'П': 'N',
      'Р': 'P',
      'С': 'C',
      'Т': 'T',
      'У': 'y',
      'Ф': 'O',
      'Х': 'X',
      'Ц': 'U',
      'Ч': 'h',
      'Ш': 'W',
      'Щ': 'W',
      'Ъ': 'B',
      'Ы': 'X',
      'Ь': 'B',
      'Э': '3',
      'Ю': 'X',
      'Я': 'R',
      'а': 'a',
      'б': 'b',
      'в': 'a',
      'г': 'r',
      'д': 'y',
      'е': 'e',
      'ж': 'm',
      'з': 'e',
      'и': 'n',
      'й': 'n',
      'к': 'n',
      'л': 'n',
      'м': 'm',
      'н': 'n',
      'о': 'o',
      'п': 'n',
      'р': 'p',
      'с': 'c',
      'т': 'o',
      'у': 'y',
      'ф': 'b',
      'х': 'x',
      'ц': 'n',
      'ч': 'n',
      'ш': 'w',
      'щ': 'w',
      'ъ': 'a',
      'ы': 'm',
      'ь': 'a',
      'э': 'e',
      'ю': 'm',
      'я': 'r'
    };

    /**
     * This function adds new font metrics to default metricMap
     * It can also override existing metrics
     */
    function setFontMetrics(fontName, metrics) {
      fontMetricsData[fontName] = metrics;
    }
    /**
     * This function is a convenience function for looking up information in the
     * metricMap table. It takes a character as a string, and a font.
     *
     * Note: the `width` property may be undefined if fontMetricsData.js wasn't
     * built using `Make extended_metrics`.
     */

    function getCharacterMetrics(character, font, mode) {
      if (!fontMetricsData[font]) {
        throw new Error("Font metrics not found for font: " + font + ".");
      }

      var ch = character.charCodeAt(0);
      var metrics = fontMetricsData[font][ch];

      if (!metrics && character[0] in extraCharacterMap) {
        ch = extraCharacterMap[character[0]].charCodeAt(0);
        metrics = fontMetricsData[font][ch];
      }

      if (!metrics && mode === 'text') {
        // We don't typically have font metrics for Asian scripts.
        // But since we support them in text mode, we need to return
        // some sort of metrics.
        // So if the character is in a script we support but we
        // don't have metrics for it, just use the metrics for
        // the Latin capital letter M. This is close enough because
        // we (currently) only care about the height of the glpyh
        // not its width.
        if (supportedCodepoint(ch)) {
          metrics = fontMetricsData[font][77]; // 77 is the charcode for 'M'
        }
      }

      if (metrics) {
        return {
          depth: metrics[0],
          height: metrics[1],
          italic: metrics[2],
          skew: metrics[3],
          width: metrics[4]
        };
      }
    }
    var fontMetricsBySizeIndex = {};
    /**
     * Get the font metrics for a given size.
     */

    function getGlobalMetrics(size) {
      var sizeIndex;

      if (size >= 5) {
        sizeIndex = 0;
      } else if (size >= 3) {
        sizeIndex = 1;
      } else {
        sizeIndex = 2;
      }

      if (!fontMetricsBySizeIndex[sizeIndex]) {
        var metrics = fontMetricsBySizeIndex[sizeIndex] = {
          cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
        };

        for (var key in sigmasAndXis) {
          if (sigmasAndXis.hasOwnProperty(key)) {
            metrics[key] = sigmasAndXis[key][sizeIndex];
          }
        }
      }

      return fontMetricsBySizeIndex[sizeIndex];
    }

    /**
     * This file contains information about the options that the Parser carries
     * around with it while parsing. Data is held in an `Options` object, and when
     * recursing, a new `Options` object can be created with the `.with*` and
     * `.reset` functions.
     */
    var sizeStyleMap = [// Each element contains [textsize, scriptsize, scriptscriptsize].
    // The size mappings are taken from TeX with \normalsize=10pt.
    [1, 1, 1], // size1: [5, 5, 5]              \tiny
    [2, 1, 1], // size2: [6, 5, 5]
    [3, 1, 1], // size3: [7, 5, 5]              \scriptsize
    [4, 2, 1], // size4: [8, 6, 5]              \footnotesize
    [5, 2, 1], // size5: [9, 6, 5]              \small
    [6, 3, 1], // size6: [10, 7, 5]             \normalsize
    [7, 4, 2], // size7: [12, 8, 6]             \large
    [8, 6, 3], // size8: [14.4, 10, 7]          \Large
    [9, 7, 6], // size9: [17.28, 12, 10]        \LARGE
    [10, 8, 7], // size10: [20.74, 14.4, 12]     \huge
    [11, 10, 9] // size11: [24.88, 20.74, 17.28] \HUGE
    ];
    var sizeMultipliers = [// fontMetrics.js:getGlobalMetrics also uses size indexes, so if
    // you change size indexes, change that function.
    0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.44, 1.728, 2.074, 2.488];

    var sizeAtStyle = function sizeAtStyle(size, style) {
      return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
    }; // In these types, "" (empty string) means "no change".


    /**
     * This is the main options class. It contains the current style, size, color,
     * and font.
     *
     * Options objects should not be modified. To create a new Options with
     * different properties, call a `.having*` method.
     */
    class Options {
      // A font family applies to a group of fonts (i.e. SansSerif), while a font
      // represents a specific font (i.e. SansSerif Bold).
      // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm

      /**
       * The base size index.
       */
      constructor(data) {
        this.style = void 0;
        this.color = void 0;
        this.size = void 0;
        this.textSize = void 0;
        this.phantom = void 0;
        this.font = void 0;
        this.fontFamily = void 0;
        this.fontWeight = void 0;
        this.fontShape = void 0;
        this.sizeMultiplier = void 0;
        this.maxSize = void 0;
        this.minRuleThickness = void 0;
        this._fontMetrics = void 0;
        this.style = data.style;
        this.color = data.color;
        this.size = data.size || Options.BASESIZE;
        this.textSize = data.textSize || this.size;
        this.phantom = !!data.phantom;
        this.font = data.font || "";
        this.fontFamily = data.fontFamily || "";
        this.fontWeight = data.fontWeight || '';
        this.fontShape = data.fontShape || '';
        this.sizeMultiplier = sizeMultipliers[this.size - 1];
        this.maxSize = data.maxSize;
        this.minRuleThickness = data.minRuleThickness;
        this._fontMetrics = undefined;
      }
      /**
       * Returns a new options object with the same properties as "this".  Properties
       * from "extension" will be copied to the new options object.
       */


      extend(extension) {
        var data = {
          style: this.style,
          size: this.size,
          textSize: this.textSize,
          color: this.color,
          phantom: this.phantom,
          font: this.font,
          fontFamily: this.fontFamily,
          fontWeight: this.fontWeight,
          fontShape: this.fontShape,
          maxSize: this.maxSize,
          minRuleThickness: this.minRuleThickness
        };

        for (var key in extension) {
          if (extension.hasOwnProperty(key)) {
            data[key] = extension[key];
          }
        }

        return new Options(data);
      }
      /**
       * Return an options object with the given style. If `this.style === style`,
       * returns `this`.
       */


      havingStyle(style) {
        if (this.style === style) {
          return this;
        } else {
          return this.extend({
            style: style,
            size: sizeAtStyle(this.textSize, style)
          });
        }
      }
      /**
       * Return an options object with a cramped version of the current style. If
       * the current style is cramped, returns `this`.
       */


      havingCrampedStyle() {
        return this.havingStyle(this.style.cramp());
      }
      /**
       * Return an options object with the given size and in at least `\textstyle`.
       * Returns `this` if appropriate.
       */


      havingSize(size) {
        if (this.size === size && this.textSize === size) {
          return this;
        } else {
          return this.extend({
            style: this.style.text(),
            size: size,
            textSize: size,
            sizeMultiplier: sizeMultipliers[size - 1]
          });
        }
      }
      /**
       * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
       * changes to at least `\textstyle`.
       */


      havingBaseStyle(style) {
        style = style || this.style.text();
        var wantSize = sizeAtStyle(Options.BASESIZE, style);

        if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
          return this;
        } else {
          return this.extend({
            style: style,
            size: wantSize
          });
        }
      }
      /**
       * Remove the effect of sizing changes such as \Huge.
       * Keep the effect of the current style, such as \scriptstyle.
       */


      havingBaseSizing() {
        var size;

        switch (this.style.id) {
          case 4:
          case 5:
            size = 3; // normalsize in scriptstyle

            break;

          case 6:
          case 7:
            size = 1; // normalsize in scriptscriptstyle

            break;

          default:
            size = 6;
          // normalsize in textstyle or displaystyle
        }

        return this.extend({
          style: this.style.text(),
          size: size
        });
      }
      /**
       * Create a new options object with the given color.
       */


      withColor(color) {
        return this.extend({
          color: color
        });
      }
      /**
       * Create a new options object with "phantom" set to true.
       */


      withPhantom() {
        return this.extend({
          phantom: true
        });
      }
      /**
       * Creates a new options object with the given math font or old text font.
       * @type {[type]}
       */


      withFont(font) {
        return this.extend({
          font
        });
      }
      /**
       * Create a new options objects with the given fontFamily.
       */


      withTextFontFamily(fontFamily) {
        return this.extend({
          fontFamily,
          font: ""
        });
      }
      /**
       * Creates a new options object with the given font weight
       */


      withTextFontWeight(fontWeight) {
        return this.extend({
          fontWeight,
          font: ""
        });
      }
      /**
       * Creates a new options object with the given font weight
       */


      withTextFontShape(fontShape) {
        return this.extend({
          fontShape,
          font: ""
        });
      }
      /**
       * Return the CSS sizing classes required to switch from enclosing options
       * `oldOptions` to `this`. Returns an array of classes.
       */


      sizingClasses(oldOptions) {
        if (oldOptions.size !== this.size) {
          return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
        } else {
          return [];
        }
      }
      /**
       * Return the CSS sizing classes required to switch to the base size. Like
       * `this.havingSize(BASESIZE).sizingClasses(this)`.
       */


      baseSizingClasses() {
        if (this.size !== Options.BASESIZE) {
          return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
        } else {
          return [];
        }
      }
      /**
       * Return the font metrics for this size.
       */


      fontMetrics() {
        if (!this._fontMetrics) {
          this._fontMetrics = getGlobalMetrics(this.size);
        }

        return this._fontMetrics;
      }
      /**
       * Gets the CSS color of the current options object
       */


      getColor() {
        if (this.phantom) {
          return "transparent";
        } else {
          return this.color;
        }
      }

    }

    Options.BASESIZE = 6;

    /**
     * This file does conversion between units.  In particular, it provides
     * calculateSize to convert other units into ems.
     */
    // Thus, multiplying a length by this number converts the length from units
    // into pts.  Dividing the result by ptPerEm gives the number of ems
    // *assuming* a font size of ptPerEm (normal size, normal style).

    var ptPerUnit = {
      // https://en.wikibooks.org/wiki/LaTeX/Lengths and
      // https://tex.stackexchange.com/a/8263
      "pt": 1,
      // TeX point
      "mm": 7227 / 2540,
      // millimeter
      "cm": 7227 / 254,
      // centimeter
      "in": 72.27,
      // inch
      "bp": 803 / 800,
      // big (PostScript) points
      "pc": 12,
      // pica
      "dd": 1238 / 1157,
      // didot
      "cc": 14856 / 1157,
      // cicero (12 didot)
      "nd": 685 / 642,
      // new didot
      "nc": 1370 / 107,
      // new cicero (12 new didot)
      "sp": 1 / 65536,
      // scaled point (TeX's internal smallest unit)
      // https://tex.stackexchange.com/a/41371
      "px": 803 / 800 // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX

    }; // Dictionary of relative units, for fast validity testing.

    var relativeUnit = {
      "ex": true,
      "em": true,
      "mu": true
    };

    /**
     * Determine whether the specified unit (either a string defining the unit
     * or a "size" parse node containing a unit field) is valid.
     */
    var validUnit = function validUnit(unit) {
      if (typeof unit !== "string") {
        unit = unit.unit;
      }

      return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
    };
    /*
     * Convert a "size" parse node (with numeric "number" and string "unit" fields,
     * as parsed by functions.js argType "size") into a CSS em value for the
     * current style/scale.  `options` gives the current options.
     */

    var calculateSize = function calculateSize(sizeValue, options) {
      var scale;

      if (sizeValue.unit in ptPerUnit) {
        // Absolute units
        scale = ptPerUnit[sizeValue.unit] // Convert unit to pt
        / options.fontMetrics().ptPerEm // Convert pt to CSS em
        / options.sizeMultiplier; // Unscale to make absolute units
      } else if (sizeValue.unit === "mu") {
        // `mu` units scale with scriptstyle/scriptscriptstyle.
        scale = options.fontMetrics().cssEmPerMu;
      } else {
        // Other relative units always refer to the *textstyle* font
        // in the current size.
        var unitOptions;

        if (options.style.isTight()) {
          // isTight() means current style is script/scriptscript.
          unitOptions = options.havingStyle(options.style.text());
        } else {
          unitOptions = options;
        } // TODO: In TeX these units are relative to the quad of the current
        // *text* font, e.g. cmr10. KaTeX instead uses values from the
        // comparably-sized *Computer Modern symbol* font. At 10pt, these
        // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
        // cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
        // TeX \showlists shows a kern of 1.13889 * fontsize;
        // KaTeX shows a kern of 1.171 * fontsize.


        if (sizeValue.unit === "ex") {
          scale = unitOptions.fontMetrics().xHeight;
        } else if (sizeValue.unit === "em") {
          scale = unitOptions.fontMetrics().quad;
        } else {
          throw new ParseError("Invalid unit: '" + sizeValue.unit + "'");
        }

        if (unitOptions !== options) {
          scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
        }
      }

      return Math.min(sizeValue.number * scale, options.maxSize);
    };
    /**
     * Round `n` to 4 decimal places, or to the nearest 1/10,000th em. See
     * https://github.com/KaTeX/KaTeX/pull/2460.
     */

    var makeEm = function makeEm(n) {
      return +n.toFixed(4) + "em";
    };

    /**
     * These objects store the data about the DOM nodes we create, as well as some
     * extra data. They can then be transformed into real DOM nodes with the
     * `toNode` function or HTML markup using `toMarkup`. They are useful for both
     * storing extra properties on the nodes, as well as providing a way to easily
     * work with the DOM.
     *
     * Similar functions for working with MathML nodes exist in mathMLTree.js.
     *
     * TODO: refactor `span` and `anchor` into common superclass when
     * target environments support class inheritance
     */

    /**
     * Create an HTML className based on a list of classes. In addition to joining
     * with spaces, we also remove empty classes.
     */
    var createClass = function createClass(classes) {
      return classes.filter(cls => cls).join(" ");
    };

    var initNode = function initNode(classes, options, style) {
      this.classes = classes || [];
      this.attributes = {};
      this.height = 0;
      this.depth = 0;
      this.maxFontSize = 0;
      this.style = style || {};

      if (options) {
        if (options.style.isTight()) {
          this.classes.push("mtight");
        }

        var color = options.getColor();

        if (color) {
          this.style.color = color;
        }
      }
    };
    /**
     * Convert into an HTML node
     */


    var toNode = function toNode(tagName) {
      var node = document.createElement(tagName); // Apply the class

      node.className = createClass(this.classes); // Apply inline styles

      for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
          // $FlowFixMe Flow doesn't seem to understand span.style's type.
          node.style[style] = this.style[style];
        }
      } // Apply attributes


      for (var attr in this.attributes) {
        if (this.attributes.hasOwnProperty(attr)) {
          node.setAttribute(attr, this.attributes[attr]);
        }
      } // Append the children, also as HTML nodes


      for (var i = 0; i < this.children.length; i++) {
        node.appendChild(this.children[i].toNode());
      }

      return node;
    };
    /**
     * Convert into an HTML markup string
     */


    var toMarkup = function toMarkup(tagName) {
      var markup = "<" + tagName; // Add the class

      if (this.classes.length) {
        markup += " class=\"" + utils.escape(createClass(this.classes)) + "\"";
      }

      var styles = ""; // Add the styles, after hyphenation

      for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
          styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
        }
      }

      if (styles) {
        markup += " style=\"" + utils.escape(styles) + "\"";
      } // Add the attributes


      for (var attr in this.attributes) {
        if (this.attributes.hasOwnProperty(attr)) {
          markup += " " + attr + "=\"" + utils.escape(this.attributes[attr]) + "\"";
        }
      }

      markup += ">"; // Add the markup of the children, also as markup

      for (var i = 0; i < this.children.length; i++) {
        markup += this.children[i].toMarkup();
      }

      markup += "</" + tagName + ">";
      return markup;
    }; // Making the type below exact with all optional fields doesn't work due to
    // - https://github.com/facebook/flow/issues/4582
    // - https://github.com/facebook/flow/issues/5688
    // However, since *all* fields are optional, $Shape<> works as suggested in 5688
    // above.
    // This type does not include all CSS properties. Additional properties should
    // be added as needed.


    /**
     * This node represents a span node, with a className, a list of children, and
     * an inline style. It also contains information about its height, depth, and
     * maxFontSize.
     *
     * Represents two types with different uses: SvgSpan to wrap an SVG and DomSpan
     * otherwise. This typesafety is important when HTML builders access a span's
     * children.
     */
    class Span {
      constructor(classes, children, options, style) {
        this.children = void 0;
        this.attributes = void 0;
        this.classes = void 0;
        this.height = void 0;
        this.depth = void 0;
        this.width = void 0;
        this.maxFontSize = void 0;
        this.style = void 0;
        initNode.call(this, classes, options, style);
        this.children = children || [];
      }
      /**
       * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
       * all browsers support attributes the same, and having too many custom
       * attributes is probably bad.
       */


      setAttribute(attribute, value) {
        this.attributes[attribute] = value;
      }

      hasClass(className) {
        return utils.contains(this.classes, className);
      }

      toNode() {
        return toNode.call(this, "span");
      }

      toMarkup() {
        return toMarkup.call(this, "span");
      }

    }
    /**
     * This node represents an anchor (<a>) element with a hyperlink.  See `span`
     * for further details.
     */

    class Anchor {
      constructor(href, classes, children, options) {
        this.children = void 0;
        this.attributes = void 0;
        this.classes = void 0;
        this.height = void 0;
        this.depth = void 0;
        this.maxFontSize = void 0;
        this.style = void 0;
        initNode.call(this, classes, options);
        this.children = children || [];
        this.setAttribute('href', href);
      }

      setAttribute(attribute, value) {
        this.attributes[attribute] = value;
      }

      hasClass(className) {
        return utils.contains(this.classes, className);
      }

      toNode() {
        return toNode.call(this, "a");
      }

      toMarkup() {
        return toMarkup.call(this, "a");
      }

    }
    /**
     * This node represents an image embed (<img>) element.
     */

    class Img {
      constructor(src, alt, style) {
        this.src = void 0;
        this.alt = void 0;
        this.classes = void 0;
        this.height = void 0;
        this.depth = void 0;
        this.maxFontSize = void 0;
        this.style = void 0;
        this.alt = alt;
        this.src = src;
        this.classes = ["mord"];
        this.style = style;
      }

      hasClass(className) {
        return utils.contains(this.classes, className);
      }

      toNode() {
        var node = document.createElement("img");
        node.src = this.src;
        node.alt = this.alt;
        node.className = "mord"; // Apply inline styles

        for (var style in this.style) {
          if (this.style.hasOwnProperty(style)) {
            // $FlowFixMe
            node.style[style] = this.style[style];
          }
        }

        return node;
      }

      toMarkup() {
        var markup = "<img  src='" + this.src + " 'alt='" + this.alt + "' "; // Add the styles, after hyphenation

        var styles = "";

        for (var style in this.style) {
          if (this.style.hasOwnProperty(style)) {
            styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
          }
        }

        if (styles) {
          markup += " style=\"" + utils.escape(styles) + "\"";
        }

        markup += "'/>";
        return markup;
      }

    }
    var iCombinations = {
      'î': '\u0131\u0302',
      'ï': '\u0131\u0308',
      'í': '\u0131\u0301',
      // 'ī': '\u0131\u0304', // enable when we add Extended Latin
      'ì': '\u0131\u0300'
    };
    /**
     * A symbol node contains information about a single symbol. It either renders
     * to a single text node, or a span with a single text node in it, depending on
     * whether it has CSS classes, styles, or needs italic correction.
     */

    class SymbolNode {
      constructor(text, height, depth, italic, skew, width, classes, style) {
        this.text = void 0;
        this.height = void 0;
        this.depth = void 0;
        this.italic = void 0;
        this.skew = void 0;
        this.width = void 0;
        this.maxFontSize = void 0;
        this.classes = void 0;
        this.style = void 0;
        this.text = text;
        this.height = height || 0;
        this.depth = depth || 0;
        this.italic = italic || 0;
        this.skew = skew || 0;
        this.width = width || 0;
        this.classes = classes || [];
        this.style = style || {};
        this.maxFontSize = 0; // Mark text from non-Latin scripts with specific classes so that we
        // can specify which fonts to use.  This allows us to render these
        // characters with a serif font in situations where the browser would
        // either default to a sans serif or render a placeholder character.
        // We use CSS class names like cjk_fallback, hangul_fallback and
        // brahmic_fallback. See ./unicodeScripts.js for the set of possible
        // script names

        var script = scriptFromCodepoint(this.text.charCodeAt(0));

        if (script) {
          this.classes.push(script + "_fallback");
        }

        if (/[îïíì]/.test(this.text)) {
          // add ī when we add Extended Latin
          this.text = iCombinations[this.text];
        }
      }

      hasClass(className) {
        return utils.contains(this.classes, className);
      }
      /**
       * Creates a text node or span from a symbol node. Note that a span is only
       * created if it is needed.
       */


      toNode() {
        var node = document.createTextNode(this.text);
        var span = null;

        if (this.italic > 0) {
          span = document.createElement("span");
          span.style.marginRight = makeEm(this.italic);
        }

        if (this.classes.length > 0) {
          span = span || document.createElement("span");
          span.className = createClass(this.classes);
        }

        for (var style in this.style) {
          if (this.style.hasOwnProperty(style)) {
            span = span || document.createElement("span"); // $FlowFixMe Flow doesn't seem to understand span.style's type.

            span.style[style] = this.style[style];
          }
        }

        if (span) {
          span.appendChild(node);
          return span;
        } else {
          return node;
        }
      }
      /**
       * Creates markup for a symbol node.
       */


      toMarkup() {
        // TODO(alpert): More duplication than I'd like from
        // span.prototype.toMarkup and symbolNode.prototype.toNode...
        var needsSpan = false;
        var markup = "<span";

        if (this.classes.length) {
          needsSpan = true;
          markup += " class=\"";
          markup += utils.escape(createClass(this.classes));
          markup += "\"";
        }

        var styles = "";

        if (this.italic > 0) {
          styles += "margin-right:" + this.italic + "em;";
        }

        for (var style in this.style) {
          if (this.style.hasOwnProperty(style)) {
            styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
          }
        }

        if (styles) {
          needsSpan = true;
          markup += " style=\"" + utils.escape(styles) + "\"";
        }

        var escaped = utils.escape(this.text);

        if (needsSpan) {
          markup += ">";
          markup += escaped;
          markup += "</span>";
          return markup;
        } else {
          return escaped;
        }
      }

    }
    /**
     * SVG nodes are used to render stretchy wide elements.
     */

    class SvgNode {
      constructor(children, attributes) {
        this.children = void 0;
        this.attributes = void 0;
        this.children = children || [];
        this.attributes = attributes || {};
      }

      toNode() {
        var svgNS = "http://www.w3.org/2000/svg";
        var node = document.createElementNS(svgNS, "svg"); // Apply attributes

        for (var attr in this.attributes) {
          if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
            node.setAttribute(attr, this.attributes[attr]);
          }
        }

        for (var i = 0; i < this.children.length; i++) {
          node.appendChild(this.children[i].toNode());
        }

        return node;
      }

      toMarkup() {
        var markup = "<svg xmlns=\"http://www.w3.org/2000/svg\""; // Apply attributes

        for (var attr in this.attributes) {
          if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
            markup += " " + attr + "='" + this.attributes[attr] + "'";
          }
        }

        markup += ">";

        for (var i = 0; i < this.children.length; i++) {
          markup += this.children[i].toMarkup();
        }

        markup += "</svg>";
        return markup;
      }

    }
    class PathNode {
      constructor(pathName, alternate) {
        this.pathName = void 0;
        this.alternate = void 0;
        this.pathName = pathName;
        this.alternate = alternate; // Used only for \sqrt, \phase, & tall delims
      }

      toNode() {
        var svgNS = "http://www.w3.org/2000/svg";
        var node = document.createElementNS(svgNS, "path");

        if (this.alternate) {
          node.setAttribute("d", this.alternate);
        } else {
          node.setAttribute("d", path[this.pathName]);
        }

        return node;
      }

      toMarkup() {
        if (this.alternate) {
          return "<path d='" + this.alternate + "'/>";
        } else {
          return "<path d='" + path[this.pathName] + "'/>";
        }
      }

    }
    class LineNode {
      constructor(attributes) {
        this.attributes = void 0;
        this.attributes = attributes || {};
      }

      toNode() {
        var svgNS = "http://www.w3.org/2000/svg";
        var node = document.createElementNS(svgNS, "line"); // Apply attributes

        for (var attr in this.attributes) {
          if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
            node.setAttribute(attr, this.attributes[attr]);
          }
        }

        return node;
      }

      toMarkup() {
        var markup = "<line";

        for (var attr in this.attributes) {
          if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
            markup += " " + attr + "='" + this.attributes[attr] + "'";
          }
        }

        markup += "/>";
        return markup;
      }

    }
    function assertSymbolDomNode(group) {
      if (group instanceof SymbolNode) {
        return group;
      } else {
        throw new Error("Expected symbolNode but got " + String(group) + ".");
      }
    }
    function assertSpan(group) {
      if (group instanceof Span) {
        return group;
      } else {
        throw new Error("Expected span<HtmlDomNode> but got " + String(group) + ".");
      }
    }

    /**
     * This file holds a list of all no-argument functions and single-character
     * symbols (like 'a' or ';').
     *
     * For each of the symbols, there are three properties they can have:
     * - font (required): the font to be used for this symbol. Either "main" (the
         normal font), or "ams" (the ams fonts).
     * - group (required): the ParseNode group type the symbol should have (i.e.
         "textord", "mathord", etc).
         See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types
     * - replace: the character that this symbol or function should be
     *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
     *   character in the main font).
     *
     * The outermost map in the table indicates what mode the symbols should be
     * accepted in (e.g. "math" or "text").
     */
    // Some of these have a "-token" suffix since these are also used as `ParseNode`
    // types for raw text tokens, and we want to avoid conflicts with higher-level
    // `ParseNode` types. These `ParseNode`s are constructed within `Parser` by
    // looking up the `symbols` map.
    var ATOMS = {
      "bin": 1,
      "close": 1,
      "inner": 1,
      "open": 1,
      "punct": 1,
      "rel": 1
    };
    var NON_ATOMS = {
      "accent-token": 1,
      "mathord": 1,
      "op-token": 1,
      "spacing": 1,
      "textord": 1
    };
    var symbols = {
      "math": {},
      "text": {}
    };
    /** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

    function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
      symbols[mode][name] = {
        font,
        group,
        replace
      };

      if (acceptUnicodeChar && replace) {
        symbols[mode][replace] = symbols[mode][name];
      }
    } // Some abbreviations for commonly used strings.
    // This helps minify the code, and also spotting typos using jshint.
    // modes:

    var math = "math";
    var text = "text"; // fonts:

    var main$1 = "main";
    var ams = "ams"; // groups:

    var accent = "accent-token";
    var bin = "bin";
    var close = "close";
    var inner = "inner";
    var mathord = "mathord";
    var op = "op-token";
    var open = "open";
    var punct = "punct";
    var rel = "rel";
    var spacing = "spacing";
    var textord = "textord"; // Now comes the symbol table
    // Relation Symbols

    defineSymbol(math, main$1, rel, "\u2261", "\\equiv", true);
    defineSymbol(math, main$1, rel, "\u227a", "\\prec", true);
    defineSymbol(math, main$1, rel, "\u227b", "\\succ", true);
    defineSymbol(math, main$1, rel, "\u223c", "\\sim", true);
    defineSymbol(math, main$1, rel, "\u22a5", "\\perp");
    defineSymbol(math, main$1, rel, "\u2aaf", "\\preceq", true);
    defineSymbol(math, main$1, rel, "\u2ab0", "\\succeq", true);
    defineSymbol(math, main$1, rel, "\u2243", "\\simeq", true);
    defineSymbol(math, main$1, rel, "\u2223", "\\mid", true);
    defineSymbol(math, main$1, rel, "\u226a", "\\ll", true);
    defineSymbol(math, main$1, rel, "\u226b", "\\gg", true);
    defineSymbol(math, main$1, rel, "\u224d", "\\asymp", true);
    defineSymbol(math, main$1, rel, "\u2225", "\\parallel");
    defineSymbol(math, main$1, rel, "\u22c8", "\\bowtie", true);
    defineSymbol(math, main$1, rel, "\u2323", "\\smile", true);
    defineSymbol(math, main$1, rel, "\u2291", "\\sqsubseteq", true);
    defineSymbol(math, main$1, rel, "\u2292", "\\sqsupseteq", true);
    defineSymbol(math, main$1, rel, "\u2250", "\\doteq", true);
    defineSymbol(math, main$1, rel, "\u2322", "\\frown", true);
    defineSymbol(math, main$1, rel, "\u220b", "\\ni", true);
    defineSymbol(math, main$1, rel, "\u221d", "\\propto", true);
    defineSymbol(math, main$1, rel, "\u22a2", "\\vdash", true);
    defineSymbol(math, main$1, rel, "\u22a3", "\\dashv", true);
    defineSymbol(math, main$1, rel, "\u220b", "\\owns"); // Punctuation

    defineSymbol(math, main$1, punct, "\u002e", "\\ldotp");
    defineSymbol(math, main$1, punct, "\u22c5", "\\cdotp"); // Misc Symbols

    defineSymbol(math, main$1, textord, "\u0023", "\\#");
    defineSymbol(text, main$1, textord, "\u0023", "\\#");
    defineSymbol(math, main$1, textord, "\u0026", "\\&");
    defineSymbol(text, main$1, textord, "\u0026", "\\&");
    defineSymbol(math, main$1, textord, "\u2135", "\\aleph", true);
    defineSymbol(math, main$1, textord, "\u2200", "\\forall", true);
    defineSymbol(math, main$1, textord, "\u210f", "\\hbar", true);
    defineSymbol(math, main$1, textord, "\u2203", "\\exists", true);
    defineSymbol(math, main$1, textord, "\u2207", "\\nabla", true);
    defineSymbol(math, main$1, textord, "\u266d", "\\flat", true);
    defineSymbol(math, main$1, textord, "\u2113", "\\ell", true);
    defineSymbol(math, main$1, textord, "\u266e", "\\natural", true);
    defineSymbol(math, main$1, textord, "\u2663", "\\clubsuit", true);
    defineSymbol(math, main$1, textord, "\u2118", "\\wp", true);
    defineSymbol(math, main$1, textord, "\u266f", "\\sharp", true);
    defineSymbol(math, main$1, textord, "\u2662", "\\diamondsuit", true);
    defineSymbol(math, main$1, textord, "\u211c", "\\Re", true);
    defineSymbol(math, main$1, textord, "\u2661", "\\heartsuit", true);
    defineSymbol(math, main$1, textord, "\u2111", "\\Im", true);
    defineSymbol(math, main$1, textord, "\u2660", "\\spadesuit", true);
    defineSymbol(math, main$1, textord, "\u00a7", "\\S", true);
    defineSymbol(text, main$1, textord, "\u00a7", "\\S");
    defineSymbol(math, main$1, textord, "\u00b6", "\\P", true);
    defineSymbol(text, main$1, textord, "\u00b6", "\\P"); // Math and Text

    defineSymbol(math, main$1, textord, "\u2020", "\\dag");
    defineSymbol(text, main$1, textord, "\u2020", "\\dag");
    defineSymbol(text, main$1, textord, "\u2020", "\\textdagger");
    defineSymbol(math, main$1, textord, "\u2021", "\\ddag");
    defineSymbol(text, main$1, textord, "\u2021", "\\ddag");
    defineSymbol(text, main$1, textord, "\u2021", "\\textdaggerdbl"); // Large Delimiters

    defineSymbol(math, main$1, close, "\u23b1", "\\rmoustache", true);
    defineSymbol(math, main$1, open, "\u23b0", "\\lmoustache", true);
    defineSymbol(math, main$1, close, "\u27ef", "\\rgroup", true);
    defineSymbol(math, main$1, open, "\u27ee", "\\lgroup", true); // Binary Operators

    defineSymbol(math, main$1, bin, "\u2213", "\\mp", true);
    defineSymbol(math, main$1, bin, "\u2296", "\\ominus", true);
    defineSymbol(math, main$1, bin, "\u228e", "\\uplus", true);
    defineSymbol(math, main$1, bin, "\u2293", "\\sqcap", true);
    defineSymbol(math, main$1, bin, "\u2217", "\\ast");
    defineSymbol(math, main$1, bin, "\u2294", "\\sqcup", true);
    defineSymbol(math, main$1, bin, "\u25ef", "\\bigcirc", true);
    defineSymbol(math, main$1, bin, "\u2219", "\\bullet", true);
    defineSymbol(math, main$1, bin, "\u2021", "\\ddagger");
    defineSymbol(math, main$1, bin, "\u2240", "\\wr", true);
    defineSymbol(math, main$1, bin, "\u2a3f", "\\amalg");
    defineSymbol(math, main$1, bin, "\u0026", "\\And"); // from amsmath
    // Arrow Symbols

    defineSymbol(math, main$1, rel, "\u27f5", "\\longleftarrow", true);
    defineSymbol(math, main$1, rel, "\u21d0", "\\Leftarrow", true);
    defineSymbol(math, main$1, rel, "\u27f8", "\\Longleftarrow", true);
    defineSymbol(math, main$1, rel, "\u27f6", "\\longrightarrow", true);
    defineSymbol(math, main$1, rel, "\u21d2", "\\Rightarrow", true);
    defineSymbol(math, main$1, rel, "\u27f9", "\\Longrightarrow", true);
    defineSymbol(math, main$1, rel, "\u2194", "\\leftrightarrow", true);
    defineSymbol(math, main$1, rel, "\u27f7", "\\longleftrightarrow", true);
    defineSymbol(math, main$1, rel, "\u21d4", "\\Leftrightarrow", true);
    defineSymbol(math, main$1, rel, "\u27fa", "\\Longleftrightarrow", true);
    defineSymbol(math, main$1, rel, "\u21a6", "\\mapsto", true);
    defineSymbol(math, main$1, rel, "\u27fc", "\\longmapsto", true);
    defineSymbol(math, main$1, rel, "\u2197", "\\nearrow", true);
    defineSymbol(math, main$1, rel, "\u21a9", "\\hookleftarrow", true);
    defineSymbol(math, main$1, rel, "\u21aa", "\\hookrightarrow", true);
    defineSymbol(math, main$1, rel, "\u2198", "\\searrow", true);
    defineSymbol(math, main$1, rel, "\u21bc", "\\leftharpoonup", true);
    defineSymbol(math, main$1, rel, "\u21c0", "\\rightharpoonup", true);
    defineSymbol(math, main$1, rel, "\u2199", "\\swarrow", true);
    defineSymbol(math, main$1, rel, "\u21bd", "\\leftharpoondown", true);
    defineSymbol(math, main$1, rel, "\u21c1", "\\rightharpoondown", true);
    defineSymbol(math, main$1, rel, "\u2196", "\\nwarrow", true);
    defineSymbol(math, main$1, rel, "\u21cc", "\\rightleftharpoons", true); // AMS Negated Binary Relations

    defineSymbol(math, ams, rel, "\u226e", "\\nless", true); // Symbol names preceeded by "@" each have a corresponding macro.

    defineSymbol(math, ams, rel, "\ue010", "\\@nleqslant");
    defineSymbol(math, ams, rel, "\ue011", "\\@nleqq");
    defineSymbol(math, ams, rel, "\u2a87", "\\lneq", true);
    defineSymbol(math, ams, rel, "\u2268", "\\lneqq", true);
    defineSymbol(math, ams, rel, "\ue00c", "\\@lvertneqq");
    defineSymbol(math, ams, rel, "\u22e6", "\\lnsim", true);
    defineSymbol(math, ams, rel, "\u2a89", "\\lnapprox", true);
    defineSymbol(math, ams, rel, "\u2280", "\\nprec", true); // unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.

    defineSymbol(math, ams, rel, "\u22e0", "\\npreceq", true);
    defineSymbol(math, ams, rel, "\u22e8", "\\precnsim", true);
    defineSymbol(math, ams, rel, "\u2ab9", "\\precnapprox", true);
    defineSymbol(math, ams, rel, "\u2241", "\\nsim", true);
    defineSymbol(math, ams, rel, "\ue006", "\\@nshortmid");
    defineSymbol(math, ams, rel, "\u2224", "\\nmid", true);
    defineSymbol(math, ams, rel, "\u22ac", "\\nvdash", true);
    defineSymbol(math, ams, rel, "\u22ad", "\\nvDash", true);
    defineSymbol(math, ams, rel, "\u22ea", "\\ntriangleleft");
    defineSymbol(math, ams, rel, "\u22ec", "\\ntrianglelefteq", true);
    defineSymbol(math, ams, rel, "\u228a", "\\subsetneq", true);
    defineSymbol(math, ams, rel, "\ue01a", "\\@varsubsetneq");
    defineSymbol(math, ams, rel, "\u2acb", "\\subsetneqq", true);
    defineSymbol(math, ams, rel, "\ue017", "\\@varsubsetneqq");
    defineSymbol(math, ams, rel, "\u226f", "\\ngtr", true);
    defineSymbol(math, ams, rel, "\ue00f", "\\@ngeqslant");
    defineSymbol(math, ams, rel, "\ue00e", "\\@ngeqq");
    defineSymbol(math, ams, rel, "\u2a88", "\\gneq", true);
    defineSymbol(math, ams, rel, "\u2269", "\\gneqq", true);
    defineSymbol(math, ams, rel, "\ue00d", "\\@gvertneqq");
    defineSymbol(math, ams, rel, "\u22e7", "\\gnsim", true);
    defineSymbol(math, ams, rel, "\u2a8a", "\\gnapprox", true);
    defineSymbol(math, ams, rel, "\u2281", "\\nsucc", true); // unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.

    defineSymbol(math, ams, rel, "\u22e1", "\\nsucceq", true);
    defineSymbol(math, ams, rel, "\u22e9", "\\succnsim", true);
    defineSymbol(math, ams, rel, "\u2aba", "\\succnapprox", true); // unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.

    defineSymbol(math, ams, rel, "\u2246", "\\ncong", true);
    defineSymbol(math, ams, rel, "\ue007", "\\@nshortparallel");
    defineSymbol(math, ams, rel, "\u2226", "\\nparallel", true);
    defineSymbol(math, ams, rel, "\u22af", "\\nVDash", true);
    defineSymbol(math, ams, rel, "\u22eb", "\\ntriangleright");
    defineSymbol(math, ams, rel, "\u22ed", "\\ntrianglerighteq", true);
    defineSymbol(math, ams, rel, "\ue018", "\\@nsupseteqq");
    defineSymbol(math, ams, rel, "\u228b", "\\supsetneq", true);
    defineSymbol(math, ams, rel, "\ue01b", "\\@varsupsetneq");
    defineSymbol(math, ams, rel, "\u2acc", "\\supsetneqq", true);
    defineSymbol(math, ams, rel, "\ue019", "\\@varsupsetneqq");
    defineSymbol(math, ams, rel, "\u22ae", "\\nVdash", true);
    defineSymbol(math, ams, rel, "\u2ab5", "\\precneqq", true);
    defineSymbol(math, ams, rel, "\u2ab6", "\\succneqq", true);
    defineSymbol(math, ams, rel, "\ue016", "\\@nsubseteqq");
    defineSymbol(math, ams, bin, "\u22b4", "\\unlhd");
    defineSymbol(math, ams, bin, "\u22b5", "\\unrhd"); // AMS Negated Arrows

    defineSymbol(math, ams, rel, "\u219a", "\\nleftarrow", true);
    defineSymbol(math, ams, rel, "\u219b", "\\nrightarrow", true);
    defineSymbol(math, ams, rel, "\u21cd", "\\nLeftarrow", true);
    defineSymbol(math, ams, rel, "\u21cf", "\\nRightarrow", true);
    defineSymbol(math, ams, rel, "\u21ae", "\\nleftrightarrow", true);
    defineSymbol(math, ams, rel, "\u21ce", "\\nLeftrightarrow", true); // AMS Misc

    defineSymbol(math, ams, rel, "\u25b3", "\\vartriangle");
    defineSymbol(math, ams, textord, "\u210f", "\\hslash");
    defineSymbol(math, ams, textord, "\u25bd", "\\triangledown");
    defineSymbol(math, ams, textord, "\u25ca", "\\lozenge");
    defineSymbol(math, ams, textord, "\u24c8", "\\circledS");
    defineSymbol(math, ams, textord, "\u00ae", "\\circledR");
    defineSymbol(text, ams, textord, "\u00ae", "\\circledR");
    defineSymbol(math, ams, textord, "\u2221", "\\measuredangle", true);
    defineSymbol(math, ams, textord, "\u2204", "\\nexists");
    defineSymbol(math, ams, textord, "\u2127", "\\mho");
    defineSymbol(math, ams, textord, "\u2132", "\\Finv", true);
    defineSymbol(math, ams, textord, "\u2141", "\\Game", true);
    defineSymbol(math, ams, textord, "\u2035", "\\backprime");
    defineSymbol(math, ams, textord, "\u25b2", "\\blacktriangle");
    defineSymbol(math, ams, textord, "\u25bc", "\\blacktriangledown");
    defineSymbol(math, ams, textord, "\u25a0", "\\blacksquare");
    defineSymbol(math, ams, textord, "\u29eb", "\\blacklozenge");
    defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
    defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle", true);
    defineSymbol(math, ams, textord, "\u2201", "\\complement", true); // unicode-math maps U+F0 to \matheth. We map to AMS function \eth

    defineSymbol(math, ams, textord, "\u00f0", "\\eth", true);
    defineSymbol(text, main$1, textord, "\u00f0", "\u00f0");
    defineSymbol(math, ams, textord, "\u2571", "\\diagup");
    defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
    defineSymbol(math, ams, textord, "\u25a1", "\\square");
    defineSymbol(math, ams, textord, "\u25a1", "\\Box");
    defineSymbol(math, ams, textord, "\u25ca", "\\Diamond"); // unicode-math maps U+A5 to \mathyen. We map to AMS function \yen

    defineSymbol(math, ams, textord, "\u00a5", "\\yen", true);
    defineSymbol(text, ams, textord, "\u00a5", "\\yen", true);
    defineSymbol(math, ams, textord, "\u2713", "\\checkmark", true);
    defineSymbol(text, ams, textord, "\u2713", "\\checkmark"); // AMS Hebrew

    defineSymbol(math, ams, textord, "\u2136", "\\beth", true);
    defineSymbol(math, ams, textord, "\u2138", "\\daleth", true);
    defineSymbol(math, ams, textord, "\u2137", "\\gimel", true); // AMS Greek

    defineSymbol(math, ams, textord, "\u03dd", "\\digamma", true);
    defineSymbol(math, ams, textord, "\u03f0", "\\varkappa"); // AMS Delimiters

    defineSymbol(math, ams, open, "\u250c", "\\@ulcorner", true);
    defineSymbol(math, ams, close, "\u2510", "\\@urcorner", true);
    defineSymbol(math, ams, open, "\u2514", "\\@llcorner", true);
    defineSymbol(math, ams, close, "\u2518", "\\@lrcorner", true); // AMS Binary Relations

    defineSymbol(math, ams, rel, "\u2266", "\\leqq", true);
    defineSymbol(math, ams, rel, "\u2a7d", "\\leqslant", true);
    defineSymbol(math, ams, rel, "\u2a95", "\\eqslantless", true);
    defineSymbol(math, ams, rel, "\u2272", "\\lesssim", true);
    defineSymbol(math, ams, rel, "\u2a85", "\\lessapprox", true);
    defineSymbol(math, ams, rel, "\u224a", "\\approxeq", true);
    defineSymbol(math, ams, bin, "\u22d6", "\\lessdot");
    defineSymbol(math, ams, rel, "\u22d8", "\\lll", true);
    defineSymbol(math, ams, rel, "\u2276", "\\lessgtr", true);
    defineSymbol(math, ams, rel, "\u22da", "\\lesseqgtr", true);
    defineSymbol(math, ams, rel, "\u2a8b", "\\lesseqqgtr", true);
    defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
    defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq", true);
    defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq", true);
    defineSymbol(math, ams, rel, "\u223d", "\\backsim", true);
    defineSymbol(math, ams, rel, "\u22cd", "\\backsimeq", true);
    defineSymbol(math, ams, rel, "\u2ac5", "\\subseteqq", true);
    defineSymbol(math, ams, rel, "\u22d0", "\\Subset", true);
    defineSymbol(math, ams, rel, "\u228f", "\\sqsubset", true);
    defineSymbol(math, ams, rel, "\u227c", "\\preccurlyeq", true);
    defineSymbol(math, ams, rel, "\u22de", "\\curlyeqprec", true);
    defineSymbol(math, ams, rel, "\u227e", "\\precsim", true);
    defineSymbol(math, ams, rel, "\u2ab7", "\\precapprox", true);
    defineSymbol(math, ams, rel, "\u22b2", "\\vartriangleleft");
    defineSymbol(math, ams, rel, "\u22b4", "\\trianglelefteq");
    defineSymbol(math, ams, rel, "\u22a8", "\\vDash", true);
    defineSymbol(math, ams, rel, "\u22aa", "\\Vvdash", true);
    defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
    defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
    defineSymbol(math, ams, rel, "\u224f", "\\bumpeq", true);
    defineSymbol(math, ams, rel, "\u224e", "\\Bumpeq", true);
    defineSymbol(math, ams, rel, "\u2267", "\\geqq", true);
    defineSymbol(math, ams, rel, "\u2a7e", "\\geqslant", true);
    defineSymbol(math, ams, rel, "\u2a96", "\\eqslantgtr", true);
    defineSymbol(math, ams, rel, "\u2273", "\\gtrsim", true);
    defineSymbol(math, ams, rel, "\u2a86", "\\gtrapprox", true);
    defineSymbol(math, ams, bin, "\u22d7", "\\gtrdot");
    defineSymbol(math, ams, rel, "\u22d9", "\\ggg", true);
    defineSymbol(math, ams, rel, "\u2277", "\\gtrless", true);
    defineSymbol(math, ams, rel, "\u22db", "\\gtreqless", true);
    defineSymbol(math, ams, rel, "\u2a8c", "\\gtreqqless", true);
    defineSymbol(math, ams, rel, "\u2256", "\\eqcirc", true);
    defineSymbol(math, ams, rel, "\u2257", "\\circeq", true);
    defineSymbol(math, ams, rel, "\u225c", "\\triangleq", true);
    defineSymbol(math, ams, rel, "\u223c", "\\thicksim");
    defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
    defineSymbol(math, ams, rel, "\u2ac6", "\\supseteqq", true);
    defineSymbol(math, ams, rel, "\u22d1", "\\Supset", true);
    defineSymbol(math, ams, rel, "\u2290", "\\sqsupset", true);
    defineSymbol(math, ams, rel, "\u227d", "\\succcurlyeq", true);
    defineSymbol(math, ams, rel, "\u22df", "\\curlyeqsucc", true);
    defineSymbol(math, ams, rel, "\u227f", "\\succsim", true);
    defineSymbol(math, ams, rel, "\u2ab8", "\\succapprox", true);
    defineSymbol(math, ams, rel, "\u22b3", "\\vartriangleright");
    defineSymbol(math, ams, rel, "\u22b5", "\\trianglerighteq");
    defineSymbol(math, ams, rel, "\u22a9", "\\Vdash", true);
    defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
    defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
    defineSymbol(math, ams, rel, "\u226c", "\\between", true);
    defineSymbol(math, ams, rel, "\u22d4", "\\pitchfork", true);
    defineSymbol(math, ams, rel, "\u221d", "\\varpropto");
    defineSymbol(math, ams, rel, "\u25c0", "\\blacktriangleleft"); // unicode-math says that \therefore is a mathord atom.
    // We kept the amssymb atom type, which is rel.

    defineSymbol(math, ams, rel, "\u2234", "\\therefore", true);
    defineSymbol(math, ams, rel, "\u220d", "\\backepsilon");
    defineSymbol(math, ams, rel, "\u25b6", "\\blacktriangleright"); // unicode-math says that \because is a mathord atom.
    // We kept the amssymb atom type, which is rel.

    defineSymbol(math, ams, rel, "\u2235", "\\because", true);
    defineSymbol(math, ams, rel, "\u22d8", "\\llless");
    defineSymbol(math, ams, rel, "\u22d9", "\\gggtr");
    defineSymbol(math, ams, bin, "\u22b2", "\\lhd");
    defineSymbol(math, ams, bin, "\u22b3", "\\rhd");
    defineSymbol(math, ams, rel, "\u2242", "\\eqsim", true);
    defineSymbol(math, main$1, rel, "\u22c8", "\\Join");
    defineSymbol(math, ams, rel, "\u2251", "\\Doteq", true); // AMS Binary Operators

    defineSymbol(math, ams, bin, "\u2214", "\\dotplus", true);
    defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
    defineSymbol(math, ams, bin, "\u22d2", "\\Cap", true);
    defineSymbol(math, ams, bin, "\u22d3", "\\Cup", true);
    defineSymbol(math, ams, bin, "\u2a5e", "\\doublebarwedge", true);
    defineSymbol(math, ams, bin, "\u229f", "\\boxminus", true);
    defineSymbol(math, ams, bin, "\u229e", "\\boxplus", true);
    defineSymbol(math, ams, bin, "\u22c7", "\\divideontimes", true);
    defineSymbol(math, ams, bin, "\u22c9", "\\ltimes", true);
    defineSymbol(math, ams, bin, "\u22ca", "\\rtimes", true);
    defineSymbol(math, ams, bin, "\u22cb", "\\leftthreetimes", true);
    defineSymbol(math, ams, bin, "\u22cc", "\\rightthreetimes", true);
    defineSymbol(math, ams, bin, "\u22cf", "\\curlywedge", true);
    defineSymbol(math, ams, bin, "\u22ce", "\\curlyvee", true);
    defineSymbol(math, ams, bin, "\u229d", "\\circleddash", true);
    defineSymbol(math, ams, bin, "\u229b", "\\circledast", true);
    defineSymbol(math, ams, bin, "\u22c5", "\\centerdot");
    defineSymbol(math, ams, bin, "\u22ba", "\\intercal", true);
    defineSymbol(math, ams, bin, "\u22d2", "\\doublecap");
    defineSymbol(math, ams, bin, "\u22d3", "\\doublecup");
    defineSymbol(math, ams, bin, "\u22a0", "\\boxtimes", true); // AMS Arrows
    // Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
    // We'll map it to AMS function \dashrightarrow. It produces the same atom.

    defineSymbol(math, ams, rel, "\u21e2", "\\dashrightarrow", true); // unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.

    defineSymbol(math, ams, rel, "\u21e0", "\\dashleftarrow", true);
    defineSymbol(math, ams, rel, "\u21c7", "\\leftleftarrows", true);
    defineSymbol(math, ams, rel, "\u21c6", "\\leftrightarrows", true);
    defineSymbol(math, ams, rel, "\u21da", "\\Lleftarrow", true);
    defineSymbol(math, ams, rel, "\u219e", "\\twoheadleftarrow", true);
    defineSymbol(math, ams, rel, "\u21a2", "\\leftarrowtail", true);
    defineSymbol(math, ams, rel, "\u21ab", "\\looparrowleft", true);
    defineSymbol(math, ams, rel, "\u21cb", "\\leftrightharpoons", true);
    defineSymbol(math, ams, rel, "\u21b6", "\\curvearrowleft", true); // unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.

    defineSymbol(math, ams, rel, "\u21ba", "\\circlearrowleft", true);
    defineSymbol(math, ams, rel, "\u21b0", "\\Lsh", true);
    defineSymbol(math, ams, rel, "\u21c8", "\\upuparrows", true);
    defineSymbol(math, ams, rel, "\u21bf", "\\upharpoonleft", true);
    defineSymbol(math, ams, rel, "\u21c3", "\\downharpoonleft", true);
    defineSymbol(math, main$1, rel, "\u22b6", "\\origof", true); // not in font

    defineSymbol(math, main$1, rel, "\u22b7", "\\imageof", true); // not in font

    defineSymbol(math, ams, rel, "\u22b8", "\\multimap", true);
    defineSymbol(math, ams, rel, "\u21ad", "\\leftrightsquigarrow", true);
    defineSymbol(math, ams, rel, "\u21c9", "\\rightrightarrows", true);
    defineSymbol(math, ams, rel, "\u21c4", "\\rightleftarrows", true);
    defineSymbol(math, ams, rel, "\u21a0", "\\twoheadrightarrow", true);
    defineSymbol(math, ams, rel, "\u21a3", "\\rightarrowtail", true);
    defineSymbol(math, ams, rel, "\u21ac", "\\looparrowright", true);
    defineSymbol(math, ams, rel, "\u21b7", "\\curvearrowright", true); // unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.

    defineSymbol(math, ams, rel, "\u21bb", "\\circlearrowright", true);
    defineSymbol(math, ams, rel, "\u21b1", "\\Rsh", true);
    defineSymbol(math, ams, rel, "\u21ca", "\\downdownarrows", true);
    defineSymbol(math, ams, rel, "\u21be", "\\upharpoonright", true);
    defineSymbol(math, ams, rel, "\u21c2", "\\downharpoonright", true);
    defineSymbol(math, ams, rel, "\u21dd", "\\rightsquigarrow", true);
    defineSymbol(math, ams, rel, "\u21dd", "\\leadsto");
    defineSymbol(math, ams, rel, "\u21db", "\\Rrightarrow", true);
    defineSymbol(math, ams, rel, "\u21be", "\\restriction");
    defineSymbol(math, main$1, textord, "\u2018", "`");
    defineSymbol(math, main$1, textord, "$", "\\$");
    defineSymbol(text, main$1, textord, "$", "\\$");
    defineSymbol(text, main$1, textord, "$", "\\textdollar");
    defineSymbol(math, main$1, textord, "%", "\\%");
    defineSymbol(text, main$1, textord, "%", "\\%");
    defineSymbol(math, main$1, textord, "_", "\\_");
    defineSymbol(text, main$1, textord, "_", "\\_");
    defineSymbol(text, main$1, textord, "_", "\\textunderscore");
    defineSymbol(math, main$1, textord, "\u2220", "\\angle", true);
    defineSymbol(math, main$1, textord, "\u221e", "\\infty", true);
    defineSymbol(math, main$1, textord, "\u2032", "\\prime");
    defineSymbol(math, main$1, textord, "\u25b3", "\\triangle");
    defineSymbol(math, main$1, textord, "\u0393", "\\Gamma", true);
    defineSymbol(math, main$1, textord, "\u0394", "\\Delta", true);
    defineSymbol(math, main$1, textord, "\u0398", "\\Theta", true);
    defineSymbol(math, main$1, textord, "\u039b", "\\Lambda", true);
    defineSymbol(math, main$1, textord, "\u039e", "\\Xi", true);
    defineSymbol(math, main$1, textord, "\u03a0", "\\Pi", true);
    defineSymbol(math, main$1, textord, "\u03a3", "\\Sigma", true);
    defineSymbol(math, main$1, textord, "\u03a5", "\\Upsilon", true);
    defineSymbol(math, main$1, textord, "\u03a6", "\\Phi", true);
    defineSymbol(math, main$1, textord, "\u03a8", "\\Psi", true);
    defineSymbol(math, main$1, textord, "\u03a9", "\\Omega", true);
    defineSymbol(math, main$1, textord, "A", "\u0391");
    defineSymbol(math, main$1, textord, "B", "\u0392");
    defineSymbol(math, main$1, textord, "E", "\u0395");
    defineSymbol(math, main$1, textord, "Z", "\u0396");
    defineSymbol(math, main$1, textord, "H", "\u0397");
    defineSymbol(math, main$1, textord, "I", "\u0399");
    defineSymbol(math, main$1, textord, "K", "\u039A");
    defineSymbol(math, main$1, textord, "M", "\u039C");
    defineSymbol(math, main$1, textord, "N", "\u039D");
    defineSymbol(math, main$1, textord, "O", "\u039F");
    defineSymbol(math, main$1, textord, "P", "\u03A1");
    defineSymbol(math, main$1, textord, "T", "\u03A4");
    defineSymbol(math, main$1, textord, "X", "\u03A7");
    defineSymbol(math, main$1, textord, "\u00ac", "\\neg", true);
    defineSymbol(math, main$1, textord, "\u00ac", "\\lnot");
    defineSymbol(math, main$1, textord, "\u22a4", "\\top");
    defineSymbol(math, main$1, textord, "\u22a5", "\\bot");
    defineSymbol(math, main$1, textord, "\u2205", "\\emptyset");
    defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
    defineSymbol(math, main$1, mathord, "\u03b1", "\\alpha", true);
    defineSymbol(math, main$1, mathord, "\u03b2", "\\beta", true);
    defineSymbol(math, main$1, mathord, "\u03b3", "\\gamma", true);
    defineSymbol(math, main$1, mathord, "\u03b4", "\\delta", true);
    defineSymbol(math, main$1, mathord, "\u03f5", "\\epsilon", true);
    defineSymbol(math, main$1, mathord, "\u03b6", "\\zeta", true);
    defineSymbol(math, main$1, mathord, "\u03b7", "\\eta", true);
    defineSymbol(math, main$1, mathord, "\u03b8", "\\theta", true);
    defineSymbol(math, main$1, mathord, "\u03b9", "\\iota", true);
    defineSymbol(math, main$1, mathord, "\u03ba", "\\kappa", true);
    defineSymbol(math, main$1, mathord, "\u03bb", "\\lambda", true);
    defineSymbol(math, main$1, mathord, "\u03bc", "\\mu", true);
    defineSymbol(math, main$1, mathord, "\u03bd", "\\nu", true);
    defineSymbol(math, main$1, mathord, "\u03be", "\\xi", true);
    defineSymbol(math, main$1, mathord, "\u03bf", "\\omicron", true);
    defineSymbol(math, main$1, mathord, "\u03c0", "\\pi", true);
    defineSymbol(math, main$1, mathord, "\u03c1", "\\rho", true);
    defineSymbol(math, main$1, mathord, "\u03c3", "\\sigma", true);
    defineSymbol(math, main$1, mathord, "\u03c4", "\\tau", true);
    defineSymbol(math, main$1, mathord, "\u03c5", "\\upsilon", true);
    defineSymbol(math, main$1, mathord, "\u03d5", "\\phi", true);
    defineSymbol(math, main$1, mathord, "\u03c7", "\\chi", true);
    defineSymbol(math, main$1, mathord, "\u03c8", "\\psi", true);
    defineSymbol(math, main$1, mathord, "\u03c9", "\\omega", true);
    defineSymbol(math, main$1, mathord, "\u03b5", "\\varepsilon", true);
    defineSymbol(math, main$1, mathord, "\u03d1", "\\vartheta", true);
    defineSymbol(math, main$1, mathord, "\u03d6", "\\varpi", true);
    defineSymbol(math, main$1, mathord, "\u03f1", "\\varrho", true);
    defineSymbol(math, main$1, mathord, "\u03c2", "\\varsigma", true);
    defineSymbol(math, main$1, mathord, "\u03c6", "\\varphi", true);
    defineSymbol(math, main$1, bin, "\u2217", "*", true);
    defineSymbol(math, main$1, bin, "+", "+");
    defineSymbol(math, main$1, bin, "\u2212", "-", true);
    defineSymbol(math, main$1, bin, "\u22c5", "\\cdot", true);
    defineSymbol(math, main$1, bin, "\u2218", "\\circ", true);
    defineSymbol(math, main$1, bin, "\u00f7", "\\div", true);
    defineSymbol(math, main$1, bin, "\u00b1", "\\pm", true);
    defineSymbol(math, main$1, bin, "\u00d7", "\\times", true);
    defineSymbol(math, main$1, bin, "\u2229", "\\cap", true);
    defineSymbol(math, main$1, bin, "\u222a", "\\cup", true);
    defineSymbol(math, main$1, bin, "\u2216", "\\setminus", true);
    defineSymbol(math, main$1, bin, "\u2227", "\\land");
    defineSymbol(math, main$1, bin, "\u2228", "\\lor");
    defineSymbol(math, main$1, bin, "\u2227", "\\wedge", true);
    defineSymbol(math, main$1, bin, "\u2228", "\\vee", true);
    defineSymbol(math, main$1, textord, "\u221a", "\\surd");
    defineSymbol(math, main$1, open, "\u27e8", "\\langle", true);
    defineSymbol(math, main$1, open, "\u2223", "\\lvert");
    defineSymbol(math, main$1, open, "\u2225", "\\lVert");
    defineSymbol(math, main$1, close, "?", "?");
    defineSymbol(math, main$1, close, "!", "!");
    defineSymbol(math, main$1, close, "\u27e9", "\\rangle", true);
    defineSymbol(math, main$1, close, "\u2223", "\\rvert");
    defineSymbol(math, main$1, close, "\u2225", "\\rVert");
    defineSymbol(math, main$1, rel, "=", "=");
    defineSymbol(math, main$1, rel, ":", ":");
    defineSymbol(math, main$1, rel, "\u2248", "\\approx", true);
    defineSymbol(math, main$1, rel, "\u2245", "\\cong", true);
    defineSymbol(math, main$1, rel, "\u2265", "\\ge");
    defineSymbol(math, main$1, rel, "\u2265", "\\geq", true);
    defineSymbol(math, main$1, rel, "\u2190", "\\gets");
    defineSymbol(math, main$1, rel, ">", "\\gt", true);
    defineSymbol(math, main$1, rel, "\u2208", "\\in", true);
    defineSymbol(math, main$1, rel, "\ue020", "\\@not");
    defineSymbol(math, main$1, rel, "\u2282", "\\subset", true);
    defineSymbol(math, main$1, rel, "\u2283", "\\supset", true);
    defineSymbol(math, main$1, rel, "\u2286", "\\subseteq", true);
    defineSymbol(math, main$1, rel, "\u2287", "\\supseteq", true);
    defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq", true);
    defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq", true);
    defineSymbol(math, main$1, rel, "\u22a8", "\\models");
    defineSymbol(math, main$1, rel, "\u2190", "\\leftarrow", true);
    defineSymbol(math, main$1, rel, "\u2264", "\\le");
    defineSymbol(math, main$1, rel, "\u2264", "\\leq", true);
    defineSymbol(math, main$1, rel, "<", "\\lt", true);
    defineSymbol(math, main$1, rel, "\u2192", "\\rightarrow", true);
    defineSymbol(math, main$1, rel, "\u2192", "\\to");
    defineSymbol(math, ams, rel, "\u2271", "\\ngeq", true);
    defineSymbol(math, ams, rel, "\u2270", "\\nleq", true);
    defineSymbol(math, main$1, spacing, "\u00a0", "\\ ");
    defineSymbol(math, main$1, spacing, "\u00a0", "\\space"); // Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%

    defineSymbol(math, main$1, spacing, "\u00a0", "\\nobreakspace");
    defineSymbol(text, main$1, spacing, "\u00a0", "\\ ");
    defineSymbol(text, main$1, spacing, "\u00a0", " ");
    defineSymbol(text, main$1, spacing, "\u00a0", "\\space");
    defineSymbol(text, main$1, spacing, "\u00a0", "\\nobreakspace");
    defineSymbol(math, main$1, spacing, null, "\\nobreak");
    defineSymbol(math, main$1, spacing, null, "\\allowbreak");
    defineSymbol(math, main$1, punct, ",", ",");
    defineSymbol(math, main$1, punct, ";", ";");
    defineSymbol(math, ams, bin, "\u22bc", "\\barwedge", true);
    defineSymbol(math, ams, bin, "\u22bb", "\\veebar", true);
    defineSymbol(math, main$1, bin, "\u2299", "\\odot", true);
    defineSymbol(math, main$1, bin, "\u2295", "\\oplus", true);
    defineSymbol(math, main$1, bin, "\u2297", "\\otimes", true);
    defineSymbol(math, main$1, textord, "\u2202", "\\partial", true);
    defineSymbol(math, main$1, bin, "\u2298", "\\oslash", true);
    defineSymbol(math, ams, bin, "\u229a", "\\circledcirc", true);
    defineSymbol(math, ams, bin, "\u22a1", "\\boxdot", true);
    defineSymbol(math, main$1, bin, "\u25b3", "\\bigtriangleup");
    defineSymbol(math, main$1, bin, "\u25bd", "\\bigtriangledown");
    defineSymbol(math, main$1, bin, "\u2020", "\\dagger");
    defineSymbol(math, main$1, bin, "\u22c4", "\\diamond");
    defineSymbol(math, main$1, bin, "\u22c6", "\\star");
    defineSymbol(math, main$1, bin, "\u25c3", "\\triangleleft");
    defineSymbol(math, main$1, bin, "\u25b9", "\\triangleright");
    defineSymbol(math, main$1, open, "{", "\\{");
    defineSymbol(text, main$1, textord, "{", "\\{");
    defineSymbol(text, main$1, textord, "{", "\\textbraceleft");
    defineSymbol(math, main$1, close, "}", "\\}");
    defineSymbol(text, main$1, textord, "}", "\\}");
    defineSymbol(text, main$1, textord, "}", "\\textbraceright");
    defineSymbol(math, main$1, open, "{", "\\lbrace");
    defineSymbol(math, main$1, close, "}", "\\rbrace");
    defineSymbol(math, main$1, open, "[", "\\lbrack", true);
    defineSymbol(text, main$1, textord, "[", "\\lbrack", true);
    defineSymbol(math, main$1, close, "]", "\\rbrack", true);
    defineSymbol(text, main$1, textord, "]", "\\rbrack", true);
    defineSymbol(math, main$1, open, "(", "\\lparen", true);
    defineSymbol(math, main$1, close, ")", "\\rparen", true);
    defineSymbol(text, main$1, textord, "<", "\\textless", true); // in T1 fontenc

    defineSymbol(text, main$1, textord, ">", "\\textgreater", true); // in T1 fontenc

    defineSymbol(math, main$1, open, "\u230a", "\\lfloor", true);
    defineSymbol(math, main$1, close, "\u230b", "\\rfloor", true);
    defineSymbol(math, main$1, open, "\u2308", "\\lceil", true);
    defineSymbol(math, main$1, close, "\u2309", "\\rceil", true);
    defineSymbol(math, main$1, textord, "\\", "\\backslash");
    defineSymbol(math, main$1, textord, "\u2223", "|");
    defineSymbol(math, main$1, textord, "\u2223", "\\vert");
    defineSymbol(text, main$1, textord, "|", "\\textbar", true); // in T1 fontenc

    defineSymbol(math, main$1, textord, "\u2225", "\\|");
    defineSymbol(math, main$1, textord, "\u2225", "\\Vert");
    defineSymbol(text, main$1, textord, "\u2225", "\\textbardbl");
    defineSymbol(text, main$1, textord, "~", "\\textasciitilde");
    defineSymbol(text, main$1, textord, "\\", "\\textbackslash");
    defineSymbol(text, main$1, textord, "^", "\\textasciicircum");
    defineSymbol(math, main$1, rel, "\u2191", "\\uparrow", true);
    defineSymbol(math, main$1, rel, "\u21d1", "\\Uparrow", true);
    defineSymbol(math, main$1, rel, "\u2193", "\\downarrow", true);
    defineSymbol(math, main$1, rel, "\u21d3", "\\Downarrow", true);
    defineSymbol(math, main$1, rel, "\u2195", "\\updownarrow", true);
    defineSymbol(math, main$1, rel, "\u21d5", "\\Updownarrow", true);
    defineSymbol(math, main$1, op, "\u2210", "\\coprod");
    defineSymbol(math, main$1, op, "\u22c1", "\\bigvee");
    defineSymbol(math, main$1, op, "\u22c0", "\\bigwedge");
    defineSymbol(math, main$1, op, "\u2a04", "\\biguplus");
    defineSymbol(math, main$1, op, "\u22c2", "\\bigcap");
    defineSymbol(math, main$1, op, "\u22c3", "\\bigcup");
    defineSymbol(math, main$1, op, "\u222b", "\\int");
    defineSymbol(math, main$1, op, "\u222b", "\\intop");
    defineSymbol(math, main$1, op, "\u222c", "\\iint");
    defineSymbol(math, main$1, op, "\u222d", "\\iiint");
    defineSymbol(math, main$1, op, "\u220f", "\\prod");
    defineSymbol(math, main$1, op, "\u2211", "\\sum");
    defineSymbol(math, main$1, op, "\u2a02", "\\bigotimes");
    defineSymbol(math, main$1, op, "\u2a01", "\\bigoplus");
    defineSymbol(math, main$1, op, "\u2a00", "\\bigodot");
    defineSymbol(math, main$1, op, "\u222e", "\\oint");
    defineSymbol(math, main$1, op, "\u222f", "\\oiint");
    defineSymbol(math, main$1, op, "\u2230", "\\oiiint");
    defineSymbol(math, main$1, op, "\u2a06", "\\bigsqcup");
    defineSymbol(math, main$1, op, "\u222b", "\\smallint");
    defineSymbol(text, main$1, inner, "\u2026", "\\textellipsis");
    defineSymbol(math, main$1, inner, "\u2026", "\\mathellipsis");
    defineSymbol(text, main$1, inner, "\u2026", "\\ldots", true);
    defineSymbol(math, main$1, inner, "\u2026", "\\ldots", true);
    defineSymbol(math, main$1, inner, "\u22ef", "\\@cdots", true);
    defineSymbol(math, main$1, inner, "\u22f1", "\\ddots", true);
    defineSymbol(math, main$1, textord, "\u22ee", "\\varvdots"); // \vdots is a macro

    defineSymbol(math, main$1, accent, "\u02ca", "\\acute");
    defineSymbol(math, main$1, accent, "\u02cb", "\\grave");
    defineSymbol(math, main$1, accent, "\u00a8", "\\ddot");
    defineSymbol(math, main$1, accent, "\u007e", "\\tilde");
    defineSymbol(math, main$1, accent, "\u02c9", "\\bar");
    defineSymbol(math, main$1, accent, "\u02d8", "\\breve");
    defineSymbol(math, main$1, accent, "\u02c7", "\\check");
    defineSymbol(math, main$1, accent, "\u005e", "\\hat");
    defineSymbol(math, main$1, accent, "\u20d7", "\\vec");
    defineSymbol(math, main$1, accent, "\u02d9", "\\dot");
    defineSymbol(math, main$1, accent, "\u02da", "\\mathring"); // \imath and \jmath should be invariant to \mathrm, \mathbf, etc., so use PUA

    defineSymbol(math, main$1, mathord, "\ue131", "\\@imath");
    defineSymbol(math, main$1, mathord, "\ue237", "\\@jmath");
    defineSymbol(math, main$1, textord, "\u0131", "\u0131");
    defineSymbol(math, main$1, textord, "\u0237", "\u0237");
    defineSymbol(text, main$1, textord, "\u0131", "\\i", true);
    defineSymbol(text, main$1, textord, "\u0237", "\\j", true);
    defineSymbol(text, main$1, textord, "\u00df", "\\ss", true);
    defineSymbol(text, main$1, textord, "\u00e6", "\\ae", true);
    defineSymbol(text, main$1, textord, "\u0153", "\\oe", true);
    defineSymbol(text, main$1, textord, "\u00f8", "\\o", true);
    defineSymbol(text, main$1, textord, "\u00c6", "\\AE", true);
    defineSymbol(text, main$1, textord, "\u0152", "\\OE", true);
    defineSymbol(text, main$1, textord, "\u00d8", "\\O", true);
    defineSymbol(text, main$1, accent, "\u02ca", "\\'"); // acute

    defineSymbol(text, main$1, accent, "\u02cb", "\\`"); // grave

    defineSymbol(text, main$1, accent, "\u02c6", "\\^"); // circumflex

    defineSymbol(text, main$1, accent, "\u02dc", "\\~"); // tilde

    defineSymbol(text, main$1, accent, "\u02c9", "\\="); // macron

    defineSymbol(text, main$1, accent, "\u02d8", "\\u"); // breve

    defineSymbol(text, main$1, accent, "\u02d9", "\\."); // dot above

    defineSymbol(text, main$1, accent, "\u00b8", "\\c"); // cedilla

    defineSymbol(text, main$1, accent, "\u02da", "\\r"); // ring above

    defineSymbol(text, main$1, accent, "\u02c7", "\\v"); // caron

    defineSymbol(text, main$1, accent, "\u00a8", '\\"'); // diaresis

    defineSymbol(text, main$1, accent, "\u02dd", "\\H"); // double acute

    defineSymbol(text, main$1, accent, "\u25ef", "\\textcircled"); // \bigcirc glyph
    // These ligatures are detected and created in Parser.js's `formLigatures`.

    var ligatures = {
      "--": true,
      "---": true,
      "``": true,
      "''": true
    };
    defineSymbol(text, main$1, textord, "\u2013", "--", true);
    defineSymbol(text, main$1, textord, "\u2013", "\\textendash");
    defineSymbol(text, main$1, textord, "\u2014", "---", true);
    defineSymbol(text, main$1, textord, "\u2014", "\\textemdash");
    defineSymbol(text, main$1, textord, "\u2018", "`", true);
    defineSymbol(text, main$1, textord, "\u2018", "\\textquoteleft");
    defineSymbol(text, main$1, textord, "\u2019", "'", true);
    defineSymbol(text, main$1, textord, "\u2019", "\\textquoteright");
    defineSymbol(text, main$1, textord, "\u201c", "``", true);
    defineSymbol(text, main$1, textord, "\u201c", "\\textquotedblleft");
    defineSymbol(text, main$1, textord, "\u201d", "''", true);
    defineSymbol(text, main$1, textord, "\u201d", "\\textquotedblright"); //  \degree from gensymb package

    defineSymbol(math, main$1, textord, "\u00b0", "\\degree", true);
    defineSymbol(text, main$1, textord, "\u00b0", "\\degree"); // \textdegree from inputenc package

    defineSymbol(text, main$1, textord, "\u00b0", "\\textdegree", true); // TODO: In LaTeX, \pounds can generate a different character in text and math
    // mode, but among our fonts, only Main-Regular defines this character "163".

    defineSymbol(math, main$1, textord, "\u00a3", "\\pounds");
    defineSymbol(math, main$1, textord, "\u00a3", "\\mathsterling", true);
    defineSymbol(text, main$1, textord, "\u00a3", "\\pounds");
    defineSymbol(text, main$1, textord, "\u00a3", "\\textsterling", true);
    defineSymbol(math, ams, textord, "\u2720", "\\maltese");
    defineSymbol(text, ams, textord, "\u2720", "\\maltese"); // There are lots of symbols which are the same, so we add them in afterwards.
    // All of these are textords in math mode

    var mathTextSymbols = "0123456789/@.\"";

    for (var i = 0; i < mathTextSymbols.length; i++) {
      var ch = mathTextSymbols.charAt(i);
      defineSymbol(math, main$1, textord, ch, ch);
    } // All of these are textords in text mode


    var textSymbols = "0123456789!@*()-=+\";:?/.,";

    for (var _i = 0; _i < textSymbols.length; _i++) {
      var _ch = textSymbols.charAt(_i);

      defineSymbol(text, main$1, textord, _ch, _ch);
    } // All of these are textords in text mode, and mathords in math mode


    var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

    for (var _i2 = 0; _i2 < letters.length; _i2++) {
      var _ch2 = letters.charAt(_i2);

      defineSymbol(math, main$1, mathord, _ch2, _ch2);
      defineSymbol(text, main$1, textord, _ch2, _ch2);
    } // Blackboard bold and script letters in Unicode range


    defineSymbol(math, ams, textord, "C", "\u2102"); // blackboard bold

    defineSymbol(text, ams, textord, "C", "\u2102");
    defineSymbol(math, ams, textord, "H", "\u210D");
    defineSymbol(text, ams, textord, "H", "\u210D");
    defineSymbol(math, ams, textord, "N", "\u2115");
    defineSymbol(text, ams, textord, "N", "\u2115");
    defineSymbol(math, ams, textord, "P", "\u2119");
    defineSymbol(text, ams, textord, "P", "\u2119");
    defineSymbol(math, ams, textord, "Q", "\u211A");
    defineSymbol(text, ams, textord, "Q", "\u211A");
    defineSymbol(math, ams, textord, "R", "\u211D");
    defineSymbol(text, ams, textord, "R", "\u211D");
    defineSymbol(math, ams, textord, "Z", "\u2124");
    defineSymbol(text, ams, textord, "Z", "\u2124");
    defineSymbol(math, main$1, mathord, "h", "\u210E"); // italic h, Planck constant

    defineSymbol(text, main$1, mathord, "h", "\u210E"); // The next loop loads wide (surrogate pair) characters.
    // We support some letters in the Unicode range U+1D400 to U+1D7FF,
    // Mathematical Alphanumeric Symbols.
    // Some editors do not deal well with wide characters. So don't write the
    // string into this file. Instead, create the string from the surrogate pair.

    var wideChar = "";

    for (var _i3 = 0; _i3 < letters.length; _i3++) {
      var _ch3 = letters.charAt(_i3); // The hex numbers in the next line are a surrogate pair.
      // 0xD835 is the high surrogate for all letters in the range we support.
      // 0xDC00 is the low surrogate for bold A.


      wideChar = String.fromCharCode(0xD835, 0xDC00 + _i3); // A-Z a-z bold

      defineSymbol(math, main$1, mathord, _ch3, wideChar);
      defineSymbol(text, main$1, textord, _ch3, wideChar);
      wideChar = String.fromCharCode(0xD835, 0xDC34 + _i3); // A-Z a-z italic

      defineSymbol(math, main$1, mathord, _ch3, wideChar);
      defineSymbol(text, main$1, textord, _ch3, wideChar);
      wideChar = String.fromCharCode(0xD835, 0xDC68 + _i3); // A-Z a-z bold italic

      defineSymbol(math, main$1, mathord, _ch3, wideChar);
      defineSymbol(text, main$1, textord, _ch3, wideChar);
      wideChar = String.fromCharCode(0xD835, 0xDD04 + _i3); // A-Z a-z Fractur

      defineSymbol(math, main$1, mathord, _ch3, wideChar);
      defineSymbol(text, main$1, textord, _ch3, wideChar);
      wideChar = String.fromCharCode(0xD835, 0xDDA0 + _i3); // A-Z a-z sans-serif

      defineSymbol(math, main$1, mathord, _ch3, wideChar);
      defineSymbol(text, main$1, textord, _ch3, wideChar);
      wideChar = String.fromCharCode(0xD835, 0xDDD4 + _i3); // A-Z a-z sans bold

      defineSymbol(math, main$1, mathord, _ch3, wideChar);
      defineSymbol(text, main$1, textord, _ch3, wideChar);
      wideChar = String.fromCharCode(0xD835, 0xDE08 + _i3); // A-Z a-z sans italic

      defineSymbol(math, main$1, mathord, _ch3, wideChar);
      defineSymbol(text, main$1, textord, _ch3, wideChar);
      wideChar = String.fromCharCode(0xD835, 0xDE70 + _i3); // A-Z a-z monospace

      defineSymbol(math, main$1, mathord, _ch3, wideChar);
      defineSymbol(text, main$1, textord, _ch3, wideChar);

      if (_i3 < 26) {
        // KaTeX fonts have only capital letters for blackboard bold and script.
        // See exception for k below.
        wideChar = String.fromCharCode(0xD835, 0xDD38 + _i3); // A-Z double struck

        defineSymbol(math, main$1, mathord, _ch3, wideChar);
        defineSymbol(text, main$1, textord, _ch3, wideChar);
        wideChar = String.fromCharCode(0xD835, 0xDC9C + _i3); // A-Z script

        defineSymbol(math, main$1, mathord, _ch3, wideChar);
        defineSymbol(text, main$1, textord, _ch3, wideChar);
      } // TODO: Add bold script when it is supported by a KaTeX font.

    } // "k" is the only double struck lower case letter in the KaTeX fonts.


    wideChar = String.fromCharCode(0xD835, 0xDD5C); // k double struck

    defineSymbol(math, main$1, mathord, "k", wideChar);
    defineSymbol(text, main$1, textord, "k", wideChar); // Next, some wide character numerals

    for (var _i4 = 0; _i4 < 10; _i4++) {
      var _ch4 = _i4.toString();

      wideChar = String.fromCharCode(0xD835, 0xDFCE + _i4); // 0-9 bold

      defineSymbol(math, main$1, mathord, _ch4, wideChar);
      defineSymbol(text, main$1, textord, _ch4, wideChar);
      wideChar = String.fromCharCode(0xD835, 0xDFE2 + _i4); // 0-9 sans serif

      defineSymbol(math, main$1, mathord, _ch4, wideChar);
      defineSymbol(text, main$1, textord, _ch4, wideChar);
      wideChar = String.fromCharCode(0xD835, 0xDFEC + _i4); // 0-9 bold sans

      defineSymbol(math, main$1, mathord, _ch4, wideChar);
      defineSymbol(text, main$1, textord, _ch4, wideChar);
      wideChar = String.fromCharCode(0xD835, 0xDFF6 + _i4); // 0-9 monospace

      defineSymbol(math, main$1, mathord, _ch4, wideChar);
      defineSymbol(text, main$1, textord, _ch4, wideChar);
    } // We add these Latin-1 letters as symbols for backwards-compatibility,
    // but they are not actually in the font, nor are they supported by the
    // Unicode accent mechanism, so they fall back to Times font and look ugly.
    // TODO(edemaine): Fix this.


    var extraLatin = "\u00d0\u00de\u00fe";

    for (var _i5 = 0; _i5 < extraLatin.length; _i5++) {
      var _ch5 = extraLatin.charAt(_i5);

      defineSymbol(math, main$1, mathord, _ch5, _ch5);
      defineSymbol(text, main$1, textord, _ch5, _ch5);
    }

    /**
     * This file provides support for Unicode range U+1D400 to U+1D7FF,
     * Mathematical Alphanumeric Symbols.
     *
     * Function wideCharacterFont takes a wide character as input and returns
     * the font information necessary to render it properly.
     */
    /**
     * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf
     * That document sorts characters into groups by font type, say bold or italic.
     *
     * In the arrays below, each subarray consists three elements:
     *      * The CSS class of that group when in math mode.
     *      * The CSS class of that group when in text mode.
     *      * The font name, so that KaTeX can get font metrics.
     */

    var wideLatinLetterData = [["mathbf", "textbf", "Main-Bold"], // A-Z bold upright
    ["mathbf", "textbf", "Main-Bold"], // a-z bold upright
    ["mathnormal", "textit", "Math-Italic"], // A-Z italic
    ["mathnormal", "textit", "Math-Italic"], // a-z italic
    ["boldsymbol", "boldsymbol", "Main-BoldItalic"], // A-Z bold italic
    ["boldsymbol", "boldsymbol", "Main-BoldItalic"], // a-z bold italic
    // Map fancy A-Z letters to script, not calligraphic.
    // This aligns with unicode-math and math fonts (except Cambria Math).
    ["mathscr", "textscr", "Script-Regular"], // A-Z script
    ["", "", ""], // a-z script.  No font
    ["", "", ""], // A-Z bold script. No font
    ["", "", ""], // a-z bold script. No font
    ["mathfrak", "textfrak", "Fraktur-Regular"], // A-Z Fraktur
    ["mathfrak", "textfrak", "Fraktur-Regular"], // a-z Fraktur
    ["mathbb", "textbb", "AMS-Regular"], // A-Z double-struck
    ["mathbb", "textbb", "AMS-Regular"], // k double-struck
    ["", "", ""], // A-Z bold Fraktur No font metrics
    ["", "", ""], // a-z bold Fraktur.   No font.
    ["mathsf", "textsf", "SansSerif-Regular"], // A-Z sans-serif
    ["mathsf", "textsf", "SansSerif-Regular"], // a-z sans-serif
    ["mathboldsf", "textboldsf", "SansSerif-Bold"], // A-Z bold sans-serif
    ["mathboldsf", "textboldsf", "SansSerif-Bold"], // a-z bold sans-serif
    ["mathitsf", "textitsf", "SansSerif-Italic"], // A-Z italic sans-serif
    ["mathitsf", "textitsf", "SansSerif-Italic"], // a-z italic sans-serif
    ["", "", ""], // A-Z bold italic sans. No font
    ["", "", ""], // a-z bold italic sans. No font
    ["mathtt", "texttt", "Typewriter-Regular"], // A-Z monospace
    ["mathtt", "texttt", "Typewriter-Regular"] // a-z monospace
    ];
    var wideNumeralData = [["mathbf", "textbf", "Main-Bold"], // 0-9 bold
    ["", "", ""], // 0-9 double-struck. No KaTeX font.
    ["mathsf", "textsf", "SansSerif-Regular"], // 0-9 sans-serif
    ["mathboldsf", "textboldsf", "SansSerif-Bold"], // 0-9 bold sans-serif
    ["mathtt", "texttt", "Typewriter-Regular"] // 0-9 monospace
    ];
    var wideCharacterFont = function wideCharacterFont(wideChar, mode) {
      // IE doesn't support codePointAt(). So work with the surrogate pair.
      var H = wideChar.charCodeAt(0); // high surrogate

      var L = wideChar.charCodeAt(1); // low surrogate

      var codePoint = (H - 0xD800) * 0x400 + (L - 0xDC00) + 0x10000;
      var j = mode === "math" ? 0 : 1; // column index for CSS class.

      if (0x1D400 <= codePoint && codePoint < 0x1D6A4) {
        // wideLatinLetterData contains exactly 26 chars on each row.
        // So we can calculate the relevant row. No traverse necessary.
        var i = Math.floor((codePoint - 0x1D400) / 26);
        return [wideLatinLetterData[i][2], wideLatinLetterData[i][j]];
      } else if (0x1D7CE <= codePoint && codePoint <= 0x1D7FF) {
        // Numerals, ten per row.
        var _i = Math.floor((codePoint - 0x1D7CE) / 10);

        return [wideNumeralData[_i][2], wideNumeralData[_i][j]];
      } else if (codePoint === 0x1D6A5 || codePoint === 0x1D6A6) {
        // dotless i or j
        return [wideLatinLetterData[0][2], wideLatinLetterData[0][j]];
      } else if (0x1D6A6 < codePoint && codePoint < 0x1D7CE) {
        // Greek letters. Not supported, yet.
        return ["", ""];
      } else {
        // We don't support any wide characters outside 1D400–1D7FF.
        throw new ParseError("Unsupported character: " + wideChar);
      }
    };

    /* eslint no-console:0 */

    /**
     * Looks up the given symbol in fontMetrics, after applying any symbol
     * replacements defined in symbol.js
     */
    var lookupSymbol = function lookupSymbol(value, // TODO(#963): Use a union type for this.
    fontName, mode) {
      // Replace the value with its replaced value from symbol.js
      if (symbols[mode][value] && symbols[mode][value].replace) {
        value = symbols[mode][value].replace;
      }

      return {
        value: value,
        metrics: getCharacterMetrics(value, fontName, mode)
      };
    };
    /**
     * Makes a symbolNode after translation via the list of symbols in symbols.js.
     * Correctly pulls out metrics for the character, and optionally takes a list of
     * classes to be attached to the node.
     *
     * TODO: make argument order closer to makeSpan
     * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
     * should if present come first in `classes`.
     * TODO(#953): Make `options` mandatory and always pass it in.
     */


    var makeSymbol = function makeSymbol(value, fontName, mode, options, classes) {
      var lookup = lookupSymbol(value, fontName, mode);
      var metrics = lookup.metrics;
      value = lookup.value;
      var symbolNode;

      if (metrics) {
        var italic = metrics.italic;

        if (mode === "text" || options && options.font === "mathit") {
          italic = 0;
        }

        symbolNode = new SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
      } else {
        // TODO(emily): Figure out a good way to only print this in development
        typeof console !== "undefined" && console.warn("No character metrics " + ("for '" + value + "' in style '" + fontName + "' and mode '" + mode + "'"));
        symbolNode = new SymbolNode(value, 0, 0, 0, 0, 0, classes);
      }

      if (options) {
        symbolNode.maxFontSize = options.sizeMultiplier;

        if (options.style.isTight()) {
          symbolNode.classes.push("mtight");
        }

        var color = options.getColor();

        if (color) {
          symbolNode.style.color = color;
        }
      }

      return symbolNode;
    };
    /**
     * Makes a symbol in Main-Regular or AMS-Regular.
     * Used for rel, bin, open, close, inner, and punct.
     */


    var mathsym = function mathsym(value, mode, options, classes) {
      if (classes === void 0) {
        classes = [];
      }

      // Decide what font to render the symbol in by its entry in the symbols
      // table.
      // Have a special case for when the value = \ because the \ is used as a
      // textord in unsupported command errors but cannot be parsed as a regular
      // text ordinal and is therefore not present as a symbol in the symbols
      // table for text, as well as a special case for boldsymbol because it
      // can be used for bold + and -
      if (options.font === "boldsymbol" && lookupSymbol(value, "Main-Bold", mode).metrics) {
        return makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
      } else if (value === "\\" || symbols[mode][value].font === "main") {
        return makeSymbol(value, "Main-Regular", mode, options, classes);
      } else {
        return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
      }
    };
    /**
     * Determines which of the two font names (Main-Bold and Math-BoldItalic) and
     * corresponding style tags (mathbf or boldsymbol) to use for font "boldsymbol",
     * depending on the symbol.  Use this function instead of fontMap for font
     * "boldsymbol".
     */


    var boldsymbol = function boldsymbol(value, mode, options, classes, type) {
      if (type !== "textord" && lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
        return {
          fontName: "Math-BoldItalic",
          fontClass: "boldsymbol"
        };
      } else {
        // Some glyphs do not exist in Math-BoldItalic so we need to use
        // Main-Bold instead.
        return {
          fontName: "Main-Bold",
          fontClass: "mathbf"
        };
      }
    };
    /**
     * Makes either a mathord or textord in the correct font and color.
     */


    var makeOrd = function makeOrd(group, options, type) {
      var mode = group.mode;
      var text = group.text;
      var classes = ["mord"]; // Math mode or Old font (i.e. \rm)

      var isFont = mode === "math" || mode === "text" && options.font;
      var fontOrFamily = isFont ? options.font : options.fontFamily;

      if (text.charCodeAt(0) === 0xD835) {
        // surrogate pairs get special treatment
        var [wideFontName, wideFontClass] = wideCharacterFont(text, mode);
        return makeSymbol(text, wideFontName, mode, options, classes.concat(wideFontClass));
      } else if (fontOrFamily) {
        var fontName;
        var fontClasses;

        if (fontOrFamily === "boldsymbol") {
          var fontData = boldsymbol(text, mode, options, classes, type);
          fontName = fontData.fontName;
          fontClasses = [fontData.fontClass];
        } else if (isFont) {
          fontName = fontMap[fontOrFamily].fontName;
          fontClasses = [fontOrFamily];
        } else {
          fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);
          fontClasses = [fontOrFamily, options.fontWeight, options.fontShape];
        }

        if (lookupSymbol(text, fontName, mode).metrics) {
          return makeSymbol(text, fontName, mode, options, classes.concat(fontClasses));
        } else if (ligatures.hasOwnProperty(text) && fontName.substr(0, 10) === "Typewriter") {
          // Deconstruct ligatures in monospace fonts (\texttt, \tt).
          var parts = [];

          for (var i = 0; i < text.length; i++) {
            parts.push(makeSymbol(text[i], fontName, mode, options, classes.concat(fontClasses)));
          }

          return makeFragment(parts);
        }
      } // Makes a symbol in the default font for mathords and textords.


      if (type === "mathord") {
        return makeSymbol(text, "Math-Italic", mode, options, classes.concat(["mathnormal"]));
      } else if (type === "textord") {
        var font = symbols[mode][text] && symbols[mode][text].font;

        if (font === "ams") {
          var _fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);

          return makeSymbol(text, _fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
        } else if (font === "main" || !font) {
          var _fontName2 = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);

          return makeSymbol(text, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));
        } else {
          // fonts added by plugins
          var _fontName3 = retrieveTextFontName(font, options.fontWeight, options.fontShape); // We add font name as a css class


          return makeSymbol(text, _fontName3, mode, options, classes.concat(_fontName3, options.fontWeight, options.fontShape));
        }
      } else {
        throw new Error("unexpected type: " + type + " in makeOrd");
      }
    };
    /**
     * Returns true if subsequent symbolNodes have the same classes, skew, maxFont,
     * and styles.
     */


    var canCombine = (prev, next) => {
      if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {
        return false;
      } // If prev and next both are just "mbin"s or "mord"s we don't combine them
      // so that the proper spacing can be preserved.


      if (prev.classes.length === 1) {
        var cls = prev.classes[0];

        if (cls === "mbin" || cls === "mord") {
          return false;
        }
      }

      for (var style in prev.style) {
        if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
          return false;
        }
      }

      for (var _style in next.style) {
        if (next.style.hasOwnProperty(_style) && prev.style[_style] !== next.style[_style]) {
          return false;
        }
      }

      return true;
    };
    /**
     * Combine consecutive domTree.symbolNodes into a single symbolNode.
     * Note: this function mutates the argument.
     */


    var tryCombineChars = chars => {
      for (var i = 0; i < chars.length - 1; i++) {
        var prev = chars[i];
        var next = chars[i + 1];

        if (prev instanceof SymbolNode && next instanceof SymbolNode && canCombine(prev, next)) {
          prev.text += next.text;
          prev.height = Math.max(prev.height, next.height);
          prev.depth = Math.max(prev.depth, next.depth); // Use the last character's italic correction since we use
          // it to add padding to the right of the span created from
          // the combined characters.

          prev.italic = next.italic;
          chars.splice(i + 1, 1);
          i--;
        }
      }

      return chars;
    };
    /**
     * Calculate the height, depth, and maxFontSize of an element based on its
     * children.
     */


    var sizeElementFromChildren = function sizeElementFromChildren(elem) {
      var height = 0;
      var depth = 0;
      var maxFontSize = 0;

      for (var i = 0; i < elem.children.length; i++) {
        var child = elem.children[i];

        if (child.height > height) {
          height = child.height;
        }

        if (child.depth > depth) {
          depth = child.depth;
        }

        if (child.maxFontSize > maxFontSize) {
          maxFontSize = child.maxFontSize;
        }
      }

      elem.height = height;
      elem.depth = depth;
      elem.maxFontSize = maxFontSize;
    };
    /**
     * Makes a span with the given list of classes, list of children, and options.
     *
     * TODO(#953): Ensure that `options` is always provided (currently some call
     * sites don't pass it) and make the type below mandatory.
     * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
     * should if present come first in `classes`.
     */


    var makeSpan$2 = function makeSpan(classes, children, options, style) {
      var span = new Span(classes, children, options, style);
      sizeElementFromChildren(span);
      return span;
    }; // SVG one is simpler -- doesn't require height, depth, max-font setting.
    // This is also a separate method for typesafety.


    var makeSvgSpan = (classes, children, options, style) => new Span(classes, children, options, style);

    var makeLineSpan = function makeLineSpan(className, options, thickness) {
      var line = makeSpan$2([className], [], options);
      line.height = Math.max(thickness || options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
      line.style.borderBottomWidth = makeEm(line.height);
      line.maxFontSize = 1.0;
      return line;
    };
    /**
     * Makes an anchor with the given href, list of classes, list of children,
     * and options.
     */


    var makeAnchor = function makeAnchor(href, classes, children, options) {
      var anchor = new Anchor(href, classes, children, options);
      sizeElementFromChildren(anchor);
      return anchor;
    };
    /**
     * Makes a document fragment with the given list of children.
     */


    var makeFragment = function makeFragment(children) {
      var fragment = new DocumentFragment(children);
      sizeElementFromChildren(fragment);
      return fragment;
    };
    /**
     * Wraps group in a span if it's a document fragment, allowing to apply classes
     * and styles
     */


    var wrapFragment = function wrapFragment(group, options) {
      if (group instanceof DocumentFragment) {
        return makeSpan$2([], [group], options);
      }

      return group;
    }; // These are exact object types to catch typos in the names of the optional fields.


    // Computes the updated `children` list and the overall depth.
    //
    // This helper function for makeVList makes it easier to enforce type safety by
    // allowing early exits (returns) in the logic.
    var getVListChildrenAndDepth = function getVListChildrenAndDepth(params) {
      if (params.positionType === "individualShift") {
        var oldChildren = params.children;
        var children = [oldChildren[0]]; // Add in kerns to the list of params.children to get each element to be
        // shifted to the correct specified shift

        var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;

        var currPos = _depth;

        for (var i = 1; i < oldChildren.length; i++) {
          var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
          var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);
          currPos = currPos + diff;
          children.push({
            type: "kern",
            size
          });
          children.push(oldChildren[i]);
        }

        return {
          children,
          depth: _depth
        };
      }

      var depth;

      if (params.positionType === "top") {
        // We always start at the bottom, so calculate the bottom by adding up
        // all the sizes
        var bottom = params.positionData;

        for (var _i = 0; _i < params.children.length; _i++) {
          var child = params.children[_i];
          bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
        }

        depth = bottom;
      } else if (params.positionType === "bottom") {
        depth = -params.positionData;
      } else {
        var firstChild = params.children[0];

        if (firstChild.type !== "elem") {
          throw new Error('First child must have type "elem".');
        }

        if (params.positionType === "shift") {
          depth = -firstChild.elem.depth - params.positionData;
        } else if (params.positionType === "firstBaseline") {
          depth = -firstChild.elem.depth;
        } else {
          throw new Error("Invalid positionType " + params.positionType + ".");
        }
      }

      return {
        children: params.children,
        depth
      };
    };
    /**
     * Makes a vertical list by stacking elements and kerns on top of each other.
     * Allows for many different ways of specifying the positioning method.
     *
     * See VListParam documentation above.
     */


    var makeVList = function makeVList(params, options) {
      var {
        children,
        depth
      } = getVListChildrenAndDepth(params); // Create a strut that is taller than any list item. The strut is added to
      // each item, where it will determine the item's baseline. Since it has
      // `overflow:hidden`, the strut's top edge will sit on the item's line box's
      // top edge and the strut's bottom edge will sit on the item's baseline,
      // with no additional line-height spacing. This allows the item baseline to
      // be positioned precisely without worrying about font ascent and
      // line-height.

      var pstrutSize = 0;

      for (var i = 0; i < children.length; i++) {
        var child = children[i];

        if (child.type === "elem") {
          var elem = child.elem;
          pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);
        }
      }

      pstrutSize += 2;
      var pstrut = makeSpan$2(["pstrut"], []);
      pstrut.style.height = makeEm(pstrutSize); // Create a new list of actual children at the correct offsets

      var realChildren = [];
      var minPos = depth;
      var maxPos = depth;
      var currPos = depth;

      for (var _i2 = 0; _i2 < children.length; _i2++) {
        var _child = children[_i2];

        if (_child.type === "kern") {
          currPos += _child.size;
        } else {
          var _elem = _child.elem;
          var classes = _child.wrapperClasses || [];
          var style = _child.wrapperStyle || {};
          var childWrap = makeSpan$2(classes, [pstrut, _elem], undefined, style);
          childWrap.style.top = makeEm(-pstrutSize - currPos - _elem.depth);

          if (_child.marginLeft) {
            childWrap.style.marginLeft = _child.marginLeft;
          }

          if (_child.marginRight) {
            childWrap.style.marginRight = _child.marginRight;
          }

          realChildren.push(childWrap);
          currPos += _elem.height + _elem.depth;
        }

        minPos = Math.min(minPos, currPos);
        maxPos = Math.max(maxPos, currPos);
      } // The vlist contents go in a table-cell with `vertical-align:bottom`.
      // This cell's bottom edge will determine the containing table's baseline
      // without overly expanding the containing line-box.


      var vlist = makeSpan$2(["vlist"], realChildren);
      vlist.style.height = makeEm(maxPos); // A second row is used if necessary to represent the vlist's depth.

      var rows;

      if (minPos < 0) {
        // We will define depth in an empty span with display: table-cell.
        // It should render with the height that we define. But Chrome, in
        // contenteditable mode only, treats that span as if it contains some
        // text content. And that min-height over-rides our desired height.
        // So we put another empty span inside the depth strut span.
        var emptySpan = makeSpan$2([], []);
        var depthStrut = makeSpan$2(["vlist"], [emptySpan]);
        depthStrut.style.height = makeEm(-minPos); // Safari wants the first row to have inline content; otherwise it
        // puts the bottom of the *second* row on the baseline.

        var topStrut = makeSpan$2(["vlist-s"], [new SymbolNode("\u200b")]);
        rows = [makeSpan$2(["vlist-r"], [vlist, topStrut]), makeSpan$2(["vlist-r"], [depthStrut])];
      } else {
        rows = [makeSpan$2(["vlist-r"], [vlist])];
      }

      var vtable = makeSpan$2(["vlist-t"], rows);

      if (rows.length === 2) {
        vtable.classes.push("vlist-t2");
      }

      vtable.height = maxPos;
      vtable.depth = -minPos;
      return vtable;
    }; // Glue is a concept from TeX which is a flexible space between elements in
    // either a vertical or horizontal list. In KaTeX, at least for now, it's
    // static space between elements in a horizontal layout.


    var makeGlue = (measurement, options) => {
      // Make an empty span for the space
      var rule = makeSpan$2(["mspace"], [], options);
      var size = calculateSize(measurement, options);
      rule.style.marginRight = makeEm(size);
      return rule;
    }; // Takes font options, and returns the appropriate fontLookup name


    var retrieveTextFontName = function retrieveTextFontName(fontFamily, fontWeight, fontShape) {
      var baseFontName = "";

      switch (fontFamily) {
        case "amsrm":
          baseFontName = "AMS";
          break;

        case "textrm":
          baseFontName = "Main";
          break;

        case "textsf":
          baseFontName = "SansSerif";
          break;

        case "texttt":
          baseFontName = "Typewriter";
          break;

        default:
          baseFontName = fontFamily;
        // use fonts added by a plugin
      }

      var fontStylesName;

      if (fontWeight === "textbf" && fontShape === "textit") {
        fontStylesName = "BoldItalic";
      } else if (fontWeight === "textbf") {
        fontStylesName = "Bold";
      } else if (fontWeight === "textit") {
        fontStylesName = "Italic";
      } else {
        fontStylesName = "Regular";
      }

      return baseFontName + "-" + fontStylesName;
    };
    /**
     * Maps TeX font commands to objects containing:
     * - variant: string used for "mathvariant" attribute in buildMathML.js
     * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
     */
    // A map between tex font commands an MathML mathvariant attribute values


    var fontMap = {
      // styles
      "mathbf": {
        variant: "bold",
        fontName: "Main-Bold"
      },
      "mathrm": {
        variant: "normal",
        fontName: "Main-Regular"
      },
      "textit": {
        variant: "italic",
        fontName: "Main-Italic"
      },
      "mathit": {
        variant: "italic",
        fontName: "Main-Italic"
      },
      "mathnormal": {
        variant: "italic",
        fontName: "Math-Italic"
      },
      // "boldsymbol" is missing because they require the use of multiple fonts:
      // Math-BoldItalic and Main-Bold.  This is handled by a special case in
      // makeOrd which ends up calling boldsymbol.
      // families
      "mathbb": {
        variant: "double-struck",
        fontName: "AMS-Regular"
      },
      "mathcal": {
        variant: "script",
        fontName: "Caligraphic-Regular"
      },
      "mathfrak": {
        variant: "fraktur",
        fontName: "Fraktur-Regular"
      },
      "mathscr": {
        variant: "script",
        fontName: "Script-Regular"
      },
      "mathsf": {
        variant: "sans-serif",
        fontName: "SansSerif-Regular"
      },
      "mathtt": {
        variant: "monospace",
        fontName: "Typewriter-Regular"
      }
    };
    var svgData = {
      //   path, width, height
      vec: ["vec", 0.471, 0.714],
      // values from the font glyph
      oiintSize1: ["oiintSize1", 0.957, 0.499],
      // oval to overlay the integrand
      oiintSize2: ["oiintSize2", 1.472, 0.659],
      oiiintSize1: ["oiiintSize1", 1.304, 0.499],
      oiiintSize2: ["oiiintSize2", 1.98, 0.659]
    };

    var staticSvg = function staticSvg(value, options) {
      // Create a span with inline SVG for the element.
      var [pathName, width, height] = svgData[value];
      var path = new PathNode(pathName);
      var svgNode = new SvgNode([path], {
        "width": makeEm(width),
        "height": makeEm(height),
        // Override CSS rule `.katex svg { width: 100% }`
        "style": "width:" + makeEm(width),
        "viewBox": "0 0 " + 1000 * width + " " + 1000 * height,
        "preserveAspectRatio": "xMinYMin"
      });
      var span = makeSvgSpan(["overlay"], [svgNode], options);
      span.height = height;
      span.style.height = makeEm(height);
      span.style.width = makeEm(width);
      return span;
    };

    var buildCommon = {
      fontMap,
      makeSymbol,
      mathsym,
      makeSpan: makeSpan$2,
      makeSvgSpan,
      makeLineSpan,
      makeAnchor,
      makeFragment,
      wrapFragment,
      makeVList,
      makeOrd,
      makeGlue,
      staticSvg,
      svgData,
      tryCombineChars
    };

    /**
     * Describes spaces between different classes of atoms.
     */
    var thinspace = {
      number: 3,
      unit: "mu"
    };
    var mediumspace = {
      number: 4,
      unit: "mu"
    };
    var thickspace = {
      number: 5,
      unit: "mu"
    }; // Making the type below exact with all optional fields doesn't work due to
    // - https://github.com/facebook/flow/issues/4582
    // - https://github.com/facebook/flow/issues/5688
    // However, since *all* fields are optional, $Shape<> works as suggested in 5688
    // above.

    // Spacing relationships for display and text styles
    var spacings = {
      mord: {
        mop: thinspace,
        mbin: mediumspace,
        mrel: thickspace,
        minner: thinspace
      },
      mop: {
        mord: thinspace,
        mop: thinspace,
        mrel: thickspace,
        minner: thinspace
      },
      mbin: {
        mord: mediumspace,
        mop: mediumspace,
        mopen: mediumspace,
        minner: mediumspace
      },
      mrel: {
        mord: thickspace,
        mop: thickspace,
        mopen: thickspace,
        minner: thickspace
      },
      mopen: {},
      mclose: {
        mop: thinspace,
        mbin: mediumspace,
        mrel: thickspace,
        minner: thinspace
      },
      mpunct: {
        mord: thinspace,
        mop: thinspace,
        mrel: thickspace,
        mopen: thinspace,
        mclose: thinspace,
        mpunct: thinspace,
        minner: thinspace
      },
      minner: {
        mord: thinspace,
        mop: thinspace,
        mbin: mediumspace,
        mrel: thickspace,
        mopen: thinspace,
        mpunct: thinspace,
        minner: thinspace
      }
    }; // Spacing relationships for script and scriptscript styles

    var tightSpacings = {
      mord: {
        mop: thinspace
      },
      mop: {
        mord: thinspace,
        mop: thinspace
      },
      mbin: {},
      mrel: {},
      mopen: {},
      mclose: {
        mop: thinspace
      },
      mpunct: {},
      minner: {
        mop: thinspace
      }
    };

    /** Context provided to function handlers for error messages. */
    // Note: reverse the order of the return type union will cause a flow error.
    // See https://github.com/facebook/flow/issues/3663.
    // More general version of `HtmlBuilder` for nodes (e.g. \sum, accent types)
    // whose presence impacts super/subscripting. In this case, ParseNode<"supsub">
    // delegates its HTML building to the HtmlBuilder corresponding to these nodes.

    /**
     * Final function spec for use at parse time.
     * This is almost identical to `FunctionPropSpec`, except it
     * 1. includes the function handler, and
     * 2. requires all arguments except argTypes.
     * It is generated by `defineFunction()` below.
     */

    /**
     * All registered functions.
     * `functions.js` just exports this same dictionary again and makes it public.
     * `Parser.js` requires this dictionary.
     */
    var _functions = {};
    /**
     * All HTML builders. Should be only used in the `define*` and the `build*ML`
     * functions.
     */

    var _htmlGroupBuilders = {};
    /**
     * All MathML builders. Should be only used in the `define*` and the `build*ML`
     * functions.
     */

    var _mathmlGroupBuilders = {};
    function defineFunction(_ref) {
      var {
        type,
        names,
        props,
        handler,
        htmlBuilder,
        mathmlBuilder
      } = _ref;
      // Set default values of functions
      var data = {
        type,
        numArgs: props.numArgs,
        argTypes: props.argTypes,
        allowedInArgument: !!props.allowedInArgument,
        allowedInText: !!props.allowedInText,
        allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,
        numOptionalArgs: props.numOptionalArgs || 0,
        infix: !!props.infix,
        primitive: !!props.primitive,
        handler: handler
      };

      for (var i = 0; i < names.length; ++i) {
        _functions[names[i]] = data;
      }

      if (type) {
        if (htmlBuilder) {
          _htmlGroupBuilders[type] = htmlBuilder;
        }

        if (mathmlBuilder) {
          _mathmlGroupBuilders[type] = mathmlBuilder;
        }
      }
    }
    /**
     * Use this to register only the HTML and MathML builders for a function (e.g.
     * if the function's ParseNode is generated in Parser.js rather than via a
     * stand-alone handler provided to `defineFunction`).
     */

    function defineFunctionBuilders(_ref2) {
      var {
        type,
        htmlBuilder,
        mathmlBuilder
      } = _ref2;
      defineFunction({
        type,
        names: [],
        props: {
          numArgs: 0
        },

        handler() {
          throw new Error('Should never be called.');
        },

        htmlBuilder,
        mathmlBuilder
      });
    }
    var normalizeArgument = function normalizeArgument(arg) {
      return arg.type === "ordgroup" && arg.body.length === 1 ? arg.body[0] : arg;
    }; // Since the corresponding buildHTML/buildMathML function expects a
    // list of elements, we normalize for different kinds of arguments

    var ordargument = function ordargument(arg) {
      return arg.type === "ordgroup" ? arg.body : [arg];
    };

    /**
     * This file does the main work of building a domTree structure from a parse
     * tree. The entry point is the `buildHTML` function, which takes a parse tree.
     * Then, the buildExpression, buildGroup, and various groupBuilders functions
     * are called, to produce a final HTML tree.
     */
    var makeSpan$1 = buildCommon.makeSpan; // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
    // depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
    // and the text before Rule 19.

    var binLeftCanceller = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"];
    var binRightCanceller = ["rightmost", "mrel", "mclose", "mpunct"];
    var styleMap$1 = {
      "display": Style$1.DISPLAY,
      "text": Style$1.TEXT,
      "script": Style$1.SCRIPT,
      "scriptscript": Style$1.SCRIPTSCRIPT
    };
    var DomEnum = {
      mord: "mord",
      mop: "mop",
      mbin: "mbin",
      mrel: "mrel",
      mopen: "mopen",
      mclose: "mclose",
      mpunct: "mpunct",
      minner: "minner"
    };

    /**
     * Take a list of nodes, build them in order, and return a list of the built
     * nodes. documentFragments are flattened into their contents, so the
     * returned list contains no fragments. `isRealGroup` is true if `expression`
     * is a real group (no atoms will be added on either side), as opposed to
     * a partial group (e.g. one created by \color). `surrounding` is an array
     * consisting type of nodes that will be added to the left and right.
     */
    var buildExpression$1 = function buildExpression(expression, options, isRealGroup, surrounding) {
      if (surrounding === void 0) {
        surrounding = [null, null];
      }

      // Parse expressions into `groups`.
      var groups = [];

      for (var i = 0; i < expression.length; i++) {
        var output = buildGroup$1(expression[i], options);

        if (output instanceof DocumentFragment) {
          var children = output.children;
          groups.push(...children);
        } else {
          groups.push(output);
        }
      } // Combine consecutive domTree.symbolNodes into a single symbolNode.


      buildCommon.tryCombineChars(groups); // If `expression` is a partial group, let the parent handle spacings
      // to avoid processing groups multiple times.

      if (!isRealGroup) {
        return groups;
      }

      var glueOptions = options;

      if (expression.length === 1) {
        var node = expression[0];

        if (node.type === "sizing") {
          glueOptions = options.havingSize(node.size);
        } else if (node.type === "styling") {
          glueOptions = options.havingStyle(styleMap$1[node.style]);
        }
      } // Dummy spans for determining spacings between surrounding atoms.
      // If `expression` has no atoms on the left or right, class "leftmost"
      // or "rightmost", respectively, is used to indicate it.


      var dummyPrev = makeSpan$1([surrounding[0] || "leftmost"], [], options);
      var dummyNext = makeSpan$1([surrounding[1] || "rightmost"], [], options); // TODO: These code assumes that a node's math class is the first element
      // of its `classes` array. A later cleanup should ensure this, for
      // instance by changing the signature of `makeSpan`.
      // Before determining what spaces to insert, perform bin cancellation.
      // Binary operators change to ordinary symbols in some contexts.

      var isRoot = isRealGroup === "root";
      traverseNonSpaceNodes(groups, (node, prev) => {
        var prevType = prev.classes[0];
        var type = node.classes[0];

        if (prevType === "mbin" && utils.contains(binRightCanceller, type)) {
          prev.classes[0] = "mord";
        } else if (type === "mbin" && utils.contains(binLeftCanceller, prevType)) {
          node.classes[0] = "mord";
        }
      }, {
        node: dummyPrev
      }, dummyNext, isRoot);
      traverseNonSpaceNodes(groups, (node, prev) => {
        var prevType = getTypeOfDomTree(prev);
        var type = getTypeOfDomTree(node); // 'mtight' indicates that the node is script or scriptscript style.

        var space = prevType && type ? node.hasClass("mtight") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;

        if (space) {
          // Insert glue (spacing) after the `prev`.
          return buildCommon.makeGlue(space, glueOptions);
        }
      }, {
        node: dummyPrev
      }, dummyNext, isRoot);
      return groups;
    }; // Depth-first traverse non-space `nodes`, calling `callback` with the current and
    // previous node as arguments, optionally returning a node to insert after the
    // previous node. `prev` is an object with the previous node and `insertAfter`
    // function to insert after it. `next` is a node that will be added to the right.
    // Used for bin cancellation and inserting spacings.

    var traverseNonSpaceNodes = function traverseNonSpaceNodes(nodes, callback, prev, next, isRoot) {
      if (next) {
        // temporarily append the right node, if exists
        nodes.push(next);
      }

      var i = 0;

      for (; i < nodes.length; i++) {
        var node = nodes[i];
        var partialGroup = checkPartialGroup(node);

        if (partialGroup) {
          // Recursive DFS
          // $FlowFixMe: make nodes a $ReadOnlyArray by returning a new array
          traverseNonSpaceNodes(partialGroup.children, callback, prev, null, isRoot);
          continue;
        } // Ignore explicit spaces (e.g., \;, \,) when determining what implicit
        // spacing should go between atoms of different classes


        var nonspace = !node.hasClass("mspace");

        if (nonspace) {
          var result = callback(node, prev.node);

          if (result) {
            if (prev.insertAfter) {
              prev.insertAfter(result);
            } else {
              // insert at front
              nodes.unshift(result);
              i++;
            }
          }
        }

        if (nonspace) {
          prev.node = node;
        } else if (isRoot && node.hasClass("newline")) {
          prev.node = makeSpan$1(["leftmost"]); // treat like beginning of line
        }

        prev.insertAfter = (index => n => {
          nodes.splice(index + 1, 0, n);
          i++;
        })(i);
      }

      if (next) {
        nodes.pop();
      }
    }; // Check if given node is a partial group, i.e., does not affect spacing around.


    var checkPartialGroup = function checkPartialGroup(node) {
      if (node instanceof DocumentFragment || node instanceof Anchor || node instanceof Span && node.hasClass("enclosing")) {
        return node;
      }

      return null;
    }; // Return the outermost node of a domTree.


    var getOutermostNode = function getOutermostNode(node, side) {
      var partialGroup = checkPartialGroup(node);

      if (partialGroup) {
        var children = partialGroup.children;

        if (children.length) {
          if (side === "right") {
            return getOutermostNode(children[children.length - 1], "right");
          } else if (side === "left") {
            return getOutermostNode(children[0], "left");
          }
        }
      }

      return node;
    }; // Return math atom class (mclass) of a domTree.
    // If `side` is given, it will get the type of the outermost node at given side.


    var getTypeOfDomTree = function getTypeOfDomTree(node, side) {
      if (!node) {
        return null;
      }

      if (side) {
        node = getOutermostNode(node, side);
      } // This makes a lot of assumptions as to where the type of atom
      // appears.  We should do a better job of enforcing this.


      return DomEnum[node.classes[0]] || null;
    };
    var makeNullDelimiter = function makeNullDelimiter(options, classes) {
      var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
      return makeSpan$1(classes.concat(moreClasses));
    };
    /**
     * buildGroup is the function that takes a group and calls the correct groupType
     * function for it. It also handles the interaction of size and style changes
     * between parents and children.
     */

    var buildGroup$1 = function buildGroup(group, options, baseOptions) {
      if (!group) {
        return makeSpan$1();
      }

      if (_htmlGroupBuilders[group.type]) {
        // Call the groupBuilders function
        // $FlowFixMe
        var groupNode = _htmlGroupBuilders[group.type](group, options); // If the size changed between the parent and the current group, account
        // for that size difference.

        if (baseOptions && options.size !== baseOptions.size) {
          groupNode = makeSpan$1(options.sizingClasses(baseOptions), [groupNode], options);
          var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
          groupNode.height *= multiplier;
          groupNode.depth *= multiplier;
        }

        return groupNode;
      } else {
        throw new ParseError("Got group of unknown type: '" + group.type + "'");
      }
    };
    /**
     * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)
     * into an unbreakable HTML node of class .base, with proper struts to
     * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to
     * make up the entire expression as a sequence of unbreakable units.
     */

    function buildHTMLUnbreakable(children, options) {
      // Compute height and depth of this chunk.
      var body = makeSpan$1(["base"], children, options); // Add strut, which ensures that the top of the HTML element falls at
      // the height of the expression, and the bottom of the HTML element
      // falls at the depth of the expression.

      var strut = makeSpan$1(["strut"]);
      strut.style.height = makeEm(body.height + body.depth);

      if (body.depth) {
        strut.style.verticalAlign = makeEm(-body.depth);
      }

      body.children.unshift(strut);
      return body;
    }
    /**
     * Take an entire parse tree, and build it into an appropriate set of HTML
     * nodes.
     */


    function buildHTML(tree, options) {
      // Strip off outer tag wrapper for processing below.
      var tag = null;

      if (tree.length === 1 && tree[0].type === "tag") {
        tag = tree[0].tag;
        tree = tree[0].body;
      } // Build the expression contained in the tree


      var expression = buildExpression$1(tree, options, "root");
      var eqnNum;

      if (expression.length === 2 && expression[1].hasClass("tag")) {
        // An environment with automatic equation numbers, e.g. {gather}.
        eqnNum = expression.pop();
      }

      var children = []; // Create one base node for each chunk between potential line breaks.
      // The TeXBook [p.173] says "A formula will be broken only after a
      // relation symbol like $=$ or $<$ or $\rightarrow$, or after a binary
      // operation symbol like $+$ or $-$ or $\times$, where the relation or
      // binary operation is on the ``outer level'' of the formula (i.e., not
      // enclosed in {...} and not part of an \over construction)."

      var parts = [];

      for (var i = 0; i < expression.length; i++) {
        parts.push(expression[i]);

        if (expression[i].hasClass("mbin") || expression[i].hasClass("mrel") || expression[i].hasClass("allowbreak")) {
          // Put any post-operator glue on same line as operator.
          // Watch for \nobreak along the way, and stop at \newline.
          var nobreak = false;

          while (i < expression.length - 1 && expression[i + 1].hasClass("mspace") && !expression[i + 1].hasClass("newline")) {
            i++;
            parts.push(expression[i]);

            if (expression[i].hasClass("nobreak")) {
              nobreak = true;
            }
          } // Don't allow break if \nobreak among the post-operator glue.


          if (!nobreak) {
            children.push(buildHTMLUnbreakable(parts, options));
            parts = [];
          }
        } else if (expression[i].hasClass("newline")) {
          // Write the line except the newline
          parts.pop();

          if (parts.length > 0) {
            children.push(buildHTMLUnbreakable(parts, options));
            parts = [];
          } // Put the newline at the top level


          children.push(expression[i]);
        }
      }

      if (parts.length > 0) {
        children.push(buildHTMLUnbreakable(parts, options));
      } // Now, if there was a tag, build it too and append it as a final child.


      var tagChild;

      if (tag) {
        tagChild = buildHTMLUnbreakable(buildExpression$1(tag, options, true));
        tagChild.classes = ["tag"];
        children.push(tagChild);
      } else if (eqnNum) {
        children.push(eqnNum);
      }

      var htmlNode = makeSpan$1(["katex-html"], children);
      htmlNode.setAttribute("aria-hidden", "true"); // Adjust the strut of the tag to be the maximum height of all children
      // (the height of the enclosing htmlNode) for proper vertical alignment.

      if (tagChild) {
        var strut = tagChild.children[0];
        strut.style.height = makeEm(htmlNode.height + htmlNode.depth);

        if (htmlNode.depth) {
          strut.style.verticalAlign = makeEm(-htmlNode.depth);
        }
      }

      return htmlNode;
    }

    /**
     * These objects store data about MathML nodes. This is the MathML equivalent
     * of the types in domTree.js. Since MathML handles its own rendering, and
     * since we're mainly using MathML to improve accessibility, we don't manage
     * any of the styling state that the plain DOM nodes do.
     *
     * The `toNode` and `toMarkup` functions work simlarly to how they do in
     * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
     */
    function newDocumentFragment(children) {
      return new DocumentFragment(children);
    }
    /**
     * This node represents a general purpose MathML node of any type. The
     * constructor requires the type of node to create (for example, `"mo"` or
     * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
     */

    class MathNode {
      constructor(type, children, classes) {
        this.type = void 0;
        this.attributes = void 0;
        this.children = void 0;
        this.classes = void 0;
        this.type = type;
        this.attributes = {};
        this.children = children || [];
        this.classes = classes || [];
      }
      /**
       * Sets an attribute on a MathML node. MathML depends on attributes to convey a
       * semantic content, so this is used heavily.
       */


      setAttribute(name, value) {
        this.attributes[name] = value;
      }
      /**
       * Gets an attribute on a MathML node.
       */


      getAttribute(name) {
        return this.attributes[name];
      }
      /**
       * Converts the math node into a MathML-namespaced DOM element.
       */


      toNode() {
        var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);

        for (var attr in this.attributes) {
          if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
            node.setAttribute(attr, this.attributes[attr]);
          }
        }

        if (this.classes.length > 0) {
          node.className = createClass(this.classes);
        }

        for (var i = 0; i < this.children.length; i++) {
          node.appendChild(this.children[i].toNode());
        }

        return node;
      }
      /**
       * Converts the math node into an HTML markup string.
       */


      toMarkup() {
        var markup = "<" + this.type; // Add the attributes

        for (var attr in this.attributes) {
          if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
            markup += " " + attr + "=\"";
            markup += utils.escape(this.attributes[attr]);
            markup += "\"";
          }
        }

        if (this.classes.length > 0) {
          markup += " class =\"" + utils.escape(createClass(this.classes)) + "\"";
        }

        markup += ">";

        for (var i = 0; i < this.children.length; i++) {
          markup += this.children[i].toMarkup();
        }

        markup += "</" + this.type + ">";
        return markup;
      }
      /**
       * Converts the math node into a string, similar to innerText, but escaped.
       */


      toText() {
        return this.children.map(child => child.toText()).join("");
      }

    }
    /**
     * This node represents a piece of text.
     */

    class TextNode {
      constructor(text) {
        this.text = void 0;
        this.text = text;
      }
      /**
       * Converts the text node into a DOM text node.
       */


      toNode() {
        return document.createTextNode(this.text);
      }
      /**
       * Converts the text node into escaped HTML markup
       * (representing the text itself).
       */


      toMarkup() {
        return utils.escape(this.toText());
      }
      /**
       * Converts the text node into a string
       * (representing the text iteself).
       */


      toText() {
        return this.text;
      }

    }
    /**
     * This node represents a space, but may render as <mspace.../> or as text,
     * depending on the width.
     */

    class SpaceNode {
      /**
       * Create a Space node with width given in CSS ems.
       */
      constructor(width) {
        this.width = void 0;
        this.character = void 0;
        this.width = width; // See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html
        // for a table of space-like characters.  We use Unicode
        // representations instead of &LongNames; as it's not clear how to
        // make the latter via document.createTextNode.

        if (width >= 0.05555 && width <= 0.05556) {
          this.character = "\u200a"; // &VeryThinSpace;
        } else if (width >= 0.1666 && width <= 0.1667) {
          this.character = "\u2009"; // &ThinSpace;
        } else if (width >= 0.2222 && width <= 0.2223) {
          this.character = "\u2005"; // &MediumSpace;
        } else if (width >= 0.2777 && width <= 0.2778) {
          this.character = "\u2005\u200a"; // &ThickSpace;
        } else if (width >= -0.05556 && width <= -0.05555) {
          this.character = "\u200a\u2063"; // &NegativeVeryThinSpace;
        } else if (width >= -0.1667 && width <= -0.1666) {
          this.character = "\u2009\u2063"; // &NegativeThinSpace;
        } else if (width >= -0.2223 && width <= -0.2222) {
          this.character = "\u205f\u2063"; // &NegativeMediumSpace;
        } else if (width >= -0.2778 && width <= -0.2777) {
          this.character = "\u2005\u2063"; // &NegativeThickSpace;
        } else {
          this.character = null;
        }
      }
      /**
       * Converts the math node into a MathML-namespaced DOM element.
       */


      toNode() {
        if (this.character) {
          return document.createTextNode(this.character);
        } else {
          var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
          node.setAttribute("width", makeEm(this.width));
          return node;
        }
      }
      /**
       * Converts the math node into an HTML markup string.
       */


      toMarkup() {
        if (this.character) {
          return "<mtext>" + this.character + "</mtext>";
        } else {
          return "<mspace width=\"" + makeEm(this.width) + "\"/>";
        }
      }
      /**
       * Converts the math node into a string, similar to innerText.
       */


      toText() {
        if (this.character) {
          return this.character;
        } else {
          return " ";
        }
      }

    }

    var mathMLTree = {
      MathNode,
      TextNode,
      SpaceNode,
      newDocumentFragment
    };

    /**
     * This file converts a parse tree into a cooresponding MathML tree. The main
     * entry point is the `buildMathML` function, which takes a parse tree from the
     * parser.
     */

    /**
     * Takes a symbol and converts it into a MathML text node after performing
     * optional replacement from symbols.js.
     */
    var makeText = function makeText(text, mode, options) {
      if (symbols[mode][text] && symbols[mode][text].replace && text.charCodeAt(0) !== 0xD835 && !(ligatures.hasOwnProperty(text) && options && (options.fontFamily && options.fontFamily.substr(4, 2) === "tt" || options.font && options.font.substr(4, 2) === "tt"))) {
        text = symbols[mode][text].replace;
      }

      return new mathMLTree.TextNode(text);
    };
    /**
     * Wrap the given array of nodes in an <mrow> node if needed, i.e.,
     * unless the array has length 1.  Always returns a single node.
     */

    var makeRow = function makeRow(body) {
      if (body.length === 1) {
        return body[0];
      } else {
        return new mathMLTree.MathNode("mrow", body);
      }
    };
    /**
     * Returns the math variant as a string or null if none is required.
     */

    var getVariant = function getVariant(group, options) {
      // Handle \text... font specifiers as best we can.
      // MathML has a limited list of allowable mathvariant specifiers; see
      // https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt
      if (options.fontFamily === "texttt") {
        return "monospace";
      } else if (options.fontFamily === "textsf") {
        if (options.fontShape === "textit" && options.fontWeight === "textbf") {
          return "sans-serif-bold-italic";
        } else if (options.fontShape === "textit") {
          return "sans-serif-italic";
        } else if (options.fontWeight === "textbf") {
          return "bold-sans-serif";
        } else {
          return "sans-serif";
        }
      } else if (options.fontShape === "textit" && options.fontWeight === "textbf") {
        return "bold-italic";
      } else if (options.fontShape === "textit") {
        return "italic";
      } else if (options.fontWeight === "textbf") {
        return "bold";
      }

      var font = options.font;

      if (!font || font === "mathnormal") {
        return null;
      }

      var mode = group.mode;

      if (font === "mathit") {
        return "italic";
      } else if (font === "boldsymbol") {
        return group.type === "textord" ? "bold" : "bold-italic";
      } else if (font === "mathbf") {
        return "bold";
      } else if (font === "mathbb") {
        return "double-struck";
      } else if (font === "mathfrak") {
        return "fraktur";
      } else if (font === "mathscr" || font === "mathcal") {
        // MathML makes no distinction between script and caligrahpic
        return "script";
      } else if (font === "mathsf") {
        return "sans-serif";
      } else if (font === "mathtt") {
        return "monospace";
      }

      var text = group.text;

      if (utils.contains(["\\imath", "\\jmath"], text)) {
        return null;
      }

      if (symbols[mode][text] && symbols[mode][text].replace) {
        text = symbols[mode][text].replace;
      }

      var fontName = buildCommon.fontMap[font].fontName;

      if (getCharacterMetrics(text, fontName, mode)) {
        return buildCommon.fontMap[font].variant;
      }

      return null;
    };
    /**
     * Takes a list of nodes, builds them, and returns a list of the generated
     * MathML nodes.  Also combine consecutive <mtext> outputs into a single
     * <mtext> tag.
     */

    var buildExpression = function buildExpression(expression, options, isOrdgroup) {
      if (expression.length === 1) {
        var group = buildGroup(expression[0], options);

        if (isOrdgroup && group instanceof MathNode && group.type === "mo") {
          // When TeX writers want to suppress spacing on an operator,
          // they often put the operator by itself inside braces.
          group.setAttribute("lspace", "0em");
          group.setAttribute("rspace", "0em");
        }

        return [group];
      }

      var groups = [];
      var lastGroup;

      for (var i = 0; i < expression.length; i++) {
        var _group = buildGroup(expression[i], options);

        if (_group instanceof MathNode && lastGroup instanceof MathNode) {
          // Concatenate adjacent <mtext>s
          if (_group.type === 'mtext' && lastGroup.type === 'mtext' && _group.getAttribute('mathvariant') === lastGroup.getAttribute('mathvariant')) {
            lastGroup.children.push(..._group.children);
            continue; // Concatenate adjacent <mn>s
          } else if (_group.type === 'mn' && lastGroup.type === 'mn') {
            lastGroup.children.push(..._group.children);
            continue; // Concatenate <mn>...</mn> followed by <mi>.</mi>
          } else if (_group.type === 'mi' && _group.children.length === 1 && lastGroup.type === 'mn') {
            var child = _group.children[0];

            if (child instanceof TextNode && child.text === '.') {
              lastGroup.children.push(..._group.children);
              continue;
            }
          } else if (lastGroup.type === 'mi' && lastGroup.children.length === 1) {
            var lastChild = lastGroup.children[0];

            if (lastChild instanceof TextNode && lastChild.text === '\u0338' && (_group.type === 'mo' || _group.type === 'mi' || _group.type === 'mn')) {
              var _child = _group.children[0];

              if (_child instanceof TextNode && _child.text.length > 0) {
                // Overlay with combining character long solidus
                _child.text = _child.text.slice(0, 1) + "\u0338" + _child.text.slice(1);
                groups.pop();
              }
            }
          }
        }

        groups.push(_group);
        lastGroup = _group;
      }

      return groups;
    };
    /**
     * Equivalent to buildExpression, but wraps the elements in an <mrow>
     * if there's more than one.  Returns a single node instead of an array.
     */

    var buildExpressionRow = function buildExpressionRow(expression, options, isOrdgroup) {
      return makeRow(buildExpression(expression, options, isOrdgroup));
    };
    /**
     * Takes a group from the parser and calls the appropriate groupBuilders function
     * on it to produce a MathML node.
     */

    var buildGroup = function buildGroup(group, options) {
      if (!group) {
        return new mathMLTree.MathNode("mrow");
      }

      if (_mathmlGroupBuilders[group.type]) {
        // Call the groupBuilders function
        // $FlowFixMe
        var result = _mathmlGroupBuilders[group.type](group, options); // $FlowFixMe

        return result;
      } else {
        throw new ParseError("Got group of unknown type: '" + group.type + "'");
      }
    };
    /**
     * Takes a full parse tree and settings and builds a MathML representation of
     * it. In particular, we put the elements from building the parse tree into a
     * <semantics> tag so we can also include that TeX source as an annotation.
     *
     * Note that we actually return a domTree element with a `<math>` inside it so
     * we can do appropriate styling.
     */

    function buildMathML(tree, texExpression, options, isDisplayMode, forMathmlOnly) {
      var expression = buildExpression(tree, options); // TODO: Make a pass thru the MathML similar to buildHTML.traverseNonSpaceNodes
      // and add spacing nodes. This is necessary only adjacent to math operators
      // like \sin or \lim or to subsup elements that contain math operators.
      // MathML takes care of the other spacing issues.
      // Wrap up the expression in an mrow so it is presented in the semantics
      // tag correctly, unless it's a single <mrow> or <mtable>.

      var wrapper;

      if (expression.length === 1 && expression[0] instanceof MathNode && utils.contains(["mrow", "mtable"], expression[0].type)) {
        wrapper = expression[0];
      } else {
        wrapper = new mathMLTree.MathNode("mrow", expression);
      } // Build a TeX annotation of the source


      var annotation = new mathMLTree.MathNode("annotation", [new mathMLTree.TextNode(texExpression)]);
      annotation.setAttribute("encoding", "application/x-tex");
      var semantics = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
      var math = new mathMLTree.MathNode("math", [semantics]);
      math.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML");

      if (isDisplayMode) {
        math.setAttribute("display", "block");
      } // You can't style <math> nodes, so we wrap the node in a span.
      // NOTE: The span class is not typed to have <math> nodes as children, and
      // we don't want to make the children type more generic since the children
      // of span are expected to have more fields in `buildHtml` contexts.


      var wrapperClass = forMathmlOnly ? "katex" : "katex-mathml"; // $FlowFixMe

      return buildCommon.makeSpan([wrapperClass], [math]);
    }

    var optionsFromSettings = function optionsFromSettings(settings) {
      return new Options({
        style: settings.displayMode ? Style$1.DISPLAY : Style$1.TEXT,
        maxSize: settings.maxSize,
        minRuleThickness: settings.minRuleThickness
      });
    };

    var displayWrap = function displayWrap(node, settings) {
      if (settings.displayMode) {
        var classes = ["katex-display"];

        if (settings.leqno) {
          classes.push("leqno");
        }

        if (settings.fleqn) {
          classes.push("fleqn");
        }

        node = buildCommon.makeSpan(classes, [node]);
      }

      return node;
    };

    var buildTree = function buildTree(tree, expression, settings) {
      var options = optionsFromSettings(settings);
      var katexNode;

      if (settings.output === "mathml") {
        return buildMathML(tree, expression, options, settings.displayMode, true);
      } else if (settings.output === "html") {
        var htmlNode = buildHTML(tree, options);
        katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
      } else {
        var mathMLNode = buildMathML(tree, expression, options, settings.displayMode, false);

        var _htmlNode = buildHTML(tree, options);

        katexNode = buildCommon.makeSpan(["katex"], [mathMLNode, _htmlNode]);
      }

      return displayWrap(katexNode, settings);
    };
    var buildHTMLTree = function buildHTMLTree(tree, expression, settings) {
      var options = optionsFromSettings(settings);
      var htmlNode = buildHTML(tree, options);
      var katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
      return displayWrap(katexNode, settings);
    };

    /**
     * This file provides support to buildMathML.js and buildHTML.js
     * for stretchy wide elements rendered from SVG files
     * and other CSS trickery.
     */
    var stretchyCodePoint = {
      widehat: "^",
      widecheck: "ˇ",
      widetilde: "~",
      utilde: "~",
      overleftarrow: "\u2190",
      underleftarrow: "\u2190",
      xleftarrow: "\u2190",
      overrightarrow: "\u2192",
      underrightarrow: "\u2192",
      xrightarrow: "\u2192",
      underbrace: "\u23df",
      overbrace: "\u23de",
      overgroup: "\u23e0",
      undergroup: "\u23e1",
      overleftrightarrow: "\u2194",
      underleftrightarrow: "\u2194",
      xleftrightarrow: "\u2194",
      Overrightarrow: "\u21d2",
      xRightarrow: "\u21d2",
      overleftharpoon: "\u21bc",
      xleftharpoonup: "\u21bc",
      overrightharpoon: "\u21c0",
      xrightharpoonup: "\u21c0",
      xLeftarrow: "\u21d0",
      xLeftrightarrow: "\u21d4",
      xhookleftarrow: "\u21a9",
      xhookrightarrow: "\u21aa",
      xmapsto: "\u21a6",
      xrightharpoondown: "\u21c1",
      xleftharpoondown: "\u21bd",
      xrightleftharpoons: "\u21cc",
      xleftrightharpoons: "\u21cb",
      xtwoheadleftarrow: "\u219e",
      xtwoheadrightarrow: "\u21a0",
      xlongequal: "=",
      xtofrom: "\u21c4",
      xrightleftarrows: "\u21c4",
      xrightequilibrium: "\u21cc",
      // Not a perfect match.
      xleftequilibrium: "\u21cb",
      // None better available.
      "\\cdrightarrow": "\u2192",
      "\\cdleftarrow": "\u2190",
      "\\cdlongequal": "="
    };

    var mathMLnode = function mathMLnode(label) {
      var node = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\/, '')])]);
      node.setAttribute("stretchy", "true");
      return node;
    }; // Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
    // Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
    // Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
    // Licensed under the SIL Open Font License, Version 1.1.
    // See \nhttp://scripts.sil.org/OFL
    // Very Long SVGs
    //    Many of the KaTeX stretchy wide elements use a long SVG image and an
    //    overflow: hidden tactic to achieve a stretchy image while avoiding
    //    distortion of arrowheads or brace corners.
    //    The SVG typically contains a very long (400 em) arrow.
    //    The SVG is in a container span that has overflow: hidden, so the span
    //    acts like a window that exposes only part of the  SVG.
    //    The SVG always has a longer, thinner aspect ratio than the container span.
    //    After the SVG fills 100% of the height of the container span,
    //    there is a long arrow shaft left over. That left-over shaft is not shown.
    //    Instead, it is sliced off because the span's CSS has overflow: hidden.
    //    Thus, the reader sees an arrow that matches the subject matter width
    //    without distortion.
    //    Some functions, such as \cancel, need to vary their aspect ratio. These
    //    functions do not get the overflow SVG treatment.
    // Second Brush Stroke
    //    Low resolution monitors struggle to display images in fine detail.
    //    So browsers apply anti-aliasing. A long straight arrow shaft therefore
    //    will sometimes appear as if it has a blurred edge.
    //    To mitigate this, these SVG files contain a second "brush-stroke" on the
    //    arrow shafts. That is, a second long thin rectangular SVG path has been
    //    written directly on top of each arrow shaft. This reinforcement causes
    //    some of the screen pixels to display as black instead of the anti-aliased
    //    gray pixel that a  single path would generate. So we get arrow shafts
    //    whose edges appear to be sharper.
    // In the katexImagesData object just below, the dimensions all
    // correspond to path geometry inside the relevant SVG.
    // For example, \overrightarrow uses the same arrowhead as glyph U+2192
    // from the KaTeX Main font. The scaling factor is 1000.
    // That is, inside the font, that arrowhead is 522 units tall, which
    // corresponds to 0.522 em inside the document.


    var katexImagesData = {
      //   path(s), minWidth, height, align
      overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
      overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
      underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
      underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
      xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
      "\\cdrightarrow": [["rightarrow"], 3.0, 522, "xMaxYMin"],
      // CD minwwidth2.5pc
      xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
      "\\cdleftarrow": [["leftarrow"], 3.0, 522, "xMinYMin"],
      Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
      xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
      xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
      overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
      xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
      xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
      overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
      xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
      xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
      xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
      "\\cdlongequal": [["longequal"], 3.0, 334, "xMinYMin"],
      xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
      xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
      overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
      overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
      underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
      underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
      xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
      xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
      xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
      xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
      xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
      xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
      overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
      underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
      overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
      undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
      xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
      xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
      // The next three arrows are from the mhchem package.
      // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
      // document as \xrightarrow or \xrightleftharpoons. Those have
      // min-length = 1.75em, so we set min-length on these next three to match.
      xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
      xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
      xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
    };

    var groupLength = function groupLength(arg) {
      if (arg.type === "ordgroup") {
        return arg.body.length;
      } else {
        return 1;
      }
    };

    var svgSpan = function svgSpan(group, options) {
      // Create a span with inline SVG for the element.
      function buildSvgSpan_() {
        var viewBoxWidth = 400000; // default

        var label = group.label.substr(1);

        if (utils.contains(["widehat", "widecheck", "widetilde", "utilde"], label)) {
          // Each type in the `if` statement corresponds to one of the ParseNode
          // types below. This narrowing is required to access `grp.base`.
          // $FlowFixMe
          var grp = group; // There are four SVG images available for each function.
          // Choose a taller image when there are more characters.

          var numChars = groupLength(grp.base);
          var viewBoxHeight;
          var pathName;

          var _height;

          if (numChars > 5) {
            if (label === "widehat" || label === "widecheck") {
              viewBoxHeight = 420;
              viewBoxWidth = 2364;
              _height = 0.42;
              pathName = label + "4";
            } else {
              viewBoxHeight = 312;
              viewBoxWidth = 2340;
              _height = 0.34;
              pathName = "tilde4";
            }
          } else {
            var imgIndex = [1, 1, 2, 2, 3, 3][numChars];

            if (label === "widehat" || label === "widecheck") {
              viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
              viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
              _height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
              pathName = label + imgIndex;
            } else {
              viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
              viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
              _height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
              pathName = "tilde" + imgIndex;
            }
          }

          var path = new PathNode(pathName);
          var svgNode = new SvgNode([path], {
            "width": "100%",
            "height": makeEm(_height),
            "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
            "preserveAspectRatio": "none"
          });
          return {
            span: buildCommon.makeSvgSpan([], [svgNode], options),
            minWidth: 0,
            height: _height
          };
        } else {
          var spans = [];
          var data = katexImagesData[label];
          var [paths, _minWidth, _viewBoxHeight] = data;

          var _height2 = _viewBoxHeight / 1000;

          var numSvgChildren = paths.length;
          var widthClasses;
          var aligns;

          if (numSvgChildren === 1) {
            // $FlowFixMe: All these cases must be of the 4-tuple type.
            var align1 = data[3];
            widthClasses = ["hide-tail"];
            aligns = [align1];
          } else if (numSvgChildren === 2) {
            widthClasses = ["halfarrow-left", "halfarrow-right"];
            aligns = ["xMinYMin", "xMaxYMin"];
          } else if (numSvgChildren === 3) {
            widthClasses = ["brace-left", "brace-center", "brace-right"];
            aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
          } else {
            throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
          }

          for (var i = 0; i < numSvgChildren; i++) {
            var _path = new PathNode(paths[i]);

            var _svgNode = new SvgNode([_path], {
              "width": "400em",
              "height": makeEm(_height2),
              "viewBox": "0 0 " + viewBoxWidth + " " + _viewBoxHeight,
              "preserveAspectRatio": aligns[i] + " slice"
            });

            var _span = buildCommon.makeSvgSpan([widthClasses[i]], [_svgNode], options);

            if (numSvgChildren === 1) {
              return {
                span: _span,
                minWidth: _minWidth,
                height: _height2
              };
            } else {
              _span.style.height = makeEm(_height2);
              spans.push(_span);
            }
          }

          return {
            span: buildCommon.makeSpan(["stretchy"], spans, options),
            minWidth: _minWidth,
            height: _height2
          };
        }
      } // buildSvgSpan_()


      var {
        span,
        minWidth,
        height
      } = buildSvgSpan_(); // Note that we are returning span.depth = 0.
      // Any adjustments relative to the baseline must be done in buildHTML.

      span.height = height;
      span.style.height = makeEm(height);

      if (minWidth > 0) {
        span.style.minWidth = makeEm(minWidth);
      }

      return span;
    };

    var encloseSpan = function encloseSpan(inner, label, topPad, bottomPad, options) {
      // Return an image span for \cancel, \bcancel, \xcancel, \fbox, or \angl
      var img;
      var totalHeight = inner.height + inner.depth + topPad + bottomPad;

      if (/fbox|color|angl/.test(label)) {
        img = buildCommon.makeSpan(["stretchy", label], [], options);

        if (label === "fbox") {
          var color = options.color && options.getColor();

          if (color) {
            img.style.borderColor = color;
          }
        }
      } else {
        // \cancel, \bcancel, or \xcancel
        // Since \cancel's SVG is inline and it omits the viewBox attribute,
        // its stroke-width will not vary with span area.
        var lines = [];

        if (/^[bx]cancel$/.test(label)) {
          lines.push(new LineNode({
            "x1": "0",
            "y1": "0",
            "x2": "100%",
            "y2": "100%",
            "stroke-width": "0.046em"
          }));
        }

        if (/^x?cancel$/.test(label)) {
          lines.push(new LineNode({
            "x1": "0",
            "y1": "100%",
            "x2": "100%",
            "y2": "0",
            "stroke-width": "0.046em"
          }));
        }

        var svgNode = new SvgNode(lines, {
          "width": "100%",
          "height": makeEm(totalHeight)
        });
        img = buildCommon.makeSvgSpan([], [svgNode], options);
      }

      img.height = totalHeight;
      img.style.height = makeEm(totalHeight);
      return img;
    };

    var stretchy = {
      encloseSpan,
      mathMLnode,
      svgSpan
    };

    /**
     * Asserts that the node is of the given type and returns it with stricter
     * typing. Throws if the node's type does not match.
     */
    function assertNodeType(node, type) {
      if (!node || node.type !== type) {
        throw new Error("Expected node of type " + type + ", but got " + (node ? "node of type " + node.type : String(node)));
      } // $FlowFixMe, >=0.125


      return node;
    }
    /**
     * Returns the node more strictly typed iff it is of the given type. Otherwise,
     * returns null.
     */

    function assertSymbolNodeType(node) {
      var typedNode = checkSymbolNodeType(node);

      if (!typedNode) {
        throw new Error("Expected node of symbol group type, but got " + (node ? "node of type " + node.type : String(node)));
      }

      return typedNode;
    }
    /**
     * Returns the node more strictly typed iff it is of the given type. Otherwise,
     * returns null.
     */

    function checkSymbolNodeType(node) {
      if (node && (node.type === "atom" || NON_ATOMS.hasOwnProperty(node.type))) {
        // $FlowFixMe
        return node;
      }

      return null;
    }

    // NOTE: Unlike most `htmlBuilder`s, this one handles not only "accent", but
    // also "supsub" since an accent can affect super/subscripting.
    var htmlBuilder$a = (grp, options) => {
      // Accents are handled in the TeXbook pg. 443, rule 12.
      var base;
      var group;
      var supSubGroup;

      if (grp && grp.type === "supsub") {
        // If our base is a character box, and we have superscripts and
        // subscripts, the supsub will defer to us. In particular, we want
        // to attach the superscripts and subscripts to the inner body (so
        // that the position of the superscripts and subscripts won't be
        // affected by the height of the accent). We accomplish this by
        // sticking the base of the accent into the base of the supsub, and
        // rendering that, while keeping track of where the accent is.
        // The real accent group is the base of the supsub group
        group = assertNodeType(grp.base, "accent"); // The character box is the base of the accent group

        base = group.base; // Stick the character box into the base of the supsub group

        grp.base = base; // Rerender the supsub group with its new base, and store that
        // result.

        supSubGroup = assertSpan(buildGroup$1(grp, options)); // reset original base

        grp.base = group;
      } else {
        group = assertNodeType(grp, "accent");
        base = group.base;
      } // Build the base group


      var body = buildGroup$1(base, options.havingCrampedStyle()); // Does the accent need to shift for the skew of a character?

      var mustShift = group.isShifty && utils.isCharacterBox(base); // Calculate the skew of the accent. This is based on the line "If the
      // nucleus is not a single character, let s = 0; otherwise set s to the
      // kern amount for the nucleus followed by the \skewchar of its font."
      // Note that our skew metrics are just the kern between each character
      // and the skewchar.

      var skew = 0;

      if (mustShift) {
        // If the base is a character box, then we want the skew of the
        // innermost character. To do that, we find the innermost character:
        var baseChar = utils.getBaseElem(base); // Then, we render its group to get the symbol inside it

        var baseGroup = buildGroup$1(baseChar, options.havingCrampedStyle()); // Finally, we pull the skew off of the symbol.

        skew = assertSymbolDomNode(baseGroup).skew; // Note that we now throw away baseGroup, because the layers we
        // removed with getBaseElem might contain things like \color which
        // we can't get rid of.
        // TODO(emily): Find a better way to get the skew
      }

      var accentBelow = group.label === "\\c"; // calculate the amount of space between the body and the accent

      var clearance = accentBelow ? body.height + body.depth : Math.min(body.height, options.fontMetrics().xHeight); // Build the accent

      var accentBody;

      if (!group.isStretchy) {
        var accent;
        var width;

        if (group.label === "\\vec") {
          // Before version 0.9, \vec used the combining font glyph U+20D7.
          // But browsers, especially Safari, are not consistent in how they
          // render combining characters when not preceded by a character.
          // So now we use an SVG.
          // If Safari reforms, we should consider reverting to the glyph.
          accent = buildCommon.staticSvg("vec", options);
          width = buildCommon.svgData.vec[1];
        } else {
          accent = buildCommon.makeOrd({
            mode: group.mode,
            text: group.label
          }, options, "textord");
          accent = assertSymbolDomNode(accent); // Remove the italic correction of the accent, because it only serves to
          // shift the accent over to a place we don't want.

          accent.italic = 0;
          width = accent.width;

          if (accentBelow) {
            clearance += accent.depth;
          }
        }

        accentBody = buildCommon.makeSpan(["accent-body"], [accent]); // "Full" accents expand the width of the resulting symbol to be
        // at least the width of the accent, and overlap directly onto the
        // character without any vertical offset.

        var accentFull = group.label === "\\textcircled";

        if (accentFull) {
          accentBody.classes.push('accent-full');
          clearance = body.height;
        } // Shift the accent over by the skew.


        var left = skew; // CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`
        // so that the accent doesn't contribute to the bounding box.
        // We need to shift the character by its width (effectively half
        // its width) to compensate.

        if (!accentFull) {
          left -= width / 2;
        }

        accentBody.style.left = makeEm(left); // \textcircled uses the \bigcirc glyph, so it needs some
        // vertical adjustment to match LaTeX.

        if (group.label === "\\textcircled") {
          accentBody.style.top = ".2em";
        }

        accentBody = buildCommon.makeVList({
          positionType: "firstBaseline",
          children: [{
            type: "elem",
            elem: body
          }, {
            type: "kern",
            size: -clearance
          }, {
            type: "elem",
            elem: accentBody
          }]
        }, options);
      } else {
        accentBody = stretchy.svgSpan(group, options);
        accentBody = buildCommon.makeVList({
          positionType: "firstBaseline",
          children: [{
            type: "elem",
            elem: body
          }, {
            type: "elem",
            elem: accentBody,
            wrapperClasses: ["svg-align"],
            wrapperStyle: skew > 0 ? {
              width: "calc(100% - " + makeEm(2 * skew) + ")",
              marginLeft: makeEm(2 * skew)
            } : undefined
          }]
        }, options);
      }

      var accentWrap = buildCommon.makeSpan(["mord", "accent"], [accentBody], options);

      if (supSubGroup) {
        // Here, we replace the "base" child of the supsub with our newly
        // generated accent.
        supSubGroup.children[0] = accentWrap; // Since we don't rerun the height calculation after replacing the
        // accent, we manually recalculate height.

        supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height); // Accents should always be ords, even when their innards are not.

        supSubGroup.classes[0] = "mord";
        return supSubGroup;
      } else {
        return accentWrap;
      }
    };

    var mathmlBuilder$9 = (group, options) => {
      var accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode("mo", [makeText(group.label, group.mode)]);
      var node = new mathMLTree.MathNode("mover", [buildGroup(group.base, options), accentNode]);
      node.setAttribute("accent", "true");
      return node;
    };

    var NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map(accent => "\\" + accent).join("|")); // Accents

    defineFunction({
      type: "accent",
      names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
      props: {
        numArgs: 1
      },
      handler: (context, args) => {
        var base = normalizeArgument(args[0]);
        var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
        var isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde" || context.funcName === "\\widecheck";
        return {
          type: "accent",
          mode: context.parser.mode,
          label: context.funcName,
          isStretchy: isStretchy,
          isShifty: isShifty,
          base: base
        };
      },
      htmlBuilder: htmlBuilder$a,
      mathmlBuilder: mathmlBuilder$9
    }); // Text-mode accents

    defineFunction({
      type: "accent",
      names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\c", "\\r", "\\H", "\\v", "\\textcircled"],
      props: {
        numArgs: 1,
        allowedInText: true,
        allowedInMath: true,
        // unless in strict mode
        argTypes: ["primitive"]
      },
      handler: (context, args) => {
        var base = args[0];
        var mode = context.parser.mode;

        if (mode === "math") {
          context.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + context.funcName + " works only in text mode");
          mode = "text";
        }

        return {
          type: "accent",
          mode: mode,
          label: context.funcName,
          isStretchy: false,
          isShifty: true,
          base: base
        };
      },
      htmlBuilder: htmlBuilder$a,
      mathmlBuilder: mathmlBuilder$9
    });

    // Horizontal overlap functions
    defineFunction({
      type: "accentUnder",
      names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
      props: {
        numArgs: 1
      },
      handler: (_ref, args) => {
        var {
          parser,
          funcName
        } = _ref;
        var base = args[0];
        return {
          type: "accentUnder",
          mode: parser.mode,
          label: funcName,
          base: base
        };
      },
      htmlBuilder: (group, options) => {
        // Treat under accents much like underlines.
        var innerGroup = buildGroup$1(group.base, options);
        var accentBody = stretchy.svgSpan(group, options);
        var kern = group.label === "\\utilde" ? 0.12 : 0; // Generate the vlist, with the appropriate kerns

        var vlist = buildCommon.makeVList({
          positionType: "top",
          positionData: innerGroup.height,
          children: [{
            type: "elem",
            elem: accentBody,
            wrapperClasses: ["svg-align"]
          }, {
            type: "kern",
            size: kern
          }, {
            type: "elem",
            elem: innerGroup
          }]
        }, options);
        return buildCommon.makeSpan(["mord", "accentunder"], [vlist], options);
      },
      mathmlBuilder: (group, options) => {
        var accentNode = stretchy.mathMLnode(group.label);
        var node = new mathMLTree.MathNode("munder", [buildGroup(group.base, options), accentNode]);
        node.setAttribute("accentunder", "true");
        return node;
      }
    });

    // Helper function
    var paddedNode = group => {
      var node = new mathMLTree.MathNode("mpadded", group ? [group] : []);
      node.setAttribute("width", "+0.6em");
      node.setAttribute("lspace", "0.3em");
      return node;
    }; // Stretchy arrows with an optional argument


    defineFunction({
      type: "xArrow",
      names: ["\\xleftarrow", "\\xrightarrow", "\\xLeftarrow", "\\xRightarrow", "\\xleftrightarrow", "\\xLeftrightarrow", "\\xhookleftarrow", "\\xhookrightarrow", "\\xmapsto", "\\xrightharpoondown", "\\xrightharpoonup", "\\xleftharpoondown", "\\xleftharpoonup", "\\xrightleftharpoons", "\\xleftrightharpoons", "\\xlongequal", "\\xtwoheadrightarrow", "\\xtwoheadleftarrow", "\\xtofrom", // The next 3 functions are here to support the mhchem extension.
      // Direct use of these functions is discouraged and may break someday.
      "\\xrightleftarrows", "\\xrightequilibrium", "\\xleftequilibrium", // The next 3 functions are here only to support the {CD} environment.
      "\\\\cdrightarrow", "\\\\cdleftarrow", "\\\\cdlongequal"],
      props: {
        numArgs: 1,
        numOptionalArgs: 1
      },

      handler(_ref, args, optArgs) {
        var {
          parser,
          funcName
        } = _ref;
        return {
          type: "xArrow",
          mode: parser.mode,
          label: funcName,
          body: args[0],
          below: optArgs[0]
        };
      },

      // Flow is unable to correctly infer the type of `group`, even though it's
      // unamibiguously determined from the passed-in `type` above.
      htmlBuilder(group, options) {
        var style = options.style; // Build the argument groups in the appropriate style.
        // Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%
        // Some groups can return document fragments.  Handle those by wrapping
        // them in a span.

        var newOptions = options.havingStyle(style.sup());
        var upperGroup = buildCommon.wrapFragment(buildGroup$1(group.body, newOptions, options), options);
        var arrowPrefix = group.label.slice(0, 2) === "\\x" ? "x" : "cd";
        upperGroup.classes.push(arrowPrefix + "-arrow-pad");
        var lowerGroup;

        if (group.below) {
          // Build the lower group
          newOptions = options.havingStyle(style.sub());
          lowerGroup = buildCommon.wrapFragment(buildGroup$1(group.below, newOptions, options), options);
          lowerGroup.classes.push(arrowPrefix + "-arrow-pad");
        }

        var arrowBody = stretchy.svgSpan(group, options); // Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
        // The point we want on the math axis is at 0.5 * arrowBody.height.

        var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height; // 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi

        var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111; // 0.111 em = 2 mu

        if (upperGroup.depth > 0.25 || group.label === "\\xleftequilibrium") {
          upperShift -= upperGroup.depth; // shift up if depth encroaches
        } // Generate the vlist


        var vlist;

        if (lowerGroup) {
          var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
          vlist = buildCommon.makeVList({
            positionType: "individualShift",
            children: [{
              type: "elem",
              elem: upperGroup,
              shift: upperShift
            }, {
              type: "elem",
              elem: arrowBody,
              shift: arrowShift
            }, {
              type: "elem",
              elem: lowerGroup,
              shift: lowerShift
            }]
          }, options);
        } else {
          vlist = buildCommon.makeVList({
            positionType: "individualShift",
            children: [{
              type: "elem",
              elem: upperGroup,
              shift: upperShift
            }, {
              type: "elem",
              elem: arrowBody,
              shift: arrowShift
            }]
          }, options);
        } // $FlowFixMe: Replace this with passing "svg-align" into makeVList.


        vlist.children[0].children[0].children[1].classes.push("svg-align");
        return buildCommon.makeSpan(["mrel", "x-arrow"], [vlist], options);
      },

      mathmlBuilder(group, options) {
        var arrowNode = stretchy.mathMLnode(group.label);
        arrowNode.setAttribute("minsize", group.label.charAt(0) === "x" ? "1.75em" : "3.0em");
        var node;

        if (group.body) {
          var upperNode = paddedNode(buildGroup(group.body, options));

          if (group.below) {
            var lowerNode = paddedNode(buildGroup(group.below, options));
            node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
          } else {
            node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
          }
        } else if (group.below) {
          var _lowerNode = paddedNode(buildGroup(group.below, options));

          node = new mathMLTree.MathNode("munder", [arrowNode, _lowerNode]);
        } else {
          // This should never happen.
          // Parser.js throws an error if there is no argument.
          node = paddedNode();
          node = new mathMLTree.MathNode("mover", [arrowNode, node]);
        }

        return node;
      }

    });

    var cdArrowFunctionName = {
      ">": "\\\\cdrightarrow",
      "<": "\\\\cdleftarrow",
      "=": "\\\\cdlongequal",
      "A": "\\uparrow",
      "V": "\\downarrow",
      "|": "\\Vert",
      ".": "no arrow"
    };

    var newCell = () => {
      // Create an empty cell, to be filled below with parse nodes.
      // The parseTree from this module must be constructed like the
      // one created by parseArray(), so an empty CD cell must
      // be a ParseNode<"styling">. And CD is always displaystyle.
      // So these values are fixed and flow can do implicit typing.
      return {
        type: "styling",
        body: [],
        mode: "math",
        style: "display"
      };
    };

    var isStartOfArrow = node => {
      return node.type === "textord" && node.text === "@";
    };

    var isLabelEnd = (node, endChar) => {
      return (node.type === "mathord" || node.type === "atom") && node.text === endChar;
    };

    function cdArrow(arrowChar, labels, parser) {
      // Return a parse tree of an arrow and its labels.
      // This acts in a way similar to a macro expansion.
      var funcName = cdArrowFunctionName[arrowChar];

      switch (funcName) {
        case "\\\\cdrightarrow":
        case "\\\\cdleftarrow":
          return parser.callFunction(funcName, [labels[0]], [labels[1]]);

        case "\\uparrow":
        case "\\downarrow":
          {
            var leftLabel = parser.callFunction("\\\\cdleft", [labels[0]], []);
            var bareArrow = {
              type: "atom",
              text: funcName,
              mode: "math",
              family: "rel"
            };
            var sizedArrow = parser.callFunction("\\Big", [bareArrow], []);
            var rightLabel = parser.callFunction("\\\\cdright", [labels[1]], []);
            var arrowGroup = {
              type: "ordgroup",
              mode: "math",
              body: [leftLabel, sizedArrow, rightLabel]
            };
            return parser.callFunction("\\\\cdparent", [arrowGroup], []);
          }

        case "\\\\cdlongequal":
          return parser.callFunction("\\\\cdlongequal", [], []);

        case "\\Vert":
          {
            var arrow = {
              type: "textord",
              text: "\\Vert",
              mode: "math"
            };
            return parser.callFunction("\\Big", [arrow], []);
          }

        default:
          return {
            type: "textord",
            text: " ",
            mode: "math"
          };
      }
    }

    function parseCD(parser) {
      // Get the array's parse nodes with \\ temporarily mapped to \cr.
      var parsedRows = [];
      parser.gullet.beginGroup();
      parser.gullet.macros.set("\\cr", "\\\\\\relax");
      parser.gullet.beginGroup();

      while (true) {
        // eslint-disable-line no-constant-condition
        // Get the parse nodes for the next row.
        parsedRows.push(parser.parseExpression(false, "\\\\"));
        parser.gullet.endGroup();
        parser.gullet.beginGroup();
        var next = parser.fetch().text;

        if (next === "&" || next === "\\\\") {
          parser.consume();
        } else if (next === "\\end") {
          if (parsedRows[parsedRows.length - 1].length === 0) {
            parsedRows.pop(); // final row ended in \\
          }

          break;
        } else {
          throw new ParseError("Expected \\\\ or \\cr or \\end", parser.nextToken);
        }
      }

      var row = [];
      var body = [row]; // Loop thru the parse nodes. Collect them into cells and arrows.

      for (var i = 0; i < parsedRows.length; i++) {
        // Start a new row.
        var rowNodes = parsedRows[i]; // Create the first cell.

        var cell = newCell();

        for (var j = 0; j < rowNodes.length; j++) {
          if (!isStartOfArrow(rowNodes[j])) {
            // If a parseNode is not an arrow, it goes into a cell.
            cell.body.push(rowNodes[j]);
          } else {
            // Parse node j is an "@", the start of an arrow.
            // Before starting on the arrow, push the cell into `row`.
            row.push(cell); // Now collect parseNodes into an arrow.
            // The character after "@" defines the arrow type.

            j += 1;
            var arrowChar = assertSymbolNodeType(rowNodes[j]).text; // Create two empty label nodes. We may or may not use them.

            var labels = new Array(2);
            labels[0] = {
              type: "ordgroup",
              mode: "math",
              body: []
            };
            labels[1] = {
              type: "ordgroup",
              mode: "math",
              body: []
            }; // Process the arrow.

            if ("=|.".indexOf(arrowChar) > -1) ; else if ("<>AV".indexOf(arrowChar) > -1) {
              // Four arrows, `@>>>`, `@<<<`, `@AAA`, and `@VVV`, each take
              // two optional labels. E.g. the right-point arrow syntax is
              // really:  @>{optional label}>{optional label}>
              // Collect parseNodes into labels.
              for (var labelNum = 0; labelNum < 2; labelNum++) {
                var inLabel = true;

                for (var k = j + 1; k < rowNodes.length; k++) {
                  if (isLabelEnd(rowNodes[k], arrowChar)) {
                    inLabel = false;
                    j = k;
                    break;
                  }

                  if (isStartOfArrow(rowNodes[k])) {
                    throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[k]);
                  }

                  labels[labelNum].body.push(rowNodes[k]);
                }

                if (inLabel) {
                  // isLabelEnd never returned a true.
                  throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[j]);
                }
              }
            } else {
              throw new ParseError("Expected one of \"<>AV=|.\" after @", rowNodes[j]);
            } // Now join the arrow to its labels.


            var arrow = cdArrow(arrowChar, labels, parser); // Wrap the arrow in  ParseNode<"styling">.
            // This is done to match parseArray() behavior.

            var wrappedArrow = {
              type: "styling",
              body: [arrow],
              mode: "math",
              style: "display" // CD is always displaystyle.

            };
            row.push(wrappedArrow); // In CD's syntax, cells are implicit. That is, everything that
            // is not an arrow gets collected into a cell. So create an empty
            // cell now. It will collect upcoming parseNodes.

            cell = newCell();
          }
        }

        if (i % 2 === 0) {
          // Even-numbered rows consist of: cell, arrow, cell, arrow, ... cell
          // The last cell is not yet pushed into `row`, so:
          row.push(cell);
        } else {
          // Odd-numbered rows consist of: vert arrow, empty cell, ... vert arrow
          // Remove the empty cell that was placed at the beginning of `row`.
          row.shift();
        }

        row = [];
        body.push(row);
      } // End row group


      parser.gullet.endGroup(); // End array group defining \\

      parser.gullet.endGroup(); // define column separation.

      var cols = new Array(body[0].length).fill({
        type: "align",
        align: "c",
        pregap: 0.25,
        // CD package sets \enskip between columns.
        postgap: 0.25 // So pre and post each get half an \enskip, i.e. 0.25em.

      });
      return {
        type: "array",
        mode: "math",
        body,
        arraystretch: 1,
        addJot: true,
        rowGaps: [null],
        cols,
        colSeparationType: "CD",
        hLinesBeforeRow: new Array(body.length + 1).fill([])
      };
    } // The functions below are not available for general use.
    // They are here only for internal use by the {CD} environment in placing labels
    // next to vertical arrows.
    // We don't need any such functions for horizontal arrows because we can reuse
    // the functionality that already exists for extensible arrows.

    defineFunction({
      type: "cdlabel",
      names: ["\\\\cdleft", "\\\\cdright"],
      props: {
        numArgs: 1
      },

      handler(_ref, args) {
        var {
          parser,
          funcName
        } = _ref;
        return {
          type: "cdlabel",
          mode: parser.mode,
          side: funcName.slice(4),
          label: args[0]
        };
      },

      htmlBuilder(group, options) {
        var newOptions = options.havingStyle(options.style.sup());
        var label = buildCommon.wrapFragment(buildGroup$1(group.label, newOptions, options), options);
        label.classes.push("cd-label-" + group.side);
        label.style.bottom = makeEm(0.8 - label.depth); // Zero out label height & depth, so vertical align of arrow is set
        // by the arrow height, not by the label.

        label.height = 0;
        label.depth = 0;
        return label;
      },

      mathmlBuilder(group, options) {
        var label = new mathMLTree.MathNode("mrow", [buildGroup(group.label, options)]);
        label = new mathMLTree.MathNode("mpadded", [label]);
        label.setAttribute("width", "0");

        if (group.side === "left") {
          label.setAttribute("lspace", "-1width");
        } // We have to guess at vertical alignment. We know the arrow is 1.8em tall,
        // But we don't know the height or depth of the label.


        label.setAttribute("voffset", "0.7em");
        label = new mathMLTree.MathNode("mstyle", [label]);
        label.setAttribute("displaystyle", "false");
        label.setAttribute("scriptlevel", "1");
        return label;
      }

    });
    defineFunction({
      type: "cdlabelparent",
      names: ["\\\\cdparent"],
      props: {
        numArgs: 1
      },

      handler(_ref2, args) {
        var {
          parser
        } = _ref2;
        return {
          type: "cdlabelparent",
          mode: parser.mode,
          fragment: args[0]
        };
      },

      htmlBuilder(group, options) {
        // Wrap the vertical arrow and its labels.
        // The parent gets position: relative. The child gets position: absolute.
        // So CSS can locate the label correctly.
        var parent = buildCommon.wrapFragment(buildGroup$1(group.fragment, options), options);
        parent.classes.push("cd-vert-arrow");
        return parent;
      },

      mathmlBuilder(group, options) {
        return new mathMLTree.MathNode("mrow", [buildGroup(group.fragment, options)]);
      }

    });

    // {123} and converts into symbol with code 123.  It is used by the *macro*
    // \char defined in macros.js.

    defineFunction({
      type: "textord",
      names: ["\\@char"],
      props: {
        numArgs: 1,
        allowedInText: true
      },

      handler(_ref, args) {
        var {
          parser
        } = _ref;
        var arg = assertNodeType(args[0], "ordgroup");
        var group = arg.body;
        var number = "";

        for (var i = 0; i < group.length; i++) {
          var node = assertNodeType(group[i], "textord");
          number += node.text;
        }

        var code = parseInt(number);
        var text;

        if (isNaN(code)) {
          throw new ParseError("\\@char has non-numeric argument " + number); // If we drop IE support, the following code could be replaced with
          // text = String.fromCodePoint(code)
        } else if (code < 0 || code >= 0x10ffff) {
          throw new ParseError("\\@char with invalid code point " + number);
        } else if (code <= 0xffff) {
          text = String.fromCharCode(code);
        } else {
          // Astral code point; split into surrogate halves
          code -= 0x10000;
          text = String.fromCharCode((code >> 10) + 0xd800, (code & 0x3ff) + 0xdc00);
        }

        return {
          type: "textord",
          mode: parser.mode,
          text: text
        };
      }

    });

    var htmlBuilder$9 = (group, options) => {
      var elements = buildExpression$1(group.body, options.withColor(group.color), false); // \color isn't supposed to affect the type of the elements it contains.
      // To accomplish this, we wrap the results in a fragment, so the inner
      // elements will be able to directly interact with their neighbors. For
      // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`

      return buildCommon.makeFragment(elements);
    };

    var mathmlBuilder$8 = (group, options) => {
      var inner = buildExpression(group.body, options.withColor(group.color));
      var node = new mathMLTree.MathNode("mstyle", inner);
      node.setAttribute("mathcolor", group.color);
      return node;
    };

    defineFunction({
      type: "color",
      names: ["\\textcolor"],
      props: {
        numArgs: 2,
        allowedInText: true,
        argTypes: ["color", "original"]
      },

      handler(_ref, args) {
        var {
          parser
        } = _ref;
        var color = assertNodeType(args[0], "color-token").color;
        var body = args[1];
        return {
          type: "color",
          mode: parser.mode,
          color,
          body: ordargument(body)
        };
      },

      htmlBuilder: htmlBuilder$9,
      mathmlBuilder: mathmlBuilder$8
    });
    defineFunction({
      type: "color",
      names: ["\\color"],
      props: {
        numArgs: 1,
        allowedInText: true,
        argTypes: ["color"]
      },

      handler(_ref2, args) {
        var {
          parser,
          breakOnTokenText
        } = _ref2;
        var color = assertNodeType(args[0], "color-token").color; // Set macro \current@color in current namespace to store the current
        // color, mimicking the behavior of color.sty.
        // This is currently used just to correctly color a \right
        // that follows a \color command.

        parser.gullet.macros.set("\\current@color", color); // Parse out the implicit body that should be colored.

        var body = parser.parseExpression(true, breakOnTokenText);
        return {
          type: "color",
          mode: parser.mode,
          color,
          body
        };
      },

      htmlBuilder: htmlBuilder$9,
      mathmlBuilder: mathmlBuilder$8
    });

    // Row breaks within tabular environments, and line breaks at top level

    defineFunction({
      type: "cr",
      names: ["\\\\"],
      props: {
        numArgs: 0,
        numOptionalArgs: 1,
        argTypes: ["size"],
        allowedInText: true
      },

      handler(_ref, args, optArgs) {
        var {
          parser
        } = _ref;
        var size = optArgs[0];
        var newLine = !parser.settings.displayMode || !parser.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline " + "does nothing in display mode");
        return {
          type: "cr",
          mode: parser.mode,
          newLine,
          size: size && assertNodeType(size, "size").value
        };
      },

      // The following builders are called only at the top level,
      // not within tabular/array environments.
      htmlBuilder(group, options) {
        var span = buildCommon.makeSpan(["mspace"], [], options);

        if (group.newLine) {
          span.classes.push("newline");

          if (group.size) {
            span.style.marginTop = makeEm(calculateSize(group.size, options));
          }
        }

        return span;
      },

      mathmlBuilder(group, options) {
        var node = new mathMLTree.MathNode("mspace");

        if (group.newLine) {
          node.setAttribute("linebreak", "newline");

          if (group.size) {
            node.setAttribute("height", makeEm(calculateSize(group.size, options)));
          }
        }

        return node;
      }

    });

    var globalMap = {
      "\\global": "\\global",
      "\\long": "\\\\globallong",
      "\\\\globallong": "\\\\globallong",
      "\\def": "\\gdef",
      "\\gdef": "\\gdef",
      "\\edef": "\\xdef",
      "\\xdef": "\\xdef",
      "\\let": "\\\\globallet",
      "\\futurelet": "\\\\globalfuture"
    };

    var checkControlSequence = tok => {
      var name = tok.text;

      if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
        throw new ParseError("Expected a control sequence", tok);
      }

      return name;
    };

    var getRHS = parser => {
      var tok = parser.gullet.popToken();

      if (tok.text === "=") {
        // consume optional equals
        tok = parser.gullet.popToken();

        if (tok.text === " ") {
          // consume one optional space
          tok = parser.gullet.popToken();
        }
      }

      return tok;
    };

    var letCommand = (parser, name, tok, global) => {
      var macro = parser.gullet.macros.get(tok.text);

      if (macro == null) {
        // don't expand it later even if a macro with the same name is defined
        // e.g., \let\foo=\frac \def\frac{\relax} \frac12
        tok.noexpand = true;
        macro = {
          tokens: [tok],
          numArgs: 0,
          // reproduce the same behavior in expansion
          unexpandable: !parser.gullet.isExpandable(tok.text)
        };
      }

      parser.gullet.macros.set(name, macro, global);
    }; // <assignment> -> <non-macro assignment>|<macro assignment>
    // <non-macro assignment> -> <simple assignment>|\global<non-macro assignment>
    // <macro assignment> -> <definition>|<prefix><macro assignment>
    // <prefix> -> \global|\long|\outer


    defineFunction({
      type: "internal",
      names: ["\\global", "\\long", "\\\\globallong" // can’t be entered directly
      ],
      props: {
        numArgs: 0,
        allowedInText: true
      },

      handler(_ref) {
        var {
          parser,
          funcName
        } = _ref;
        parser.consumeSpaces();
        var token = parser.fetch();

        if (globalMap[token.text]) {
          // KaTeX doesn't have \par, so ignore \long
          if (funcName === "\\global" || funcName === "\\\\globallong") {
            token.text = globalMap[token.text];
          }

          return assertNodeType(parser.parseFunction(), "internal");
        }

        throw new ParseError("Invalid token after macro prefix", token);
      }

    }); // Basic support for macro definitions: \def, \gdef, \edef, \xdef
    // <definition> -> <def><control sequence><definition text>
    // <def> -> \def|\gdef|\edef|\xdef
    // <definition text> -> <parameter text><left brace><balanced text><right brace>

    defineFunction({
      type: "internal",
      names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
      props: {
        numArgs: 0,
        allowedInText: true,
        primitive: true
      },

      handler(_ref2) {
        var {
          parser,
          funcName
        } = _ref2;
        var tok = parser.gullet.popToken();
        var name = tok.text;

        if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
          throw new ParseError("Expected a control sequence", tok);
        }

        var numArgs = 0;
        var insert;
        var delimiters = [[]]; // <parameter text> contains no braces

        while (parser.gullet.future().text !== "{") {
          tok = parser.gullet.popToken();

          if (tok.text === "#") {
            // If the very last character of the <parameter text> is #, so that
            // this # is immediately followed by {, TeX will behave as if the {
            // had been inserted at the right end of both the parameter text
            // and the replacement text.
            if (parser.gullet.future().text === "{") {
              insert = parser.gullet.future();
              delimiters[numArgs].push("{");
              break;
            } // A parameter, the first appearance of # must be followed by 1,
            // the next by 2, and so on; up to nine #’s are allowed


            tok = parser.gullet.popToken();

            if (!/^[1-9]$/.test(tok.text)) {
              throw new ParseError("Invalid argument number \"" + tok.text + "\"");
            }

            if (parseInt(tok.text) !== numArgs + 1) {
              throw new ParseError("Argument number \"" + tok.text + "\" out of order");
            }

            numArgs++;
            delimiters.push([]);
          } else if (tok.text === "EOF") {
            throw new ParseError("Expected a macro definition");
          } else {
            delimiters[numArgs].push(tok.text);
          }
        } // replacement text, enclosed in '{' and '}' and properly nested


        var {
          tokens
        } = parser.gullet.consumeArg();

        if (insert) {
          tokens.unshift(insert);
        }

        if (funcName === "\\edef" || funcName === "\\xdef") {
          tokens = parser.gullet.expandTokens(tokens);
          tokens.reverse(); // to fit in with stack order
        } // Final arg is the expansion of the macro


        parser.gullet.macros.set(name, {
          tokens,
          numArgs,
          delimiters
        }, funcName === globalMap[funcName]);
        return {
          type: "internal",
          mode: parser.mode
        };
      }

    }); // <simple assignment> -> <let assignment>
    // <let assignment> -> \futurelet<control sequence><token><token>
    //     | \let<control sequence><equals><one optional space><token>
    // <equals> -> <optional spaces>|<optional spaces>=

    defineFunction({
      type: "internal",
      names: ["\\let", "\\\\globallet" // can’t be entered directly
      ],
      props: {
        numArgs: 0,
        allowedInText: true,
        primitive: true
      },

      handler(_ref3) {
        var {
          parser,
          funcName
        } = _ref3;
        var name = checkControlSequence(parser.gullet.popToken());
        parser.gullet.consumeSpaces();
        var tok = getRHS(parser);
        letCommand(parser, name, tok, funcName === "\\\\globallet");
        return {
          type: "internal",
          mode: parser.mode
        };
      }

    }); // ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf

    defineFunction({
      type: "internal",
      names: ["\\futurelet", "\\\\globalfuture" // can’t be entered directly
      ],
      props: {
        numArgs: 0,
        allowedInText: true,
        primitive: true
      },

      handler(_ref4) {
        var {
          parser,
          funcName
        } = _ref4;
        var name = checkControlSequence(parser.gullet.popToken());
        var middle = parser.gullet.popToken();
        var tok = parser.gullet.popToken();
        letCommand(parser, name, tok, funcName === "\\\\globalfuture");
        parser.gullet.pushToken(tok);
        parser.gullet.pushToken(middle);
        return {
          type: "internal",
          mode: parser.mode
        };
      }

    });

    /**
     * This file deals with creating delimiters of various sizes. The TeXbook
     * discusses these routines on page 441-442, in the "Another subroutine sets box
     * x to a specified variable delimiter" paragraph.
     *
     * There are three main routines here. `makeSmallDelim` makes a delimiter in the
     * normal font, but in either text, script, or scriptscript style.
     * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
     * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
     * smaller pieces that are stacked on top of one another.
     *
     * The functions take a parameter `center`, which determines if the delimiter
     * should be centered around the axis.
     *
     * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
     * one of the given sizes. This is used for things like `\bigl`.
     * `customSizedDelim` makes a delimiter with a given total height+depth. It is
     * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
     * delimiter which surrounds an expression of a given height an depth. It is
     * used in `\left` and `\right`.
     */

    /**
     * Get the metrics for a given symbol and font, after transformation (i.e.
     * after following replacement from symbols.js)
     */
    var getMetrics = function getMetrics(symbol, font, mode) {
      var replace = symbols.math[symbol] && symbols.math[symbol].replace;
      var metrics = getCharacterMetrics(replace || symbol, font, mode);

      if (!metrics) {
        throw new Error("Unsupported symbol " + symbol + " and font size " + font + ".");
      }

      return metrics;
    };
    /**
     * Puts a delimiter span in a given style, and adds appropriate height, depth,
     * and maxFontSizes.
     */


    var styleWrap = function styleWrap(delim, toStyle, options, classes) {
      var newOptions = options.havingBaseStyle(toStyle);
      var span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [delim], options);
      var delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
      span.height *= delimSizeMultiplier;
      span.depth *= delimSizeMultiplier;
      span.maxFontSize = newOptions.sizeMultiplier;
      return span;
    };

    var centerSpan = function centerSpan(span, options, style) {
      var newOptions = options.havingBaseStyle(style);
      var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
      span.classes.push("delimcenter");
      span.style.top = makeEm(shift);
      span.height -= shift;
      span.depth += shift;
    };
    /**
     * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
     * font, but is restyled to either be in textstyle, scriptstyle, or
     * scriptscriptstyle.
     */


    var makeSmallDelim = function makeSmallDelim(delim, style, center, options, mode, classes) {
      var text = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);
      var span = styleWrap(text, style, options, classes);

      if (center) {
        centerSpan(span, options, style);
      }

      return span;
    };
    /**
     * Builds a symbol in the given font size (note size is an integer)
     */


    var mathrmSize = function mathrmSize(value, size, mode, options) {
      return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode, options);
    };
    /**
     * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
     * Size3, or Size4 fonts. It is always rendered in textstyle.
     */


    var makeLargeDelim = function makeLargeDelim(delim, size, center, options, mode, classes) {
      var inner = mathrmSize(delim, size, mode, options);
      var span = styleWrap(buildCommon.makeSpan(["delimsizing", "size" + size], [inner], options), Style$1.TEXT, options, classes);

      if (center) {
        centerSpan(span, options, Style$1.TEXT);
      }

      return span;
    };
    /**
     * Make a span from a font glyph with the given offset and in the given font.
     * This is used in makeStackedDelim to make the stacking pieces for the delimiter.
     */


    var makeGlyphSpan = function makeGlyphSpan(symbol, font, mode) {
      var sizeClass; // Apply the correct CSS class to choose the right font.

      if (font === "Size1-Regular") {
        sizeClass = "delim-size1";
      } else
        /* if (font === "Size4-Regular") */
        {
          sizeClass = "delim-size4";
        }

      var corner = buildCommon.makeSpan(["delimsizinginner", sizeClass], [buildCommon.makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]); // Since this will be passed into `makeVList` in the end, wrap the element
      // in the appropriate tag that VList uses.

      return {
        type: "elem",
        elem: corner
      };
    };

    var makeInner = function makeInner(ch, height, options) {
      // Create a span with inline SVG for the inner part of a tall stacked delimiter.
      var width = fontMetricsData['Size4-Regular'][ch.charCodeAt(0)] ? fontMetricsData['Size4-Regular'][ch.charCodeAt(0)][4] : fontMetricsData['Size1-Regular'][ch.charCodeAt(0)][4];
      var path = new PathNode("inner", innerPath(ch, Math.round(1000 * height)));
      var svgNode = new SvgNode([path], {
        "width": makeEm(width),
        "height": makeEm(height),
        // Override CSS rule `.katex svg { width: 100% }`
        "style": "width:" + makeEm(width),
        "viewBox": "0 0 " + 1000 * width + " " + Math.round(1000 * height),
        "preserveAspectRatio": "xMinYMin"
      });
      var span = buildCommon.makeSvgSpan([], [svgNode], options);
      span.height = height;
      span.style.height = makeEm(height);
      span.style.width = makeEm(width);
      return {
        type: "elem",
        elem: span
      };
    }; // Helpers for makeStackedDelim


    var lapInEms = 0.008;
    var lap = {
      type: "kern",
      size: -1 * lapInEms
    };
    var verts = ["|", "\\lvert", "\\rvert", "\\vert"];
    var doubleVerts = ["\\|", "\\lVert", "\\rVert", "\\Vert"];
    /**
     * Make a stacked delimiter out of a given delimiter, with the total height at
     * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
     */

    var makeStackedDelim = function makeStackedDelim(delim, heightTotal, center, options, mode, classes) {
      // There are four parts, the top, an optional middle, a repeated part, and a
      // bottom.
      var top;
      var middle;
      var repeat;
      var bottom;
      top = repeat = bottom = delim;
      middle = null; // Also keep track of what font the delimiters are in

      var font = "Size1-Regular"; // We set the parts and font based on the symbol. Note that we use
      // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
      // repeats of the arrows

      if (delim === "\\uparrow") {
        repeat = bottom = "\u23d0";
      } else if (delim === "\\Uparrow") {
        repeat = bottom = "\u2016";
      } else if (delim === "\\downarrow") {
        top = repeat = "\u23d0";
      } else if (delim === "\\Downarrow") {
        top = repeat = "\u2016";
      } else if (delim === "\\updownarrow") {
        top = "\\uparrow";
        repeat = "\u23d0";
        bottom = "\\downarrow";
      } else if (delim === "\\Updownarrow") {
        top = "\\Uparrow";
        repeat = "\u2016";
        bottom = "\\Downarrow";
      } else if (utils.contains(verts, delim)) {
        repeat = "\u2223";
      } else if (utils.contains(doubleVerts, delim)) {
        repeat = "\u2225";
      } else if (delim === "[" || delim === "\\lbrack") {
        top = "\u23a1";
        repeat = "\u23a2";
        bottom = "\u23a3";
        font = "Size4-Regular";
      } else if (delim === "]" || delim === "\\rbrack") {
        top = "\u23a4";
        repeat = "\u23a5";
        bottom = "\u23a6";
        font = "Size4-Regular";
      } else if (delim === "\\lfloor" || delim === "\u230a") {
        repeat = top = "\u23a2";
        bottom = "\u23a3";
        font = "Size4-Regular";
      } else if (delim === "\\lceil" || delim === "\u2308") {
        top = "\u23a1";
        repeat = bottom = "\u23a2";
        font = "Size4-Regular";
      } else if (delim === "\\rfloor" || delim === "\u230b") {
        repeat = top = "\u23a5";
        bottom = "\u23a6";
        font = "Size4-Regular";
      } else if (delim === "\\rceil" || delim === "\u2309") {
        top = "\u23a4";
        repeat = bottom = "\u23a5";
        font = "Size4-Regular";
      } else if (delim === "(" || delim === "\\lparen") {
        top = "\u239b";
        repeat = "\u239c";
        bottom = "\u239d";
        font = "Size4-Regular";
      } else if (delim === ")" || delim === "\\rparen") {
        top = "\u239e";
        repeat = "\u239f";
        bottom = "\u23a0";
        font = "Size4-Regular";
      } else if (delim === "\\{" || delim === "\\lbrace") {
        top = "\u23a7";
        middle = "\u23a8";
        bottom = "\u23a9";
        repeat = "\u23aa";
        font = "Size4-Regular";
      } else if (delim === "\\}" || delim === "\\rbrace") {
        top = "\u23ab";
        middle = "\u23ac";
        bottom = "\u23ad";
        repeat = "\u23aa";
        font = "Size4-Regular";
      } else if (delim === "\\lgroup" || delim === "\u27ee") {
        top = "\u23a7";
        bottom = "\u23a9";
        repeat = "\u23aa";
        font = "Size4-Regular";
      } else if (delim === "\\rgroup" || delim === "\u27ef") {
        top = "\u23ab";
        bottom = "\u23ad";
        repeat = "\u23aa";
        font = "Size4-Regular";
      } else if (delim === "\\lmoustache" || delim === "\u23b0") {
        top = "\u23a7";
        bottom = "\u23ad";
        repeat = "\u23aa";
        font = "Size4-Regular";
      } else if (delim === "\\rmoustache" || delim === "\u23b1") {
        top = "\u23ab";
        bottom = "\u23a9";
        repeat = "\u23aa";
        font = "Size4-Regular";
      } // Get the metrics of the four sections


      var topMetrics = getMetrics(top, font, mode);
      var topHeightTotal = topMetrics.height + topMetrics.depth;
      var repeatMetrics = getMetrics(repeat, font, mode);
      var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
      var bottomMetrics = getMetrics(bottom, font, mode);
      var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
      var middleHeightTotal = 0;
      var middleFactor = 1;

      if (middle !== null) {
        var middleMetrics = getMetrics(middle, font, mode);
        middleHeightTotal = middleMetrics.height + middleMetrics.depth;
        middleFactor = 2; // repeat symmetrically above and below middle
      } // Calcuate the minimal height that the delimiter can have.
      // It is at least the size of the top, bottom, and optional middle combined.


      var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal; // Compute the number of copies of the repeat symbol we will need

      var repeatCount = Math.max(0, Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal))); // Compute the total height of the delimiter including all the symbols

      var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal; // The center of the delimiter is placed at the center of the axis. Note
      // that in this context, "center" means that the delimiter should be
      // centered around the axis in the current style, while normally it is
      // centered around the axis in textstyle.

      var axisHeight = options.fontMetrics().axisHeight;

      if (center) {
        axisHeight *= options.sizeMultiplier;
      } // Calculate the depth


      var depth = realHeightTotal / 2 - axisHeight; // Now, we start building the pieces that will go into the vlist
      // Keep a list of the pieces of the stacked delimiter

      var stack = []; // Add the bottom symbol

      stack.push(makeGlyphSpan(bottom, font, mode));
      stack.push(lap); // overlap

      if (middle === null) {
        // The middle section will be an SVG. Make it an extra 0.016em tall.
        // We'll overlap by 0.008em at top and bottom.
        var innerHeight = realHeightTotal - topHeightTotal - bottomHeightTotal + 2 * lapInEms;
        stack.push(makeInner(repeat, innerHeight, options));
      } else {
        // When there is a middle bit, we need the middle part and two repeated
        // sections
        var _innerHeight = (realHeightTotal - topHeightTotal - bottomHeightTotal - middleHeightTotal) / 2 + 2 * lapInEms;

        stack.push(makeInner(repeat, _innerHeight, options)); // Now insert the middle of the brace.

        stack.push(lap);
        stack.push(makeGlyphSpan(middle, font, mode));
        stack.push(lap);
        stack.push(makeInner(repeat, _innerHeight, options));
      } // Add the top symbol


      stack.push(lap);
      stack.push(makeGlyphSpan(top, font, mode)); // Finally, build the vlist

      var newOptions = options.havingBaseStyle(Style$1.TEXT);
      var inner = buildCommon.makeVList({
        positionType: "bottom",
        positionData: depth,
        children: stack
      }, newOptions);
      return styleWrap(buildCommon.makeSpan(["delimsizing", "mult"], [inner], newOptions), Style$1.TEXT, options, classes);
    }; // All surds have 0.08em padding above the viniculum inside the SVG.
    // That keeps browser span height rounding error from pinching the line.


    var vbPad = 80; // padding above the surd, measured inside the viewBox.

    var emPad = 0.08; // padding, in ems, measured in the document.

    var sqrtSvg = function sqrtSvg(sqrtName, height, viewBoxHeight, extraViniculum, options) {
      var path = sqrtPath(sqrtName, extraViniculum, viewBoxHeight);
      var pathNode = new PathNode(sqrtName, path);
      var svg = new SvgNode([pathNode], {
        // Note: 1000:1 ratio of viewBox to document em width.
        "width": "400em",
        "height": makeEm(height),
        "viewBox": "0 0 400000 " + viewBoxHeight,
        "preserveAspectRatio": "xMinYMin slice"
      });
      return buildCommon.makeSvgSpan(["hide-tail"], [svg], options);
    };
    /**
     * Make a sqrt image of the given height,
     */


    var makeSqrtImage = function makeSqrtImage(height, options) {
      // Define a newOptions that removes the effect of size changes such as \Huge.
      // We don't pick different a height surd for \Huge. For it, we scale up.
      var newOptions = options.havingBaseSizing(); // Pick the desired surd glyph from a sequence of surds.

      var delim = traverseSequence("\\surd", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);
      var sizeMultiplier = newOptions.sizeMultiplier; // default
      // The standard sqrt SVGs each have a 0.04em thick viniculum.
      // If Settings.minRuleThickness is larger than that, we add extraViniculum.

      var extraViniculum = Math.max(0, options.minRuleThickness - options.fontMetrics().sqrtRuleThickness); // Create a span containing an SVG image of a sqrt symbol.

      var span;
      var spanHeight = 0;
      var texHeight = 0;
      var viewBoxHeight = 0;
      var advanceWidth; // We create viewBoxes with 80 units of "padding" above each surd.
      // Then browser rounding error on the parent span height will not
      // encroach on the ink of the viniculum. But that padding is not
      // included in the TeX-like `height` used for calculation of
      // vertical alignment. So texHeight = span.height < span.style.height.

      if (delim.type === "small") {
        // Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
        // 1000 unit normal glyph height.
        viewBoxHeight = 1000 + 1000 * extraViniculum + vbPad;

        if (height < 1.0) {
          sizeMultiplier = 1.0; // mimic a \textfont radical
        } else if (height < 1.4) {
          sizeMultiplier = 0.7; // mimic a \scriptfont radical
        }

        spanHeight = (1.0 + extraViniculum + emPad) / sizeMultiplier;
        texHeight = (1.00 + extraViniculum) / sizeMultiplier;
        span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, extraViniculum, options);
        span.style.minWidth = "0.853em";
        advanceWidth = 0.833 / sizeMultiplier; // from the font.
      } else if (delim.type === "large") {
        // These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
        viewBoxHeight = (1000 + vbPad) * sizeToMaxHeight[delim.size];
        texHeight = (sizeToMaxHeight[delim.size] + extraViniculum) / sizeMultiplier;
        spanHeight = (sizeToMaxHeight[delim.size] + extraViniculum + emPad) / sizeMultiplier;
        span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, extraViniculum, options);
        span.style.minWidth = "1.02em";
        advanceWidth = 1.0 / sizeMultiplier; // 1.0 from the font.
      } else {
        // Tall sqrt. In TeX, this would be stacked using multiple glyphs.
        // We'll use a single SVG to accomplish the same thing.
        spanHeight = height + extraViniculum + emPad;
        texHeight = height + extraViniculum;
        viewBoxHeight = Math.floor(1000 * height + extraViniculum) + vbPad;
        span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, extraViniculum, options);
        span.style.minWidth = "0.742em";
        advanceWidth = 1.056;
      }

      span.height = texHeight;
      span.style.height = makeEm(spanHeight);
      return {
        span,
        advanceWidth,
        // Calculate the actual line width.
        // This actually should depend on the chosen font -- e.g. \boldmath
        // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
        // have thicker rules.
        ruleWidth: (options.fontMetrics().sqrtRuleThickness + extraViniculum) * sizeMultiplier
      };
    }; // There are three kinds of delimiters, delimiters that stack when they become
    // too large


    var stackLargeDelimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230a", "\u230b", "\\lceil", "\\rceil", "\u2308", "\u2309", "\\surd"]; // delimiters that always stack

    var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27ee", "\u27ef", "\\lmoustache", "\\rmoustache", "\u23b0", "\u23b1"]; // and delimiters that never stack

    var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"]; // Metrics of the different sizes. Found by looking at TeX's output of
    // $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
    // Used to create stacked delimiters of appropriate sizes in makeSizedDelim.

    var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];
    /**
     * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
     */

    var makeSizedDelim = function makeSizedDelim(delim, size, options, mode, classes) {
      // < and > turn into \langle and \rangle in delimiters
      if (delim === "<" || delim === "\\lt" || delim === "\u27e8") {
        delim = "\\langle";
      } else if (delim === ">" || delim === "\\gt" || delim === "\u27e9") {
        delim = "\\rangle";
      } // Sized delimiters are never centered.


      if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {
        return makeLargeDelim(delim, size, false, options, mode, classes);
      } else if (utils.contains(stackAlwaysDelimiters, delim)) {
        return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
      } else {
        throw new ParseError("Illegal delimiter: '" + delim + "'");
      }
    };
    /**
     * There are three different sequences of delimiter sizes that the delimiters
     * follow depending on the kind of delimiter. This is used when creating custom
     * sized delimiters to decide whether to create a small, large, or stacked
     * delimiter.
     *
     * In real TeX, these sequences aren't explicitly defined, but are instead
     * defined inside the font metrics. Since there are only three sequences that
     * are possible for the delimiters that TeX defines, it is easier to just encode
     * them explicitly here.
     */


    // Delimiters that never stack try small delimiters and large delimiters only
    var stackNeverDelimiterSequence = [{
      type: "small",
      style: Style$1.SCRIPTSCRIPT
    }, {
      type: "small",
      style: Style$1.SCRIPT
    }, {
      type: "small",
      style: Style$1.TEXT
    }, {
      type: "large",
      size: 1
    }, {
      type: "large",
      size: 2
    }, {
      type: "large",
      size: 3
    }, {
      type: "large",
      size: 4
    }]; // Delimiters that always stack try the small delimiters first, then stack

    var stackAlwaysDelimiterSequence = [{
      type: "small",
      style: Style$1.SCRIPTSCRIPT
    }, {
      type: "small",
      style: Style$1.SCRIPT
    }, {
      type: "small",
      style: Style$1.TEXT
    }, {
      type: "stack"
    }]; // Delimiters that stack when large try the small and then large delimiters, and
    // stack afterwards

    var stackLargeDelimiterSequence = [{
      type: "small",
      style: Style$1.SCRIPTSCRIPT
    }, {
      type: "small",
      style: Style$1.SCRIPT
    }, {
      type: "small",
      style: Style$1.TEXT
    }, {
      type: "large",
      size: 1
    }, {
      type: "large",
      size: 2
    }, {
      type: "large",
      size: 3
    }, {
      type: "large",
      size: 4
    }, {
      type: "stack"
    }];
    /**
     * Get the font used in a delimiter based on what kind of delimiter it is.
     * TODO(#963) Use more specific font family return type once that is introduced.
     */

    var delimTypeToFont = function delimTypeToFont(type) {
      if (type.type === "small") {
        return "Main-Regular";
      } else if (type.type === "large") {
        return "Size" + type.size + "-Regular";
      } else if (type.type === "stack") {
        return "Size4-Regular";
      } else {
        throw new Error("Add support for delim type '" + type.type + "' here.");
      }
    };
    /**
     * Traverse a sequence of types of delimiters to decide what kind of delimiter
     * should be used to create a delimiter of the given height+depth.
     */


    var traverseSequence = function traverseSequence(delim, height, sequence, options) {
      // Here, we choose the index we should start at in the sequences. In smaller
      // sizes (which correspond to larger numbers in style.size) we start earlier
      // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
      // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
      var start = Math.min(2, 3 - options.style.size);

      for (var i = start; i < sequence.length; i++) {
        if (sequence[i].type === "stack") {
          // This is always the last delimiter, so we just break the loop now.
          break;
        }

        var metrics = getMetrics(delim, delimTypeToFont(sequence[i]), "math");
        var heightDepth = metrics.height + metrics.depth; // Small delimiters are scaled down versions of the same font, so we
        // account for the style change size.

        if (sequence[i].type === "small") {
          var newOptions = options.havingBaseStyle(sequence[i].style);
          heightDepth *= newOptions.sizeMultiplier;
        } // Check if the delimiter at this size works for the given height.


        if (heightDepth > height) {
          return sequence[i];
        }
      } // If we reached the end of the sequence, return the last sequence element.


      return sequence[sequence.length - 1];
    };
    /**
     * Make a delimiter of a given height+depth, with optional centering. Here, we
     * traverse the sequences, and create a delimiter that the sequence tells us to.
     */


    var makeCustomSizedDelim = function makeCustomSizedDelim(delim, height, center, options, mode, classes) {
      if (delim === "<" || delim === "\\lt" || delim === "\u27e8") {
        delim = "\\langle";
      } else if (delim === ">" || delim === "\\gt" || delim === "\u27e9") {
        delim = "\\rangle";
      } // Decide what sequence to use


      var sequence;

      if (utils.contains(stackNeverDelimiters, delim)) {
        sequence = stackNeverDelimiterSequence;
      } else if (utils.contains(stackLargeDelimiters, delim)) {
        sequence = stackLargeDelimiterSequence;
      } else {
        sequence = stackAlwaysDelimiterSequence;
      } // Look through the sequence


      var delimType = traverseSequence(delim, height, sequence, options); // Get the delimiter from font glyphs.
      // Depending on the sequence element we decided on, call the
      // appropriate function.

      if (delimType.type === "small") {
        return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
      } else if (delimType.type === "large") {
        return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
      } else
        /* if (delimType.type === "stack") */
        {
          return makeStackedDelim(delim, height, center, options, mode, classes);
        }
    };
    /**
     * Make a delimiter for use with `\left` and `\right`, given a height and depth
     * of an expression that the delimiters surround.
     */


    var makeLeftRightDelim = function makeLeftRightDelim(delim, height, depth, options, mode, classes) {
      // We always center \left/\right delimiters, so the axis is always shifted
      var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier; // Taken from TeX source, tex.web, function make_left_right

      var delimiterFactor = 901;
      var delimiterExtend = 5.0 / options.fontMetrics().ptPerEm;
      var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
      var totalHeight = Math.max( // In real TeX, calculations are done using integral values which are
      // 65536 per pt, or 655360 per em. So, the division here truncates in
      // TeX but doesn't here, producing different results. If we wanted to
      // exactly match TeX's calculation, we could do
      //   Math.floor(655360 * maxDistFromAxis / 500) *
      //    delimiterFactor / 655360
      // (To see the difference, compare
      //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
      // in TeX and KaTeX)
      maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend); // Finally, we defer to `makeCustomSizedDelim` with our calculated total
      // height

      return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
    };

    var delimiter = {
      sqrtImage: makeSqrtImage,
      sizedDelim: makeSizedDelim,
      sizeToMaxHeight: sizeToMaxHeight,
      customSizedDelim: makeCustomSizedDelim,
      leftRightDelim: makeLeftRightDelim
    };

    // Extra data needed for the delimiter handler down below
    var delimiterSizes = {
      "\\bigl": {
        mclass: "mopen",
        size: 1
      },
      "\\Bigl": {
        mclass: "mopen",
        size: 2
      },
      "\\biggl": {
        mclass: "mopen",
        size: 3
      },
      "\\Biggl": {
        mclass: "mopen",
        size: 4
      },
      "\\bigr": {
        mclass: "mclose",
        size: 1
      },
      "\\Bigr": {
        mclass: "mclose",
        size: 2
      },
      "\\biggr": {
        mclass: "mclose",
        size: 3
      },
      "\\Biggr": {
        mclass: "mclose",
        size: 4
      },
      "\\bigm": {
        mclass: "mrel",
        size: 1
      },
      "\\Bigm": {
        mclass: "mrel",
        size: 2
      },
      "\\biggm": {
        mclass: "mrel",
        size: 3
      },
      "\\Biggm": {
        mclass: "mrel",
        size: 4
      },
      "\\big": {
        mclass: "mord",
        size: 1
      },
      "\\Big": {
        mclass: "mord",
        size: 2
      },
      "\\bigg": {
        mclass: "mord",
        size: 3
      },
      "\\Bigg": {
        mclass: "mord",
        size: 4
      }
    };
    var delimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230a", "\u230b", "\\lceil", "\\rceil", "\u2308", "\u2309", "<", ">", "\\langle", "\u27e8", "\\rangle", "\u27e9", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27ee", "\u27ef", "\\lmoustache", "\\rmoustache", "\u23b0", "\u23b1", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];

    // Delimiter functions
    function checkDelimiter(delim, context) {
      var symDelim = checkSymbolNodeType(delim);

      if (symDelim && utils.contains(delimiters, symDelim.text)) {
        return symDelim;
      } else if (symDelim) {
        throw new ParseError("Invalid delimiter '" + symDelim.text + "' after '" + context.funcName + "'", delim);
      } else {
        throw new ParseError("Invalid delimiter type '" + delim.type + "'", delim);
      }
    }

    defineFunction({
      type: "delimsizing",
      names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
      props: {
        numArgs: 1,
        argTypes: ["primitive"]
      },
      handler: (context, args) => {
        var delim = checkDelimiter(args[0], context);
        return {
          type: "delimsizing",
          mode: context.parser.mode,
          size: delimiterSizes[context.funcName].size,
          mclass: delimiterSizes[context.funcName].mclass,
          delim: delim.text
        };
      },
      htmlBuilder: (group, options) => {
        if (group.delim === ".") {
          // Empty delimiters still count as elements, even though they don't
          // show anything.
          return buildCommon.makeSpan([group.mclass]);
        } // Use delimiter.sizedDelim to generate the delimiter.


        return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [group.mclass]);
      },
      mathmlBuilder: group => {
        var children = [];

        if (group.delim !== ".") {
          children.push(makeText(group.delim, group.mode));
        }

        var node = new mathMLTree.MathNode("mo", children);

        if (group.mclass === "mopen" || group.mclass === "mclose") {
          // Only some of the delimsizing functions act as fences, and they
          // return "mopen" or "mclose" mclass.
          node.setAttribute("fence", "true");
        } else {
          // Explicitly disable fencing if it's not a fence, to override the
          // defaults.
          node.setAttribute("fence", "false");
        }

        node.setAttribute("stretchy", "true");
        var size = makeEm(delimiter.sizeToMaxHeight[group.size]);
        node.setAttribute("minsize", size);
        node.setAttribute("maxsize", size);
        return node;
      }
    });

    function assertParsed(group) {
      if (!group.body) {
        throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
      }
    }

    defineFunction({
      type: "leftright-right",
      names: ["\\right"],
      props: {
        numArgs: 1,
        primitive: true
      },
      handler: (context, args) => {
        // \left case below triggers parsing of \right in
        //   `const right = parser.parseFunction();`
        // uses this return value.
        var color = context.parser.gullet.macros.get("\\current@color");

        if (color && typeof color !== "string") {
          throw new ParseError("\\current@color set to non-string in \\right");
        }

        return {
          type: "leftright-right",
          mode: context.parser.mode,
          delim: checkDelimiter(args[0], context).text,
          color // undefined if not set via \color

        };
      }
    });
    defineFunction({
      type: "leftright",
      names: ["\\left"],
      props: {
        numArgs: 1,
        primitive: true
      },
      handler: (context, args) => {
        var delim = checkDelimiter(args[0], context);
        var parser = context.parser; // Parse out the implicit body

        ++parser.leftrightDepth; // parseExpression stops before '\\right'

        var body = parser.parseExpression(false);
        --parser.leftrightDepth; // Check the next token

        parser.expect("\\right", false);
        var right = assertNodeType(parser.parseFunction(), "leftright-right");
        return {
          type: "leftright",
          mode: parser.mode,
          body,
          left: delim.text,
          right: right.delim,
          rightColor: right.color
        };
      },
      htmlBuilder: (group, options) => {
        assertParsed(group); // Build the inner expression

        var inner = buildExpression$1(group.body, options, true, ["mopen", "mclose"]);
        var innerHeight = 0;
        var innerDepth = 0;
        var hadMiddle = false; // Calculate its height and depth

        for (var i = 0; i < inner.length; i++) {
          // Property `isMiddle` not defined on `span`. See comment in
          // "middle"'s htmlBuilder.
          // $FlowFixMe
          if (inner[i].isMiddle) {
            hadMiddle = true;
          } else {
            innerHeight = Math.max(inner[i].height, innerHeight);
            innerDepth = Math.max(inner[i].depth, innerDepth);
          }
        } // The size of delimiters is the same, regardless of what style we are
        // in. Thus, to correctly calculate the size of delimiter we need around
        // a group, we scale down the inner size based on the size.


        innerHeight *= options.sizeMultiplier;
        innerDepth *= options.sizeMultiplier;
        var leftDelim;

        if (group.left === ".") {
          // Empty delimiters in \left and \right make null delimiter spaces.
          leftDelim = makeNullDelimiter(options, ["mopen"]);
        } else {
          // Otherwise, use leftRightDelim to generate the correct sized
          // delimiter.
          leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
        } // Add it to the beginning of the expression


        inner.unshift(leftDelim); // Handle middle delimiters

        if (hadMiddle) {
          for (var _i = 1; _i < inner.length; _i++) {
            var middleDelim = inner[_i]; // Property `isMiddle` not defined on `span`. See comment in
            // "middle"'s htmlBuilder.
            // $FlowFixMe

            var isMiddle = middleDelim.isMiddle;

            if (isMiddle) {
              // Apply the options that were active when \middle was called
              inner[_i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);
            }
          }
        }

        var rightDelim; // Same for the right delimiter, but using color specified by \color

        if (group.right === ".") {
          rightDelim = makeNullDelimiter(options, ["mclose"]);
        } else {
          var colorOptions = group.rightColor ? options.withColor(group.rightColor) : options;
          rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, colorOptions, group.mode, ["mclose"]);
        } // Add it to the end of the expression.


        inner.push(rightDelim);
        return buildCommon.makeSpan(["minner"], inner, options);
      },
      mathmlBuilder: (group, options) => {
        assertParsed(group);
        var inner = buildExpression(group.body, options);

        if (group.left !== ".") {
          var leftNode = new mathMLTree.MathNode("mo", [makeText(group.left, group.mode)]);
          leftNode.setAttribute("fence", "true");
          inner.unshift(leftNode);
        }

        if (group.right !== ".") {
          var rightNode = new mathMLTree.MathNode("mo", [makeText(group.right, group.mode)]);
          rightNode.setAttribute("fence", "true");

          if (group.rightColor) {
            rightNode.setAttribute("mathcolor", group.rightColor);
          }

          inner.push(rightNode);
        }

        return makeRow(inner);
      }
    });
    defineFunction({
      type: "middle",
      names: ["\\middle"],
      props: {
        numArgs: 1,
        primitive: true
      },
      handler: (context, args) => {
        var delim = checkDelimiter(args[0], context);

        if (!context.parser.leftrightDepth) {
          throw new ParseError("\\middle without preceding \\left", delim);
        }

        return {
          type: "middle",
          mode: context.parser.mode,
          delim: delim.text
        };
      },
      htmlBuilder: (group, options) => {
        var middleDelim;

        if (group.delim === ".") {
          middleDelim = makeNullDelimiter(options, []);
        } else {
          middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);
          var isMiddle = {
            delim: group.delim,
            options
          }; // Property `isMiddle` not defined on `span`. It is only used in
          // this file above.
          // TODO: Fix this violation of the `span` type and possibly rename
          // things since `isMiddle` sounds like a boolean, but is a struct.
          // $FlowFixMe

          middleDelim.isMiddle = isMiddle;
        }

        return middleDelim;
      },
      mathmlBuilder: (group, options) => {
        // A Firefox \middle will strech a character vertically only if it
        // is in the fence part of the operator dictionary at:
        // https://www.w3.org/TR/MathML3/appendixc.html.
        // So we need to avoid U+2223 and use plain "|" instead.
        var textNode = group.delim === "\\vert" || group.delim === "|" ? makeText("|", "text") : makeText(group.delim, group.mode);
        var middleNode = new mathMLTree.MathNode("mo", [textNode]);
        middleNode.setAttribute("fence", "true"); // MathML gives 5/18em spacing to each <mo> element.
        // \middle should get delimiter spacing instead.

        middleNode.setAttribute("lspace", "0.05em");
        middleNode.setAttribute("rspace", "0.05em");
        return middleNode;
      }
    });

    var htmlBuilder$8 = (group, options) => {
      // \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox, \phase
      // Some groups can return document fragments.  Handle those by wrapping
      // them in a span.
      var inner = buildCommon.wrapFragment(buildGroup$1(group.body, options), options);
      var label = group.label.substr(1);
      var scale = options.sizeMultiplier;
      var img;
      var imgShift = 0; // In the LaTeX cancel package, line geometry is slightly different
      // depending on whether the subject is wider than it is tall, or vice versa.
      // We don't know the width of a group, so as a proxy, we test if
      // the subject is a single character. This captures most of the
      // subjects that should get the "tall" treatment.

      var isSingleChar = utils.isCharacterBox(group.body);

      if (label === "sout") {
        img = buildCommon.makeSpan(["stretchy", "sout"]);
        img.height = options.fontMetrics().defaultRuleThickness / scale;
        imgShift = -0.5 * options.fontMetrics().xHeight;
      } else if (label === "phase") {
        // Set a couple of dimensions from the steinmetz package.
        var lineWeight = calculateSize({
          number: 0.6,
          unit: "pt"
        }, options);
        var clearance = calculateSize({
          number: 0.35,
          unit: "ex"
        }, options); // Prevent size changes like \Huge from affecting line thickness

        var newOptions = options.havingBaseSizing();
        scale = scale / newOptions.sizeMultiplier;
        var angleHeight = inner.height + inner.depth + lineWeight + clearance; // Reserve a left pad for the angle.

        inner.style.paddingLeft = makeEm(angleHeight / 2 + lineWeight); // Create an SVG

        var viewBoxHeight = Math.floor(1000 * angleHeight * scale);
        var path = phasePath(viewBoxHeight);
        var svgNode = new SvgNode([new PathNode("phase", path)], {
          "width": "400em",
          "height": makeEm(viewBoxHeight / 1000),
          "viewBox": "0 0 400000 " + viewBoxHeight,
          "preserveAspectRatio": "xMinYMin slice"
        }); // Wrap it in a span with overflow: hidden.

        img = buildCommon.makeSvgSpan(["hide-tail"], [svgNode], options);
        img.style.height = makeEm(angleHeight);
        imgShift = inner.depth + lineWeight + clearance;
      } else {
        // Add horizontal padding
        if (/cancel/.test(label)) {
          if (!isSingleChar) {
            inner.classes.push("cancel-pad");
          }
        } else if (label === "angl") {
          inner.classes.push("anglpad");
        } else {
          inner.classes.push("boxpad");
        } // Add vertical padding


        var topPad = 0;
        var bottomPad = 0;
        var ruleThickness = 0; // ref: cancel package: \advance\totalheight2\p@ % "+2"

        if (/box/.test(label)) {
          ruleThickness = Math.max(options.fontMetrics().fboxrule, // default
          options.minRuleThickness // User override.
          );
          topPad = options.fontMetrics().fboxsep + (label === "colorbox" ? 0 : ruleThickness);
          bottomPad = topPad;
        } else if (label === "angl") {
          ruleThickness = Math.max(options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
          topPad = 4 * ruleThickness; // gap = 3 × line, plus the line itself.

          bottomPad = Math.max(0, 0.25 - inner.depth);
        } else {
          topPad = isSingleChar ? 0.2 : 0;
          bottomPad = topPad;
        }

        img = stretchy.encloseSpan(inner, label, topPad, bottomPad, options);

        if (/fbox|boxed|fcolorbox/.test(label)) {
          img.style.borderStyle = "solid";
          img.style.borderWidth = makeEm(ruleThickness);
        } else if (label === "angl" && ruleThickness !== 0.049) {
          img.style.borderTopWidth = makeEm(ruleThickness);
          img.style.borderRightWidth = makeEm(ruleThickness);
        }

        imgShift = inner.depth + bottomPad;

        if (group.backgroundColor) {
          img.style.backgroundColor = group.backgroundColor;

          if (group.borderColor) {
            img.style.borderColor = group.borderColor;
          }
        }
      }

      var vlist;

      if (group.backgroundColor) {
        vlist = buildCommon.makeVList({
          positionType: "individualShift",
          children: [// Put the color background behind inner;
          {
            type: "elem",
            elem: img,
            shift: imgShift
          }, {
            type: "elem",
            elem: inner,
            shift: 0
          }]
        }, options);
      } else {
        var classes = /cancel|phase/.test(label) ? ["svg-align"] : [];
        vlist = buildCommon.makeVList({
          positionType: "individualShift",
          children: [// Write the \cancel stroke on top of inner.
          {
            type: "elem",
            elem: inner,
            shift: 0
          }, {
            type: "elem",
            elem: img,
            shift: imgShift,
            wrapperClasses: classes
          }]
        }, options);
      }

      if (/cancel/.test(label)) {
        // The cancel package documentation says that cancel lines add their height
        // to the expression, but tests show that isn't how it actually works.
        vlist.height = inner.height;
        vlist.depth = inner.depth;
      }

      if (/cancel/.test(label) && !isSingleChar) {
        // cancel does not create horiz space for its line extension.
        return buildCommon.makeSpan(["mord", "cancel-lap"], [vlist], options);
      } else {
        return buildCommon.makeSpan(["mord"], [vlist], options);
      }
    };

    var mathmlBuilder$7 = (group, options) => {
      var fboxsep = 0;
      var node = new mathMLTree.MathNode(group.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [buildGroup(group.body, options)]);

      switch (group.label) {
        case "\\cancel":
          node.setAttribute("notation", "updiagonalstrike");
          break;

        case "\\bcancel":
          node.setAttribute("notation", "downdiagonalstrike");
          break;

        case "\\phase":
          node.setAttribute("notation", "phasorangle");
          break;

        case "\\sout":
          node.setAttribute("notation", "horizontalstrike");
          break;

        case "\\fbox":
          node.setAttribute("notation", "box");
          break;

        case "\\angl":
          node.setAttribute("notation", "actuarial");
          break;

        case "\\fcolorbox":
        case "\\colorbox":
          // <menclose> doesn't have a good notation option. So use <mpadded>
          // instead. Set some attributes that come included with <menclose>.
          fboxsep = options.fontMetrics().fboxsep * options.fontMetrics().ptPerEm;
          node.setAttribute("width", "+" + 2 * fboxsep + "pt");
          node.setAttribute("height", "+" + 2 * fboxsep + "pt");
          node.setAttribute("lspace", fboxsep + "pt"); //

          node.setAttribute("voffset", fboxsep + "pt");

          if (group.label === "\\fcolorbox") {
            var thk = Math.max(options.fontMetrics().fboxrule, // default
            options.minRuleThickness // user override
            );
            node.setAttribute("style", "border: " + thk + "em solid " + String(group.borderColor));
          }

          break;

        case "\\xcancel":
          node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
          break;
      }

      if (group.backgroundColor) {
        node.setAttribute("mathbackground", group.backgroundColor);
      }

      return node;
    };

    defineFunction({
      type: "enclose",
      names: ["\\colorbox"],
      props: {
        numArgs: 2,
        allowedInText: true,
        argTypes: ["color", "text"]
      },

      handler(_ref, args, optArgs) {
        var {
          parser,
          funcName
        } = _ref;
        var color = assertNodeType(args[0], "color-token").color;
        var body = args[1];
        return {
          type: "enclose",
          mode: parser.mode,
          label: funcName,
          backgroundColor: color,
          body
        };
      },

      htmlBuilder: htmlBuilder$8,
      mathmlBuilder: mathmlBuilder$7
    });
    defineFunction({
      type: "enclose",
      names: ["\\fcolorbox"],
      props: {
        numArgs: 3,
        allowedInText: true,
        argTypes: ["color", "color", "text"]
      },

      handler(_ref2, args, optArgs) {
        var {
          parser,
          funcName
        } = _ref2;
        var borderColor = assertNodeType(args[0], "color-token").color;
        var backgroundColor = assertNodeType(args[1], "color-token").color;
        var body = args[2];
        return {
          type: "enclose",
          mode: parser.mode,
          label: funcName,
          backgroundColor,
          borderColor,
          body
        };
      },

      htmlBuilder: htmlBuilder$8,
      mathmlBuilder: mathmlBuilder$7
    });
    defineFunction({
      type: "enclose",
      names: ["\\fbox"],
      props: {
        numArgs: 1,
        argTypes: ["hbox"],
        allowedInText: true
      },

      handler(_ref3, args) {
        var {
          parser
        } = _ref3;
        return {
          type: "enclose",
          mode: parser.mode,
          label: "\\fbox",
          body: args[0]
        };
      }

    });
    defineFunction({
      type: "enclose",
      names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
      props: {
        numArgs: 1
      },

      handler(_ref4, args) {
        var {
          parser,
          funcName
        } = _ref4;
        var body = args[0];
        return {
          type: "enclose",
          mode: parser.mode,
          label: funcName,
          body
        };
      },

      htmlBuilder: htmlBuilder$8,
      mathmlBuilder: mathmlBuilder$7
    });
    defineFunction({
      type: "enclose",
      names: ["\\angl"],
      props: {
        numArgs: 1,
        argTypes: ["hbox"],
        allowedInText: false
      },

      handler(_ref5, args) {
        var {
          parser
        } = _ref5;
        return {
          type: "enclose",
          mode: parser.mode,
          label: "\\angl",
          body: args[0]
        };
      }

    });

    /**
     * All registered environments.
     * `environments.js` exports this same dictionary again and makes it public.
     * `Parser.js` requires this dictionary via `environments.js`.
     */
    var _environments = {};
    function defineEnvironment(_ref) {
      var {
        type,
        names,
        props,
        handler,
        htmlBuilder,
        mathmlBuilder
      } = _ref;
      // Set default values of environments.
      var data = {
        type,
        numArgs: props.numArgs || 0,
        allowedInText: false,
        numOptionalArgs: 0,
        handler
      };

      for (var i = 0; i < names.length; ++i) {
        // TODO: The value type of _environments should be a type union of all
        // possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is
        // an existential type.
        _environments[names[i]] = data;
      }

      if (htmlBuilder) {
        _htmlGroupBuilders[type] = htmlBuilder;
      }

      if (mathmlBuilder) {
        _mathmlGroupBuilders[type] = mathmlBuilder;
      }
    }

    /**
     * All registered global/built-in macros.
     * `macros.js` exports this same dictionary again and makes it public.
     * `Parser.js` requires this dictionary via `macros.js`.
     */
    var _macros = {}; // This function might one day accept an additional argument and do more things.

    function defineMacro(name, body) {
      _macros[name] = body;
    }

    // Helper functions
    function getHLines(parser) {
      // Return an array. The array length = number of hlines.
      // Each element in the array tells if the line is dashed.
      var hlineInfo = [];
      parser.consumeSpaces();
      var nxt = parser.fetch().text;

      while (nxt === "\\hline" || nxt === "\\hdashline") {
        parser.consume();
        hlineInfo.push(nxt === "\\hdashline");
        parser.consumeSpaces();
        nxt = parser.fetch().text;
      }

      return hlineInfo;
    }

    var validateAmsEnvironmentContext = context => {
      var settings = context.parser.settings;

      if (!settings.displayMode) {
        throw new ParseError("{" + context.envName + "} can be used only in" + " display mode.");
      }
    }; // autoTag (an argument to parseArray) can be one of three values:
    // * undefined: Regular (not-top-level) array; no tags on each row
    // * true: Automatic equation numbering, overridable by \tag
    // * false: Tags allowed on each row, but no automatic numbering
    // This function *doesn't* work with the "split" environment name.


    function getAutoTag(name) {
      if (name.indexOf("ed") === -1) {
        return name.indexOf("*") === -1;
      } // return undefined;

    }
    /**
     * Parse the body of the environment, with rows delimited by \\ and
     * columns delimited by &, and create a nested list in row-major order
     * with one group per cell.  If given an optional argument style
     * ("text", "display", etc.), then each cell is cast into that style.
     */


    function parseArray(parser, _ref, style) {
      var {
        hskipBeforeAndAfter,
        addJot,
        cols,
        arraystretch,
        colSeparationType,
        autoTag,
        singleRow,
        emptySingleRow,
        maxNumCols,
        leqno
      } = _ref;
      parser.gullet.beginGroup();

      if (!singleRow) {
        // \cr is equivalent to \\ without the optional size argument (see below)
        // TODO: provide helpful error when \cr is used outside array environment
        parser.gullet.macros.set("\\cr", "\\\\\\relax");
      } // Get current arraystretch if it's not set by the environment


      if (!arraystretch) {
        var stretch = parser.gullet.expandMacroAsText("\\arraystretch");

        if (stretch == null) {
          // Default \arraystretch from lttab.dtx
          arraystretch = 1;
        } else {
          arraystretch = parseFloat(stretch);

          if (!arraystretch || arraystretch < 0) {
            throw new ParseError("Invalid \\arraystretch: " + stretch);
          }
        }
      } // Start group for first cell


      parser.gullet.beginGroup();
      var row = [];
      var body = [row];
      var rowGaps = [];
      var hLinesBeforeRow = [];
      var tags = autoTag != null ? [] : undefined; // amsmath uses \global\@eqnswtrue and \global\@eqnswfalse to represent
      // whether this row should have an equation number.  Simulate this with
      // a \@eqnsw macro set to 1 or 0.

      function beginRow() {
        if (autoTag) {
          parser.gullet.macros.set("\\@eqnsw", "1", true);
        }
      }

      function endRow() {
        if (tags) {
          if (parser.gullet.macros.get("\\df@tag")) {
            tags.push(parser.subparse([new Token("\\df@tag")]));
            parser.gullet.macros.set("\\df@tag", undefined, true);
          } else {
            tags.push(Boolean(autoTag) && parser.gullet.macros.get("\\@eqnsw") === "1");
          }
        }
      }

      beginRow(); // Test for \hline at the top of the array.

      hLinesBeforeRow.push(getHLines(parser));

      while (true) {
        // eslint-disable-line no-constant-condition
        // Parse each cell in its own group (namespace)
        var cell = parser.parseExpression(false, singleRow ? "\\end" : "\\\\");
        parser.gullet.endGroup();
        parser.gullet.beginGroup();
        cell = {
          type: "ordgroup",
          mode: parser.mode,
          body: cell
        };

        if (style) {
          cell = {
            type: "styling",
            mode: parser.mode,
            style,
            body: [cell]
          };
        }

        row.push(cell);
        var next = parser.fetch().text;

        if (next === "&") {
          if (maxNumCols && row.length === maxNumCols) {
            if (singleRow || colSeparationType) {
              // {equation} or {split}
              throw new ParseError("Too many tab characters: &", parser.nextToken);
            } else {
              // {array} environment
              parser.settings.reportNonstrict("textEnv", "Too few columns " + "specified in the {array} column argument.");
            }
          }

          parser.consume();
        } else if (next === "\\end") {
          endRow(); // Arrays terminate newlines with `\crcr` which consumes a `\cr` if
          // the last line is empty.  However, AMS environments keep the
          // empty row if it's the only one.
          // NOTE: Currently, `cell` is the last item added into `row`.

          if (row.length === 1 && cell.type === "styling" && cell.body[0].body.length === 0 && (body.length > 1 || !emptySingleRow)) {
            body.pop();
          }

          if (hLinesBeforeRow.length < body.length + 1) {
            hLinesBeforeRow.push([]);
          }

          break;
        } else if (next === "\\\\") {
          parser.consume();
          var size = void 0; // \def\Let@{\let\\\math@cr}
          // \def\math@cr{...\math@cr@}
          // \def\math@cr@{\new@ifnextchar[\math@cr@@{\math@cr@@[\z@]}}
          // \def\math@cr@@[#1]{...\math@cr@@@...}
          // \def\math@cr@@@{\cr}

          if (parser.gullet.future().text !== " ") {
            size = parser.parseSizeGroup(true);
          }

          rowGaps.push(size ? size.value : null);
          endRow(); // check for \hline(s) following the row separator

          hLinesBeforeRow.push(getHLines(parser));
          row = [];
          body.push(row);
          beginRow();
        } else {
          throw new ParseError("Expected & or \\\\ or \\cr or \\end", parser.nextToken);
        }
      } // End cell group


      parser.gullet.endGroup(); // End array group defining \cr

      parser.gullet.endGroup();
      return {
        type: "array",
        mode: parser.mode,
        addJot,
        arraystretch,
        body,
        cols,
        rowGaps,
        hskipBeforeAndAfter,
        hLinesBeforeRow,
        colSeparationType,
        tags,
        leqno
      };
    } // Decides on a style for cells in an array according to whether the given
    // environment name starts with the letter 'd'.


    function dCellStyle(envName) {
      if (envName.substr(0, 1) === "d") {
        return "display";
      } else {
        return "text";
      }
    }

    var htmlBuilder$7 = function htmlBuilder(group, options) {
      var r;
      var c;
      var nr = group.body.length;
      var hLinesBeforeRow = group.hLinesBeforeRow;
      var nc = 0;
      var body = new Array(nr);
      var hlines = [];
      var ruleThickness = Math.max( // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
      options.fontMetrics().arrayRuleWidth, options.minRuleThickness // User override.
      ); // Horizontal spacing

      var pt = 1 / options.fontMetrics().ptPerEm;
      var arraycolsep = 5 * pt; // default value, i.e. \arraycolsep in article.cls

      if (group.colSeparationType && group.colSeparationType === "small") {
        // We're in a {smallmatrix}. Default column space is \thickspace,
        // i.e. 5/18em = 0.2778em, per amsmath.dtx for {smallmatrix}.
        // But that needs adjustment because LaTeX applies \scriptstyle to the
        // entire array, including the colspace, but this function applies
        // \scriptstyle only inside each element.
        var localMultiplier = options.havingStyle(Style$1.SCRIPT).sizeMultiplier;
        arraycolsep = 0.2778 * (localMultiplier / options.sizeMultiplier);
      } // Vertical spacing


      var baselineskip = group.colSeparationType === "CD" ? calculateSize({
        number: 3,
        unit: "ex"
      }, options) : 12 * pt; // see size10.clo
      // Default \jot from ltmath.dtx
      // TODO(edemaine): allow overriding \jot via \setlength (#687)

      var jot = 3 * pt;
      var arrayskip = group.arraystretch * baselineskip;
      var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and

      var arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx

      var totalHeight = 0; // Set a position for \hline(s) at the top of the array, if any.

      function setHLinePos(hlinesInGap) {
        for (var i = 0; i < hlinesInGap.length; ++i) {
          if (i > 0) {
            totalHeight += 0.25;
          }

          hlines.push({
            pos: totalHeight,
            isDashed: hlinesInGap[i]
          });
        }
      }

      setHLinePos(hLinesBeforeRow[0]);

      for (r = 0; r < group.body.length; ++r) {
        var inrow = group.body[r];
        var height = arstrutHeight; // \@array adds an \@arstrut

        var depth = arstrutDepth; // to each tow (via the template)

        if (nc < inrow.length) {
          nc = inrow.length;
        }

        var outrow = new Array(inrow.length);

        for (c = 0; c < inrow.length; ++c) {
          var elt = buildGroup$1(inrow[c], options);

          if (depth < elt.depth) {
            depth = elt.depth;
          }

          if (height < elt.height) {
            height = elt.height;
          }

          outrow[c] = elt;
        }

        var rowGap = group.rowGaps[r];
        var gap = 0;

        if (rowGap) {
          gap = calculateSize(rowGap, options);

          if (gap > 0) {
            // \@argarraycr
            gap += arstrutDepth;

            if (depth < gap) {
              depth = gap; // \@xargarraycr
            }

            gap = 0;
          }
        } // In AMS multiline environments such as aligned and gathered, rows
        // correspond to lines that have additional \jot added to the
        // \baselineskip via \openup.


        if (group.addJot) {
          depth += jot;
        }

        outrow.height = height;
        outrow.depth = depth;
        totalHeight += height;
        outrow.pos = totalHeight;
        totalHeight += depth + gap; // \@yargarraycr

        body[r] = outrow; // Set a position for \hline(s), if any.

        setHLinePos(hLinesBeforeRow[r + 1]);
      }

      var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
      var colDescriptions = group.cols || [];
      var cols = [];
      var colSep;
      var colDescrNum;
      var tagSpans = [];

      if (group.tags && group.tags.some(tag => tag)) {
        // An environment with manual tags and/or automatic equation numbers.
        // Create node(s), the latter of which trigger CSS counter increment.
        for (r = 0; r < nr; ++r) {
          var rw = body[r];
          var shift = rw.pos - offset;
          var tag = group.tags[r];
          var tagSpan = void 0;

          if (tag === true) {
            // automatic numbering
            tagSpan = buildCommon.makeSpan(["eqn-num"], [], options);
          } else if (tag === false) {
            // \nonumber/\notag or starred environment
            tagSpan = buildCommon.makeSpan([], [], options);
          } else {
            // manual \tag
            tagSpan = buildCommon.makeSpan([], buildExpression$1(tag, options, true), options);
          }

          tagSpan.depth = rw.depth;
          tagSpan.height = rw.height;
          tagSpans.push({
            type: "elem",
            elem: tagSpan,
            shift
          });
        }
      }

      for (c = 0, colDescrNum = 0; // Continue while either there are more columns or more column
      // descriptions, so trailing separators don't get lost.
      c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {
        var colDescr = colDescriptions[colDescrNum] || {};
        var firstSeparator = true;

        while (colDescr.type === "separator") {
          // If there is more than one separator in a row, add a space
          // between them.
          if (!firstSeparator) {
            colSep = buildCommon.makeSpan(["arraycolsep"], []);
            colSep.style.width = makeEm(options.fontMetrics().doubleRuleSep);
            cols.push(colSep);
          }

          if (colDescr.separator === "|" || colDescr.separator === ":") {
            var lineType = colDescr.separator === "|" ? "solid" : "dashed";
            var separator = buildCommon.makeSpan(["vertical-separator"], [], options);
            separator.style.height = makeEm(totalHeight);
            separator.style.borderRightWidth = makeEm(ruleThickness);
            separator.style.borderRightStyle = lineType;
            separator.style.margin = "0 " + makeEm(-ruleThickness / 2);

            var _shift = totalHeight - offset;

            if (_shift) {
              separator.style.verticalAlign = makeEm(-_shift);
            }

            cols.push(separator);
          } else {
            throw new ParseError("Invalid separator type: " + colDescr.separator);
          }

          colDescrNum++;
          colDescr = colDescriptions[colDescrNum] || {};
          firstSeparator = false;
        }

        if (c >= nc) {
          continue;
        }

        var sepwidth = void 0;

        if (c > 0 || group.hskipBeforeAndAfter) {
          sepwidth = utils.deflt(colDescr.pregap, arraycolsep);

          if (sepwidth !== 0) {
            colSep = buildCommon.makeSpan(["arraycolsep"], []);
            colSep.style.width = makeEm(sepwidth);
            cols.push(colSep);
          }
        }

        var col = [];

        for (r = 0; r < nr; ++r) {
          var row = body[r];
          var elem = row[c];

          if (!elem) {
            continue;
          }

          var _shift2 = row.pos - offset;

          elem.depth = row.depth;
          elem.height = row.height;
          col.push({
            type: "elem",
            elem: elem,
            shift: _shift2
          });
        }

        col = buildCommon.makeVList({
          positionType: "individualShift",
          children: col
        }, options);
        col = buildCommon.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
        cols.push(col);

        if (c < nc - 1 || group.hskipBeforeAndAfter) {
          sepwidth = utils.deflt(colDescr.postgap, arraycolsep);

          if (sepwidth !== 0) {
            colSep = buildCommon.makeSpan(["arraycolsep"], []);
            colSep.style.width = makeEm(sepwidth);
            cols.push(colSep);
          }
        }
      }

      body = buildCommon.makeSpan(["mtable"], cols); // Add \hline(s), if any.

      if (hlines.length > 0) {
        var line = buildCommon.makeLineSpan("hline", options, ruleThickness);
        var dashes = buildCommon.makeLineSpan("hdashline", options, ruleThickness);
        var vListElems = [{
          type: "elem",
          elem: body,
          shift: 0
        }];

        while (hlines.length > 0) {
          var hline = hlines.pop();
          var lineShift = hline.pos - offset;

          if (hline.isDashed) {
            vListElems.push({
              type: "elem",
              elem: dashes,
              shift: lineShift
            });
          } else {
            vListElems.push({
              type: "elem",
              elem: line,
              shift: lineShift
            });
          }
        }

        body = buildCommon.makeVList({
          positionType: "individualShift",
          children: vListElems
        }, options);
      }

      if (tagSpans.length === 0) {
        return buildCommon.makeSpan(["mord"], [body], options);
      } else {
        var eqnNumCol = buildCommon.makeVList({
          positionType: "individualShift",
          children: tagSpans
        }, options);
        eqnNumCol = buildCommon.makeSpan(["tag"], [eqnNumCol], options);
        return buildCommon.makeFragment([body, eqnNumCol]);
      }
    };

    var alignMap = {
      c: "center ",
      l: "left ",
      r: "right "
    };

    var mathmlBuilder$6 = function mathmlBuilder(group, options) {
      var tbl = [];
      var glue = new mathMLTree.MathNode("mtd", [], ["mtr-glue"]);
      var tag = new mathMLTree.MathNode("mtd", [], ["mml-eqn-num"]);

      for (var i = 0; i < group.body.length; i++) {
        var rw = group.body[i];
        var row = [];

        for (var j = 0; j < rw.length; j++) {
          row.push(new mathMLTree.MathNode("mtd", [buildGroup(rw[j], options)]));
        }

        if (group.tags && group.tags[i]) {
          row.unshift(glue);
          row.push(glue);

          if (group.leqno) {
            row.unshift(tag);
          } else {
            row.push(tag);
          }
        }

        tbl.push(new mathMLTree.MathNode("mtr", row));
      }

      var table = new mathMLTree.MathNode("mtable", tbl); // Set column alignment, row spacing, column spacing, and
      // array lines by setting attributes on the table element.
      // Set the row spacing. In MathML, we specify a gap distance.
      // We do not use rowGap[] because MathML automatically increases
      // cell height with the height/depth of the element content.
      // LaTeX \arraystretch multiplies the row baseline-to-baseline distance.
      // We simulate this by adding (arraystretch - 1)em to the gap. This
      // does a reasonable job of adjusting arrays containing 1 em tall content.
      // The 0.16 and 0.09 values are found emprically. They produce an array
      // similar to LaTeX and in which content does not interfere with \hines.

      var gap = group.arraystretch === 0.5 ? 0.1 // {smallmatrix}, {subarray}
      : 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);
      table.setAttribute("rowspacing", makeEm(gap)); // MathML table lines go only between cells.
      // To place a line on an edge we'll use <menclose>, if necessary.

      var menclose = "";
      var align = "";

      if (group.cols && group.cols.length > 0) {
        // Find column alignment, column spacing, and  vertical lines.
        var cols = group.cols;
        var columnLines = "";
        var prevTypeWasAlign = false;
        var iStart = 0;
        var iEnd = cols.length;

        if (cols[0].type === "separator") {
          menclose += "top ";
          iStart = 1;
        }

        if (cols[cols.length - 1].type === "separator") {
          menclose += "bottom ";
          iEnd -= 1;
        }

        for (var _i = iStart; _i < iEnd; _i++) {
          if (cols[_i].type === "align") {
            align += alignMap[cols[_i].align];

            if (prevTypeWasAlign) {
              columnLines += "none ";
            }

            prevTypeWasAlign = true;
          } else if (cols[_i].type === "separator") {
            // MathML accepts only single lines between cells.
            // So we read only the first of consecutive separators.
            if (prevTypeWasAlign) {
              columnLines += cols[_i].separator === "|" ? "solid " : "dashed ";
              prevTypeWasAlign = false;
            }
          }
        }

        table.setAttribute("columnalign", align.trim());

        if (/[sd]/.test(columnLines)) {
          table.setAttribute("columnlines", columnLines.trim());
        }
      } // Set column spacing.


      if (group.colSeparationType === "align") {
        var _cols = group.cols || [];

        var spacing = "";

        for (var _i2 = 1; _i2 < _cols.length; _i2++) {
          spacing += _i2 % 2 ? "0em " : "1em ";
        }

        table.setAttribute("columnspacing", spacing.trim());
      } else if (group.colSeparationType === "alignat" || group.colSeparationType === "gather") {
        table.setAttribute("columnspacing", "0em");
      } else if (group.colSeparationType === "small") {
        table.setAttribute("columnspacing", "0.2778em");
      } else if (group.colSeparationType === "CD") {
        table.setAttribute("columnspacing", "0.5em");
      } else {
        table.setAttribute("columnspacing", "1em");
      } // Address \hline and \hdashline


      var rowLines = "";
      var hlines = group.hLinesBeforeRow;
      menclose += hlines[0].length > 0 ? "left " : "";
      menclose += hlines[hlines.length - 1].length > 0 ? "right " : "";

      for (var _i3 = 1; _i3 < hlines.length - 1; _i3++) {
        rowLines += hlines[_i3].length === 0 ? "none " // MathML accepts only a single line between rows. Read one element.
        : hlines[_i3][0] ? "dashed " : "solid ";
      }

      if (/[sd]/.test(rowLines)) {
        table.setAttribute("rowlines", rowLines.trim());
      }

      if (menclose !== "") {
        table = new mathMLTree.MathNode("menclose", [table]);
        table.setAttribute("notation", menclose.trim());
      }

      if (group.arraystretch && group.arraystretch < 1) {
        // A small array. Wrap in scriptstyle so row gap is not too large.
        table = new mathMLTree.MathNode("mstyle", [table]);
        table.setAttribute("scriptlevel", "1");
      }

      return table;
    }; // Convenience function for align, align*, aligned, alignat, alignat*, alignedat.


    var alignedHandler = function alignedHandler(context, args) {
      if (context.envName.indexOf("ed") === -1) {
        validateAmsEnvironmentContext(context);
      }

      var cols = [];
      var separationType = context.envName.indexOf("at") > -1 ? "alignat" : "align";
      var isSplit = context.envName === "split";
      var res = parseArray(context.parser, {
        cols,
        addJot: true,
        autoTag: isSplit ? undefined : getAutoTag(context.envName),
        emptySingleRow: true,
        colSeparationType: separationType,
        maxNumCols: isSplit ? 2 : undefined,
        leqno: context.parser.settings.leqno
      }, "display"); // Determining number of columns.
      // 1. If the first argument is given, we use it as a number of columns,
      //    and makes sure that each row doesn't exceed that number.
      // 2. Otherwise, just count number of columns = maximum number
      //    of cells in each row ("aligned" mode -- isAligned will be true).
      //
      // At the same time, prepend empty group {} at beginning of every second
      // cell in each row (starting with second cell) so that operators become
      // binary.  This behavior is implemented in amsmath's \start@aligned.

      var numMaths;
      var numCols = 0;
      var emptyGroup = {
        type: "ordgroup",
        mode: context.mode,
        body: []
      };

      if (args[0] && args[0].type === "ordgroup") {
        var arg0 = "";

        for (var i = 0; i < args[0].body.length; i++) {
          var textord = assertNodeType(args[0].body[i], "textord");
          arg0 += textord.text;
        }

        numMaths = Number(arg0);
        numCols = numMaths * 2;
      }

      var isAligned = !numCols;
      res.body.forEach(function (row) {
        for (var _i4 = 1; _i4 < row.length; _i4 += 2) {
          // Modify ordgroup node within styling node
          var styling = assertNodeType(row[_i4], "styling");
          var ordgroup = assertNodeType(styling.body[0], "ordgroup");
          ordgroup.body.unshift(emptyGroup);
        }

        if (!isAligned) {
          // Case 1
          var curMaths = row.length / 2;

          if (numMaths < curMaths) {
            throw new ParseError("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row[0]);
          }
        } else if (numCols < row.length) {
          // Case 2
          numCols = row.length;
        }
      }); // Adjusting alignment.
      // In aligned mode, we add one \qquad between columns;
      // otherwise we add nothing.

      for (var _i5 = 0; _i5 < numCols; ++_i5) {
        var align = "r";
        var pregap = 0;

        if (_i5 % 2 === 1) {
          align = "l";
        } else if (_i5 > 0 && isAligned) {
          // "aligned" mode.
          pregap = 1; // add one \quad
        }

        cols[_i5] = {
          type: "align",
          align: align,
          pregap: pregap,
          postgap: 0
        };
      }

      res.colSeparationType = isAligned ? "align" : "alignat";
      return res;
    }; // Arrays are part of LaTeX, defined in lttab.dtx so its documentation
    // is part of the source2e.pdf file of LaTeX2e source documentation.
    // {darray} is an {array} environment where cells are set in \displaystyle,
    // as defined in nccmath.sty.


    defineEnvironment({
      type: "array",
      names: ["array", "darray"],
      props: {
        numArgs: 1
      },

      handler(context, args) {
        // Since no types are specified above, the two possibilities are
        // - The argument is wrapped in {} or [], in which case Parser's
        //   parseGroup() returns an "ordgroup" wrapping some symbol node.
        // - The argument is a bare symbol node.
        var symNode = checkSymbolNodeType(args[0]);
        var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
        var cols = colalign.map(function (nde) {
          var node = assertSymbolNodeType(nde);
          var ca = node.text;

          if ("lcr".indexOf(ca) !== -1) {
            return {
              type: "align",
              align: ca
            };
          } else if (ca === "|") {
            return {
              type: "separator",
              separator: "|"
            };
          } else if (ca === ":") {
            return {
              type: "separator",
              separator: ":"
            };
          }

          throw new ParseError("Unknown column alignment: " + ca, nde);
        });
        var res = {
          cols,
          hskipBeforeAndAfter: true,
          // \@preamble in lttab.dtx
          maxNumCols: cols.length
        };
        return parseArray(context.parser, res, dCellStyle(context.envName));
      },

      htmlBuilder: htmlBuilder$7,
      mathmlBuilder: mathmlBuilder$6
    }); // The matrix environments of amsmath builds on the array environment
    // of LaTeX, which is discussed above.
    // The mathtools package adds starred versions of the same environments.
    // These have an optional argument to choose left|center|right justification.

    defineEnvironment({
      type: "array",
      names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
      props: {
        numArgs: 0
      },

      handler(context) {
        var delimiters = {
          "matrix": null,
          "pmatrix": ["(", ")"],
          "bmatrix": ["[", "]"],
          "Bmatrix": ["\\{", "\\}"],
          "vmatrix": ["|", "|"],
          "Vmatrix": ["\\Vert", "\\Vert"]
        }[context.envName.replace("*", "")]; // \hskip -\arraycolsep in amsmath

        var colAlign = "c";
        var payload = {
          hskipBeforeAndAfter: false,
          cols: [{
            type: "align",
            align: colAlign
          }]
        };

        if (context.envName.charAt(context.envName.length - 1) === "*") {
          // It's one of the mathtools starred functions.
          // Parse the optional alignment argument.
          var parser = context.parser;
          parser.consumeSpaces();

          if (parser.fetch().text === "[") {
            parser.consume();
            parser.consumeSpaces();
            colAlign = parser.fetch().text;

            if ("lcr".indexOf(colAlign) === -1) {
              throw new ParseError("Expected l or c or r", parser.nextToken);
            }

            parser.consume();
            parser.consumeSpaces();
            parser.expect("]");
            parser.consume();
            payload.cols = [{
              type: "align",
              align: colAlign
            }];
          }
        }

        var res = parseArray(context.parser, payload, dCellStyle(context.envName)); // Populate cols with the correct number of column alignment specs.

        var numCols = Math.max(0, ...res.body.map(row => row.length));
        res.cols = new Array(numCols).fill({
          type: "align",
          align: colAlign
        });
        return delimiters ? {
          type: "leftright",
          mode: context.mode,
          body: [res],
          left: delimiters[0],
          right: delimiters[1],
          rightColor: undefined // \right uninfluenced by \color in array

        } : res;
      },

      htmlBuilder: htmlBuilder$7,
      mathmlBuilder: mathmlBuilder$6
    });
    defineEnvironment({
      type: "array",
      names: ["smallmatrix"],
      props: {
        numArgs: 0
      },

      handler(context) {
        var payload = {
          arraystretch: 0.5
        };
        var res = parseArray(context.parser, payload, "script");
        res.colSeparationType = "small";
        return res;
      },

      htmlBuilder: htmlBuilder$7,
      mathmlBuilder: mathmlBuilder$6
    });
    defineEnvironment({
      type: "array",
      names: ["subarray"],
      props: {
        numArgs: 1
      },

      handler(context, args) {
        // Parsing of {subarray} is similar to {array}
        var symNode = checkSymbolNodeType(args[0]);
        var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
        var cols = colalign.map(function (nde) {
          var node = assertSymbolNodeType(nde);
          var ca = node.text; // {subarray} only recognizes "l" & "c"

          if ("lc".indexOf(ca) !== -1) {
            return {
              type: "align",
              align: ca
            };
          }

          throw new ParseError("Unknown column alignment: " + ca, nde);
        });

        if (cols.length > 1) {
          throw new ParseError("{subarray} can contain only one column");
        }

        var res = {
          cols,
          hskipBeforeAndAfter: false,
          arraystretch: 0.5
        };
        res = parseArray(context.parser, res, "script");

        if (res.body.length > 0 && res.body[0].length > 1) {
          throw new ParseError("{subarray} can contain only one column");
        }

        return res;
      },

      htmlBuilder: htmlBuilder$7,
      mathmlBuilder: mathmlBuilder$6
    }); // A cases environment (in amsmath.sty) is almost equivalent to
    // \def\arraystretch{1.2}%
    // \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
    // {dcases} is a {cases} environment where cells are set in \displaystyle,
    // as defined in mathtools.sty.
    // {rcases} is another mathtools environment. It's brace is on the right side.

    defineEnvironment({
      type: "array",
      names: ["cases", "dcases", "rcases", "drcases"],
      props: {
        numArgs: 0
      },

      handler(context) {
        var payload = {
          arraystretch: 1.2,
          cols: [{
            type: "align",
            align: "l",
            pregap: 0,
            // TODO(kevinb) get the current style.
            // For now we use the metrics for TEXT style which is what we were
            // doing before.  Before attempting to get the current style we
            // should look at TeX's behavior especially for \over and matrices.
            postgap: 1.0
            /* 1em quad */

          }, {
            type: "align",
            align: "l",
            pregap: 0,
            postgap: 0
          }]
        };
        var res = parseArray(context.parser, payload, dCellStyle(context.envName));
        return {
          type: "leftright",
          mode: context.mode,
          body: [res],
          left: context.envName.indexOf("r") > -1 ? "." : "\\{",
          right: context.envName.indexOf("r") > -1 ? "\\}" : ".",
          rightColor: undefined
        };
      },

      htmlBuilder: htmlBuilder$7,
      mathmlBuilder: mathmlBuilder$6
    }); // In the align environment, one uses ampersands, &, to specify number of
    // columns in each row, and to locate spacing between each column.
    // align gets automatic numbering. align* and aligned do not.
    // The alignedat environment can be used in math mode.
    // Note that we assume \nomallineskiplimit to be zero,
    // so that \strut@ is the same as \strut.

    defineEnvironment({
      type: "array",
      names: ["align", "align*", "aligned", "split"],
      props: {
        numArgs: 0
      },
      handler: alignedHandler,
      htmlBuilder: htmlBuilder$7,
      mathmlBuilder: mathmlBuilder$6
    }); // A gathered environment is like an array environment with one centered
    // column, but where rows are considered lines so get \jot line spacing
    // and contents are set in \displaystyle.

    defineEnvironment({
      type: "array",
      names: ["gathered", "gather", "gather*"],
      props: {
        numArgs: 0
      },

      handler(context) {
        if (utils.contains(["gather", "gather*"], context.envName)) {
          validateAmsEnvironmentContext(context);
        }

        var res = {
          cols: [{
            type: "align",
            align: "c"
          }],
          addJot: true,
          colSeparationType: "gather",
          autoTag: getAutoTag(context.envName),
          emptySingleRow: true,
          leqno: context.parser.settings.leqno
        };
        return parseArray(context.parser, res, "display");
      },

      htmlBuilder: htmlBuilder$7,
      mathmlBuilder: mathmlBuilder$6
    }); // alignat environment is like an align environment, but one must explicitly
    // specify maximum number of columns in each row, and can adjust spacing between
    // each columns.

    defineEnvironment({
      type: "array",
      names: ["alignat", "alignat*", "alignedat"],
      props: {
        numArgs: 1
      },
      handler: alignedHandler,
      htmlBuilder: htmlBuilder$7,
      mathmlBuilder: mathmlBuilder$6
    });
    defineEnvironment({
      type: "array",
      names: ["equation", "equation*"],
      props: {
        numArgs: 0
      },

      handler(context) {
        validateAmsEnvironmentContext(context);
        var res = {
          autoTag: getAutoTag(context.envName),
          emptySingleRow: true,
          singleRow: true,
          maxNumCols: 1,
          leqno: context.parser.settings.leqno
        };
        return parseArray(context.parser, res, "display");
      },

      htmlBuilder: htmlBuilder$7,
      mathmlBuilder: mathmlBuilder$6
    });
    defineEnvironment({
      type: "array",
      names: ["CD"],
      props: {
        numArgs: 0
      },

      handler(context) {
        validateAmsEnvironmentContext(context);
        return parseCD(context.parser);
      },

      htmlBuilder: htmlBuilder$7,
      mathmlBuilder: mathmlBuilder$6
    });
    defineMacro("\\nonumber", "\\gdef\\@eqnsw{0}");
    defineMacro("\\notag", "\\nonumber"); // Catch \hline outside array environment

    defineFunction({
      type: "text",
      // Doesn't matter what this is.
      names: ["\\hline", "\\hdashline"],
      props: {
        numArgs: 0,
        allowedInText: true,
        allowedInMath: true
      },

      handler(context, args) {
        throw new ParseError(context.funcName + " valid only within array environment");
      }

    });

    var environments = _environments;

    // defineEnvironment definitions.

    defineFunction({
      type: "environment",
      names: ["\\begin", "\\end"],
      props: {
        numArgs: 1,
        argTypes: ["text"]
      },

      handler(_ref, args) {
        var {
          parser,
          funcName
        } = _ref;
        var nameGroup = args[0];

        if (nameGroup.type !== "ordgroup") {
          throw new ParseError("Invalid environment name", nameGroup);
        }

        var envName = "";

        for (var i = 0; i < nameGroup.body.length; ++i) {
          envName += assertNodeType(nameGroup.body[i], "textord").text;
        }

        if (funcName === "\\begin") {
          // begin...end is similar to left...right
          if (!environments.hasOwnProperty(envName)) {
            throw new ParseError("No such environment: " + envName, nameGroup);
          } // Build the environment object. Arguments and other information will
          // be made available to the begin and end methods using properties.


          var env = environments[envName];
          var {
            args: _args,
            optArgs
          } = parser.parseArguments("\\begin{" + envName + "}", env);
          var context = {
            mode: parser.mode,
            envName,
            parser
          };
          var result = env.handler(context, _args, optArgs);
          parser.expect("\\end", false);
          var endNameToken = parser.nextToken;
          var end = assertNodeType(parser.parseFunction(), "environment");

          if (end.name !== envName) {
            throw new ParseError("Mismatch: \\begin{" + envName + "} matched by \\end{" + end.name + "}", endNameToken);
          } // $FlowFixMe, "environment" handler returns an environment ParseNode


          return result;
        }

        return {
          type: "environment",
          mode: parser.mode,
          name: envName,
          nameGroup
        };
      }

    });

    var makeSpan = buildCommon.makeSpan;

    function htmlBuilder$6(group, options) {
      var elements = buildExpression$1(group.body, options, true);
      return makeSpan([group.mclass], elements, options);
    }

    function mathmlBuilder$5(group, options) {
      var node;
      var inner = buildExpression(group.body, options);

      if (group.mclass === "minner") {
        node = new mathMLTree.MathNode("mpadded", inner);
      } else if (group.mclass === "mord") {
        if (group.isCharacterBox) {
          node = inner[0];
          node.type = "mi";
        } else {
          node = new mathMLTree.MathNode("mi", inner);
        }
      } else {
        if (group.isCharacterBox) {
          node = inner[0];
          node.type = "mo";
        } else {
          node = new mathMLTree.MathNode("mo", inner);
        } // Set spacing based on what is the most likely adjacent atom type.
        // See TeXbook p170.


        if (group.mclass === "mbin") {
          node.attributes.lspace = "0.22em"; // medium space

          node.attributes.rspace = "0.22em";
        } else if (group.mclass === "mpunct") {
          node.attributes.lspace = "0em";
          node.attributes.rspace = "0.17em"; // thinspace
        } else if (group.mclass === "mopen" || group.mclass === "mclose") {
          node.attributes.lspace = "0em";
          node.attributes.rspace = "0em";
        } else if (group.mclass === "minner") {
          node.attributes.lspace = "0.0556em"; // 1 mu is the most likely option

          node.attributes.width = "+0.1111em";
        } // MathML <mo> default space is 5/18 em, so <mrel> needs no action.
        // Ref: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/mo

      }

      return node;
    } // Math class commands except \mathop


    defineFunction({
      type: "mclass",
      names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
      props: {
        numArgs: 1,
        primitive: true
      },

      handler(_ref, args) {
        var {
          parser,
          funcName
        } = _ref;
        var body = args[0];
        return {
          type: "mclass",
          mode: parser.mode,
          mclass: "m" + funcName.substr(5),
          // TODO(kevinb): don't prefix with 'm'
          body: ordargument(body),
          isCharacterBox: utils.isCharacterBox(body)
        };
      },

      htmlBuilder: htmlBuilder$6,
      mathmlBuilder: mathmlBuilder$5
    });
    var binrelClass = arg => {
      // \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.
      // (by rendering separately and with {}s before and after, and measuring
      // the change in spacing).  We'll do roughly the same by detecting the
      // atom type directly.
      var atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;

      if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
        return "m" + atom.family;
      } else {
        return "mord";
      }
    }; // \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.
    // This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.

    defineFunction({
      type: "mclass",
      names: ["\\@binrel"],
      props: {
        numArgs: 2
      },

      handler(_ref2, args) {
        var {
          parser
        } = _ref2;
        return {
          type: "mclass",
          mode: parser.mode,
          mclass: binrelClass(args[0]),
          body: ordargument(args[1]),
          isCharacterBox: utils.isCharacterBox(args[1])
        };
      }

    }); // Build a relation or stacked op by placing one symbol on top of another

    defineFunction({
      type: "mclass",
      names: ["\\stackrel", "\\overset", "\\underset"],
      props: {
        numArgs: 2
      },

      handler(_ref3, args) {
        var {
          parser,
          funcName
        } = _ref3;
        var baseArg = args[1];
        var shiftedArg = args[0];
        var mclass;

        if (funcName !== "\\stackrel") {
          // LaTeX applies \binrel spacing to \overset and \underset.
          mclass = binrelClass(baseArg);
        } else {
          mclass = "mrel"; // for \stackrel
        }

        var baseOp = {
          type: "op",
          mode: baseArg.mode,
          limits: true,
          alwaysHandleSupSub: true,
          parentIsSupSub: false,
          symbol: false,
          suppressBaseShift: funcName !== "\\stackrel",
          body: ordargument(baseArg)
        };
        var supsub = {
          type: "supsub",
          mode: shiftedArg.mode,
          base: baseOp,
          sup: funcName === "\\underset" ? null : shiftedArg,
          sub: funcName === "\\underset" ? shiftedArg : null
        };
        return {
          type: "mclass",
          mode: parser.mode,
          mclass,
          body: [supsub],
          isCharacterBox: utils.isCharacterBox(supsub)
        };
      },

      htmlBuilder: htmlBuilder$6,
      mathmlBuilder: mathmlBuilder$5
    });

    // TODO(kevinb): implement \\sl and \\sc

    var htmlBuilder$5 = (group, options) => {
      var font = group.font;
      var newOptions = options.withFont(font);
      return buildGroup$1(group.body, newOptions);
    };

    var mathmlBuilder$4 = (group, options) => {
      var font = group.font;
      var newOptions = options.withFont(font);
      return buildGroup(group.body, newOptions);
    };

    var fontAliases = {
      "\\Bbb": "\\mathbb",
      "\\bold": "\\mathbf",
      "\\frak": "\\mathfrak",
      "\\bm": "\\boldsymbol"
    };
    defineFunction({
      type: "font",
      names: [// styles, except \boldsymbol defined below
      "\\mathrm", "\\mathit", "\\mathbf", "\\mathnormal", // families
      "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf", "\\mathtt", // aliases, except \bm defined below
      "\\Bbb", "\\bold", "\\frak"],
      props: {
        numArgs: 1,
        allowedInArgument: true
      },
      handler: (_ref, args) => {
        var {
          parser,
          funcName
        } = _ref;
        var body = normalizeArgument(args[0]);
        var func = funcName;

        if (func in fontAliases) {
          func = fontAliases[func];
        }

        return {
          type: "font",
          mode: parser.mode,
          font: func.slice(1),
          body
        };
      },
      htmlBuilder: htmlBuilder$5,
      mathmlBuilder: mathmlBuilder$4
    });
    defineFunction({
      type: "mclass",
      names: ["\\boldsymbol", "\\bm"],
      props: {
        numArgs: 1
      },
      handler: (_ref2, args) => {
        var {
          parser
        } = _ref2;
        var body = args[0];
        var isCharacterBox = utils.isCharacterBox(body); // amsbsy.sty's \boldsymbol uses \binrel spacing to inherit the
        // argument's bin|rel|ord status

        return {
          type: "mclass",
          mode: parser.mode,
          mclass: binrelClass(body),
          body: [{
            type: "font",
            mode: parser.mode,
            font: "boldsymbol",
            body
          }],
          isCharacterBox: isCharacterBox
        };
      }
    }); // Old font changing functions

    defineFunction({
      type: "font",
      names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
      props: {
        numArgs: 0,
        allowedInText: true
      },
      handler: (_ref3, args) => {
        var {
          parser,
          funcName,
          breakOnTokenText
        } = _ref3;
        var {
          mode
        } = parser;
        var body = parser.parseExpression(true, breakOnTokenText);
        var style = "math" + funcName.slice(1);
        return {
          type: "font",
          mode: mode,
          font: style,
          body: {
            type: "ordgroup",
            mode: parser.mode,
            body
          }
        };
      },
      htmlBuilder: htmlBuilder$5,
      mathmlBuilder: mathmlBuilder$4
    });

    var adjustStyle = (size, originalStyle) => {
      // Figure out what style this fraction should be in based on the
      // function used
      var style = originalStyle;

      if (size === "display") {
        // Get display style as a default.
        // If incoming style is sub/sup, use style.text() to get correct size.
        style = style.id >= Style$1.SCRIPT.id ? style.text() : Style$1.DISPLAY;
      } else if (size === "text" && style.size === Style$1.DISPLAY.size) {
        // We're in a \tfrac but incoming style is displaystyle, so:
        style = Style$1.TEXT;
      } else if (size === "script") {
        style = Style$1.SCRIPT;
      } else if (size === "scriptscript") {
        style = Style$1.SCRIPTSCRIPT;
      }

      return style;
    };

    var htmlBuilder$4 = (group, options) => {
      // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
      var style = adjustStyle(group.size, options.style);
      var nstyle = style.fracNum();
      var dstyle = style.fracDen();
      var newOptions;
      newOptions = options.havingStyle(nstyle);
      var numerm = buildGroup$1(group.numer, newOptions, options);

      if (group.continued) {
        // \cfrac inserts a \strut into the numerator.
        // Get \strut dimensions from TeXbook page 353.
        var hStrut = 8.5 / options.fontMetrics().ptPerEm;
        var dStrut = 3.5 / options.fontMetrics().ptPerEm;
        numerm.height = numerm.height < hStrut ? hStrut : numerm.height;
        numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;
      }

      newOptions = options.havingStyle(dstyle);
      var denomm = buildGroup$1(group.denom, newOptions, options);
      var rule;
      var ruleWidth;
      var ruleSpacing;

      if (group.hasBarLine) {
        if (group.barSize) {
          ruleWidth = calculateSize(group.barSize, options);
          rule = buildCommon.makeLineSpan("frac-line", options, ruleWidth);
        } else {
          rule = buildCommon.makeLineSpan("frac-line", options);
        }

        ruleWidth = rule.height;
        ruleSpacing = rule.height;
      } else {
        rule = null;
        ruleWidth = 0;
        ruleSpacing = options.fontMetrics().defaultRuleThickness;
      } // Rule 15b


      var numShift;
      var clearance;
      var denomShift;

      if (style.size === Style$1.DISPLAY.size || group.size === "display") {
        numShift = options.fontMetrics().num1;

        if (ruleWidth > 0) {
          clearance = 3 * ruleSpacing;
        } else {
          clearance = 7 * ruleSpacing;
        }

        denomShift = options.fontMetrics().denom1;
      } else {
        if (ruleWidth > 0) {
          numShift = options.fontMetrics().num2;
          clearance = ruleSpacing;
        } else {
          numShift = options.fontMetrics().num3;
          clearance = 3 * ruleSpacing;
        }

        denomShift = options.fontMetrics().denom2;
      }

      var frac;

      if (!rule) {
        // Rule 15c
        var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);

        if (candidateClearance < clearance) {
          numShift += 0.5 * (clearance - candidateClearance);
          denomShift += 0.5 * (clearance - candidateClearance);
        }

        frac = buildCommon.makeVList({
          positionType: "individualShift",
          children: [{
            type: "elem",
            elem: denomm,
            shift: denomShift
          }, {
            type: "elem",
            elem: numerm,
            shift: -numShift
          }]
        }, options);
      } else {
        // Rule 15d
        var axisHeight = options.fontMetrics().axisHeight;

        if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
          numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
        }

        if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
          denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
        }

        var midShift = -(axisHeight - 0.5 * ruleWidth);
        frac = buildCommon.makeVList({
          positionType: "individualShift",
          children: [{
            type: "elem",
            elem: denomm,
            shift: denomShift
          }, {
            type: "elem",
            elem: rule,
            shift: midShift
          }, {
            type: "elem",
            elem: numerm,
            shift: -numShift
          }]
        }, options);
      } // Since we manually change the style sometimes (with \dfrac or \tfrac),
      // account for the possible size change here.


      newOptions = options.havingStyle(style);
      frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
      frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier; // Rule 15e

      var delimSize;

      if (style.size === Style$1.DISPLAY.size) {
        delimSize = options.fontMetrics().delim1;
      } else if (style.size === Style$1.SCRIPTSCRIPT.size) {
        delimSize = options.havingStyle(Style$1.SCRIPT).fontMetrics().delim2;
      } else {
        delimSize = options.fontMetrics().delim2;
      }

      var leftDelim;
      var rightDelim;

      if (group.leftDelim == null) {
        leftDelim = makeNullDelimiter(options, ["mopen"]);
      } else {
        leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
      }

      if (group.continued) {
        rightDelim = buildCommon.makeSpan([]); // zero width for \cfrac
      } else if (group.rightDelim == null) {
        rightDelim = makeNullDelimiter(options, ["mclose"]);
      } else {
        rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
      }

      return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, buildCommon.makeSpan(["mfrac"], [frac]), rightDelim], options);
    };

    var mathmlBuilder$3 = (group, options) => {
      var node = new mathMLTree.MathNode("mfrac", [buildGroup(group.numer, options), buildGroup(group.denom, options)]);

      if (!group.hasBarLine) {
        node.setAttribute("linethickness", "0px");
      } else if (group.barSize) {
        var ruleWidth = calculateSize(group.barSize, options);
        node.setAttribute("linethickness", makeEm(ruleWidth));
      }

      var style = adjustStyle(group.size, options.style);

      if (style.size !== options.style.size) {
        node = new mathMLTree.MathNode("mstyle", [node]);
        var isDisplay = style.size === Style$1.DISPLAY.size ? "true" : "false";
        node.setAttribute("displaystyle", isDisplay);
        node.setAttribute("scriptlevel", "0");
      }

      if (group.leftDelim != null || group.rightDelim != null) {
        var withDelims = [];

        if (group.leftDelim != null) {
          var leftOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))]);
          leftOp.setAttribute("fence", "true");
          withDelims.push(leftOp);
        }

        withDelims.push(node);

        if (group.rightDelim != null) {
          var rightOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))]);
          rightOp.setAttribute("fence", "true");
          withDelims.push(rightOp);
        }

        return makeRow(withDelims);
      }

      return node;
    };

    defineFunction({
      type: "genfrac",
      names: ["\\dfrac", "\\frac", "\\tfrac", "\\dbinom", "\\binom", "\\tbinom", "\\\\atopfrac", // can’t be entered directly
      "\\\\bracefrac", "\\\\brackfrac" // ditto
      ],
      props: {
        numArgs: 2,
        allowedInArgument: true
      },
      handler: (_ref, args) => {
        var {
          parser,
          funcName
        } = _ref;
        var numer = args[0];
        var denom = args[1];
        var hasBarLine;
        var leftDelim = null;
        var rightDelim = null;
        var size = "auto";

        switch (funcName) {
          case "\\dfrac":
          case "\\frac":
          case "\\tfrac":
            hasBarLine = true;
            break;

          case "\\\\atopfrac":
            hasBarLine = false;
            break;

          case "\\dbinom":
          case "\\binom":
          case "\\tbinom":
            hasBarLine = false;
            leftDelim = "(";
            rightDelim = ")";
            break;

          case "\\\\bracefrac":
            hasBarLine = false;
            leftDelim = "\\{";
            rightDelim = "\\}";
            break;

          case "\\\\brackfrac":
            hasBarLine = false;
            leftDelim = "[";
            rightDelim = "]";
            break;

          default:
            throw new Error("Unrecognized genfrac command");
        }

        switch (funcName) {
          case "\\dfrac":
          case "\\dbinom":
            size = "display";
            break;

          case "\\tfrac":
          case "\\tbinom":
            size = "text";
            break;
        }

        return {
          type: "genfrac",
          mode: parser.mode,
          continued: false,
          numer,
          denom,
          hasBarLine,
          leftDelim,
          rightDelim,
          size,
          barSize: null
        };
      },
      htmlBuilder: htmlBuilder$4,
      mathmlBuilder: mathmlBuilder$3
    });
    defineFunction({
      type: "genfrac",
      names: ["\\cfrac"],
      props: {
        numArgs: 2
      },
      handler: (_ref2, args) => {
        var {
          parser,
          funcName
        } = _ref2;
        var numer = args[0];
        var denom = args[1];
        return {
          type: "genfrac",
          mode: parser.mode,
          continued: true,
          numer,
          denom,
          hasBarLine: true,
          leftDelim: null,
          rightDelim: null,
          size: "display",
          barSize: null
        };
      }
    }); // Infix generalized fractions -- these are not rendered directly, but replaced
    // immediately by one of the variants above.

    defineFunction({
      type: "infix",
      names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
      props: {
        numArgs: 0,
        infix: true
      },

      handler(_ref3) {
        var {
          parser,
          funcName,
          token
        } = _ref3;
        var replaceWith;

        switch (funcName) {
          case "\\over":
            replaceWith = "\\frac";
            break;

          case "\\choose":
            replaceWith = "\\binom";
            break;

          case "\\atop":
            replaceWith = "\\\\atopfrac";
            break;

          case "\\brace":
            replaceWith = "\\\\bracefrac";
            break;

          case "\\brack":
            replaceWith = "\\\\brackfrac";
            break;

          default:
            throw new Error("Unrecognized infix genfrac command");
        }

        return {
          type: "infix",
          mode: parser.mode,
          replaceWith,
          token
        };
      }

    });
    var stylArray = ["display", "text", "script", "scriptscript"];

    var delimFromValue = function delimFromValue(delimString) {
      var delim = null;

      if (delimString.length > 0) {
        delim = delimString;
        delim = delim === "." ? null : delim;
      }

      return delim;
    };

    defineFunction({
      type: "genfrac",
      names: ["\\genfrac"],
      props: {
        numArgs: 6,
        allowedInArgument: true,
        argTypes: ["math", "math", "size", "text", "math", "math"]
      },

      handler(_ref4, args) {
        var {
          parser
        } = _ref4;
        var numer = args[4];
        var denom = args[5]; // Look into the parse nodes to get the desired delimiters.

        var leftNode = normalizeArgument(args[0]);
        var leftDelim = leftNode.type === "atom" && leftNode.family === "open" ? delimFromValue(leftNode.text) : null;
        var rightNode = normalizeArgument(args[1]);
        var rightDelim = rightNode.type === "atom" && rightNode.family === "close" ? delimFromValue(rightNode.text) : null;
        var barNode = assertNodeType(args[2], "size");
        var hasBarLine;
        var barSize = null;

        if (barNode.isBlank) {
          // \genfrac acts differently than \above.
          // \genfrac treats an empty size group as a signal to use a
          // standard bar size. \above would see size = 0 and omit the bar.
          hasBarLine = true;
        } else {
          barSize = barNode.value;
          hasBarLine = barSize.number > 0;
        } // Find out if we want displaystyle, textstyle, etc.


        var size = "auto";
        var styl = args[3];

        if (styl.type === "ordgroup") {
          if (styl.body.length > 0) {
            var textOrd = assertNodeType(styl.body[0], "textord");
            size = stylArray[Number(textOrd.text)];
          }
        } else {
          styl = assertNodeType(styl, "textord");
          size = stylArray[Number(styl.text)];
        }

        return {
          type: "genfrac",
          mode: parser.mode,
          numer,
          denom,
          continued: false,
          hasBarLine,
          barSize,
          leftDelim,
          rightDelim,
          size
        };
      },

      htmlBuilder: htmlBuilder$4,
      mathmlBuilder: mathmlBuilder$3
    }); // \above is an infix fraction that also defines a fraction bar size.

    defineFunction({
      type: "infix",
      names: ["\\above"],
      props: {
        numArgs: 1,
        argTypes: ["size"],
        infix: true
      },

      handler(_ref5, args) {
        var {
          parser,
          funcName,
          token
        } = _ref5;
        return {
          type: "infix",
          mode: parser.mode,
          replaceWith: "\\\\abovefrac",
          size: assertNodeType(args[0], "size").value,
          token
        };
      }

    });
    defineFunction({
      type: "genfrac",
      names: ["\\\\abovefrac"],
      props: {
        numArgs: 3,
        argTypes: ["math", "size", "math"]
      },
      handler: (_ref6, args) => {
        var {
          parser,
          funcName
        } = _ref6;
        var numer = args[0];
        var barSize = assert(assertNodeType(args[1], "infix").size);
        var denom = args[2];
        var hasBarLine = barSize.number > 0;
        return {
          type: "genfrac",
          mode: parser.mode,
          numer,
          denom,
          continued: false,
          hasBarLine,
          barSize,
          leftDelim: null,
          rightDelim: null,
          size: "auto"
        };
      },
      htmlBuilder: htmlBuilder$4,
      mathmlBuilder: mathmlBuilder$3
    });

    // NOTE: Unlike most `htmlBuilder`s, this one handles not only "horizBrace", but
    // also "supsub" since an over/underbrace can affect super/subscripting.
    var htmlBuilder$3 = (grp, options) => {
      var style = options.style; // Pull out the `ParseNode<"horizBrace">` if `grp` is a "supsub" node.

      var supSubGroup;
      var group;

      if (grp.type === "supsub") {
        // Ref: LaTeX source2e: }}}}\limits}
        // i.e. LaTeX treats the brace similar to an op and passes it
        // with \limits, so we need to assign supsub style.
        supSubGroup = grp.sup ? buildGroup$1(grp.sup, options.havingStyle(style.sup()), options) : buildGroup$1(grp.sub, options.havingStyle(style.sub()), options);
        group = assertNodeType(grp.base, "horizBrace");
      } else {
        group = assertNodeType(grp, "horizBrace");
      } // Build the base group


      var body = buildGroup$1(group.base, options.havingBaseStyle(Style$1.DISPLAY)); // Create the stretchy element

      var braceBody = stretchy.svgSpan(group, options); // Generate the vlist, with the appropriate kerns        ┏━━━━━━━━┓
      // This first vlist contains the content and the brace:   equation

      var vlist;

      if (group.isOver) {
        vlist = buildCommon.makeVList({
          positionType: "firstBaseline",
          children: [{
            type: "elem",
            elem: body
          }, {
            type: "kern",
            size: 0.1
          }, {
            type: "elem",
            elem: braceBody
          }]
        }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

        vlist.children[0].children[0].children[1].classes.push("svg-align");
      } else {
        vlist = buildCommon.makeVList({
          positionType: "bottom",
          positionData: body.depth + 0.1 + braceBody.height,
          children: [{
            type: "elem",
            elem: braceBody
          }, {
            type: "kern",
            size: 0.1
          }, {
            type: "elem",
            elem: body
          }]
        }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

        vlist.children[0].children[0].children[0].classes.push("svg-align");
      }

      if (supSubGroup) {
        // To write the supsub, wrap the first vlist in another vlist:
        // They can't all go in the same vlist, because the note might be
        // wider than the equation. We want the equation to control the
        // brace width.
        //      note          long note           long note
        //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
        //    equation           eqn                 eqn
        var vSpan = buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);

        if (group.isOver) {
          vlist = buildCommon.makeVList({
            positionType: "firstBaseline",
            children: [{
              type: "elem",
              elem: vSpan
            }, {
              type: "kern",
              size: 0.2
            }, {
              type: "elem",
              elem: supSubGroup
            }]
          }, options);
        } else {
          vlist = buildCommon.makeVList({
            positionType: "bottom",
            positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,
            children: [{
              type: "elem",
              elem: supSubGroup
            }, {
              type: "kern",
              size: 0.2
            }, {
              type: "elem",
              elem: vSpan
            }]
          }, options);
        }
      }

      return buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
    };

    var mathmlBuilder$2 = (group, options) => {
      var accentNode = stretchy.mathMLnode(group.label);
      return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [buildGroup(group.base, options), accentNode]);
    }; // Horizontal stretchy braces


    defineFunction({
      type: "horizBrace",
      names: ["\\overbrace", "\\underbrace"],
      props: {
        numArgs: 1
      },

      handler(_ref, args) {
        var {
          parser,
          funcName
        } = _ref;
        return {
          type: "horizBrace",
          mode: parser.mode,
          label: funcName,
          isOver: /^\\over/.test(funcName),
          base: args[0]
        };
      },

      htmlBuilder: htmlBuilder$3,
      mathmlBuilder: mathmlBuilder$2
    });

    defineFunction({
      type: "href",
      names: ["\\href"],
      props: {
        numArgs: 2,
        argTypes: ["url", "original"],
        allowedInText: true
      },
      handler: (_ref, args) => {
        var {
          parser
        } = _ref;
        var body = args[1];
        var href = assertNodeType(args[0], "url").url;

        if (!parser.settings.isTrusted({
          command: "\\href",
          url: href
        })) {
          return parser.formatUnsupportedCmd("\\href");
        }

        return {
          type: "href",
          mode: parser.mode,
          href,
          body: ordargument(body)
        };
      },
      htmlBuilder: (group, options) => {
        var elements = buildExpression$1(group.body, options, false);
        return buildCommon.makeAnchor(group.href, [], elements, options);
      },
      mathmlBuilder: (group, options) => {
        var math = buildExpressionRow(group.body, options);

        if (!(math instanceof MathNode)) {
          math = new MathNode("mrow", [math]);
        }

        math.setAttribute("href", group.href);
        return math;
      }
    });
    defineFunction({
      type: "href",
      names: ["\\url"],
      props: {
        numArgs: 1,
        argTypes: ["url"],
        allowedInText: true
      },
      handler: (_ref2, args) => {
        var {
          parser
        } = _ref2;
        var href = assertNodeType(args[0], "url").url;

        if (!parser.settings.isTrusted({
          command: "\\url",
          url: href
        })) {
          return parser.formatUnsupportedCmd("\\url");
        }

        var chars = [];

        for (var i = 0; i < href.length; i++) {
          var c = href[i];

          if (c === "~") {
            c = "\\textasciitilde";
          }

          chars.push({
            type: "textord",
            mode: "text",
            text: c
          });
        }

        var body = {
          type: "text",
          mode: parser.mode,
          font: "\\texttt",
          body: chars
        };
        return {
          type: "href",
          mode: parser.mode,
          href,
          body: ordargument(body)
        };
      }
    });

    // In LaTeX, \vcenter can act only on a box, as in
    // \vcenter{\hbox{$\frac{a+b}{\dfrac{c}{d}}$}}
    // This function by itself doesn't do anything but prevent a soft line break.

    defineFunction({
      type: "hbox",
      names: ["\\hbox"],
      props: {
        numArgs: 1,
        argTypes: ["text"],
        allowedInText: true,
        primitive: true
      },

      handler(_ref, args) {
        var {
          parser
        } = _ref;
        return {
          type: "hbox",
          mode: parser.mode,
          body: ordargument(args[0])
        };
      },

      htmlBuilder(group, options) {
        var elements = buildExpression$1(group.body, options, false);
        return buildCommon.makeFragment(elements);
      },

      mathmlBuilder(group, options) {
        return new mathMLTree.MathNode("mrow", buildExpression(group.body, options));
      }

    });

    defineFunction({
      type: "html",
      names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
      props: {
        numArgs: 2,
        argTypes: ["raw", "original"],
        allowedInText: true
      },
      handler: (_ref, args) => {
        var {
          parser,
          funcName,
          token
        } = _ref;
        var value = assertNodeType(args[0], "raw").string;
        var body = args[1];

        if (parser.settings.strict) {
          parser.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
        }

        var trustContext;
        var attributes = {};

        switch (funcName) {
          case "\\htmlClass":
            attributes.class = value;
            trustContext = {
              command: "\\htmlClass",
              class: value
            };
            break;

          case "\\htmlId":
            attributes.id = value;
            trustContext = {
              command: "\\htmlId",
              id: value
            };
            break;

          case "\\htmlStyle":
            attributes.style = value;
            trustContext = {
              command: "\\htmlStyle",
              style: value
            };
            break;

          case "\\htmlData":
            {
              var data = value.split(",");

              for (var i = 0; i < data.length; i++) {
                var keyVal = data[i].split("=");

                if (keyVal.length !== 2) {
                  throw new ParseError("Error parsing key-value for \\htmlData");
                }

                attributes["data-" + keyVal[0].trim()] = keyVal[1].trim();
              }

              trustContext = {
                command: "\\htmlData",
                attributes
              };
              break;
            }

          default:
            throw new Error("Unrecognized html command");
        }

        if (!parser.settings.isTrusted(trustContext)) {
          return parser.formatUnsupportedCmd(funcName);
        }

        return {
          type: "html",
          mode: parser.mode,
          attributes,
          body: ordargument(body)
        };
      },
      htmlBuilder: (group, options) => {
        var elements = buildExpression$1(group.body, options, false);
        var classes = ["enclosing"];

        if (group.attributes.class) {
          classes.push(...group.attributes.class.trim().split(/\s+/));
        }

        var span = buildCommon.makeSpan(classes, elements, options);

        for (var attr in group.attributes) {
          if (attr !== "class" && group.attributes.hasOwnProperty(attr)) {
            span.setAttribute(attr, group.attributes[attr]);
          }
        }

        return span;
      },
      mathmlBuilder: (group, options) => {
        return buildExpressionRow(group.body, options);
      }
    });

    defineFunction({
      type: "htmlmathml",
      names: ["\\html@mathml"],
      props: {
        numArgs: 2,
        allowedInText: true
      },
      handler: (_ref, args) => {
        var {
          parser
        } = _ref;
        return {
          type: "htmlmathml",
          mode: parser.mode,
          html: ordargument(args[0]),
          mathml: ordargument(args[1])
        };
      },
      htmlBuilder: (group, options) => {
        var elements = buildExpression$1(group.html, options, false);
        return buildCommon.makeFragment(elements);
      },
      mathmlBuilder: (group, options) => {
        return buildExpressionRow(group.mathml, options);
      }
    });

    var sizeData = function sizeData(str) {
      if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)) {
        // str is a number with no unit specified.
        // default unit is bp, per graphix package.
        return {
          number: +str,
          unit: "bp"
        };
      } else {
        var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);

        if (!match) {
          throw new ParseError("Invalid size: '" + str + "' in \\includegraphics");
        }

        var data = {
          number: +(match[1] + match[2]),
          // sign + magnitude, cast to number
          unit: match[3]
        };

        if (!validUnit(data)) {
          throw new ParseError("Invalid unit: '" + data.unit + "' in \\includegraphics.");
        }

        return data;
      }
    };

    defineFunction({
      type: "includegraphics",
      names: ["\\includegraphics"],
      props: {
        numArgs: 1,
        numOptionalArgs: 1,
        argTypes: ["raw", "url"],
        allowedInText: false
      },
      handler: (_ref, args, optArgs) => {
        var {
          parser
        } = _ref;
        var width = {
          number: 0,
          unit: "em"
        };
        var height = {
          number: 0.9,
          unit: "em"
        }; // sorta character sized.

        var totalheight = {
          number: 0,
          unit: "em"
        };
        var alt = "";

        if (optArgs[0]) {
          var attributeStr = assertNodeType(optArgs[0], "raw").string; // Parser.js does not parse key/value pairs. We get a string.

          var attributes = attributeStr.split(",");

          for (var i = 0; i < attributes.length; i++) {
            var keyVal = attributes[i].split("=");

            if (keyVal.length === 2) {
              var str = keyVal[1].trim();

              switch (keyVal[0].trim()) {
                case "alt":
                  alt = str;
                  break;

                case "width":
                  width = sizeData(str);
                  break;

                case "height":
                  height = sizeData(str);
                  break;

                case "totalheight":
                  totalheight = sizeData(str);
                  break;

                default:
                  throw new ParseError("Invalid key: '" + keyVal[0] + "' in \\includegraphics.");
              }
            }
          }
        }

        var src = assertNodeType(args[0], "url").url;

        if (alt === "") {
          // No alt given. Use the file name. Strip away the path.
          alt = src;
          alt = alt.replace(/^.*[\\/]/, '');
          alt = alt.substring(0, alt.lastIndexOf('.'));
        }

        if (!parser.settings.isTrusted({
          command: "\\includegraphics",
          url: src
        })) {
          return parser.formatUnsupportedCmd("\\includegraphics");
        }

        return {
          type: "includegraphics",
          mode: parser.mode,
          alt: alt,
          width: width,
          height: height,
          totalheight: totalheight,
          src: src
        };
      },
      htmlBuilder: (group, options) => {
        var height = calculateSize(group.height, options);
        var depth = 0;

        if (group.totalheight.number > 0) {
          depth = calculateSize(group.totalheight, options) - height;
        }

        var width = 0;

        if (group.width.number > 0) {
          width = calculateSize(group.width, options);
        }

        var style = {
          height: makeEm(height + depth)
        };

        if (width > 0) {
          style.width = makeEm(width);
        }

        if (depth > 0) {
          style.verticalAlign = makeEm(-depth);
        }

        var node = new Img(group.src, group.alt, style);
        node.height = height;
        node.depth = depth;
        return node;
      },
      mathmlBuilder: (group, options) => {
        var node = new mathMLTree.MathNode("mglyph", []);
        node.setAttribute("alt", group.alt);
        var height = calculateSize(group.height, options);
        var depth = 0;

        if (group.totalheight.number > 0) {
          depth = calculateSize(group.totalheight, options) - height;
          node.setAttribute("valign", makeEm(-depth));
        }

        node.setAttribute("height", makeEm(height + depth));

        if (group.width.number > 0) {
          var width = calculateSize(group.width, options);
          node.setAttribute("width", makeEm(width));
        }

        node.setAttribute("src", group.src);
        return node;
      }
    });

    // Horizontal spacing commands

    defineFunction({
      type: "kern",
      names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
      props: {
        numArgs: 1,
        argTypes: ["size"],
        primitive: true,
        allowedInText: true
      },

      handler(_ref, args) {
        var {
          parser,
          funcName
        } = _ref;
        var size = assertNodeType(args[0], "size");

        if (parser.settings.strict) {
          var mathFunction = funcName[1] === 'm'; // \mkern, \mskip

          var muUnit = size.value.unit === 'mu';

          if (mathFunction) {
            if (!muUnit) {
              parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " supports only mu units, " + ("not " + size.value.unit + " units"));
            }

            if (parser.mode !== "math") {
              parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " works only in math mode");
            }
          } else {
            // !mathFunction
            if (muUnit) {
              parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " doesn't support mu units");
            }
          }
        }

        return {
          type: "kern",
          mode: parser.mode,
          dimension: size.value
        };
      },

      htmlBuilder(group, options) {
        return buildCommon.makeGlue(group.dimension, options);
      },

      mathmlBuilder(group, options) {
        var dimension = calculateSize(group.dimension, options);
        return new mathMLTree.SpaceNode(dimension);
      }

    });

    // Horizontal overlap functions
    defineFunction({
      type: "lap",
      names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
      props: {
        numArgs: 1,
        allowedInText: true
      },
      handler: (_ref, args) => {
        var {
          parser,
          funcName
        } = _ref;
        var body = args[0];
        return {
          type: "lap",
          mode: parser.mode,
          alignment: funcName.slice(5),
          body
        };
      },
      htmlBuilder: (group, options) => {
        // mathllap, mathrlap, mathclap
        var inner;

        if (group.alignment === "clap") {
          // ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
          inner = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]); // wrap, since CSS will center a .clap > .inner > span

          inner = buildCommon.makeSpan(["inner"], [inner], options);
        } else {
          inner = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options)]);
        }

        var fix = buildCommon.makeSpan(["fix"], []);
        var node = buildCommon.makeSpan([group.alignment], [inner, fix], options); // At this point, we have correctly set horizontal alignment of the
        // two items involved in the lap.
        // Next, use a strut to set the height of the HTML bounding box.
        // Otherwise, a tall argument may be misplaced.
        // This code resolved issue #1153

        var strut = buildCommon.makeSpan(["strut"]);
        strut.style.height = makeEm(node.height + node.depth);

        if (node.depth) {
          strut.style.verticalAlign = makeEm(-node.depth);
        }

        node.children.unshift(strut); // Next, prevent vertical misplacement when next to something tall.
        // This code resolves issue #1234

        node = buildCommon.makeSpan(["thinbox"], [node], options);
        return buildCommon.makeSpan(["mord", "vbox"], [node], options);
      },
      mathmlBuilder: (group, options) => {
        // mathllap, mathrlap, mathclap
        var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);

        if (group.alignment !== "rlap") {
          var offset = group.alignment === "llap" ? "-1" : "-0.5";
          node.setAttribute("lspace", offset + "width");
        }

        node.setAttribute("width", "0px");
        return node;
      }
    });

    defineFunction({
      type: "styling",
      names: ["\\(", "$"],
      props: {
        numArgs: 0,
        allowedInText: true,
        allowedInMath: false
      },

      handler(_ref, args) {
        var {
          funcName,
          parser
        } = _ref;
        var outerMode = parser.mode;
        parser.switchMode("math");
        var close = funcName === "\\(" ? "\\)" : "$";
        var body = parser.parseExpression(false, close);
        parser.expect(close);
        parser.switchMode(outerMode);
        return {
          type: "styling",
          mode: parser.mode,
          style: "text",
          body
        };
      }

    }); // Check for extra closing math delimiters

    defineFunction({
      type: "text",
      // Doesn't matter what this is.
      names: ["\\)", "\\]"],
      props: {
        numArgs: 0,
        allowedInText: true,
        allowedInMath: false
      },

      handler(context, args) {
        throw new ParseError("Mismatched " + context.funcName);
      }

    });

    var chooseMathStyle = (group, options) => {
      switch (options.style.size) {
        case Style$1.DISPLAY.size:
          return group.display;

        case Style$1.TEXT.size:
          return group.text;

        case Style$1.SCRIPT.size:
          return group.script;

        case Style$1.SCRIPTSCRIPT.size:
          return group.scriptscript;

        default:
          return group.text;
      }
    };

    defineFunction({
      type: "mathchoice",
      names: ["\\mathchoice"],
      props: {
        numArgs: 4,
        primitive: true
      },
      handler: (_ref, args) => {
        var {
          parser
        } = _ref;
        return {
          type: "mathchoice",
          mode: parser.mode,
          display: ordargument(args[0]),
          text: ordargument(args[1]),
          script: ordargument(args[2]),
          scriptscript: ordargument(args[3])
        };
      },
      htmlBuilder: (group, options) => {
        var body = chooseMathStyle(group, options);
        var elements = buildExpression$1(body, options, false);
        return buildCommon.makeFragment(elements);
      },
      mathmlBuilder: (group, options) => {
        var body = chooseMathStyle(group, options);
        return buildExpressionRow(body, options);
      }
    });

    var assembleSupSub = (base, supGroup, subGroup, options, style, slant, baseShift) => {
      base = buildCommon.makeSpan([], [base]);
      var subIsSingleCharacter = subGroup && utils.isCharacterBox(subGroup);
      var sub;
      var sup; // We manually have to handle the superscripts and subscripts. This,
      // aside from the kern calculations, is copied from supsub.

      if (supGroup) {
        var elem = buildGroup$1(supGroup, options.havingStyle(style.sup()), options);
        sup = {
          elem,
          kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
        };
      }

      if (subGroup) {
        var _elem = buildGroup$1(subGroup, options.havingStyle(style.sub()), options);

        sub = {
          elem: _elem,
          kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)
        };
      } // Build the final group as a vlist of the possible subscript, base,
      // and possible superscript.


      var finalGroup;

      if (sup && sub) {
        var bottom = options.fontMetrics().bigOpSpacing5 + sub.elem.height + sub.elem.depth + sub.kern + base.depth + baseShift;
        finalGroup = buildCommon.makeVList({
          positionType: "bottom",
          positionData: bottom,
          children: [{
            type: "kern",
            size: options.fontMetrics().bigOpSpacing5
          }, {
            type: "elem",
            elem: sub.elem,
            marginLeft: makeEm(-slant)
          }, {
            type: "kern",
            size: sub.kern
          }, {
            type: "elem",
            elem: base
          }, {
            type: "kern",
            size: sup.kern
          }, {
            type: "elem",
            elem: sup.elem,
            marginLeft: makeEm(slant)
          }, {
            type: "kern",
            size: options.fontMetrics().bigOpSpacing5
          }]
        }, options);
      } else if (sub) {
        var top = base.height - baseShift; // Shift the limits by the slant of the symbol. Note
        // that we are supposed to shift the limits by 1/2 of the slant,
        // but since we are centering the limits adding a full slant of
        // margin will shift by 1/2 that.

        finalGroup = buildCommon.makeVList({
          positionType: "top",
          positionData: top,
          children: [{
            type: "kern",
            size: options.fontMetrics().bigOpSpacing5
          }, {
            type: "elem",
            elem: sub.elem,
            marginLeft: makeEm(-slant)
          }, {
            type: "kern",
            size: sub.kern
          }, {
            type: "elem",
            elem: base
          }]
        }, options);
      } else if (sup) {
        var _bottom = base.depth + baseShift;

        finalGroup = buildCommon.makeVList({
          positionType: "bottom",
          positionData: _bottom,
          children: [{
            type: "elem",
            elem: base
          }, {
            type: "kern",
            size: sup.kern
          }, {
            type: "elem",
            elem: sup.elem,
            marginLeft: makeEm(slant)
          }, {
            type: "kern",
            size: options.fontMetrics().bigOpSpacing5
          }]
        }, options);
      } else {
        // This case probably shouldn't occur (this would mean the
        // supsub was sending us a group with no superscript or
        // subscript) but be safe.
        return base;
      }

      var parts = [finalGroup];

      if (sub && slant !== 0 && !subIsSingleCharacter) {
        // A negative margin-left was applied to the lower limit.
        // Avoid an overlap by placing a spacer on the left on the group.
        var spacer = buildCommon.makeSpan(["mspace"], [], options);
        spacer.style.marginRight = makeEm(slant);
        parts.unshift(spacer);
      }

      return buildCommon.makeSpan(["mop", "op-limits"], parts, options);
    };

    // Limits, symbols
    // Most operators have a large successor symbol, but these don't.
    var noSuccessor = ["\\smallint"]; // NOTE: Unlike most `htmlBuilder`s, this one handles not only "op", but also
    // "supsub" since some of them (like \int) can affect super/subscripting.

    var htmlBuilder$2 = (grp, options) => {
      // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
      var supGroup;
      var subGroup;
      var hasLimits = false;
      var group;

      if (grp.type === "supsub") {
        // If we have limits, supsub will pass us its group to handle. Pull
        // out the superscript and subscript and set the group to the op in
        // its base.
        supGroup = grp.sup;
        subGroup = grp.sub;
        group = assertNodeType(grp.base, "op");
        hasLimits = true;
      } else {
        group = assertNodeType(grp, "op");
      }

      var style = options.style;
      var large = false;

      if (style.size === Style$1.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {
        // Most symbol operators get larger in displaystyle (rule 13)
        large = true;
      }

      var base;

      if (group.symbol) {
        // If this is a symbol, create the symbol.
        var fontName = large ? "Size2-Regular" : "Size1-Regular";
        var stash = "";

        if (group.name === "\\oiint" || group.name === "\\oiiint") {
          // No font glyphs yet, so use a glyph w/o the oval.
          // TODO: When font glyphs are available, delete this code.
          stash = group.name.substr(1);
          group.name = stash === "oiint" ? "\\iint" : "\\iiint";
        }

        base = buildCommon.makeSymbol(group.name, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);

        if (stash.length > 0) {
          // We're in \oiint or \oiiint. Overlay the oval.
          // TODO: When font glyphs are available, delete this code.
          var italic = base.italic;
          var oval = buildCommon.staticSvg(stash + "Size" + (large ? "2" : "1"), options);
          base = buildCommon.makeVList({
            positionType: "individualShift",
            children: [{
              type: "elem",
              elem: base,
              shift: 0
            }, {
              type: "elem",
              elem: oval,
              shift: large ? 0.08 : 0
            }]
          }, options);
          group.name = "\\" + stash;
          base.classes.unshift("mop"); // $FlowFixMe

          base.italic = italic;
        }
      } else if (group.body) {
        // If this is a list, compose that list.
        var inner = buildExpression$1(group.body, options, true);

        if (inner.length === 1 && inner[0] instanceof SymbolNode) {
          base = inner[0];
          base.classes[0] = "mop"; // replace old mclass
        } else {
          base = buildCommon.makeSpan(["mop"], inner, options);
        }
      } else {
        // Otherwise, this is a text operator. Build the text from the
        // operator's name.
        var output = [];

        for (var i = 1; i < group.name.length; i++) {
          output.push(buildCommon.mathsym(group.name[i], group.mode, options));
        }

        base = buildCommon.makeSpan(["mop"], output, options);
      } // If content of op is a single symbol, shift it vertically.


      var baseShift = 0;
      var slant = 0;

      if ((base instanceof SymbolNode || group.name === "\\oiint" || group.name === "\\oiiint") && !group.suppressBaseShift) {
        // We suppress the shift of the base of \overset and \underset. Otherwise,
        // shift the symbol so its center lies on the axis (rule 13). It
        // appears that our fonts have the centers of the symbols already
        // almost on the axis, so these numbers are very small. Note we
        // don't actually apply this here, but instead it is used either in
        // the vlist creation or separately when there are no limits.
        baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight; // The slant of the symbol is just its italic correction.
        // $FlowFixMe

        slant = base.italic;
      }

      if (hasLimits) {
        return assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift);
      } else {
        if (baseShift) {
          base.style.position = "relative";
          base.style.top = makeEm(baseShift);
        }

        return base;
      }
    };

    var mathmlBuilder$1 = (group, options) => {
      var node;

      if (group.symbol) {
        // This is a symbol. Just add the symbol.
        node = new MathNode("mo", [makeText(group.name, group.mode)]);

        if (utils.contains(noSuccessor, group.name)) {
          node.setAttribute("largeop", "false");
        }
      } else if (group.body) {
        // This is an operator with children. Add them.
        node = new MathNode("mo", buildExpression(group.body, options));
      } else {
        // This is a text operator. Add all of the characters from the
        // operator's name.
        node = new MathNode("mi", [new TextNode(group.name.slice(1))]); // Append an <mo>&ApplyFunction;</mo>.
        // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4

        var operator = new MathNode("mo", [makeText("\u2061", "text")]);

        if (group.parentIsSupSub) {
          node = new MathNode("mrow", [node, operator]);
        } else {
          node = newDocumentFragment([node, operator]);
        }
      }

      return node;
    };

    var singleCharBigOps = {
      "\u220F": "\\prod",
      "\u2210": "\\coprod",
      "\u2211": "\\sum",
      "\u22c0": "\\bigwedge",
      "\u22c1": "\\bigvee",
      "\u22c2": "\\bigcap",
      "\u22c3": "\\bigcup",
      "\u2a00": "\\bigodot",
      "\u2a01": "\\bigoplus",
      "\u2a02": "\\bigotimes",
      "\u2a04": "\\biguplus",
      "\u2a06": "\\bigsqcup"
    };
    defineFunction({
      type: "op",
      names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "\u220F", "\u2210", "\u2211", "\u22c0", "\u22c1", "\u22c2", "\u22c3", "\u2a00", "\u2a01", "\u2a02", "\u2a04", "\u2a06"],
      props: {
        numArgs: 0
      },
      handler: (_ref, args) => {
        var {
          parser,
          funcName
        } = _ref;
        var fName = funcName;

        if (fName.length === 1) {
          fName = singleCharBigOps[fName];
        }

        return {
          type: "op",
          mode: parser.mode,
          limits: true,
          parentIsSupSub: false,
          symbol: true,
          name: fName
        };
      },
      htmlBuilder: htmlBuilder$2,
      mathmlBuilder: mathmlBuilder$1
    }); // Note: calling defineFunction with a type that's already been defined only
    // works because the same htmlBuilder and mathmlBuilder are being used.

    defineFunction({
      type: "op",
      names: ["\\mathop"],
      props: {
        numArgs: 1,
        primitive: true
      },
      handler: (_ref2, args) => {
        var {
          parser
        } = _ref2;
        var body = args[0];
        return {
          type: "op",
          mode: parser.mode,
          limits: false,
          parentIsSupSub: false,
          symbol: false,
          body: ordargument(body)
        };
      },
      htmlBuilder: htmlBuilder$2,
      mathmlBuilder: mathmlBuilder$1
    }); // There are 2 flags for operators; whether they produce limits in
    // displaystyle, and whether they are symbols and should grow in
    // displaystyle. These four groups cover the four possible choices.

    var singleCharIntegrals = {
      "\u222b": "\\int",
      "\u222c": "\\iint",
      "\u222d": "\\iiint",
      "\u222e": "\\oint",
      "\u222f": "\\oiint",
      "\u2230": "\\oiiint"
    }; // No limits, not symbols

    defineFunction({
      type: "op",
      names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
      props: {
        numArgs: 0
      },

      handler(_ref3) {
        var {
          parser,
          funcName
        } = _ref3;
        return {
          type: "op",
          mode: parser.mode,
          limits: false,
          parentIsSupSub: false,
          symbol: false,
          name: funcName
        };
      },

      htmlBuilder: htmlBuilder$2,
      mathmlBuilder: mathmlBuilder$1
    }); // Limits, not symbols

    defineFunction({
      type: "op",
      names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
      props: {
        numArgs: 0
      },

      handler(_ref4) {
        var {
          parser,
          funcName
        } = _ref4;
        return {
          type: "op",
          mode: parser.mode,
          limits: true,
          parentIsSupSub: false,
          symbol: false,
          name: funcName
        };
      },

      htmlBuilder: htmlBuilder$2,
      mathmlBuilder: mathmlBuilder$1
    }); // No limits, symbols

    defineFunction({
      type: "op",
      names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "\u222b", "\u222c", "\u222d", "\u222e", "\u222f", "\u2230"],
      props: {
        numArgs: 0
      },

      handler(_ref5) {
        var {
          parser,
          funcName
        } = _ref5;
        var fName = funcName;

        if (fName.length === 1) {
          fName = singleCharIntegrals[fName];
        }

        return {
          type: "op",
          mode: parser.mode,
          limits: false,
          parentIsSupSub: false,
          symbol: true,
          name: fName
        };
      },

      htmlBuilder: htmlBuilder$2,
      mathmlBuilder: mathmlBuilder$1
    });

    // NOTE: Unlike most `htmlBuilder`s, this one handles not only
    // "operatorname", but also  "supsub" since \operatorname* can
    // affect super/subscripting.
    var htmlBuilder$1 = (grp, options) => {
      // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
      var supGroup;
      var subGroup;
      var hasLimits = false;
      var group;

      if (grp.type === "supsub") {
        // If we have limits, supsub will pass us its group to handle. Pull
        // out the superscript and subscript and set the group to the op in
        // its base.
        supGroup = grp.sup;
        subGroup = grp.sub;
        group = assertNodeType(grp.base, "operatorname");
        hasLimits = true;
      } else {
        group = assertNodeType(grp, "operatorname");
      }

      var base;

      if (group.body.length > 0) {
        var body = group.body.map(child => {
          // $FlowFixMe: Check if the node has a string `text` property.
          var childText = child.text;

          if (typeof childText === "string") {
            return {
              type: "textord",
              mode: child.mode,
              text: childText
            };
          } else {
            return child;
          }
        }); // Consolidate function names into symbol characters.

        var expression = buildExpression$1(body, options.withFont("mathrm"), true);

        for (var i = 0; i < expression.length; i++) {
          var child = expression[i];

          if (child instanceof SymbolNode) {
            // Per amsopn package,
            // change minus to hyphen and \ast to asterisk
            child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
          }
        }

        base = buildCommon.makeSpan(["mop"], expression, options);
      } else {
        base = buildCommon.makeSpan(["mop"], [], options);
      }

      if (hasLimits) {
        return assembleSupSub(base, supGroup, subGroup, options, options.style, 0, 0);
      } else {
        return base;
      }
    };

    var mathmlBuilder = (group, options) => {
      // The steps taken here are similar to the html version.
      var expression = buildExpression(group.body, options.withFont("mathrm")); // Is expression a string or has it something like a fraction?

      var isAllString = true; // default

      for (var i = 0; i < expression.length; i++) {
        var node = expression[i];

        if (node instanceof mathMLTree.SpaceNode) ; else if (node instanceof mathMLTree.MathNode) {
          switch (node.type) {
            case "mi":
            case "mn":
            case "ms":
            case "mspace":
            case "mtext":
              break;
            // Do nothing yet.

            case "mo":
              {
                var child = node.children[0];

                if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
                  child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
                } else {
                  isAllString = false;
                }

                break;
              }

            default:
              isAllString = false;
          }
        } else {
          isAllString = false;
        }
      }

      if (isAllString) {
        // Write a single TextNode instead of multiple nested tags.
        var word = expression.map(node => node.toText()).join("");
        expression = [new mathMLTree.TextNode(word)];
      }

      var identifier = new mathMLTree.MathNode("mi", expression);
      identifier.setAttribute("mathvariant", "normal"); // \u2061 is the same as &ApplyFunction;
      // ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp

      var operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);

      if (group.parentIsSupSub) {
        return new mathMLTree.MathNode("mrow", [identifier, operator]);
      } else {
        return mathMLTree.newDocumentFragment([identifier, operator]);
      }
    }; // \operatorname
    // amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@


    defineFunction({
      type: "operatorname",
      names: ["\\operatorname@", "\\operatornamewithlimits"],
      props: {
        numArgs: 1
      },
      handler: (_ref, args) => {
        var {
          parser,
          funcName
        } = _ref;
        var body = args[0];
        return {
          type: "operatorname",
          mode: parser.mode,
          body: ordargument(body),
          alwaysHandleSupSub: funcName === "\\operatornamewithlimits",
          limits: false,
          parentIsSupSub: false
        };
      },
      htmlBuilder: htmlBuilder$1,
      mathmlBuilder
    });
    defineMacro("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");

    defineFunctionBuilders({
      type: "ordgroup",

      htmlBuilder(group, options) {
        if (group.semisimple) {
          return buildCommon.makeFragment(buildExpression$1(group.body, options, false));
        }

        return buildCommon.makeSpan(["mord"], buildExpression$1(group.body, options, true), options);
      },

      mathmlBuilder(group, options) {
        return buildExpressionRow(group.body, options, true);
      }

    });

    defineFunction({
      type: "overline",
      names: ["\\overline"],
      props: {
        numArgs: 1
      },

      handler(_ref, args) {
        var {
          parser
        } = _ref;
        var body = args[0];
        return {
          type: "overline",
          mode: parser.mode,
          body
        };
      },

      htmlBuilder(group, options) {
        // Overlines are handled in the TeXbook pg 443, Rule 9.
        // Build the inner group in the cramped style.
        var innerGroup = buildGroup$1(group.body, options.havingCrampedStyle()); // Create the line above the body

        var line = buildCommon.makeLineSpan("overline-line", options); // Generate the vlist, with the appropriate kerns

        var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
        var vlist = buildCommon.makeVList({
          positionType: "firstBaseline",
          children: [{
            type: "elem",
            elem: innerGroup
          }, {
            type: "kern",
            size: 3 * defaultRuleThickness
          }, {
            type: "elem",
            elem: line
          }, {
            type: "kern",
            size: defaultRuleThickness
          }]
        }, options);
        return buildCommon.makeSpan(["mord", "overline"], [vlist], options);
      },

      mathmlBuilder(group, options) {
        var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203e")]);
        operator.setAttribute("stretchy", "true");
        var node = new mathMLTree.MathNode("mover", [buildGroup(group.body, options), operator]);
        node.setAttribute("accent", "true");
        return node;
      }

    });

    defineFunction({
      type: "phantom",
      names: ["\\phantom"],
      props: {
        numArgs: 1,
        allowedInText: true
      },
      handler: (_ref, args) => {
        var {
          parser
        } = _ref;
        var body = args[0];
        return {
          type: "phantom",
          mode: parser.mode,
          body: ordargument(body)
        };
      },
      htmlBuilder: (group, options) => {
        var elements = buildExpression$1(group.body, options.withPhantom(), false); // \phantom isn't supposed to affect the elements it contains.
        // See "color" for more details.

        return buildCommon.makeFragment(elements);
      },
      mathmlBuilder: (group, options) => {
        var inner = buildExpression(group.body, options);
        return new mathMLTree.MathNode("mphantom", inner);
      }
    });
    defineFunction({
      type: "hphantom",
      names: ["\\hphantom"],
      props: {
        numArgs: 1,
        allowedInText: true
      },
      handler: (_ref2, args) => {
        var {
          parser
        } = _ref2;
        var body = args[0];
        return {
          type: "hphantom",
          mode: parser.mode,
          body
        };
      },
      htmlBuilder: (group, options) => {
        var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options.withPhantom())]);
        node.height = 0;
        node.depth = 0;

        if (node.children) {
          for (var i = 0; i < node.children.length; i++) {
            node.children[i].height = 0;
            node.children[i].depth = 0;
          }
        } // See smash for comment re: use of makeVList


        node = buildCommon.makeVList({
          positionType: "firstBaseline",
          children: [{
            type: "elem",
            elem: node
          }]
        }, options); // For spacing, TeX treats \smash as a math group (same spacing as ord).

        return buildCommon.makeSpan(["mord"], [node], options);
      },
      mathmlBuilder: (group, options) => {
        var inner = buildExpression(ordargument(group.body), options);
        var phantom = new mathMLTree.MathNode("mphantom", inner);
        var node = new mathMLTree.MathNode("mpadded", [phantom]);
        node.setAttribute("height", "0px");
        node.setAttribute("depth", "0px");
        return node;
      }
    });
    defineFunction({
      type: "vphantom",
      names: ["\\vphantom"],
      props: {
        numArgs: 1,
        allowedInText: true
      },
      handler: (_ref3, args) => {
        var {
          parser
        } = _ref3;
        var body = args[0];
        return {
          type: "vphantom",
          mode: parser.mode,
          body
        };
      },
      htmlBuilder: (group, options) => {
        var inner = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options.withPhantom())]);
        var fix = buildCommon.makeSpan(["fix"], []);
        return buildCommon.makeSpan(["mord", "rlap"], [inner, fix], options);
      },
      mathmlBuilder: (group, options) => {
        var inner = buildExpression(ordargument(group.body), options);
        var phantom = new mathMLTree.MathNode("mphantom", inner);
        var node = new mathMLTree.MathNode("mpadded", [phantom]);
        node.setAttribute("width", "0px");
        return node;
      }
    });

    defineFunction({
      type: "raisebox",
      names: ["\\raisebox"],
      props: {
        numArgs: 2,
        argTypes: ["size", "hbox"],
        allowedInText: true
      },

      handler(_ref, args) {
        var {
          parser
        } = _ref;
        var amount = assertNodeType(args[0], "size").value;
        var body = args[1];
        return {
          type: "raisebox",
          mode: parser.mode,
          dy: amount,
          body
        };
      },

      htmlBuilder(group, options) {
        var body = buildGroup$1(group.body, options);
        var dy = calculateSize(group.dy, options);
        return buildCommon.makeVList({
          positionType: "shift",
          positionData: -dy,
          children: [{
            type: "elem",
            elem: body
          }]
        }, options);
      },

      mathmlBuilder(group, options) {
        var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);
        var dy = group.dy.number + group.dy.unit;
        node.setAttribute("voffset", dy);
        return node;
      }

    });

    defineFunction({
      type: "internal",
      names: ["\\relax"],
      props: {
        numArgs: 0,
        allowedInText: true
      },

      handler(_ref) {
        var {
          parser
        } = _ref;
        return {
          type: "internal",
          mode: parser.mode
        };
      }

    });

    defineFunction({
      type: "rule",
      names: ["\\rule"],
      props: {
        numArgs: 2,
        numOptionalArgs: 1,
        argTypes: ["size", "size", "size"]
      },

      handler(_ref, args, optArgs) {
        var {
          parser
        } = _ref;
        var shift = optArgs[0];
        var width = assertNodeType(args[0], "size");
        var height = assertNodeType(args[1], "size");
        return {
          type: "rule",
          mode: parser.mode,
          shift: shift && assertNodeType(shift, "size").value,
          width: width.value,
          height: height.value
        };
      },

      htmlBuilder(group, options) {
        // Make an empty span for the rule
        var rule = buildCommon.makeSpan(["mord", "rule"], [], options); // Calculate the shift, width, and height of the rule, and account for units

        var width = calculateSize(group.width, options);
        var height = calculateSize(group.height, options);
        var shift = group.shift ? calculateSize(group.shift, options) : 0; // Style the rule to the right size

        rule.style.borderRightWidth = makeEm(width);
        rule.style.borderTopWidth = makeEm(height);
        rule.style.bottom = makeEm(shift); // Record the height and width

        rule.width = width;
        rule.height = height + shift;
        rule.depth = -shift; // Font size is the number large enough that the browser will
        // reserve at least `absHeight` space above the baseline.
        // The 1.125 factor was empirically determined

        rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
        return rule;
      },

      mathmlBuilder(group, options) {
        var width = calculateSize(group.width, options);
        var height = calculateSize(group.height, options);
        var shift = group.shift ? calculateSize(group.shift, options) : 0;
        var color = options.color && options.getColor() || "black";
        var rule = new mathMLTree.MathNode("mspace");
        rule.setAttribute("mathbackground", color);
        rule.setAttribute("width", makeEm(width));
        rule.setAttribute("height", makeEm(height));
        var wrapper = new mathMLTree.MathNode("mpadded", [rule]);

        if (shift >= 0) {
          wrapper.setAttribute("height", makeEm(shift));
        } else {
          wrapper.setAttribute("height", makeEm(shift));
          wrapper.setAttribute("depth", makeEm(-shift));
        }

        wrapper.setAttribute("voffset", makeEm(shift));
        return wrapper;
      }

    });

    function sizingGroup(value, options, baseOptions) {
      var inner = buildExpression$1(value, options, false);
      var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier; // Add size-resetting classes to the inner list and set maxFontSize
      // manually. Handle nested size changes.

      for (var i = 0; i < inner.length; i++) {
        var pos = inner[i].classes.indexOf("sizing");

        if (pos < 0) {
          Array.prototype.push.apply(inner[i].classes, options.sizingClasses(baseOptions));
        } else if (inner[i].classes[pos + 1] === "reset-size" + options.size) {
          // This is a nested size change: e.g., inner[i] is the "b" in
          // `\Huge a \small b`. Override the old size (the `reset-` class)
          // but not the new size.
          inner[i].classes[pos + 1] = "reset-size" + baseOptions.size;
        }

        inner[i].height *= multiplier;
        inner[i].depth *= multiplier;
      }

      return buildCommon.makeFragment(inner);
    }
    var sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
    var htmlBuilder = (group, options) => {
      // Handle sizing operators like \Huge. Real TeX doesn't actually allow
      // these functions inside of math expressions, so we do some special
      // handling.
      var newOptions = options.havingSize(group.size);
      return sizingGroup(group.body, newOptions, options);
    };
    defineFunction({
      type: "sizing",
      names: sizeFuncs,
      props: {
        numArgs: 0,
        allowedInText: true
      },
      handler: (_ref, args) => {
        var {
          breakOnTokenText,
          funcName,
          parser
        } = _ref;
        var body = parser.parseExpression(false, breakOnTokenText);
        return {
          type: "sizing",
          mode: parser.mode,
          // Figure out what size to use based on the list of functions above
          size: sizeFuncs.indexOf(funcName) + 1,
          body
        };
      },
      htmlBuilder,
      mathmlBuilder: (group, options) => {
        var newOptions = options.havingSize(group.size);
        var inner = buildExpression(group.body, newOptions);
        var node = new mathMLTree.MathNode("mstyle", inner); // TODO(emily): This doesn't produce the correct size for nested size
        // changes, because we don't keep state of what style we're currently
        // in, so we can't reset the size to normal before changing it.  Now
        // that we're passing an options parameter we should be able to fix
        // this.

        node.setAttribute("mathsize", makeEm(newOptions.sizeMultiplier));
        return node;
      }
    });

    // smash, with optional [tb], as in AMS
    defineFunction({
      type: "smash",
      names: ["\\smash"],
      props: {
        numArgs: 1,
        numOptionalArgs: 1,
        allowedInText: true
      },
      handler: (_ref, args, optArgs) => {
        var {
          parser
        } = _ref;
        var smashHeight = false;
        var smashDepth = false;
        var tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");

        if (tbArg) {
          // Optional [tb] argument is engaged.
          // ref: amsmath: \renewcommand{\smash}[1][tb]{%
          //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
          var letter = "";

          for (var i = 0; i < tbArg.body.length; ++i) {
            var node = tbArg.body[i]; // $FlowFixMe: Not every node type has a `text` property.

            letter = node.text;

            if (letter === "t") {
              smashHeight = true;
            } else if (letter === "b") {
              smashDepth = true;
            } else {
              smashHeight = false;
              smashDepth = false;
              break;
            }
          }
        } else {
          smashHeight = true;
          smashDepth = true;
        }

        var body = args[0];
        return {
          type: "smash",
          mode: parser.mode,
          body,
          smashHeight,
          smashDepth
        };
      },
      htmlBuilder: (group, options) => {
        var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]);

        if (!group.smashHeight && !group.smashDepth) {
          return node;
        }

        if (group.smashHeight) {
          node.height = 0; // In order to influence makeVList, we have to reset the children.

          if (node.children) {
            for (var i = 0; i < node.children.length; i++) {
              node.children[i].height = 0;
            }
          }
        }

        if (group.smashDepth) {
          node.depth = 0;

          if (node.children) {
            for (var _i = 0; _i < node.children.length; _i++) {
              node.children[_i].depth = 0;
            }
          }
        } // At this point, we've reset the TeX-like height and depth values.
        // But the span still has an HTML line height.
        // makeVList applies "display: table-cell", which prevents the browser
        // from acting on that line height. So we'll call makeVList now.


        var smashedNode = buildCommon.makeVList({
          positionType: "firstBaseline",
          children: [{
            type: "elem",
            elem: node
          }]
        }, options); // For spacing, TeX treats \hphantom as a math group (same spacing as ord).

        return buildCommon.makeSpan(["mord"], [smashedNode], options);
      },
      mathmlBuilder: (group, options) => {
        var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);

        if (group.smashHeight) {
          node.setAttribute("height", "0px");
        }

        if (group.smashDepth) {
          node.setAttribute("depth", "0px");
        }

        return node;
      }
    });

    defineFunction({
      type: "sqrt",
      names: ["\\sqrt"],
      props: {
        numArgs: 1,
        numOptionalArgs: 1
      },

      handler(_ref, args, optArgs) {
        var {
          parser
        } = _ref;
        var index = optArgs[0];
        var body = args[0];
        return {
          type: "sqrt",
          mode: parser.mode,
          body,
          index
        };
      },

      htmlBuilder(group, options) {
        // Square roots are handled in the TeXbook pg. 443, Rule 11.
        // First, we do the same steps as in overline to build the inner group
        // and line
        var inner = buildGroup$1(group.body, options.havingCrampedStyle());

        if (inner.height === 0) {
          // Render a small surd.
          inner.height = options.fontMetrics().xHeight;
        } // Some groups can return document fragments.  Handle those by wrapping
        // them in a span.


        inner = buildCommon.wrapFragment(inner, options); // Calculate the minimum size for the \surd delimiter

        var metrics = options.fontMetrics();
        var theta = metrics.defaultRuleThickness;
        var phi = theta;

        if (options.style.id < Style$1.TEXT.id) {
          phi = options.fontMetrics().xHeight;
        } // Calculate the clearance between the body and line


        var lineClearance = theta + phi / 4;
        var minDelimiterHeight = inner.height + inner.depth + lineClearance + theta; // Create a sqrt SVG of the required minimum size

        var {
          span: img,
          ruleWidth,
          advanceWidth
        } = delimiter.sqrtImage(minDelimiterHeight, options);
        var delimDepth = img.height - ruleWidth; // Adjust the clearance based on the delimiter size

        if (delimDepth > inner.height + inner.depth + lineClearance) {
          lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;
        } // Shift the sqrt image


        var imgShift = img.height - inner.height - lineClearance - ruleWidth;
        inner.style.paddingLeft = makeEm(advanceWidth); // Overlay the image and the argument.

        var body = buildCommon.makeVList({
          positionType: "firstBaseline",
          children: [{
            type: "elem",
            elem: inner,
            wrapperClasses: ["svg-align"]
          }, {
            type: "kern",
            size: -(inner.height + imgShift)
          }, {
            type: "elem",
            elem: img
          }, {
            type: "kern",
            size: ruleWidth
          }]
        }, options);

        if (!group.index) {
          return buildCommon.makeSpan(["mord", "sqrt"], [body], options);
        } else {
          // Handle the optional root index
          // The index is always in scriptscript style
          var newOptions = options.havingStyle(Style$1.SCRIPTSCRIPT);
          var rootm = buildGroup$1(group.index, newOptions, options); // The amount the index is shifted by. This is taken from the TeX
          // source, in the definition of `\r@@t`.

          var toShift = 0.6 * (body.height - body.depth); // Build a VList with the superscript shifted up correctly

          var rootVList = buildCommon.makeVList({
            positionType: "shift",
            positionData: -toShift,
            children: [{
              type: "elem",
              elem: rootm
            }]
          }, options); // Add a class surrounding it so we can add on the appropriate
          // kerning

          var rootVListWrap = buildCommon.makeSpan(["root"], [rootVList]);
          return buildCommon.makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
        }
      },

      mathmlBuilder(group, options) {
        var {
          body,
          index
        } = group;
        return index ? new mathMLTree.MathNode("mroot", [buildGroup(body, options), buildGroup(index, options)]) : new mathMLTree.MathNode("msqrt", [buildGroup(body, options)]);
      }

    });

    var styleMap = {
      "display": Style$1.DISPLAY,
      "text": Style$1.TEXT,
      "script": Style$1.SCRIPT,
      "scriptscript": Style$1.SCRIPTSCRIPT
    };
    defineFunction({
      type: "styling",
      names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
      props: {
        numArgs: 0,
        allowedInText: true,
        primitive: true
      },

      handler(_ref, args) {
        var {
          breakOnTokenText,
          funcName,
          parser
        } = _ref;
        // parse out the implicit body
        var body = parser.parseExpression(true, breakOnTokenText); // TODO: Refactor to avoid duplicating styleMap in multiple places (e.g.
        // here and in buildHTML and de-dupe the enumeration of all the styles).
        // $FlowFixMe: The names above exactly match the styles.

        var style = funcName.slice(1, funcName.length - 5);
        return {
          type: "styling",
          mode: parser.mode,
          // Figure out what style to use by pulling out the style from
          // the function name
          style,
          body
        };
      },

      htmlBuilder(group, options) {
        // Style changes are handled in the TeXbook on pg. 442, Rule 3.
        var newStyle = styleMap[group.style];
        var newOptions = options.havingStyle(newStyle).withFont('');
        return sizingGroup(group.body, newOptions, options);
      },

      mathmlBuilder(group, options) {
        // Figure out what style we're changing to.
        var newStyle = styleMap[group.style];
        var newOptions = options.havingStyle(newStyle);
        var inner = buildExpression(group.body, newOptions);
        var node = new mathMLTree.MathNode("mstyle", inner);
        var styleAttributes = {
          "display": ["0", "true"],
          "text": ["0", "false"],
          "script": ["1", "false"],
          "scriptscript": ["2", "false"]
        };
        var attr = styleAttributes[group.style];
        node.setAttribute("scriptlevel", attr[0]);
        node.setAttribute("displaystyle", attr[1]);
        return node;
      }

    });

    /**
     * Sometimes, groups perform special rules when they have superscripts or
     * subscripts attached to them. This function lets the `supsub` group know that
     * Sometimes, groups perform special rules when they have superscripts or
     * its inner element should handle the superscripts and subscripts instead of
     * handling them itself.
     */
    var htmlBuilderDelegate = function htmlBuilderDelegate(group, options) {
      var base = group.base;

      if (!base) {
        return null;
      } else if (base.type === "op") {
        // Operators handle supsubs differently when they have limits
        // (e.g. `\displaystyle\sum_2^3`)
        var delegate = base.limits && (options.style.size === Style$1.DISPLAY.size || base.alwaysHandleSupSub);
        return delegate ? htmlBuilder$2 : null;
      } else if (base.type === "operatorname") {
        var _delegate = base.alwaysHandleSupSub && (options.style.size === Style$1.DISPLAY.size || base.limits);

        return _delegate ? htmlBuilder$1 : null;
      } else if (base.type === "accent") {
        return utils.isCharacterBox(base.base) ? htmlBuilder$a : null;
      } else if (base.type === "horizBrace") {
        var isSup = !group.sub;
        return isSup === base.isOver ? htmlBuilder$3 : null;
      } else {
        return null;
      }
    }; // Super scripts and subscripts, whose precise placement can depend on other
    // functions that precede them.


    defineFunctionBuilders({
      type: "supsub",

      htmlBuilder(group, options) {
        // Superscript and subscripts are handled in the TeXbook on page
        // 445-446, rules 18(a-f).
        // Here is where we defer to the inner group if it should handle
        // superscripts and subscripts itself.
        var builderDelegate = htmlBuilderDelegate(group, options);

        if (builderDelegate) {
          return builderDelegate(group, options);
        }

        var {
          base: valueBase,
          sup: valueSup,
          sub: valueSub
        } = group;
        var base = buildGroup$1(valueBase, options);
        var supm;
        var subm;
        var metrics = options.fontMetrics(); // Rule 18a

        var supShift = 0;
        var subShift = 0;
        var isCharacterBox = valueBase && utils.isCharacterBox(valueBase);

        if (valueSup) {
          var newOptions = options.havingStyle(options.style.sup());
          supm = buildGroup$1(valueSup, newOptions, options);

          if (!isCharacterBox) {
            supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
          }
        }

        if (valueSub) {
          var _newOptions = options.havingStyle(options.style.sub());

          subm = buildGroup$1(valueSub, _newOptions, options);

          if (!isCharacterBox) {
            subShift = base.depth + _newOptions.fontMetrics().subDrop * _newOptions.sizeMultiplier / options.sizeMultiplier;
          }
        } // Rule 18c


        var minSupShift;

        if (options.style === Style$1.DISPLAY) {
          minSupShift = metrics.sup1;
        } else if (options.style.cramped) {
          minSupShift = metrics.sup3;
        } else {
          minSupShift = metrics.sup2;
        } // scriptspace is a font-size-independent size, so scale it
        // appropriately for use as the marginRight.


        var multiplier = options.sizeMultiplier;
        var marginRight = makeEm(0.5 / metrics.ptPerEm / multiplier);
        var marginLeft = null;

        if (subm) {
          // Subscripts shouldn't be shifted by the base's italic correction.
          // Account for that by shifting the subscript back the appropriate
          // amount. Note we only do this when the base is a single symbol.
          var isOiint = group.base && group.base.type === "op" && group.base.name && (group.base.name === "\\oiint" || group.base.name === "\\oiiint");

          if (base instanceof SymbolNode || isOiint) {
            // $FlowFixMe
            marginLeft = makeEm(-base.italic);
          }
        }

        var supsub;

        if (supm && subm) {
          supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
          subShift = Math.max(subShift, metrics.sub2);
          var ruleWidth = metrics.defaultRuleThickness; // Rule 18e

          var maxWidth = 4 * ruleWidth;

          if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {
            subShift = maxWidth - (supShift - supm.depth) + subm.height;
            var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);

            if (psi > 0) {
              supShift += psi;
              subShift -= psi;
            }
          }

          var vlistElem = [{
            type: "elem",
            elem: subm,
            shift: subShift,
            marginRight,
            marginLeft
          }, {
            type: "elem",
            elem: supm,
            shift: -supShift,
            marginRight
          }];
          supsub = buildCommon.makeVList({
            positionType: "individualShift",
            children: vlistElem
          }, options);
        } else if (subm) {
          // Rule 18b
          subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
          var _vlistElem = [{
            type: "elem",
            elem: subm,
            marginLeft,
            marginRight
          }];
          supsub = buildCommon.makeVList({
            positionType: "shift",
            positionData: subShift,
            children: _vlistElem
          }, options);
        } else if (supm) {
          // Rule 18c, d
          supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
          supsub = buildCommon.makeVList({
            positionType: "shift",
            positionData: -supShift,
            children: [{
              type: "elem",
              elem: supm,
              marginRight
            }]
          }, options);
        } else {
          throw new Error("supsub must have either sup or sub.");
        } // Wrap the supsub vlist in a span.msupsub to reset text-align.


        var mclass = getTypeOfDomTree(base, "right") || "mord";
        return buildCommon.makeSpan([mclass], [base, buildCommon.makeSpan(["msupsub"], [supsub])], options);
      },

      mathmlBuilder(group, options) {
        // Is the inner group a relevant horizonal brace?
        var isBrace = false;
        var isOver;
        var isSup;

        if (group.base && group.base.type === "horizBrace") {
          isSup = !!group.sup;

          if (isSup === group.base.isOver) {
            isBrace = true;
            isOver = group.base.isOver;
          }
        }

        if (group.base && (group.base.type === "op" || group.base.type === "operatorname")) {
          group.base.parentIsSupSub = true;
        }

        var children = [buildGroup(group.base, options)];

        if (group.sub) {
          children.push(buildGroup(group.sub, options));
        }

        if (group.sup) {
          children.push(buildGroup(group.sup, options));
        }

        var nodeType;

        if (isBrace) {
          nodeType = isOver ? "mover" : "munder";
        } else if (!group.sub) {
          var base = group.base;

          if (base && base.type === "op" && base.limits && (options.style === Style$1.DISPLAY || base.alwaysHandleSupSub)) {
            nodeType = "mover";
          } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (base.limits || options.style === Style$1.DISPLAY)) {
            nodeType = "mover";
          } else {
            nodeType = "msup";
          }
        } else if (!group.sup) {
          var _base = group.base;

          if (_base && _base.type === "op" && _base.limits && (options.style === Style$1.DISPLAY || _base.alwaysHandleSupSub)) {
            nodeType = "munder";
          } else if (_base && _base.type === "operatorname" && _base.alwaysHandleSupSub && (_base.limits || options.style === Style$1.DISPLAY)) {
            nodeType = "munder";
          } else {
            nodeType = "msub";
          }
        } else {
          var _base2 = group.base;

          if (_base2 && _base2.type === "op" && _base2.limits && options.style === Style$1.DISPLAY) {
            nodeType = "munderover";
          } else if (_base2 && _base2.type === "operatorname" && _base2.alwaysHandleSupSub && (options.style === Style$1.DISPLAY || _base2.limits)) {
            nodeType = "munderover";
          } else {
            nodeType = "msubsup";
          }
        }

        return new mathMLTree.MathNode(nodeType, children);
      }

    });

    defineFunctionBuilders({
      type: "atom",

      htmlBuilder(group, options) {
        return buildCommon.mathsym(group.text, group.mode, options, ["m" + group.family]);
      },

      mathmlBuilder(group, options) {
        var node = new mathMLTree.MathNode("mo", [makeText(group.text, group.mode)]);

        if (group.family === "bin") {
          var variant = getVariant(group, options);

          if (variant === "bold-italic") {
            node.setAttribute("mathvariant", variant);
          }
        } else if (group.family === "punct") {
          node.setAttribute("separator", "true");
        } else if (group.family === "open" || group.family === "close") {
          // Delims built here should not stretch vertically.
          // See delimsizing.js for stretchy delims.
          node.setAttribute("stretchy", "false");
        }

        return node;
      }

    });

    // "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in
    // src/symbols.js.
    var defaultVariant = {
      "mi": "italic",
      "mn": "normal",
      "mtext": "normal"
    };
    defineFunctionBuilders({
      type: "mathord",

      htmlBuilder(group, options) {
        return buildCommon.makeOrd(group, options, "mathord");
      },

      mathmlBuilder(group, options) {
        var node = new mathMLTree.MathNode("mi", [makeText(group.text, group.mode, options)]);
        var variant = getVariant(group, options) || "italic";

        if (variant !== defaultVariant[node.type]) {
          node.setAttribute("mathvariant", variant);
        }

        return node;
      }

    });
    defineFunctionBuilders({
      type: "textord",

      htmlBuilder(group, options) {
        return buildCommon.makeOrd(group, options, "textord");
      },

      mathmlBuilder(group, options) {
        var text = makeText(group.text, group.mode, options);
        var variant = getVariant(group, options) || "normal";
        var node;

        if (group.mode === 'text') {
          node = new mathMLTree.MathNode("mtext", [text]);
        } else if (/[0-9]/.test(group.text)) {
          node = new mathMLTree.MathNode("mn", [text]);
        } else if (group.text === "\\prime") {
          node = new mathMLTree.MathNode("mo", [text]);
        } else {
          node = new mathMLTree.MathNode("mi", [text]);
        }

        if (variant !== defaultVariant[node.type]) {
          node.setAttribute("mathvariant", variant);
        }

        return node;
      }

    });

    var cssSpace = {
      "\\nobreak": "nobreak",
      "\\allowbreak": "allowbreak"
    }; // A lookup table to determine whether a spacing function/symbol should be
    // treated like a regular space character.  If a symbol or command is a key
    // in this table, then it should be a regular space character.  Furthermore,
    // the associated value may have a `className` specifying an extra CSS class
    // to add to the created `span`.

    var regularSpace = {
      " ": {},
      "\\ ": {},
      "~": {
        className: "nobreak"
      },
      "\\space": {},
      "\\nobreakspace": {
        className: "nobreak"
      }
    }; // ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in
    // src/symbols.js.

    defineFunctionBuilders({
      type: "spacing",

      htmlBuilder(group, options) {
        if (regularSpace.hasOwnProperty(group.text)) {
          var className = regularSpace[group.text].className || ""; // Spaces are generated by adding an actual space. Each of these
          // things has an entry in the symbols table, so these will be turned
          // into appropriate outputs.

          if (group.mode === "text") {
            var ord = buildCommon.makeOrd(group, options, "textord");
            ord.classes.push(className);
            return ord;
          } else {
            return buildCommon.makeSpan(["mspace", className], [buildCommon.mathsym(group.text, group.mode, options)], options);
          }
        } else if (cssSpace.hasOwnProperty(group.text)) {
          // Spaces based on just a CSS class.
          return buildCommon.makeSpan(["mspace", cssSpace[group.text]], [], options);
        } else {
          throw new ParseError("Unknown type of space \"" + group.text + "\"");
        }
      },

      mathmlBuilder(group, options) {
        var node;

        if (regularSpace.hasOwnProperty(group.text)) {
          node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode("\u00a0")]);
        } else if (cssSpace.hasOwnProperty(group.text)) {
          // CSS-based MathML spaces (\nobreak, \allowbreak) are ignored
          return new mathMLTree.MathNode("mspace");
        } else {
          throw new ParseError("Unknown type of space \"" + group.text + "\"");
        }

        return node;
      }

    });

    var pad = () => {
      var padNode = new mathMLTree.MathNode("mtd", []);
      padNode.setAttribute("width", "50%");
      return padNode;
    };

    defineFunctionBuilders({
      type: "tag",

      mathmlBuilder(group, options) {
        var table = new mathMLTree.MathNode("mtable", [new mathMLTree.MathNode("mtr", [pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.body, options)]), pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.tag, options)])])]);
        table.setAttribute("width", "100%");
        return table; // TODO: Left-aligned tags.
        // Currently, the group and options passed here do not contain
        // enough info to set tag alignment. `leqno` is in Settings but it is
        // not passed to Options. On the HTML side, leqno is
        // set by a CSS class applied in buildTree.js. That would have worked
        // in MathML if browsers supported <mlabeledtr>. Since they don't, we
        // need to rewrite the way this function is called.
      }

    });

    var textFontFamilies = {
      "\\text": undefined,
      "\\textrm": "textrm",
      "\\textsf": "textsf",
      "\\texttt": "texttt",
      "\\textnormal": "textrm"
    };
    var textFontWeights = {
      "\\textbf": "textbf",
      "\\textmd": "textmd"
    };
    var textFontShapes = {
      "\\textit": "textit",
      "\\textup": "textup"
    };

    var optionsWithFont = (group, options) => {
      var font = group.font; // Checks if the argument is a font family or a font style.

      if (!font) {
        return options;
      } else if (textFontFamilies[font]) {
        return options.withTextFontFamily(textFontFamilies[font]);
      } else if (textFontWeights[font]) {
        return options.withTextFontWeight(textFontWeights[font]);
      } else {
        return options.withTextFontShape(textFontShapes[font]);
      }
    };

    defineFunction({
      type: "text",
      names: [// Font families
      "\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal", // Font weights
      "\\textbf", "\\textmd", // Font Shapes
      "\\textit", "\\textup"],
      props: {
        numArgs: 1,
        argTypes: ["text"],
        allowedInArgument: true,
        allowedInText: true
      },

      handler(_ref, args) {
        var {
          parser,
          funcName
        } = _ref;
        var body = args[0];
        return {
          type: "text",
          mode: parser.mode,
          body: ordargument(body),
          font: funcName
        };
      },

      htmlBuilder(group, options) {
        var newOptions = optionsWithFont(group, options);
        var inner = buildExpression$1(group.body, newOptions, true);
        return buildCommon.makeSpan(["mord", "text"], inner, newOptions);
      },

      mathmlBuilder(group, options) {
        var newOptions = optionsWithFont(group, options);
        return buildExpressionRow(group.body, newOptions);
      }

    });

    defineFunction({
      type: "underline",
      names: ["\\underline"],
      props: {
        numArgs: 1,
        allowedInText: true
      },

      handler(_ref, args) {
        var {
          parser
        } = _ref;
        return {
          type: "underline",
          mode: parser.mode,
          body: args[0]
        };
      },

      htmlBuilder(group, options) {
        // Underlines are handled in the TeXbook pg 443, Rule 10.
        // Build the inner group.
        var innerGroup = buildGroup$1(group.body, options); // Create the line to go below the body

        var line = buildCommon.makeLineSpan("underline-line", options); // Generate the vlist, with the appropriate kerns

        var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
        var vlist = buildCommon.makeVList({
          positionType: "top",
          positionData: innerGroup.height,
          children: [{
            type: "kern",
            size: defaultRuleThickness
          }, {
            type: "elem",
            elem: line
          }, {
            type: "kern",
            size: 3 * defaultRuleThickness
          }, {
            type: "elem",
            elem: innerGroup
          }]
        }, options);
        return buildCommon.makeSpan(["mord", "underline"], [vlist], options);
      },

      mathmlBuilder(group, options) {
        var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203e")]);
        operator.setAttribute("stretchy", "true");
        var node = new mathMLTree.MathNode("munder", [buildGroup(group.body, options), operator]);
        node.setAttribute("accentunder", "true");
        return node;
      }

    });

    defineFunction({
      type: "vcenter",
      names: ["\\vcenter"],
      props: {
        numArgs: 1,
        argTypes: ["original"],
        // In LaTeX, \vcenter can act only on a box.
        allowedInText: false
      },

      handler(_ref, args) {
        var {
          parser
        } = _ref;
        return {
          type: "vcenter",
          mode: parser.mode,
          body: args[0]
        };
      },

      htmlBuilder(group, options) {
        var body = buildGroup$1(group.body, options);
        var axisHeight = options.fontMetrics().axisHeight;
        var dy = 0.5 * (body.height - axisHeight - (body.depth + axisHeight));
        return buildCommon.makeVList({
          positionType: "shift",
          positionData: dy,
          children: [{
            type: "elem",
            elem: body
          }]
        }, options);
      },

      mathmlBuilder(group, options) {
        // There is no way to do this in MathML.
        // Write a class as a breadcrumb in case some post-processor wants
        // to perform a vcenter adjustment.
        return new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)], ["vcenter"]);
      }

    });

    defineFunction({
      type: "verb",
      names: ["\\verb"],
      props: {
        numArgs: 0,
        allowedInText: true
      },

      handler(context, args, optArgs) {
        // \verb and \verb* are dealt with directly in Parser.js.
        // If we end up here, it's because of a failure to match the two delimiters
        // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
        // terminated by end of line (or file).
        throw new ParseError("\\verb ended by end of line instead of matching delimiter");
      },

      htmlBuilder(group, options) {
        var text = makeVerb(group);
        var body = []; // \verb enters text mode and therefore is sized like \textstyle

        var newOptions = options.havingStyle(options.style.text());

        for (var i = 0; i < text.length; i++) {
          var c = text[i];

          if (c === '~') {
            c = '\\textasciitilde';
          }

          body.push(buildCommon.makeSymbol(c, "Typewriter-Regular", group.mode, newOptions, ["mord", "texttt"]));
        }

        return buildCommon.makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);
      },

      mathmlBuilder(group, options) {
        var text = new mathMLTree.TextNode(makeVerb(group));
        var node = new mathMLTree.MathNode("mtext", [text]);
        node.setAttribute("mathvariant", "monospace");
        return node;
      }

    });
    /**
     * Converts verb group into body string.
     *
     * \verb* replaces each space with an open box \u2423
     * \verb replaces each space with a no-break space \xA0
     */

    var makeVerb = group => group.body.replace(/ /g, group.star ? '\u2423' : '\xA0');

    /** Include this to ensure that all functions are defined. */
    var functions = _functions;

    /**
     * The Lexer class handles tokenizing the input in various ways. Since our
     * parser expects us to be able to backtrack, the lexer allows lexing from any
     * given starting point.
     *
     * Its main exposed function is the `lex` function, which takes a position to
     * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
     * function.
     *
     * The various `_innerLex` functions perform the actual lexing of different
     * kinds.
     */

    /* The following tokenRegex
     * - matches typical whitespace (but not NBSP etc.) using its first group
     * - does not match any control character \x00-\x1f except whitespace
     * - does not match a bare backslash
     * - matches any ASCII character except those just mentioned
     * - does not match the BMP private use area \uE000-\uF8FF
     * - does not match bare surrogate code units
     * - matches any BMP character except for those just described
     * - matches any valid Unicode surrogate pair
     * - matches a backslash followed by one or more whitespace characters
     * - matches a backslash followed by one or more letters then whitespace
     * - matches a backslash followed by any BMP character
     * Capturing groups:
     *   [1] regular whitespace
     *   [2] backslash followed by whitespace
     *   [3] anything else, which may include:
     *     [4] left character of \verb*
     *     [5] left character of \verb
     *     [6] backslash followed by word, excluding any trailing whitespace
     * Just because the Lexer matches something doesn't mean it's valid input:
     * If there is no matching function or symbol definition, the Parser will
     * still reject the input.
     */
    var spaceRegexString = "[ \r\n\t]";
    var controlWordRegexString = "\\\\[a-zA-Z@]+";
    var controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
    var controlWordWhitespaceRegexString = "(" + controlWordRegexString + ")" + spaceRegexString + "*";
    var controlSpaceRegexString = "\\\\(\n|[ \r\t]+\n?)[ \r\t]*";
    var combiningDiacriticalMarkString = "[\u0300-\u036f]";
    var combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
    var tokenRegexString = "(" + spaceRegexString + "+)|" + ( // whitespace
    controlSpaceRegexString + "|") + // \whitespace
    "([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + ( // single codepoint
    combiningDiacriticalMarkString + "*") + // ...plus accents
    "|[\uD800-\uDBFF][\uDC00-\uDFFF]" + ( // surrogate pair
    combiningDiacriticalMarkString + "*") + // ...plus accents
    "|\\\\verb\\*([^]).*?\\4" + // \verb*
    "|\\\\verb([^*a-zA-Z]).*?\\5" + ( // \verb unstarred
    "|" + controlWordWhitespaceRegexString) + ( // \macroName + spaces
    "|" + controlSymbolRegexString + ")"); // \\, \', etc.

    /** Main Lexer class */

    class Lexer {
      // Category codes. The lexer only supports comment characters (14) for now.
      // MacroExpander additionally distinguishes active (13).
      constructor(input, settings) {
        this.input = void 0;
        this.settings = void 0;
        this.tokenRegex = void 0;
        this.catcodes = void 0;
        // Separate accents from characters
        this.input = input;
        this.settings = settings;
        this.tokenRegex = new RegExp(tokenRegexString, 'g');
        this.catcodes = {
          "%": 14,
          // comment character
          "~": 13 // active character

        };
      }

      setCatcode(char, code) {
        this.catcodes[char] = code;
      }
      /**
       * This function lexes a single token.
       */


      lex() {
        var input = this.input;
        var pos = this.tokenRegex.lastIndex;

        if (pos === input.length) {
          return new Token("EOF", new SourceLocation(this, pos, pos));
        }

        var match = this.tokenRegex.exec(input);

        if (match === null || match.index !== pos) {
          throw new ParseError("Unexpected character: '" + input[pos] + "'", new Token(input[pos], new SourceLocation(this, pos, pos + 1)));
        }

        var text = match[6] || match[3] || (match[2] ? "\\ " : " ");

        if (this.catcodes[text] === 14) {
          // comment character
          var nlIndex = input.indexOf('\n', this.tokenRegex.lastIndex);

          if (nlIndex === -1) {
            this.tokenRegex.lastIndex = input.length; // EOF

            this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would " + "fail because of commenting the end of math mode (e.g. $)");
          } else {
            this.tokenRegex.lastIndex = nlIndex + 1;
          }

          return this.lex();
        }

        return new Token(text, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
      }

    }

    /**
     * A `Namespace` refers to a space of nameable things like macros or lengths,
     * which can be `set` either globally or local to a nested group, using an
     * undo stack similar to how TeX implements this functionality.
     * Performance-wise, `get` and local `set` take constant time, while global
     * `set` takes time proportional to the depth of group nesting.
     */
    class Namespace {
      /**
       * Both arguments are optional.  The first argument is an object of
       * built-in mappings which never change.  The second argument is an object
       * of initial (global-level) mappings, which will constantly change
       * according to any global/top-level `set`s done.
       */
      constructor(builtins, globalMacros) {
        if (builtins === void 0) {
          builtins = {};
        }

        if (globalMacros === void 0) {
          globalMacros = {};
        }

        this.current = void 0;
        this.builtins = void 0;
        this.undefStack = void 0;
        this.current = globalMacros;
        this.builtins = builtins;
        this.undefStack = [];
      }
      /**
       * Start a new nested group, affecting future local `set`s.
       */


      beginGroup() {
        this.undefStack.push({});
      }
      /**
       * End current nested group, restoring values before the group began.
       */


      endGroup() {
        if (this.undefStack.length === 0) {
          throw new ParseError("Unbalanced namespace destruction: attempt " + "to pop global namespace; please report this as a bug");
        }

        var undefs = this.undefStack.pop();

        for (var undef in undefs) {
          if (undefs.hasOwnProperty(undef)) {
            if (undefs[undef] == null) {
              delete this.current[undef];
            } else {
              this.current[undef] = undefs[undef];
            }
          }
        }
      }
      /**
       * Ends all currently nested groups (if any), restoring values before the
       * groups began.  Useful in case of an error in the middle of parsing.
       */


      endGroups() {
        while (this.undefStack.length > 0) {
          this.endGroup();
        }
      }
      /**
       * Detect whether `name` has a definition.  Equivalent to
       * `get(name) != null`.
       */


      has(name) {
        return this.current.hasOwnProperty(name) || this.builtins.hasOwnProperty(name);
      }
      /**
       * Get the current value of a name, or `undefined` if there is no value.
       *
       * Note: Do not use `if (namespace.get(...))` to detect whether a macro
       * is defined, as the definition may be the empty string which evaluates
       * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
       * `if (namespace.has(...))`.
       */


      get(name) {
        if (this.current.hasOwnProperty(name)) {
          return this.current[name];
        } else {
          return this.builtins[name];
        }
      }
      /**
       * Set the current value of a name, and optionally set it globally too.
       * Local set() sets the current value and (when appropriate) adds an undo
       * operation to the undo stack.  Global set() may change the undo
       * operation at every level, so takes time linear in their number.
       * A value of undefined means to delete existing definitions.
       */


      set(name, value, global) {
        if (global === void 0) {
          global = false;
        }

        if (global) {
          // Global set is equivalent to setting in all groups.  Simulate this
          // by destroying any undos currently scheduled for this name,
          // and adding an undo with the *new* value (in case it later gets
          // locally reset within this environment).
          for (var i = 0; i < this.undefStack.length; i++) {
            delete this.undefStack[i][name];
          }

          if (this.undefStack.length > 0) {
            this.undefStack[this.undefStack.length - 1][name] = value;
          }
        } else {
          // Undo this set at end of this group (possibly to `undefined`),
          // unless an undo is already in place, in which case that older
          // value is the correct one.
          var top = this.undefStack[this.undefStack.length - 1];

          if (top && !top.hasOwnProperty(name)) {
            top[name] = this.current[name];
          }
        }

        if (value == null) {
          delete this.current[name];
        } else {
          this.current[name] = value;
        }
      }

    }

    /**
     * Predefined macros for KaTeX.
     * This can be used to define some commands in terms of others.
     */
    var macros = _macros;
    // macro tools

    defineMacro("\\noexpand", function (context) {
      // The expansion is the token itself; but that token is interpreted
      // as if its meaning were ‘\relax’ if it is a control sequence that
      // would ordinarily be expanded by TeX’s expansion rules.
      var t = context.popToken();

      if (context.isExpandable(t.text)) {
        t.noexpand = true;
        t.treatAsRelax = true;
      }

      return {
        tokens: [t],
        numArgs: 0
      };
    });
    defineMacro("\\expandafter", function (context) {
      // TeX first reads the token that comes immediately after \expandafter,
      // without expanding it; let’s call this token t. Then TeX reads the
      // token that comes after t (and possibly more tokens, if that token
      // has an argument), replacing it by its expansion. Finally TeX puts
      // t back in front of that expansion.
      var t = context.popToken();
      context.expandOnce(true); // expand only an expandable token

      return {
        tokens: [t],
        numArgs: 0
      };
    }); // LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
    // TeX source: \long\def\@firstoftwo#1#2{#1}

    defineMacro("\\@firstoftwo", function (context) {
      var args = context.consumeArgs(2);
      return {
        tokens: args[0],
        numArgs: 0
      };
    }); // LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
    // TeX source: \long\def\@secondoftwo#1#2{#2}

    defineMacro("\\@secondoftwo", function (context) {
      var args = context.consumeArgs(2);
      return {
        tokens: args[1],
        numArgs: 0
      };
    }); // LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
    // symbol that isn't a space, consuming any spaces but not consuming the
    // first nonspace character.  If that nonspace character matches #1, then
    // the macro expands to #2; otherwise, it expands to #3.

    defineMacro("\\@ifnextchar", function (context) {
      var args = context.consumeArgs(3); // symbol, if, else

      context.consumeSpaces();
      var nextToken = context.future();

      if (args[0].length === 1 && args[0][0].text === nextToken.text) {
        return {
          tokens: args[1],
          numArgs: 0
        };
      } else {
        return {
          tokens: args[2],
          numArgs: 0
        };
      }
    }); // LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
    // If it is `*`, then it consumes the symbol, and the macro expands to #1;
    // otherwise, the macro expands to #2 (without consuming the symbol).
    // TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}

    defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}"); // LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode

    defineMacro("\\TextOrMath", function (context) {
      var args = context.consumeArgs(2);

      if (context.mode === 'text') {
        return {
          tokens: args[0],
          numArgs: 0
        };
      } else {
        return {
          tokens: args[1],
          numArgs: 0
        };
      }
    }); // Lookup table for parsing numbers in base 8 through 16

    var digitToNumber = {
      "0": 0,
      "1": 1,
      "2": 2,
      "3": 3,
      "4": 4,
      "5": 5,
      "6": 6,
      "7": 7,
      "8": 8,
      "9": 9,
      "a": 10,
      "A": 10,
      "b": 11,
      "B": 11,
      "c": 12,
      "C": 12,
      "d": 13,
      "D": 13,
      "e": 14,
      "E": 14,
      "f": 15,
      "F": 15
    }; // TeX \char makes a literal character (catcode 12) using the following forms:
    // (see The TeXBook, p. 43)
    //   \char123  -- decimal
    //   \char'123 -- octal
    //   \char"123 -- hex
    //   \char`x   -- character that can be written (i.e. isn't active)
    //   \char`\x  -- character that cannot be written (e.g. %)
    // These all refer to characters from the font, so we turn them into special
    // calls to a function \@char dealt with in the Parser.

    defineMacro("\\char", function (context) {
      var token = context.popToken();
      var base;
      var number = '';

      if (token.text === "'") {
        base = 8;
        token = context.popToken();
      } else if (token.text === '"') {
        base = 16;
        token = context.popToken();
      } else if (token.text === "`") {
        token = context.popToken();

        if (token.text[0] === "\\") {
          number = token.text.charCodeAt(1);
        } else if (token.text === "EOF") {
          throw new ParseError("\\char` missing argument");
        } else {
          number = token.text.charCodeAt(0);
        }
      } else {
        base = 10;
      }

      if (base) {
        // Parse a number in the given base, starting with first `token`.
        number = digitToNumber[token.text];

        if (number == null || number >= base) {
          throw new ParseError("Invalid base-" + base + " digit " + token.text);
        }

        var digit;

        while ((digit = digitToNumber[context.future().text]) != null && digit < base) {
          number *= base;
          number += digit;
          context.popToken();
        }
      }

      return "\\@char{" + number + "}";
    }); // \newcommand{\macro}[args]{definition}
    // \renewcommand{\macro}[args]{definition}
    // TODO: Optional arguments: \newcommand{\macro}[args][default]{definition}

    var newcommand = (context, existsOK, nonexistsOK) => {
      var arg = context.consumeArg().tokens;

      if (arg.length !== 1) {
        throw new ParseError("\\newcommand's first argument must be a macro name");
      }

      var name = arg[0].text;
      var exists = context.isDefined(name);

      if (exists && !existsOK) {
        throw new ParseError("\\newcommand{" + name + "} attempting to redefine " + (name + "; use \\renewcommand"));
      }

      if (!exists && !nonexistsOK) {
        throw new ParseError("\\renewcommand{" + name + "} when command " + name + " " + "does not yet exist; use \\newcommand");
      }

      var numArgs = 0;
      arg = context.consumeArg().tokens;

      if (arg.length === 1 && arg[0].text === "[") {
        var argText = '';
        var token = context.expandNextToken();

        while (token.text !== "]" && token.text !== "EOF") {
          // TODO: Should properly expand arg, e.g., ignore {}s
          argText += token.text;
          token = context.expandNextToken();
        }

        if (!argText.match(/^\s*[0-9]+\s*$/)) {
          throw new ParseError("Invalid number of arguments: " + argText);
        }

        numArgs = parseInt(argText);
        arg = context.consumeArg().tokens;
      } // Final arg is the expansion of the macro


      context.macros.set(name, {
        tokens: arg,
        numArgs
      });
      return '';
    };

    defineMacro("\\newcommand", context => newcommand(context, false, true));
    defineMacro("\\renewcommand", context => newcommand(context, true, false));
    defineMacro("\\providecommand", context => newcommand(context, true, true)); // terminal (console) tools

    defineMacro("\\message", context => {
      var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

      console.log(arg.reverse().map(token => token.text).join(""));
      return '';
    });
    defineMacro("\\errmessage", context => {
      var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

      console.error(arg.reverse().map(token => token.text).join(""));
      return '';
    });
    defineMacro("\\show", context => {
      var tok = context.popToken();
      var name = tok.text; // eslint-disable-next-line no-console

      console.log(tok, context.macros.get(name), functions[name], symbols.math[name], symbols.text[name]);
      return '';
    }); //////////////////////////////////////////////////////////////////////
    // Grouping
    // \let\bgroup={ \let\egroup=}

    defineMacro("\\bgroup", "{");
    defineMacro("\\egroup", "}"); // Symbols from latex.ltx:
    // \def~{\nobreakspace{}}
    // \def\lq{`}
    // \def\rq{'}
    // \def \aa {\r a}
    // \def \AA {\r A}

    defineMacro("~", "\\nobreakspace");
    defineMacro("\\lq", "`");
    defineMacro("\\rq", "'");
    defineMacro("\\aa", "\\r a");
    defineMacro("\\AA", "\\r A"); // Copyright (C) and registered (R) symbols. Use raw symbol in MathML.
    // \DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}
    // \DeclareTextCommandDefault{\textregistered}{\textcircled{%
    //      \check@mathfonts\fontsize\sf@size\z@\math@fontsfalse\selectfont R}}
    // \DeclareRobustCommand{\copyright}{%
    //    \ifmmode{\nfss@text{\textcopyright}}\else\textcopyright\fi}

    defineMacro("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
    defineMacro("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
    defineMacro("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}"); // Characters omitted from Unicode range 1D400–1D7FF

    defineMacro("\u212C", "\\mathscr{B}"); // script

    defineMacro("\u2130", "\\mathscr{E}");
    defineMacro("\u2131", "\\mathscr{F}");
    defineMacro("\u210B", "\\mathscr{H}");
    defineMacro("\u2110", "\\mathscr{I}");
    defineMacro("\u2112", "\\mathscr{L}");
    defineMacro("\u2133", "\\mathscr{M}");
    defineMacro("\u211B", "\\mathscr{R}");
    defineMacro("\u212D", "\\mathfrak{C}"); // Fraktur

    defineMacro("\u210C", "\\mathfrak{H}");
    defineMacro("\u2128", "\\mathfrak{Z}"); // Define \Bbbk with a macro that works in both HTML and MathML.

    defineMacro("\\Bbbk", "\\Bbb{k}"); // Unicode middle dot
    // The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays
    // the dot at U+22C5 and gives it punct spacing.

    defineMacro("\u00b7", "\\cdotp"); // \llap and \rlap render their contents in text mode

    defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
    defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
    defineMacro("\\clap", "\\mathclap{\\textrm{#1}}"); // \mathstrut from the TeXbook, p 360

    defineMacro("\\mathstrut", "\\vphantom{(}"); // \underbar from TeXbook p 353

    defineMacro("\\underbar", "\\underline{\\text{#1}}"); // \not is defined by base/fontmath.ltx via
    // \DeclareMathSymbol{\not}{\mathrel}{symbols}{"36}
    // It's thus treated like a \mathrel, but defined by a symbol that has zero
    // width but extends to the right.  We use \rlap to get that spacing.
    // For MathML we write U+0338 here. buildMathML.js will then do the overlay.

    defineMacro("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'); // Negated symbols from base/fontmath.ltx:
    // \def\neq{\not=} \let\ne=\neq
    // \DeclareRobustCommand
    //   \notin{\mathrel{\m@th\mathpalette\c@ncel\in}}
    // \def\c@ncel#1#2{\m@th\ooalign{$\hfil#1\mkern1mu/\hfil$\crcr$#1#2$}}

    defineMacro("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
    defineMacro("\\ne", "\\neq");
    defineMacro("\u2260", "\\neq");
    defineMacro("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}" + "{\\mathrel{\\char`∉}}");
    defineMacro("\u2209", "\\notin"); // Unicode stacked relations

    defineMacro("\u2258", "\\html@mathml{" + "\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}" + "}{\\mathrel{\\char`\u2258}}");
    defineMacro("\u2259", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`\u2258}}");
    defineMacro("\u225A", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`\u225A}}");
    defineMacro("\u225B", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}" + "{\\mathrel{\\char`\u225B}}");
    defineMacro("\u225D", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}" + "{\\mathrel{\\char`\u225D}}");
    defineMacro("\u225E", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}" + "{\\mathrel{\\char`\u225E}}");
    defineMacro("\u225F", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`\u225F}}"); // Misc Unicode

    defineMacro("\u27C2", "\\perp");
    defineMacro("\u203C", "\\mathclose{!\\mkern-0.8mu!}");
    defineMacro("\u220C", "\\notni");
    defineMacro("\u231C", "\\ulcorner");
    defineMacro("\u231D", "\\urcorner");
    defineMacro("\u231E", "\\llcorner");
    defineMacro("\u231F", "\\lrcorner");
    defineMacro("\u00A9", "\\copyright");
    defineMacro("\u00AE", "\\textregistered");
    defineMacro("\uFE0F", "\\textregistered"); // The KaTeX fonts have corners at codepoints that don't match Unicode.
    // For MathML purposes, use the Unicode code point.

    defineMacro("\\ulcorner", "\\html@mathml{\\@ulcorner}{\\mathop{\\char\"231c}}");
    defineMacro("\\urcorner", "\\html@mathml{\\@urcorner}{\\mathop{\\char\"231d}}");
    defineMacro("\\llcorner", "\\html@mathml{\\@llcorner}{\\mathop{\\char\"231e}}");
    defineMacro("\\lrcorner", "\\html@mathml{\\@lrcorner}{\\mathop{\\char\"231f}}"); //////////////////////////////////////////////////////////////////////
    // LaTeX_2ε
    // \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@
    // \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}
    // We'll call \varvdots, which gets a glyph from symbols.js.
    // The zero-width rule gets us an equivalent to the vertical 6pt kern.

    defineMacro("\\vdots", "\\mathord{\\varvdots\\rule{0pt}{15pt}}");
    defineMacro("\u22ee", "\\vdots"); //////////////////////////////////////////////////////////////////////
    // amsmath.sty
    // http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf
    // Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,
    // but they are equivalent to \mathit{\Letter}.

    defineMacro("\\varGamma", "\\mathit{\\Gamma}");
    defineMacro("\\varDelta", "\\mathit{\\Delta}");
    defineMacro("\\varTheta", "\\mathit{\\Theta}");
    defineMacro("\\varLambda", "\\mathit{\\Lambda}");
    defineMacro("\\varXi", "\\mathit{\\Xi}");
    defineMacro("\\varPi", "\\mathit{\\Pi}");
    defineMacro("\\varSigma", "\\mathit{\\Sigma}");
    defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
    defineMacro("\\varPhi", "\\mathit{\\Phi}");
    defineMacro("\\varPsi", "\\mathit{\\Psi}");
    defineMacro("\\varOmega", "\\mathit{\\Omega}"); //\newcommand{\substack}[1]{\subarray{c}#1\endsubarray}

    defineMacro("\\substack", "\\begin{subarray}{c}#1\\end{subarray}"); // \renewcommand{\colon}{\nobreak\mskip2mu\mathpunct{}\nonscript
    // \mkern-\thinmuskip{:}\mskip6muplus1mu\relax}

    defineMacro("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}" + "\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu\\relax"); // \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}

    defineMacro("\\boxed", "\\fbox{$\\displaystyle{#1}$}"); // \def\iff{\DOTSB\;\Longleftrightarrow\;}
    // \def\implies{\DOTSB\;\Longrightarrow\;}
    // \def\impliedby{\DOTSB\;\Longleftarrow\;}

    defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
    defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
    defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;"); // AMSMath's automatic \dots, based on \mdots@@ macro.

    var dotsByToken = {
      ',': '\\dotsc',
      '\\not': '\\dotsb',
      // \keybin@ checks for the following:
      '+': '\\dotsb',
      '=': '\\dotsb',
      '<': '\\dotsb',
      '>': '\\dotsb',
      '-': '\\dotsb',
      '*': '\\dotsb',
      ':': '\\dotsb',
      // Symbols whose definition starts with \DOTSB:
      '\\DOTSB': '\\dotsb',
      '\\coprod': '\\dotsb',
      '\\bigvee': '\\dotsb',
      '\\bigwedge': '\\dotsb',
      '\\biguplus': '\\dotsb',
      '\\bigcap': '\\dotsb',
      '\\bigcup': '\\dotsb',
      '\\prod': '\\dotsb',
      '\\sum': '\\dotsb',
      '\\bigotimes': '\\dotsb',
      '\\bigoplus': '\\dotsb',
      '\\bigodot': '\\dotsb',
      '\\bigsqcup': '\\dotsb',
      '\\And': '\\dotsb',
      '\\longrightarrow': '\\dotsb',
      '\\Longrightarrow': '\\dotsb',
      '\\longleftarrow': '\\dotsb',
      '\\Longleftarrow': '\\dotsb',
      '\\longleftrightarrow': '\\dotsb',
      '\\Longleftrightarrow': '\\dotsb',
      '\\mapsto': '\\dotsb',
      '\\longmapsto': '\\dotsb',
      '\\hookrightarrow': '\\dotsb',
      '\\doteq': '\\dotsb',
      // Symbols whose definition starts with \mathbin:
      '\\mathbin': '\\dotsb',
      // Symbols whose definition starts with \mathrel:
      '\\mathrel': '\\dotsb',
      '\\relbar': '\\dotsb',
      '\\Relbar': '\\dotsb',
      '\\xrightarrow': '\\dotsb',
      '\\xleftarrow': '\\dotsb',
      // Symbols whose definition starts with \DOTSI:
      '\\DOTSI': '\\dotsi',
      '\\int': '\\dotsi',
      '\\oint': '\\dotsi',
      '\\iint': '\\dotsi',
      '\\iiint': '\\dotsi',
      '\\iiiint': '\\dotsi',
      '\\idotsint': '\\dotsi',
      // Symbols whose definition starts with \DOTSX:
      '\\DOTSX': '\\dotsx'
    };
    defineMacro("\\dots", function (context) {
      // TODO: If used in text mode, should expand to \textellipsis.
      // However, in KaTeX, \textellipsis and \ldots behave the same
      // (in text mode), and it's unlikely we'd see any of the math commands
      // that affect the behavior of \dots when in text mode.  So fine for now
      // (until we support \ifmmode ... \else ... \fi).
      var thedots = '\\dotso';
      var next = context.expandAfterFuture().text;

      if (next in dotsByToken) {
        thedots = dotsByToken[next];
      } else if (next.substr(0, 4) === '\\not') {
        thedots = '\\dotsb';
      } else if (next in symbols.math) {
        if (utils.contains(['bin', 'rel'], symbols.math[next].group)) {
          thedots = '\\dotsb';
        }
      }

      return thedots;
    });
    var spaceAfterDots = {
      // \rightdelim@ checks for the following:
      ')': true,
      ']': true,
      '\\rbrack': true,
      '\\}': true,
      '\\rbrace': true,
      '\\rangle': true,
      '\\rceil': true,
      '\\rfloor': true,
      '\\rgroup': true,
      '\\rmoustache': true,
      '\\right': true,
      '\\bigr': true,
      '\\biggr': true,
      '\\Bigr': true,
      '\\Biggr': true,
      // \extra@ also tests for the following:
      '$': true,
      // \extrap@ checks for the following:
      ';': true,
      '.': true,
      ',': true
    };
    defineMacro("\\dotso", function (context) {
      var next = context.future().text;

      if (next in spaceAfterDots) {
        return "\\ldots\\,";
      } else {
        return "\\ldots";
      }
    });
    defineMacro("\\dotsc", function (context) {
      var next = context.future().text; // \dotsc uses \extra@ but not \extrap@, instead specially checking for
      // ';' and '.', but doesn't check for ','.

      if (next in spaceAfterDots && next !== ',') {
        return "\\ldots\\,";
      } else {
        return "\\ldots";
      }
    });
    defineMacro("\\cdots", function (context) {
      var next = context.future().text;

      if (next in spaceAfterDots) {
        return "\\@cdots\\,";
      } else {
        return "\\@cdots";
      }
    });
    defineMacro("\\dotsb", "\\cdots");
    defineMacro("\\dotsm", "\\cdots");
    defineMacro("\\dotsi", "\\!\\cdots"); // amsmath doesn't actually define \dotsx, but \dots followed by a macro
    // starting with \DOTSX implies \dotso, and then \extra@ detects this case
    // and forces the added `\,`.

    defineMacro("\\dotsx", "\\ldots\\,"); // \let\DOTSI\relax
    // \let\DOTSB\relax
    // \let\DOTSX\relax

    defineMacro("\\DOTSI", "\\relax");
    defineMacro("\\DOTSB", "\\relax");
    defineMacro("\\DOTSX", "\\relax"); // Spacing, based on amsmath.sty's override of LaTeX defaults
    // \DeclareRobustCommand{\tmspace}[3]{%
    //   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}

    defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"); // \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}
    // TODO: math mode should use \thinmuskip

    defineMacro("\\,", "\\tmspace+{3mu}{.1667em}"); // \let\thinspace\,

    defineMacro("\\thinspace", "\\,"); // \def\>{\mskip\medmuskip}
    // \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}
    // TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu

    defineMacro("\\>", "\\mskip{4mu}");
    defineMacro("\\:", "\\tmspace+{4mu}{.2222em}"); // \let\medspace\:

    defineMacro("\\medspace", "\\:"); // \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}
    // TODO: math mode should use \thickmuskip = 5mu plus 5mu

    defineMacro("\\;", "\\tmspace+{5mu}{.2777em}"); // \let\thickspace\;

    defineMacro("\\thickspace", "\\;"); // \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}
    // TODO: math mode should use \thinmuskip

    defineMacro("\\!", "\\tmspace-{3mu}{.1667em}"); // \let\negthinspace\!

    defineMacro("\\negthinspace", "\\!"); // \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}
    // TODO: math mode should use \medmuskip

    defineMacro("\\negmedspace", "\\tmspace-{4mu}{.2222em}"); // \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}
    // TODO: math mode should use \thickmuskip

    defineMacro("\\negthickspace", "\\tmspace-{5mu}{.277em}"); // \def\enspace{\kern.5em }

    defineMacro("\\enspace", "\\kern.5em "); // \def\enskip{\hskip.5em\relax}

    defineMacro("\\enskip", "\\hskip.5em\\relax"); // \def\quad{\hskip1em\relax}

    defineMacro("\\quad", "\\hskip1em\\relax"); // \def\qquad{\hskip2em\relax}

    defineMacro("\\qquad", "\\hskip2em\\relax"); // \tag@in@display form of \tag

    defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
    defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
    defineMacro("\\tag@literal", context => {
      if (context.macros.get("\\df@tag")) {
        throw new ParseError("Multiple \\tag");
      }

      return "\\gdef\\df@tag{\\text{#1}}";
    }); // \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin
    //   {\operator@font mod}\penalty900
    //   \mkern5mu\nonscript\mskip-\medmuskip}
    // \newcommand{\pod}[1]{\allowbreak
    //   \if@display\mkern18mu\else\mkern8mu\fi(#1)}
    // \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}
    // \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu
    //   \else\mkern12mu\fi{\operator@font mod}\,\,#1}
    // TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu

    defineMacro("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}" + "\\mathbin{\\rm mod}" + "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
    defineMacro("\\pod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
    defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
    defineMacro("\\mod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}" + "{\\rm mod}\\,\\,#1"); // \pmb    --   A simulation of bold.
    // The version in ambsy.sty works by typesetting three copies of the argument
    // with small offsets. We use two copies. We omit the vertical offset because
    // of rendering problems that makeVList encounters in Safari.

    defineMacro("\\pmb", "\\html@mathml{" + "\\@binrel{#1}{\\mathrlap{#1}\\kern0.5px#1}}" + "{\\mathbf{#1}}"); //////////////////////////////////////////////////////////////////////
    // LaTeX source2e
    // \expandafter\let\expandafter\@normalcr
    //     \csname\expandafter\@gobble\string\\ \endcsname
    // \DeclareRobustCommand\newline{\@normalcr\relax}

    defineMacro("\\newline", "\\\\\\relax"); // \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
    // TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't
    // support \@ yet, so that's omitted, and we add \text so that the result
    // doesn't look funny in math mode.

    defineMacro("\\TeX", "\\textrm{\\html@mathml{" + "T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX" + "}{TeX}}"); // \DeclareRobustCommand{\LaTeX}{L\kern-.36em%
    //         {\sbox\z@ T%
    //          \vbox to\ht\z@{\hbox{\check@mathfonts
    //                               \fontsize\sf@size\z@
    //                               \math@fontsfalse\selectfont
    //                               A}%
    //                         \vss}%
    //         }%
    //         \kern-.15em%
    //         \TeX}
    // This code aligns the top of the A with the T (from the perspective of TeX's
    // boxes, though visually the A appears to extend above slightly).
    // We compute the corresponding \raisebox when A is rendered in \normalsize
    // \scriptstyle, which has a scale factor of 0.7 (see Options.js).

    var latexRaiseA = makeEm(fontMetricsData['Main-Regular']["T".charCodeAt(0)][1] - 0.7 * fontMetricsData['Main-Regular']["A".charCodeAt(0)][1]);
    defineMacro("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}"); // New KaTeX logo based on tweaking LaTeX logo

    defineMacro("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}"); // \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
    // \def\@hspace#1{\hskip  #1\relax}
    // \def\@hspacer#1{\vrule \@width\z@\nobreak
    //                 \hskip #1\hskip \z@skip}

    defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
    defineMacro("\\@hspace", "\\hskip #1\\relax");
    defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax"); //////////////////////////////////////////////////////////////////////
    // mathtools.sty
    //\providecommand\ordinarycolon{:}

    defineMacro("\\ordinarycolon", ":"); //\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
    //TODO(edemaine): Not yet centered. Fix via \raisebox or #726

    defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}"); // \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}

    defineMacro("\\dblcolon", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}" + "{\\mathop{\\char\"2237}}"); // \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}

    defineMacro("\\coloneqq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2254}}"); // ≔
    // \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}

    defineMacro("\\Coloneqq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2237\\char\"3d}}"); // \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

    defineMacro("\\coloneq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"3a\\char\"2212}}"); // \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

    defineMacro("\\Coloneq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"2237\\char\"2212}}"); // \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}

    defineMacro("\\eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2255}}"); // ≕
    // \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}

    defineMacro("\\Eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"3d\\char\"2237}}"); // \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}

    defineMacro("\\eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2239}}"); // \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}

    defineMacro("\\Eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"2212\\char\"2237}}"); // \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}

    defineMacro("\\colonapprox", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"3a\\char\"2248}}"); // \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}

    defineMacro("\\Colonapprox", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"2237\\char\"2248}}"); // \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}

    defineMacro("\\colonsim", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"3a\\char\"223c}}"); // \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}

    defineMacro("\\Colonsim", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"2237\\char\"223c}}"); // Some Unicode characters are implemented with macros to mathtools functions.

    defineMacro("\u2237", "\\dblcolon"); // ::

    defineMacro("\u2239", "\\eqcolon"); // -:

    defineMacro("\u2254", "\\coloneqq"); // :=

    defineMacro("\u2255", "\\eqqcolon"); // =:

    defineMacro("\u2A74", "\\Coloneqq"); // ::=
    //////////////////////////////////////////////////////////////////////
    // colonequals.sty
    // Alternate names for mathtools's macros:

    defineMacro("\\ratio", "\\vcentcolon");
    defineMacro("\\coloncolon", "\\dblcolon");
    defineMacro("\\colonequals", "\\coloneqq");
    defineMacro("\\coloncolonequals", "\\Coloneqq");
    defineMacro("\\equalscolon", "\\eqqcolon");
    defineMacro("\\equalscoloncolon", "\\Eqqcolon");
    defineMacro("\\colonminus", "\\coloneq");
    defineMacro("\\coloncolonminus", "\\Coloneq");
    defineMacro("\\minuscolon", "\\eqcolon");
    defineMacro("\\minuscoloncolon", "\\Eqcolon"); // \colonapprox name is same in mathtools and colonequals.

    defineMacro("\\coloncolonapprox", "\\Colonapprox"); // \colonsim name is same in mathtools and colonequals.

    defineMacro("\\coloncolonsim", "\\Colonsim"); // Additional macros, implemented by analogy with mathtools definitions:

    defineMacro("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
    defineMacro("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
    defineMacro("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
    defineMacro("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"); // Present in newtxmath, pxfonts and txfonts

    defineMacro("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`\u220C}}");
    defineMacro("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
    defineMacro("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}"); //////////////////////////////////////////////////////////////////////
    // From amsopn.sty

    defineMacro("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
    defineMacro("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
    defineMacro("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
    defineMacro("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
    defineMacro("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
    defineMacro("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}"); //////////////////////////////////////////////////////////////////////
    // MathML alternates for KaTeX glyphs in the Unicode private area

    defineMacro("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{\u2269}");
    defineMacro("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{\u2268}");
    defineMacro("\\ngeqq", "\\html@mathml{\\@ngeqq}{\u2271}");
    defineMacro("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{\u2271}");
    defineMacro("\\nleqq", "\\html@mathml{\\@nleqq}{\u2270}");
    defineMacro("\\nleqslant", "\\html@mathml{\\@nleqslant}{\u2270}");
    defineMacro("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
    defineMacro("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
    defineMacro("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{\u2288}");
    defineMacro("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{\u2289}");
    defineMacro("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
    defineMacro("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
    defineMacro("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
    defineMacro("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}");
    defineMacro("\\imath", "\\html@mathml{\\@imath}{\u0131}");
    defineMacro("\\jmath", "\\html@mathml{\\@jmath}{\u0237}"); //////////////////////////////////////////////////////////////////////
    // stmaryrd and semantic
    // The stmaryrd and semantic packages render the next four items by calling a
    // glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.

    defineMacro("\\llbracket", "\\html@mathml{" + "\\mathopen{[\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u27e6}}");
    defineMacro("\\rrbracket", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu]}}" + "{\\mathclose{\\char`\u27e7}}");
    defineMacro("\u27e6", "\\llbracket"); // blackboard bold [

    defineMacro("\u27e7", "\\rrbracket"); // blackboard bold ]

    defineMacro("\\lBrace", "\\html@mathml{" + "\\mathopen{\\{\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u2983}}");
    defineMacro("\\rBrace", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu\\}}}" + "{\\mathclose{\\char`\u2984}}");
    defineMacro("\u2983", "\\lBrace"); // blackboard bold {

    defineMacro("\u2984", "\\rBrace"); // blackboard bold }
    // TODO: Create variable sized versions of the last two items. I believe that
    // will require new font glyphs.
    // The stmaryrd function `\minuso` provides a "Plimsoll" symbol that
    // superimposes the characters \circ and \mathminus. Used in chemistry.

    defineMacro("\\minuso", "\\mathbin{\\html@mathml{" + "{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}" + "{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}" + "{\\char`⦵}}");
    defineMacro("⦵", "\\minuso"); //////////////////////////////////////////////////////////////////////
    // texvc.sty
    // The texvc package contains macros available in mediawiki pages.
    // We omit the functions deprecated at
    // https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax
    // We also omit texvc's \O, which conflicts with \text{\O}

    defineMacro("\\darr", "\\downarrow");
    defineMacro("\\dArr", "\\Downarrow");
    defineMacro("\\Darr", "\\Downarrow");
    defineMacro("\\lang", "\\langle");
    defineMacro("\\rang", "\\rangle");
    defineMacro("\\uarr", "\\uparrow");
    defineMacro("\\uArr", "\\Uparrow");
    defineMacro("\\Uarr", "\\Uparrow");
    defineMacro("\\N", "\\mathbb{N}");
    defineMacro("\\R", "\\mathbb{R}");
    defineMacro("\\Z", "\\mathbb{Z}");
    defineMacro("\\alef", "\\aleph");
    defineMacro("\\alefsym", "\\aleph");
    defineMacro("\\Alpha", "\\mathrm{A}");
    defineMacro("\\Beta", "\\mathrm{B}");
    defineMacro("\\bull", "\\bullet");
    defineMacro("\\Chi", "\\mathrm{X}");
    defineMacro("\\clubs", "\\clubsuit");
    defineMacro("\\cnums", "\\mathbb{C}");
    defineMacro("\\Complex", "\\mathbb{C}");
    defineMacro("\\Dagger", "\\ddagger");
    defineMacro("\\diamonds", "\\diamondsuit");
    defineMacro("\\empty", "\\emptyset");
    defineMacro("\\Epsilon", "\\mathrm{E}");
    defineMacro("\\Eta", "\\mathrm{H}");
    defineMacro("\\exist", "\\exists");
    defineMacro("\\harr", "\\leftrightarrow");
    defineMacro("\\hArr", "\\Leftrightarrow");
    defineMacro("\\Harr", "\\Leftrightarrow");
    defineMacro("\\hearts", "\\heartsuit");
    defineMacro("\\image", "\\Im");
    defineMacro("\\infin", "\\infty");
    defineMacro("\\Iota", "\\mathrm{I}");
    defineMacro("\\isin", "\\in");
    defineMacro("\\Kappa", "\\mathrm{K}");
    defineMacro("\\larr", "\\leftarrow");
    defineMacro("\\lArr", "\\Leftarrow");
    defineMacro("\\Larr", "\\Leftarrow");
    defineMacro("\\lrarr", "\\leftrightarrow");
    defineMacro("\\lrArr", "\\Leftrightarrow");
    defineMacro("\\Lrarr", "\\Leftrightarrow");
    defineMacro("\\Mu", "\\mathrm{M}");
    defineMacro("\\natnums", "\\mathbb{N}");
    defineMacro("\\Nu", "\\mathrm{N}");
    defineMacro("\\Omicron", "\\mathrm{O}");
    defineMacro("\\plusmn", "\\pm");
    defineMacro("\\rarr", "\\rightarrow");
    defineMacro("\\rArr", "\\Rightarrow");
    defineMacro("\\Rarr", "\\Rightarrow");
    defineMacro("\\real", "\\Re");
    defineMacro("\\reals", "\\mathbb{R}");
    defineMacro("\\Reals", "\\mathbb{R}");
    defineMacro("\\Rho", "\\mathrm{P}");
    defineMacro("\\sdot", "\\cdot");
    defineMacro("\\sect", "\\S");
    defineMacro("\\spades", "\\spadesuit");
    defineMacro("\\sub", "\\subset");
    defineMacro("\\sube", "\\subseteq");
    defineMacro("\\supe", "\\supseteq");
    defineMacro("\\Tau", "\\mathrm{T}");
    defineMacro("\\thetasym", "\\vartheta"); // TODO: defineMacro("\\varcoppa", "\\\mbox{\\coppa}");

    defineMacro("\\weierp", "\\wp");
    defineMacro("\\Zeta", "\\mathrm{Z}"); //////////////////////////////////////////////////////////////////////
    // statmath.sty
    // https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf

    defineMacro("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
    defineMacro("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
    defineMacro("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits"); //////////////////////////////////////////////////////////////////////
    // braket.sty
    // http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf

    defineMacro("\\bra", "\\mathinner{\\langle{#1}|}");
    defineMacro("\\ket", "\\mathinner{|{#1}\\rangle}");
    defineMacro("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
    defineMacro("\\Bra", "\\left\\langle#1\\right|");
    defineMacro("\\Ket", "\\left|#1\\right\\rangle");

    var braketHelper = one => context => {
      var left = context.consumeArg().tokens;
      var middle = context.consumeArg().tokens;
      var middleDouble = context.consumeArg().tokens;
      var right = context.consumeArg().tokens;
      var oldMiddle = context.macros.get("|");
      var oldMiddleDouble = context.macros.get("\\|");
      context.macros.beginGroup();

      var midMacro = double => context => {
        if (one) {
          // Only modify the first instance of | or \|
          context.macros.set("|", oldMiddle);

          if (middleDouble.length) {
            context.macros.set("\\|", oldMiddleDouble);
          }
        }

        var doubled = double;

        if (!double && middleDouble.length) {
          // Mimic \@ifnextchar
          var nextToken = context.future();

          if (nextToken.text === "|") {
            context.popToken();
            doubled = true;
          }
        }

        return {
          tokens: doubled ? middleDouble : middle,
          numArgs: 0
        };
      };

      context.macros.set("|", midMacro(false));

      if (middleDouble.length) {
        context.macros.set("\\|", midMacro(true));
      }

      var arg = context.consumeArg().tokens;
      var expanded = context.expandTokens([...right, ...arg, ...left // reversed
      ]);
      context.macros.endGroup();
      return {
        tokens: expanded.reverse(),
        numArgs: 0
      };
    };

    defineMacro("\\bra@ket", braketHelper(false));
    defineMacro("\\bra@set", braketHelper(true));
    defineMacro("\\Braket", "\\bra@ket{\\left\\langle}" + "{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}");
    defineMacro("\\Set", "\\bra@set{\\left\\{\\:}" + "{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}");
    defineMacro("\\set", "\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}"); // has no support for special || or \|
    //////////////////////////////////////////////////////////////////////
    // actuarialangle.dtx

    defineMacro("\\angln", "{\\angl n}"); // Custom Khan Academy colors, should be moved to an optional package

    defineMacro("\\blue", "\\textcolor{##6495ed}{#1}");
    defineMacro("\\orange", "\\textcolor{##ffa500}{#1}");
    defineMacro("\\pink", "\\textcolor{##ff00af}{#1}");
    defineMacro("\\red", "\\textcolor{##df0030}{#1}");
    defineMacro("\\green", "\\textcolor{##28ae7b}{#1}");
    defineMacro("\\gray", "\\textcolor{gray}{#1}");
    defineMacro("\\purple", "\\textcolor{##9d38bd}{#1}");
    defineMacro("\\blueA", "\\textcolor{##ccfaff}{#1}");
    defineMacro("\\blueB", "\\textcolor{##80f6ff}{#1}");
    defineMacro("\\blueC", "\\textcolor{##63d9ea}{#1}");
    defineMacro("\\blueD", "\\textcolor{##11accd}{#1}");
    defineMacro("\\blueE", "\\textcolor{##0c7f99}{#1}");
    defineMacro("\\tealA", "\\textcolor{##94fff5}{#1}");
    defineMacro("\\tealB", "\\textcolor{##26edd5}{#1}");
    defineMacro("\\tealC", "\\textcolor{##01d1c1}{#1}");
    defineMacro("\\tealD", "\\textcolor{##01a995}{#1}");
    defineMacro("\\tealE", "\\textcolor{##208170}{#1}");
    defineMacro("\\greenA", "\\textcolor{##b6ffb0}{#1}");
    defineMacro("\\greenB", "\\textcolor{##8af281}{#1}");
    defineMacro("\\greenC", "\\textcolor{##74cf70}{#1}");
    defineMacro("\\greenD", "\\textcolor{##1fab54}{#1}");
    defineMacro("\\greenE", "\\textcolor{##0d923f}{#1}");
    defineMacro("\\goldA", "\\textcolor{##ffd0a9}{#1}");
    defineMacro("\\goldB", "\\textcolor{##ffbb71}{#1}");
    defineMacro("\\goldC", "\\textcolor{##ff9c39}{#1}");
    defineMacro("\\goldD", "\\textcolor{##e07d10}{#1}");
    defineMacro("\\goldE", "\\textcolor{##a75a05}{#1}");
    defineMacro("\\redA", "\\textcolor{##fca9a9}{#1}");
    defineMacro("\\redB", "\\textcolor{##ff8482}{#1}");
    defineMacro("\\redC", "\\textcolor{##f9685d}{#1}");
    defineMacro("\\redD", "\\textcolor{##e84d39}{#1}");
    defineMacro("\\redE", "\\textcolor{##bc2612}{#1}");
    defineMacro("\\maroonA", "\\textcolor{##ffbde0}{#1}");
    defineMacro("\\maroonB", "\\textcolor{##ff92c6}{#1}");
    defineMacro("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
    defineMacro("\\maroonD", "\\textcolor{##ca337c}{#1}");
    defineMacro("\\maroonE", "\\textcolor{##9e034e}{#1}");
    defineMacro("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
    defineMacro("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
    defineMacro("\\purpleC", "\\textcolor{##aa87ff}{#1}");
    defineMacro("\\purpleD", "\\textcolor{##7854ab}{#1}");
    defineMacro("\\purpleE", "\\textcolor{##543b78}{#1}");
    defineMacro("\\mintA", "\\textcolor{##f5f9e8}{#1}");
    defineMacro("\\mintB", "\\textcolor{##edf2df}{#1}");
    defineMacro("\\mintC", "\\textcolor{##e0e5cc}{#1}");
    defineMacro("\\grayA", "\\textcolor{##f6f7f7}{#1}");
    defineMacro("\\grayB", "\\textcolor{##f0f1f2}{#1}");
    defineMacro("\\grayC", "\\textcolor{##e3e5e6}{#1}");
    defineMacro("\\grayD", "\\textcolor{##d6d8da}{#1}");
    defineMacro("\\grayE", "\\textcolor{##babec2}{#1}");
    defineMacro("\\grayF", "\\textcolor{##888d93}{#1}");
    defineMacro("\\grayG", "\\textcolor{##626569}{#1}");
    defineMacro("\\grayH", "\\textcolor{##3b3e40}{#1}");
    defineMacro("\\grayI", "\\textcolor{##21242c}{#1}");
    defineMacro("\\kaBlue", "\\textcolor{##314453}{#1}");
    defineMacro("\\kaGreen", "\\textcolor{##71B307}{#1}");

    /**
     * This file contains the “gullet” where macros are expanded
     * until only non-macro tokens remain.
     */
    // List of commands that act like macros but aren't defined as a macro,
    // function, or symbol.  Used in `isDefined`.
    var implicitCommands = {
      "^": true,
      // Parser.js
      "_": true,
      // Parser.js
      "\\limits": true,
      // Parser.js
      "\\nolimits": true // Parser.js

    };
    class MacroExpander {
      constructor(input, settings, mode) {
        this.settings = void 0;
        this.expansionCount = void 0;
        this.lexer = void 0;
        this.macros = void 0;
        this.stack = void 0;
        this.mode = void 0;
        this.settings = settings;
        this.expansionCount = 0;
        this.feed(input); // Make new global namespace

        this.macros = new Namespace(macros, settings.macros);
        this.mode = mode;
        this.stack = []; // contains tokens in REVERSE order
      }
      /**
       * Feed a new input string to the same MacroExpander
       * (with existing macros etc.).
       */


      feed(input) {
        this.lexer = new Lexer(input, this.settings);
      }
      /**
       * Switches between "text" and "math" modes.
       */


      switchMode(newMode) {
        this.mode = newMode;
      }
      /**
       * Start a new group nesting within all namespaces.
       */


      beginGroup() {
        this.macros.beginGroup();
      }
      /**
       * End current group nesting within all namespaces.
       */


      endGroup() {
        this.macros.endGroup();
      }
      /**
       * Ends all currently nested groups (if any), restoring values before the
       * groups began.  Useful in case of an error in the middle of parsing.
       */


      endGroups() {
        this.macros.endGroups();
      }
      /**
       * Returns the topmost token on the stack, without expanding it.
       * Similar in behavior to TeX's `\futurelet`.
       */


      future() {
        if (this.stack.length === 0) {
          this.pushToken(this.lexer.lex());
        }

        return this.stack[this.stack.length - 1];
      }
      /**
       * Remove and return the next unexpanded token.
       */


      popToken() {
        this.future(); // ensure non-empty stack

        return this.stack.pop();
      }
      /**
       * Add a given token to the token stack.  In particular, this get be used
       * to put back a token returned from one of the other methods.
       */


      pushToken(token) {
        this.stack.push(token);
      }
      /**
       * Append an array of tokens to the token stack.
       */


      pushTokens(tokens) {
        this.stack.push(...tokens);
      }
      /**
       * Find an macro argument without expanding tokens and append the array of
       * tokens to the token stack. Uses Token as a container for the result.
       */


      scanArgument(isOptional) {
        var start;
        var end;
        var tokens;

        if (isOptional) {
          this.consumeSpaces(); // \@ifnextchar gobbles any space following it

          if (this.future().text !== "[") {
            return null;
          }

          start = this.popToken(); // don't include [ in tokens

          ({
            tokens,
            end
          } = this.consumeArg(["]"]));
        } else {
          ({
            tokens,
            start,
            end
          } = this.consumeArg());
        } // indicate the end of an argument


        this.pushToken(new Token("EOF", end.loc));
        this.pushTokens(tokens);
        return start.range(end, "");
      }
      /**
       * Consume all following space tokens, without expansion.
       */


      consumeSpaces() {
        for (;;) {
          var token = this.future();

          if (token.text === " ") {
            this.stack.pop();
          } else {
            break;
          }
        }
      }
      /**
       * Consume an argument from the token stream, and return the resulting array
       * of tokens and start/end token.
       */


      consumeArg(delims) {
        // The argument for a delimited parameter is the shortest (possibly
        // empty) sequence of tokens with properly nested {...} groups that is
        // followed ... by this particular list of non-parameter tokens.
        // The argument for an undelimited parameter is the next nonblank
        // token, unless that token is ‘{’, when the argument will be the
        // entire {...} group that follows.
        var tokens = [];
        var isDelimited = delims && delims.length > 0;

        if (!isDelimited) {
          // Ignore spaces between arguments.  As the TeXbook says:
          // "After you have said ‘\def\row#1#2{...}’, you are allowed to
          //  put spaces between the arguments (e.g., ‘\row x n’), because
          //  TeX doesn’t use single spaces as undelimited arguments."
          this.consumeSpaces();
        }

        var start = this.future();
        var tok;
        var depth = 0;
        var match = 0;

        do {
          tok = this.popToken();
          tokens.push(tok);

          if (tok.text === "{") {
            ++depth;
          } else if (tok.text === "}") {
            --depth;

            if (depth === -1) {
              throw new ParseError("Extra }", tok);
            }
          } else if (tok.text === "EOF") {
            throw new ParseError("Unexpected end of input in a macro argument" + ", expected '" + (delims && isDelimited ? delims[match] : "}") + "'", tok);
          }

          if (delims && isDelimited) {
            if ((depth === 0 || depth === 1 && delims[match] === "{") && tok.text === delims[match]) {
              ++match;

              if (match === delims.length) {
                // don't include delims in tokens
                tokens.splice(-match, match);
                break;
              }
            } else {
              match = 0;
            }
          }
        } while (depth !== 0 || isDelimited); // If the argument found ... has the form ‘{<nested tokens>}’,
        // ... the outermost braces enclosing the argument are removed


        if (start.text === "{" && tokens[tokens.length - 1].text === "}") {
          tokens.pop();
          tokens.shift();
        }

        tokens.reverse(); // to fit in with stack order

        return {
          tokens,
          start,
          end: tok
        };
      }
      /**
       * Consume the specified number of (delimited) arguments from the token
       * stream and return the resulting array of arguments.
       */


      consumeArgs(numArgs, delimiters) {
        if (delimiters) {
          if (delimiters.length !== numArgs + 1) {
            throw new ParseError("The length of delimiters doesn't match the number of args!");
          }

          var delims = delimiters[0];

          for (var i = 0; i < delims.length; i++) {
            var tok = this.popToken();

            if (delims[i] !== tok.text) {
              throw new ParseError("Use of the macro doesn't match its definition", tok);
            }
          }
        }

        var args = [];

        for (var _i = 0; _i < numArgs; _i++) {
          args.push(this.consumeArg(delimiters && delimiters[_i + 1]).tokens);
        }

        return args;
      }
      /**
       * Expand the next token only once if possible.
       *
       * If the token is expanded, the resulting tokens will be pushed onto
       * the stack in reverse order and will be returned as an array,
       * also in reverse order.
       *
       * If not, the next token will be returned without removing it
       * from the stack.  This case can be detected by a `Token` return value
       * instead of an `Array` return value.
       *
       * In either case, the next token will be on the top of the stack,
       * or the stack will be empty.
       *
       * Used to implement `expandAfterFuture` and `expandNextToken`.
       *
       * If expandableOnly, only expandable tokens are expanded and
       * an undefined control sequence results in an error.
       */


      expandOnce(expandableOnly) {
        var topToken = this.popToken();
        var name = topToken.text;
        var expansion = !topToken.noexpand ? this._getExpansion(name) : null;

        if (expansion == null || expandableOnly && expansion.unexpandable) {
          if (expandableOnly && expansion == null && name[0] === "\\" && !this.isDefined(name)) {
            throw new ParseError("Undefined control sequence: " + name);
          }

          this.pushToken(topToken);
          return topToken;
        }

        this.expansionCount++;

        if (this.expansionCount > this.settings.maxExpand) {
          throw new ParseError("Too many expansions: infinite loop or " + "need to increase maxExpand setting");
        }

        var tokens = expansion.tokens;
        var args = this.consumeArgs(expansion.numArgs, expansion.delimiters);

        if (expansion.numArgs) {
          // paste arguments in place of the placeholders
          tokens = tokens.slice(); // make a shallow copy

          for (var i = tokens.length - 1; i >= 0; --i) {
            var tok = tokens[i];

            if (tok.text === "#") {
              if (i === 0) {
                throw new ParseError("Incomplete placeholder at end of macro body", tok);
              }

              tok = tokens[--i]; // next token on stack

              if (tok.text === "#") {
                // ## → #
                tokens.splice(i + 1, 1); // drop first #
              } else if (/^[1-9]$/.test(tok.text)) {
                // replace the placeholder with the indicated argument
                tokens.splice(i, 2, ...args[+tok.text - 1]);
              } else {
                throw new ParseError("Not a valid argument number", tok);
              }
            }
          }
        } // Concatenate expansion onto top of stack.


        this.pushTokens(tokens);
        return tokens;
      }
      /**
       * Expand the next token only once (if possible), and return the resulting
       * top token on the stack (without removing anything from the stack).
       * Similar in behavior to TeX's `\expandafter\futurelet`.
       * Equivalent to expandOnce() followed by future().
       */


      expandAfterFuture() {
        this.expandOnce();
        return this.future();
      }
      /**
       * Recursively expand first token, then return first non-expandable token.
       */


      expandNextToken() {
        for (;;) {
          var expanded = this.expandOnce(); // expandOnce returns Token if and only if it's fully expanded.

          if (expanded instanceof Token) {
            // the token after \noexpand is interpreted as if its meaning
            // were ‘\relax’
            if (expanded.treatAsRelax) {
              expanded.text = "\\relax";
            }

            return this.stack.pop(); // === expanded
          }
        } // Flow unable to figure out that this pathway is impossible.
        // https://github.com/facebook/flow/issues/4808


        throw new Error(); // eslint-disable-line no-unreachable
      }
      /**
       * Fully expand the given macro name and return the resulting list of
       * tokens, or return `undefined` if no such macro is defined.
       */


      expandMacro(name) {
        return this.macros.has(name) ? this.expandTokens([new Token(name)]) : undefined;
      }
      /**
       * Fully expand the given token stream and return the resulting list of
       * tokens.  Note that the input tokens are in reverse order, but the
       * output tokens are in forward order.
       */


      expandTokens(tokens) {
        var output = [];
        var oldStackLength = this.stack.length;
        this.pushTokens(tokens);

        while (this.stack.length > oldStackLength) {
          var expanded = this.expandOnce(true); // expand only expandable tokens
          // expandOnce returns Token if and only if it's fully expanded.

          if (expanded instanceof Token) {
            if (expanded.treatAsRelax) {
              // the expansion of \noexpand is the token itself
              expanded.noexpand = false;
              expanded.treatAsRelax = false;
            }

            output.push(this.stack.pop());
          }
        }

        return output;
      }
      /**
       * Fully expand the given macro name and return the result as a string,
       * or return `undefined` if no such macro is defined.
       */


      expandMacroAsText(name) {
        var tokens = this.expandMacro(name);

        if (tokens) {
          return tokens.map(token => token.text).join("");
        } else {
          return tokens;
        }
      }
      /**
       * Returns the expanded macro as a reversed array of tokens and a macro
       * argument count.  Or returns `null` if no such macro.
       */


      _getExpansion(name) {
        var definition = this.macros.get(name);

        if (definition == null) {
          // mainly checking for undefined here
          return definition;
        } // If a single character has an associated catcode other than 13
        // (active character), then don't expand it.


        if (name.length === 1) {
          var catcode = this.lexer.catcodes[name];

          if (catcode != null && catcode !== 13) {
            return;
          }
        }

        var expansion = typeof definition === "function" ? definition(this) : definition;

        if (typeof expansion === "string") {
          var numArgs = 0;

          if (expansion.indexOf("#") !== -1) {
            var stripped = expansion.replace(/##/g, "");

            while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
              ++numArgs;
            }
          }

          var bodyLexer = new Lexer(expansion, this.settings);
          var tokens = [];
          var tok = bodyLexer.lex();

          while (tok.text !== "EOF") {
            tokens.push(tok);
            tok = bodyLexer.lex();
          }

          tokens.reverse(); // to fit in with stack using push and pop

          var expanded = {
            tokens,
            numArgs
          };
          return expanded;
        }

        return expansion;
      }
      /**
       * Determine whether a command is currently "defined" (has some
       * functionality), meaning that it's a macro (in the current group),
       * a function, a symbol, or one of the special commands listed in
       * `implicitCommands`.
       */


      isDefined(name) {
        return this.macros.has(name) || functions.hasOwnProperty(name) || symbols.math.hasOwnProperty(name) || symbols.text.hasOwnProperty(name) || implicitCommands.hasOwnProperty(name);
      }
      /**
       * Determine whether a command is expandable.
       */


      isExpandable(name) {
        var macro = this.macros.get(name);
        return macro != null ? typeof macro === "string" || typeof macro === "function" || !macro.unexpandable : functions.hasOwnProperty(name) && !functions[name].primitive;
      }

    }

    // Helpers for Parser.js handling of Unicode (sub|super)script characters.
    var unicodeSubRegEx = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/;
    var uSubsAndSups = Object.freeze({
      '₊': '+',
      '₋': '-',
      '₌': '=',
      '₍': '(',
      '₎': ')',
      '₀': '0',
      '₁': '1',
      '₂': '2',
      '₃': '3',
      '₄': '4',
      '₅': '5',
      '₆': '6',
      '₇': '7',
      '₈': '8',
      '₉': '9',
      '\u2090': 'a',
      '\u2091': 'e',
      '\u2095': 'h',
      '\u1D62': 'i',
      '\u2C7C': 'j',
      '\u2096': 'k',
      '\u2097': 'l',
      '\u2098': 'm',
      '\u2099': 'n',
      '\u2092': 'o',
      '\u209A': 'p',
      '\u1D63': 'r',
      '\u209B': 's',
      '\u209C': 't',
      '\u1D64': 'u',
      '\u1D65': 'v',
      '\u2093': 'x',
      '\u1D66': 'β',
      '\u1D67': 'γ',
      '\u1D68': 'ρ',
      '\u1D69': '\u03d5',
      '\u1D6A': 'χ',
      '⁺': '+',
      '⁻': '-',
      '⁼': '=',
      '⁽': '(',
      '⁾': ')',
      '⁰': '0',
      '¹': '1',
      '²': '2',
      '³': '3',
      '⁴': '4',
      '⁵': '5',
      '⁶': '6',
      '⁷': '7',
      '⁸': '8',
      '⁹': '9',
      '\u1D2C': 'A',
      '\u1D2E': 'B',
      '\u1D30': 'D',
      '\u1D31': 'E',
      '\u1D33': 'G',
      '\u1D34': 'H',
      '\u1D35': 'I',
      '\u1D36': 'J',
      '\u1D37': 'K',
      '\u1D38': 'L',
      '\u1D39': 'M',
      '\u1D3A': 'N',
      '\u1D3C': 'O',
      '\u1D3E': 'P',
      '\u1D3F': 'R',
      '\u1D40': 'T',
      '\u1D41': 'U',
      '\u2C7D': 'V',
      '\u1D42': 'W',
      '\u1D43': 'a',
      '\u1D47': 'b',
      '\u1D9C': 'c',
      '\u1D48': 'd',
      '\u1D49': 'e',
      '\u1DA0': 'f',
      '\u1D4D': 'g',
      '\u02B0': 'h',
      '\u2071': 'i',
      '\u02B2': 'j',
      '\u1D4F': 'k',
      '\u02E1': 'l',
      '\u1D50': 'm',
      '\u207F': 'n',
      '\u1D52': 'o',
      '\u1D56': 'p',
      '\u02B3': 'r',
      '\u02E2': 's',
      '\u1D57': 't',
      '\u1D58': 'u',
      '\u1D5B': 'v',
      '\u02B7': 'w',
      '\u02E3': 'x',
      '\u02B8': 'y',
      '\u1DBB': 'z',
      '\u1D5D': 'β',
      '\u1D5E': 'γ',
      '\u1D5F': 'δ',
      '\u1D60': '\u03d5',
      '\u1D61': 'χ',
      '\u1DBF': 'θ'
    });

    /* eslint no-constant-condition:0 */

    var unicodeAccents = {
      "́": {
        "text": "\\'",
        "math": "\\acute"
      },
      "̀": {
        "text": "\\`",
        "math": "\\grave"
      },
      "̈": {
        "text": "\\\"",
        "math": "\\ddot"
      },
      "̃": {
        "text": "\\~",
        "math": "\\tilde"
      },
      "̄": {
        "text": "\\=",
        "math": "\\bar"
      },
      "̆": {
        "text": "\\u",
        "math": "\\breve"
      },
      "̌": {
        "text": "\\v",
        "math": "\\check"
      },
      "̂": {
        "text": "\\^",
        "math": "\\hat"
      },
      "̇": {
        "text": "\\.",
        "math": "\\dot"
      },
      "̊": {
        "text": "\\r",
        "math": "\\mathring"
      },
      "̋": {
        "text": "\\H"
      },
      "̧": {
        "text": "\\c"
      }
    };
    var unicodeSymbols = {
      "á": "á",
      "à": "à",
      "ä": "ä",
      "ǟ": "ǟ",
      "ã": "ã",
      "ā": "ā",
      "ă": "ă",
      "ắ": "ắ",
      "ằ": "ằ",
      "ẵ": "ẵ",
      "ǎ": "ǎ",
      "â": "â",
      "ấ": "ấ",
      "ầ": "ầ",
      "ẫ": "ẫ",
      "ȧ": "ȧ",
      "ǡ": "ǡ",
      "å": "å",
      "ǻ": "ǻ",
      "ḃ": "ḃ",
      "ć": "ć",
      "ḉ": "ḉ",
      "č": "č",
      "ĉ": "ĉ",
      "ċ": "ċ",
      "ç": "ç",
      "ď": "ď",
      "ḋ": "ḋ",
      "ḑ": "ḑ",
      "é": "é",
      "è": "è",
      "ë": "ë",
      "ẽ": "ẽ",
      "ē": "ē",
      "ḗ": "ḗ",
      "ḕ": "ḕ",
      "ĕ": "ĕ",
      "ḝ": "ḝ",
      "ě": "ě",
      "ê": "ê",
      "ế": "ế",
      "ề": "ề",
      "ễ": "ễ",
      "ė": "ė",
      "ȩ": "ȩ",
      "ḟ": "ḟ",
      "ǵ": "ǵ",
      "ḡ": "ḡ",
      "ğ": "ğ",
      "ǧ": "ǧ",
      "ĝ": "ĝ",
      "ġ": "ġ",
      "ģ": "ģ",
      "ḧ": "ḧ",
      "ȟ": "ȟ",
      "ĥ": "ĥ",
      "ḣ": "ḣ",
      "ḩ": "ḩ",
      "í": "í",
      "ì": "ì",
      "ï": "ï",
      "ḯ": "ḯ",
      "ĩ": "ĩ",
      "ī": "ī",
      "ĭ": "ĭ",
      "ǐ": "ǐ",
      "î": "î",
      "ǰ": "ǰ",
      "ĵ": "ĵ",
      "ḱ": "ḱ",
      "ǩ": "ǩ",
      "ķ": "ķ",
      "ĺ": "ĺ",
      "ľ": "ľ",
      "ļ": "ļ",
      "ḿ": "ḿ",
      "ṁ": "ṁ",
      "ń": "ń",
      "ǹ": "ǹ",
      "ñ": "ñ",
      "ň": "ň",
      "ṅ": "ṅ",
      "ņ": "ņ",
      "ó": "ó",
      "ò": "ò",
      "ö": "ö",
      "ȫ": "ȫ",
      "õ": "õ",
      "ṍ": "ṍ",
      "ṏ": "ṏ",
      "ȭ": "ȭ",
      "ō": "ō",
      "ṓ": "ṓ",
      "ṑ": "ṑ",
      "ŏ": "ŏ",
      "ǒ": "ǒ",
      "ô": "ô",
      "ố": "ố",
      "ồ": "ồ",
      "ỗ": "ỗ",
      "ȯ": "ȯ",
      "ȱ": "ȱ",
      "ő": "ő",
      "ṕ": "ṕ",
      "ṗ": "ṗ",
      "ŕ": "ŕ",
      "ř": "ř",
      "ṙ": "ṙ",
      "ŗ": "ŗ",
      "ś": "ś",
      "ṥ": "ṥ",
      "š": "š",
      "ṧ": "ṧ",
      "ŝ": "ŝ",
      "ṡ": "ṡ",
      "ş": "ş",
      "ẗ": "ẗ",
      "ť": "ť",
      "ṫ": "ṫ",
      "ţ": "ţ",
      "ú": "ú",
      "ù": "ù",
      "ü": "ü",
      "ǘ": "ǘ",
      "ǜ": "ǜ",
      "ǖ": "ǖ",
      "ǚ": "ǚ",
      "ũ": "ũ",
      "ṹ": "ṹ",
      "ū": "ū",
      "ṻ": "ṻ",
      "ŭ": "ŭ",
      "ǔ": "ǔ",
      "û": "û",
      "ů": "ů",
      "ű": "ű",
      "ṽ": "ṽ",
      "ẃ": "ẃ",
      "ẁ": "ẁ",
      "ẅ": "ẅ",
      "ŵ": "ŵ",
      "ẇ": "ẇ",
      "ẘ": "ẘ",
      "ẍ": "ẍ",
      "ẋ": "ẋ",
      "ý": "ý",
      "ỳ": "ỳ",
      "ÿ": "ÿ",
      "ỹ": "ỹ",
      "ȳ": "ȳ",
      "ŷ": "ŷ",
      "ẏ": "ẏ",
      "ẙ": "ẙ",
      "ź": "ź",
      "ž": "ž",
      "ẑ": "ẑ",
      "ż": "ż",
      "Á": "Á",
      "À": "À",
      "Ä": "Ä",
      "Ǟ": "Ǟ",
      "Ã": "Ã",
      "Ā": "Ā",
      "Ă": "Ă",
      "Ắ": "Ắ",
      "Ằ": "Ằ",
      "Ẵ": "Ẵ",
      "Ǎ": "Ǎ",
      "Â": "Â",
      "Ấ": "Ấ",
      "Ầ": "Ầ",
      "Ẫ": "Ẫ",
      "Ȧ": "Ȧ",
      "Ǡ": "Ǡ",
      "Å": "Å",
      "Ǻ": "Ǻ",
      "Ḃ": "Ḃ",
      "Ć": "Ć",
      "Ḉ": "Ḉ",
      "Č": "Č",
      "Ĉ": "Ĉ",
      "Ċ": "Ċ",
      "Ç": "Ç",
      "Ď": "Ď",
      "Ḋ": "Ḋ",
      "Ḑ": "Ḑ",
      "É": "É",
      "È": "È",
      "Ë": "Ë",
      "Ẽ": "Ẽ",
      "Ē": "Ē",
      "Ḗ": "Ḗ",
      "Ḕ": "Ḕ",
      "Ĕ": "Ĕ",
      "Ḝ": "Ḝ",
      "Ě": "Ě",
      "Ê": "Ê",
      "Ế": "Ế",
      "Ề": "Ề",
      "Ễ": "Ễ",
      "Ė": "Ė",
      "Ȩ": "Ȩ",
      "Ḟ": "Ḟ",
      "Ǵ": "Ǵ",
      "Ḡ": "Ḡ",
      "Ğ": "Ğ",
      "Ǧ": "Ǧ",
      "Ĝ": "Ĝ",
      "Ġ": "Ġ",
      "Ģ": "Ģ",
      "Ḧ": "Ḧ",
      "Ȟ": "Ȟ",
      "Ĥ": "Ĥ",
      "Ḣ": "Ḣ",
      "Ḩ": "Ḩ",
      "Í": "Í",
      "Ì": "Ì",
      "Ï": "Ï",
      "Ḯ": "Ḯ",
      "Ĩ": "Ĩ",
      "Ī": "Ī",
      "Ĭ": "Ĭ",
      "Ǐ": "Ǐ",
      "Î": "Î",
      "İ": "İ",
      "Ĵ": "Ĵ",
      "Ḱ": "Ḱ",
      "Ǩ": "Ǩ",
      "Ķ": "Ķ",
      "Ĺ": "Ĺ",
      "Ľ": "Ľ",
      "Ļ": "Ļ",
      "Ḿ": "Ḿ",
      "Ṁ": "Ṁ",
      "Ń": "Ń",
      "Ǹ": "Ǹ",
      "Ñ": "Ñ",
      "Ň": "Ň",
      "Ṅ": "Ṅ",
      "Ņ": "Ņ",
      "Ó": "Ó",
      "Ò": "Ò",
      "Ö": "Ö",
      "Ȫ": "Ȫ",
      "Õ": "Õ",
      "Ṍ": "Ṍ",
      "Ṏ": "Ṏ",
      "Ȭ": "Ȭ",
      "Ō": "Ō",
      "Ṓ": "Ṓ",
      "Ṑ": "Ṑ",
      "Ŏ": "Ŏ",
      "Ǒ": "Ǒ",
      "Ô": "Ô",
      "Ố": "Ố",
      "Ồ": "Ồ",
      "Ỗ": "Ỗ",
      "Ȯ": "Ȯ",
      "Ȱ": "Ȱ",
      "Ő": "Ő",
      "Ṕ": "Ṕ",
      "Ṗ": "Ṗ",
      "Ŕ": "Ŕ",
      "Ř": "Ř",
      "Ṙ": "Ṙ",
      "Ŗ": "Ŗ",
      "Ś": "Ś",
      "Ṥ": "Ṥ",
      "Š": "Š",
      "Ṧ": "Ṧ",
      "Ŝ": "Ŝ",
      "Ṡ": "Ṡ",
      "Ş": "Ş",
      "Ť": "Ť",
      "Ṫ": "Ṫ",
      "Ţ": "Ţ",
      "Ú": "Ú",
      "Ù": "Ù",
      "Ü": "Ü",
      "Ǘ": "Ǘ",
      "Ǜ": "Ǜ",
      "Ǖ": "Ǖ",
      "Ǚ": "Ǚ",
      "Ũ": "Ũ",
      "Ṹ": "Ṹ",
      "Ū": "Ū",
      "Ṻ": "Ṻ",
      "Ŭ": "Ŭ",
      "Ǔ": "Ǔ",
      "Û": "Û",
      "Ů": "Ů",
      "Ű": "Ű",
      "Ṽ": "Ṽ",
      "Ẃ": "Ẃ",
      "Ẁ": "Ẁ",
      "Ẅ": "Ẅ",
      "Ŵ": "Ŵ",
      "Ẇ": "Ẇ",
      "Ẍ": "Ẍ",
      "Ẋ": "Ẋ",
      "Ý": "Ý",
      "Ỳ": "Ỳ",
      "Ÿ": "Ÿ",
      "Ỹ": "Ỹ",
      "Ȳ": "Ȳ",
      "Ŷ": "Ŷ",
      "Ẏ": "Ẏ",
      "Ź": "Ź",
      "Ž": "Ž",
      "Ẑ": "Ẑ",
      "Ż": "Ż",
      "ά": "ά",
      "ὰ": "ὰ",
      "ᾱ": "ᾱ",
      "ᾰ": "ᾰ",
      "έ": "έ",
      "ὲ": "ὲ",
      "ή": "ή",
      "ὴ": "ὴ",
      "ί": "ί",
      "ὶ": "ὶ",
      "ϊ": "ϊ",
      "ΐ": "ΐ",
      "ῒ": "ῒ",
      "ῑ": "ῑ",
      "ῐ": "ῐ",
      "ό": "ό",
      "ὸ": "ὸ",
      "ύ": "ύ",
      "ὺ": "ὺ",
      "ϋ": "ϋ",
      "ΰ": "ΰ",
      "ῢ": "ῢ",
      "ῡ": "ῡ",
      "ῠ": "ῠ",
      "ώ": "ώ",
      "ὼ": "ὼ",
      "Ύ": "Ύ",
      "Ὺ": "Ὺ",
      "Ϋ": "Ϋ",
      "Ῡ": "Ῡ",
      "Ῠ": "Ῠ",
      "Ώ": "Ώ",
      "Ὼ": "Ὼ"
    };

    /**
     * This file contains the parser used to parse out a TeX expression from the
     * input. Since TeX isn't context-free, standard parsers don't work particularly
     * well.
     *
     * The strategy of this parser is as such:
     *
     * The main functions (the `.parse...` ones) take a position in the current
     * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
     * this.gullet.lexer) also supports pulling out tokens at arbitrary places. When
     * individual tokens are needed at a position, the lexer is called to pull out a
     * token, which is then used.
     *
     * The parser has a property called "mode" indicating the mode that
     * the parser is currently in. Currently it has to be one of "math" or
     * "text", which denotes whether the current environment is a math-y
     * one or a text-y one (e.g. inside \text). Currently, this serves to
     * limit the functions which can be used in text mode.
     *
     * The main functions then return an object which contains the useful data that
     * was parsed at its given point, and a new position at the end of the parsed
     * data. The main functions can call each other and continue the parsing by
     * using the returned position as a new starting point.
     *
     * There are also extra `.handle...` functions, which pull out some reused
     * functionality into self-contained functions.
     *
     * The functions return ParseNodes.
     */
    class Parser {
      constructor(input, settings) {
        this.mode = void 0;
        this.gullet = void 0;
        this.settings = void 0;
        this.leftrightDepth = void 0;
        this.nextToken = void 0;
        // Start in math mode
        this.mode = "math"; // Create a new macro expander (gullet) and (indirectly via that) also a
        // new lexer (mouth) for this parser (stomach, in the language of TeX)

        this.gullet = new MacroExpander(input, settings, this.mode); // Store the settings for use in parsing

        this.settings = settings; // Count leftright depth (for \middle errors)

        this.leftrightDepth = 0;
      }
      /**
       * Checks a result to make sure it has the right type, and throws an
       * appropriate error otherwise.
       */


      expect(text, consume) {
        if (consume === void 0) {
          consume = true;
        }

        if (this.fetch().text !== text) {
          throw new ParseError("Expected '" + text + "', got '" + this.fetch().text + "'", this.fetch());
        }

        if (consume) {
          this.consume();
        }
      }
      /**
       * Discards the current lookahead token, considering it consumed.
       */


      consume() {
        this.nextToken = null;
      }
      /**
       * Return the current lookahead token, or if there isn't one (at the
       * beginning, or if the previous lookahead token was consume()d),
       * fetch the next token as the new lookahead token and return it.
       */


      fetch() {
        if (this.nextToken == null) {
          this.nextToken = this.gullet.expandNextToken();
        }

        return this.nextToken;
      }
      /**
       * Switches between "text" and "math" modes.
       */


      switchMode(newMode) {
        this.mode = newMode;
        this.gullet.switchMode(newMode);
      }
      /**
       * Main parsing function, which parses an entire input.
       */


      parse() {
        if (!this.settings.globalGroup) {
          // Create a group namespace for the math expression.
          // (LaTeX creates a new group for every $...$, $$...$$, \[...\].)
          this.gullet.beginGroup();
        } // Use old \color behavior (same as LaTeX's \textcolor) if requested.
        // We do this within the group for the math expression, so it doesn't
        // pollute settings.macros.


        if (this.settings.colorIsTextColor) {
          this.gullet.macros.set("\\color", "\\textcolor");
        }

        try {
          // Try to parse the input
          var parse = this.parseExpression(false); // If we succeeded, make sure there's an EOF at the end

          this.expect("EOF"); // End the group namespace for the expression

          if (!this.settings.globalGroup) {
            this.gullet.endGroup();
          }

          return parse; // Close any leftover groups in case of a parse error.
        } finally {
          this.gullet.endGroups();
        }
      }
      /**
       * Fully parse a separate sequence of tokens as a separate job.
       * Tokens should be specified in reverse order, as in a MacroDefinition.
       */


      subparse(tokens) {
        // Save the next token from the current job.
        var oldToken = this.nextToken;
        this.consume(); // Run the new job, terminating it with an excess '}'

        this.gullet.pushToken(new Token("}"));
        this.gullet.pushTokens(tokens);
        var parse = this.parseExpression(false);
        this.expect("}"); // Restore the next token from the current job.

        this.nextToken = oldToken;
        return parse;
      }

      /**
       * Parses an "expression", which is a list of atoms.
       *
       * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
       *                 happens when functions have higher precendence han infix
       *                 nodes in implicit parses.
       *
       * `breakOnTokenText`: The text of the token that the expression should end
       *                     with, or `null` if something else should end the
       *                     expression.
       */
      parseExpression(breakOnInfix, breakOnTokenText) {
        var body = []; // Keep adding atoms to the body until we can't parse any more atoms (either
        // we reached the end, a }, or a \right)

        while (true) {
          // Ignore spaces in math mode
          if (this.mode === "math") {
            this.consumeSpaces();
          }

          var lex = this.fetch();

          if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
            break;
          }

          if (breakOnTokenText && lex.text === breakOnTokenText) {
            break;
          }

          if (breakOnInfix && functions[lex.text] && functions[lex.text].infix) {
            break;
          }

          var atom = this.parseAtom(breakOnTokenText);

          if (!atom) {
            break;
          } else if (atom.type === "internal") {
            continue;
          }

          body.push(atom);
        }

        if (this.mode === "text") {
          this.formLigatures(body);
        }

        return this.handleInfixNodes(body);
      }
      /**
       * Rewrites infix operators such as \over with corresponding commands such
       * as \frac.
       *
       * There can only be one infix operator per group.  If there's more than one
       * then the expression is ambiguous.  This can be resolved by adding {}.
       */


      handleInfixNodes(body) {
        var overIndex = -1;
        var funcName;

        for (var i = 0; i < body.length; i++) {
          if (body[i].type === "infix") {
            if (overIndex !== -1) {
              throw new ParseError("only one infix operator per group", body[i].token);
            }

            overIndex = i;
            funcName = body[i].replaceWith;
          }
        }

        if (overIndex !== -1 && funcName) {
          var numerNode;
          var denomNode;
          var numerBody = body.slice(0, overIndex);
          var denomBody = body.slice(overIndex + 1);

          if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
            numerNode = numerBody[0];
          } else {
            numerNode = {
              type: "ordgroup",
              mode: this.mode,
              body: numerBody
            };
          }

          if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
            denomNode = denomBody[0];
          } else {
            denomNode = {
              type: "ordgroup",
              mode: this.mode,
              body: denomBody
            };
          }

          var node;

          if (funcName === "\\\\abovefrac") {
            node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
          } else {
            node = this.callFunction(funcName, [numerNode, denomNode], []);
          }

          return [node];
        } else {
          return body;
        }
      }
      /**
       * Handle a subscript or superscript with nice errors.
       */


      handleSupSubscript(name // For error reporting.
      ) {
        var symbolToken = this.fetch();
        var symbol = symbolToken.text;
        this.consume();
        this.consumeSpaces(); // ignore spaces before sup/subscript argument

        var group = this.parseGroup(name);

        if (!group) {
          throw new ParseError("Expected group after '" + symbol + "'", symbolToken);
        }

        return group;
      }
      /**
       * Converts the textual input of an unsupported command into a text node
       * contained within a color node whose color is determined by errorColor
       */


      formatUnsupportedCmd(text) {
        var textordArray = [];

        for (var i = 0; i < text.length; i++) {
          textordArray.push({
            type: "textord",
            mode: "text",
            text: text[i]
          });
        }

        var textNode = {
          type: "text",
          mode: this.mode,
          body: textordArray
        };
        var colorNode = {
          type: "color",
          mode: this.mode,
          color: this.settings.errorColor,
          body: [textNode]
        };
        return colorNode;
      }
      /**
       * Parses a group with optional super/subscripts.
       */


      parseAtom(breakOnTokenText) {
        // The body of an atom is an implicit group, so that things like
        // \left(x\right)^2 work correctly.
        var base = this.parseGroup("atom", breakOnTokenText); // In text mode, we don't have superscripts or subscripts

        if (this.mode === "text") {
          return base;
        } // Note that base may be empty (i.e. null) at this point.


        var superscript;
        var subscript;

        while (true) {
          // Guaranteed in math mode, so eat any spaces first.
          this.consumeSpaces(); // Lex the first token

          var lex = this.fetch();

          if (lex.text === "\\limits" || lex.text === "\\nolimits") {
            // We got a limit control
            if (base && base.type === "op") {
              var limits = lex.text === "\\limits";
              base.limits = limits;
              base.alwaysHandleSupSub = true;
            } else if (base && base.type === "operatorname") {
              if (base.alwaysHandleSupSub) {
                base.limits = lex.text === "\\limits";
              }
            } else {
              throw new ParseError("Limit controls must follow a math operator", lex);
            }

            this.consume();
          } else if (lex.text === "^") {
            // We got a superscript start
            if (superscript) {
              throw new ParseError("Double superscript", lex);
            }

            superscript = this.handleSupSubscript("superscript");
          } else if (lex.text === "_") {
            // We got a subscript start
            if (subscript) {
              throw new ParseError("Double subscript", lex);
            }

            subscript = this.handleSupSubscript("subscript");
          } else if (lex.text === "'") {
            // We got a prime
            if (superscript) {
              throw new ParseError("Double superscript", lex);
            }

            var prime = {
              type: "textord",
              mode: this.mode,
              text: "\\prime"
            }; // Many primes can be grouped together, so we handle this here

            var primes = [prime];
            this.consume(); // Keep lexing tokens until we get something that's not a prime

            while (this.fetch().text === "'") {
              // For each one, add another prime to the list
              primes.push(prime);
              this.consume();
            } // If there's a superscript following the primes, combine that
            // superscript in with the primes.


            if (this.fetch().text === "^") {
              primes.push(this.handleSupSubscript("superscript"));
            } // Put everything into an ordgroup as the superscript


            superscript = {
              type: "ordgroup",
              mode: this.mode,
              body: primes
            };
          } else if (uSubsAndSups[lex.text]) {
            // A Unicode subscript or superscript character.
            // We treat these similarly to the unicode-math package.
            // So we render a string of Unicode (sub|super)scripts the
            // same as a (sub|super)script of regular characters.
            var str = uSubsAndSups[lex.text];
            var isSub = unicodeSubRegEx.test(lex.text);
            this.consume(); // Continue fetching tokens to fill out the string.

            while (true) {
              var token = this.fetch().text;

              if (!uSubsAndSups[token]) {
                break;
              }

              if (unicodeSubRegEx.test(token) !== isSub) {
                break;
              }

              this.consume();
              str += uSubsAndSups[token];
            } // Now create a (sub|super)script.


            var body = new Parser(str, this.settings).parse();

            if (isSub) {
              subscript = {
                type: "ordgroup",
                mode: "math",
                body
              };
            } else {
              superscript = {
                type: "ordgroup",
                mode: "math",
                body
              };
            }
          } else {
            // If it wasn't ^, _, or ', stop parsing super/subscripts
            break;
          }
        } // Base must be set if superscript or subscript are set per logic above,
        // but need to check here for type check to pass.


        if (superscript || subscript) {
          // If we got either a superscript or subscript, create a supsub
          return {
            type: "supsub",
            mode: this.mode,
            base: base,
            sup: superscript,
            sub: subscript
          };
        } else {
          // Otherwise return the original body
          return base;
        }
      }
      /**
       * Parses an entire function, including its base and all of its arguments.
       */


      parseFunction(breakOnTokenText, name // For determining its context
      ) {
        var token = this.fetch();
        var func = token.text;
        var funcData = functions[func];

        if (!funcData) {
          return null;
        }

        this.consume(); // consume command token

        if (name && name !== "atom" && !funcData.allowedInArgument) {
          throw new ParseError("Got function '" + func + "' with no arguments" + (name ? " as " + name : ""), token);
        } else if (this.mode === "text" && !funcData.allowedInText) {
          throw new ParseError("Can't use function '" + func + "' in text mode", token);
        } else if (this.mode === "math" && funcData.allowedInMath === false) {
          throw new ParseError("Can't use function '" + func + "' in math mode", token);
        }

        var {
          args,
          optArgs
        } = this.parseArguments(func, funcData);
        return this.callFunction(func, args, optArgs, token, breakOnTokenText);
      }
      /**
       * Call a function handler with a suitable context and arguments.
       */


      callFunction(name, args, optArgs, token, breakOnTokenText) {
        var context = {
          funcName: name,
          parser: this,
          token,
          breakOnTokenText
        };
        var func = functions[name];

        if (func && func.handler) {
          return func.handler(context, args, optArgs);
        } else {
          throw new ParseError("No function handler for " + name);
        }
      }
      /**
       * Parses the arguments of a function or environment
       */


      parseArguments(func, // Should look like "\name" or "\begin{name}".
      funcData) {
        var totalArgs = funcData.numArgs + funcData.numOptionalArgs;

        if (totalArgs === 0) {
          return {
            args: [],
            optArgs: []
          };
        }

        var args = [];
        var optArgs = [];

        for (var i = 0; i < totalArgs; i++) {
          var argType = funcData.argTypes && funcData.argTypes[i];
          var isOptional = i < funcData.numOptionalArgs;

          if (funcData.primitive && argType == null || // \sqrt expands into primitive if optional argument doesn't exist
          funcData.type === "sqrt" && i === 1 && optArgs[0] == null) {
            argType = "primitive";
          }

          var arg = this.parseGroupOfType("argument to '" + func + "'", argType, isOptional);

          if (isOptional) {
            optArgs.push(arg);
          } else if (arg != null) {
            args.push(arg);
          } else {
            // should be unreachable
            throw new ParseError("Null argument, please report this as a bug");
          }
        }

        return {
          args,
          optArgs
        };
      }
      /**
       * Parses a group when the mode is changing.
       */


      parseGroupOfType(name, type, optional) {
        switch (type) {
          case "color":
            return this.parseColorGroup(optional);

          case "size":
            return this.parseSizeGroup(optional);

          case "url":
            return this.parseUrlGroup(optional);

          case "math":
          case "text":
            return this.parseArgumentGroup(optional, type);

          case "hbox":
            {
              // hbox argument type wraps the argument in the equivalent of
              // \hbox, which is like \text but switching to \textstyle size.
              var group = this.parseArgumentGroup(optional, "text");
              return group != null ? {
                type: "styling",
                mode: group.mode,
                body: [group],
                style: "text" // simulate \textstyle

              } : null;
            }

          case "raw":
            {
              var token = this.parseStringGroup("raw", optional);
              return token != null ? {
                type: "raw",
                mode: "text",
                string: token.text
              } : null;
            }

          case "primitive":
            {
              if (optional) {
                throw new ParseError("A primitive argument cannot be optional");
              }

              var _group = this.parseGroup(name);

              if (_group == null) {
                throw new ParseError("Expected group as " + name, this.fetch());
              }

              return _group;
            }

          case "original":
          case null:
          case undefined:
            return this.parseArgumentGroup(optional);

          default:
            throw new ParseError("Unknown group type as " + name, this.fetch());
        }
      }
      /**
       * Discard any space tokens, fetching the next non-space token.
       */


      consumeSpaces() {
        while (this.fetch().text === " ") {
          this.consume();
        }
      }
      /**
       * Parses a group, essentially returning the string formed by the
       * brace-enclosed tokens plus some position information.
       */


      parseStringGroup(modeName, // Used to describe the mode in error messages.
      optional) {
        var argToken = this.gullet.scanArgument(optional);

        if (argToken == null) {
          return null;
        }

        var str = "";
        var nextToken;

        while ((nextToken = this.fetch()).text !== "EOF") {
          str += nextToken.text;
          this.consume();
        }

        this.consume(); // consume the end of the argument

        argToken.text = str;
        return argToken;
      }
      /**
       * Parses a regex-delimited group: the largest sequence of tokens
       * whose concatenated strings match `regex`. Returns the string
       * formed by the tokens plus some position information.
       */


      parseRegexGroup(regex, modeName // Used to describe the mode in error messages.
      ) {
        var firstToken = this.fetch();
        var lastToken = firstToken;
        var str = "";
        var nextToken;

        while ((nextToken = this.fetch()).text !== "EOF" && regex.test(str + nextToken.text)) {
          lastToken = nextToken;
          str += lastToken.text;
          this.consume();
        }

        if (str === "") {
          throw new ParseError("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
        }

        return firstToken.range(lastToken, str);
      }
      /**
       * Parses a color description.
       */


      parseColorGroup(optional) {
        var res = this.parseStringGroup("color", optional);

        if (res == null) {
          return null;
        }

        var match = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);

        if (!match) {
          throw new ParseError("Invalid color: '" + res.text + "'", res);
        }

        var color = match[0];

        if (/^[0-9a-f]{6}$/i.test(color)) {
          // We allow a 6-digit HTML color spec without a leading "#".
          // This follows the xcolor package's HTML color model.
          // Predefined color names are all missed by this RegEx pattern.
          color = "#" + color;
        }

        return {
          type: "color-token",
          mode: this.mode,
          color
        };
      }
      /**
       * Parses a size specification, consisting of magnitude and unit.
       */


      parseSizeGroup(optional) {
        var res;
        var isBlank = false; // don't expand before parseStringGroup

        this.gullet.consumeSpaces();

        if (!optional && this.gullet.future().text !== "{") {
          res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
        } else {
          res = this.parseStringGroup("size", optional);
        }

        if (!res) {
          return null;
        }

        if (!optional && res.text.length === 0) {
          // Because we've tested for what is !optional, this block won't
          // affect \kern, \hspace, etc. It will capture the mandatory arguments
          // to \genfrac and \above.
          res.text = "0pt"; // Enable \above{}

          isBlank = true; // This is here specifically for \genfrac
        }

        var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);

        if (!match) {
          throw new ParseError("Invalid size: '" + res.text + "'", res);
        }

        var data = {
          number: +(match[1] + match[2]),
          // sign + magnitude, cast to number
          unit: match[3]
        };

        if (!validUnit(data)) {
          throw new ParseError("Invalid unit: '" + data.unit + "'", res);
        }

        return {
          type: "size",
          mode: this.mode,
          value: data,
          isBlank
        };
      }
      /**
       * Parses an URL, checking escaped letters and allowed protocols,
       * and setting the catcode of % as an active character (as in \hyperref).
       */


      parseUrlGroup(optional) {
        this.gullet.lexer.setCatcode("%", 13); // active character

        this.gullet.lexer.setCatcode("~", 12); // other character

        var res = this.parseStringGroup("url", optional);
        this.gullet.lexer.setCatcode("%", 14); // comment character

        this.gullet.lexer.setCatcode("~", 13); // active character

        if (res == null) {
          return null;
        } // hyperref package allows backslashes alone in href, but doesn't
        // generate valid links in such cases; we interpret this as
        // "undefined" behaviour, and keep them as-is. Some browser will
        // replace backslashes with forward slashes.


        var url = res.text.replace(/\\([#$%&~_^{}])/g, '$1');
        return {
          type: "url",
          mode: this.mode,
          url
        };
      }
      /**
       * Parses an argument with the mode specified.
       */


      parseArgumentGroup(optional, mode) {
        var argToken = this.gullet.scanArgument(optional);

        if (argToken == null) {
          return null;
        }

        var outerMode = this.mode;

        if (mode) {
          // Switch to specified mode
          this.switchMode(mode);
        }

        this.gullet.beginGroup();
        var expression = this.parseExpression(false, "EOF"); // TODO: find an alternative way to denote the end

        this.expect("EOF"); // expect the end of the argument

        this.gullet.endGroup();
        var result = {
          type: "ordgroup",
          mode: this.mode,
          loc: argToken.loc,
          body: expression
        };

        if (mode) {
          // Switch mode back
          this.switchMode(outerMode);
        }

        return result;
      }
      /**
       * Parses an ordinary group, which is either a single nucleus (like "x")
       * or an expression in braces (like "{x+y}") or an implicit group, a group
       * that starts at the current position, and ends right before a higher explicit
       * group ends, or at EOF.
       */


      parseGroup(name, // For error reporting.
      breakOnTokenText) {
        var firstToken = this.fetch();
        var text = firstToken.text;
        var result; // Try to parse an open brace or \begingroup

        if (text === "{" || text === "\\begingroup") {
          this.consume();
          var groupEnd = text === "{" ? "}" : "\\endgroup";
          this.gullet.beginGroup(); // If we get a brace, parse an expression

          var expression = this.parseExpression(false, groupEnd);
          var lastToken = this.fetch();
          this.expect(groupEnd); // Check that we got a matching closing brace

          this.gullet.endGroup();
          result = {
            type: "ordgroup",
            mode: this.mode,
            loc: SourceLocation.range(firstToken, lastToken),
            body: expression,
            // A group formed by \begingroup...\endgroup is a semi-simple group
            // which doesn't affect spacing in math mode, i.e., is transparent.
            // https://tex.stackexchange.com/questions/1930/when-should-one-
            // use-begingroup-instead-of-bgroup
            semisimple: text === "\\begingroup" || undefined
          };
        } else {
          // If there exists a function with this name, parse the function.
          // Otherwise, just return a nucleus
          result = this.parseFunction(breakOnTokenText, name) || this.parseSymbol();

          if (result == null && text[0] === "\\" && !implicitCommands.hasOwnProperty(text)) {
            if (this.settings.throwOnError) {
              throw new ParseError("Undefined control sequence: " + text, firstToken);
            }

            result = this.formatUnsupportedCmd(text);
            this.consume();
          }
        }

        return result;
      }
      /**
       * Form ligature-like combinations of characters for text mode.
       * This includes inputs like "--", "---", "``" and "''".
       * The result will simply replace multiple textord nodes with a single
       * character in each value by a single textord node having multiple
       * characters in its value.  The representation is still ASCII source.
       * The group will be modified in place.
       */


      formLigatures(group) {
        var n = group.length - 1;

        for (var i = 0; i < n; ++i) {
          var a = group[i]; // $FlowFixMe: Not every node type has a `text` property.

          var v = a.text;

          if (v === "-" && group[i + 1].text === "-") {
            if (i + 1 < n && group[i + 2].text === "-") {
              group.splice(i, 3, {
                type: "textord",
                mode: "text",
                loc: SourceLocation.range(a, group[i + 2]),
                text: "---"
              });
              n -= 2;
            } else {
              group.splice(i, 2, {
                type: "textord",
                mode: "text",
                loc: SourceLocation.range(a, group[i + 1]),
                text: "--"
              });
              n -= 1;
            }
          }

          if ((v === "'" || v === "`") && group[i + 1].text === v) {
            group.splice(i, 2, {
              type: "textord",
              mode: "text",
              loc: SourceLocation.range(a, group[i + 1]),
              text: v + v
            });
            n -= 1;
          }
        }
      }
      /**
       * Parse a single symbol out of the string. Here, we handle single character
       * symbols and special functions like \verb.
       */


      parseSymbol() {
        var nucleus = this.fetch();
        var text = nucleus.text;

        if (/^\\verb[^a-zA-Z]/.test(text)) {
          this.consume();
          var arg = text.slice(5);
          var star = arg.charAt(0) === "*";

          if (star) {
            arg = arg.slice(1);
          } // Lexer's tokenRegex is constructed to always have matching
          // first/last characters.


          if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
            throw new ParseError("\\verb assertion failed --\n                    please report what input caused this bug");
          }

          arg = arg.slice(1, -1); // remove first and last char

          return {
            type: "verb",
            mode: "text",
            body: arg,
            star
          };
        } // At this point, we should have a symbol, possibly with accents.
        // First expand any accented base symbol according to unicodeSymbols.


        if (unicodeSymbols.hasOwnProperty(text[0]) && !symbols[this.mode][text[0]]) {
          // This behavior is not strict (XeTeX-compatible) in math mode.
          if (this.settings.strict && this.mode === "math") {
            this.settings.reportNonstrict("unicodeTextInMathMode", "Accented Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
          }

          text = unicodeSymbols[text[0]] + text.substr(1);
        } // Strip off any combining characters


        var match = combiningDiacriticalMarksEndRegex.exec(text);

        if (match) {
          text = text.substring(0, match.index);

          if (text === 'i') {
            text = '\u0131'; // dotless i, in math and text mode
          } else if (text === 'j') {
            text = '\u0237'; // dotless j, in math and text mode
          }
        } // Recognize base symbol


        var symbol;

        if (symbols[this.mode][text]) {
          if (this.settings.strict && this.mode === 'math' && extraLatin.indexOf(text) >= 0) {
            this.settings.reportNonstrict("unicodeTextInMathMode", "Latin-1/Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
          }

          var group = symbols[this.mode][text].group;
          var loc = SourceLocation.range(nucleus);
          var s;

          if (ATOMS.hasOwnProperty(group)) {
            // $FlowFixMe
            var family = group;
            s = {
              type: "atom",
              mode: this.mode,
              family,
              loc,
              text
            };
          } else {
            // $FlowFixMe
            s = {
              type: group,
              mode: this.mode,
              loc,
              text
            };
          } // $FlowFixMe


          symbol = s;
        } else if (text.charCodeAt(0) >= 0x80) {
          // no symbol for e.g. ^
          if (this.settings.strict) {
            if (!supportedCodepoint(text.charCodeAt(0))) {
              this.settings.reportNonstrict("unknownSymbol", "Unrecognized Unicode character \"" + text[0] + "\"" + (" (" + text.charCodeAt(0) + ")"), nucleus);
            } else if (this.mode === "math") {
              this.settings.reportNonstrict("unicodeTextInMathMode", "Unicode text character \"" + text[0] + "\" used in math mode", nucleus);
            }
          } // All nonmathematical Unicode characters are rendered as if they
          // are in text mode (wrapped in \text) because that's what it
          // takes to render them in LaTeX.  Setting `mode: this.mode` is
          // another natural choice (the user requested math mode), but
          // this makes it more difficult for getCharacterMetrics() to
          // distinguish Unicode characters without metrics and those for
          // which we want to simulate the letter M.


          symbol = {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(nucleus),
            text
          };
        } else {
          return null; // EOF, ^, _, {, }, etc.
        }

        this.consume(); // Transform combining characters into accents

        if (match) {
          for (var i = 0; i < match[0].length; i++) {
            var accent = match[0][i];

            if (!unicodeAccents[accent]) {
              throw new ParseError("Unknown accent ' " + accent + "'", nucleus);
            }

            var command = unicodeAccents[accent][this.mode] || unicodeAccents[accent].text;

            if (!command) {
              throw new ParseError("Accent " + accent + " unsupported in " + this.mode + " mode", nucleus);
            }

            symbol = {
              type: "accent",
              mode: this.mode,
              loc: SourceLocation.range(nucleus),
              label: command,
              isStretchy: false,
              isShifty: true,
              // $FlowFixMe
              base: symbol
            };
          }
        } // $FlowFixMe


        return symbol;
      }

    }
    Parser.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];

    /**
     * Provides a single function for parsing an expression using a Parser
     * TODO(emily): Remove this
     */

    /**
     * Parses an expression using a Parser, then returns the parsed result.
     */
    var parseTree = function parseTree(toParse, settings) {
      if (!(typeof toParse === 'string' || toParse instanceof String)) {
        throw new TypeError('KaTeX can only parse string typed expression');
      }

      var parser = new Parser(toParse, settings); // Blank out any \df@tag to avoid spurious "Duplicate \tag" errors

      delete parser.gullet.macros.current["\\df@tag"];
      var tree = parser.parse(); // Prevent a color definition from persisting between calls to katex.render().

      delete parser.gullet.macros.current["\\current@color"];
      delete parser.gullet.macros.current["\\color"]; // If the input used \tag, it will set the \df@tag macro to the tag.
      // In this case, we separately parse the tag and wrap the tree.

      if (parser.gullet.macros.get("\\df@tag")) {
        if (!settings.displayMode) {
          throw new ParseError("\\tag works only in display equations");
        }

        tree = [{
          type: "tag",
          mode: "text",
          body: tree,
          tag: parser.subparse([new Token("\\df@tag")])
        }];
      }

      return tree;
    };

    /* eslint no-console:0 */

    /**
     * Parse and build an expression, and place that expression in the DOM node
     * given.
     */
    var render = function render(expression, baseNode, options) {
      baseNode.textContent = "";
      var node = renderToDomTree(expression, options).toNode();
      baseNode.appendChild(node);
    }; // KaTeX's styles don't work properly in quirks mode. Print out an error, and
    // disable rendering.


    if (typeof document !== "undefined") {
      if (document.compatMode !== "CSS1Compat") {
        typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your " + "website has a suitable doctype.");

        render = function render() {
          throw new ParseError("KaTeX doesn't work in quirks mode.");
        };
      }
    }
    /**
     * Parse and build an expression, and return the markup for that.
     */


    var renderToString = function renderToString(expression, options) {
      var markup = renderToDomTree(expression, options).toMarkup();
      return markup;
    };
    /**
     * Parse an expression and return the parse tree.
     */


    var generateParseTree = function generateParseTree(expression, options) {
      var settings = new Settings(options);
      return parseTree(expression, settings);
    };
    /**
     * If the given error is a KaTeX ParseError and options.throwOnError is false,
     * renders the invalid LaTeX as a span with hover title giving the KaTeX
     * error message.  Otherwise, simply throws the error.
     */


    var renderError = function renderError(error, expression, options) {
      if (options.throwOnError || !(error instanceof ParseError)) {
        throw error;
      }

      var node = buildCommon.makeSpan(["katex-error"], [new SymbolNode(expression)]);
      node.setAttribute("title", error.toString());
      node.setAttribute("style", "color:" + options.errorColor);
      return node;
    };
    /**
     * Generates and returns the katex build tree. This is used for advanced
     * use cases (like rendering to custom output).
     */


    var renderToDomTree = function renderToDomTree(expression, options) {
      var settings = new Settings(options);

      try {
        var tree = parseTree(expression, settings);
        return buildTree(tree, expression, settings);
      } catch (error) {
        return renderError(error, expression, settings);
      }
    };
    /**
     * Generates and returns the katex build tree, with just HTML (no MathML).
     * This is used for advanced use cases (like rendering to custom output).
     */


    var renderToHTMLTree = function renderToHTMLTree(expression, options) {
      var settings = new Settings(options);

      try {
        var tree = parseTree(expression, settings);
        return buildHTMLTree(tree, expression, settings);
      } catch (error) {
        return renderError(error, expression, settings);
      }
    };

    var katex = {
      /**
       * Current KaTeX version
       */
      version: "0.16.0",

      /**
       * Renders the given LaTeX into an HTML+MathML combination, and adds
       * it as a child to the specified DOM node.
       */
      render,

      /**
       * Renders the given LaTeX into an HTML+MathML combination string,
       * for sending to the client.
       */
      renderToString,

      /**
       * KaTeX error, usually during parsing.
       */
      ParseError,

      /**
       * The shema of Settings
       */
      SETTINGS_SCHEMA,

      /**
       * Parses the given LaTeX into KaTeX's internal parse tree structure,
       * without rendering to HTML or MathML.
       *
       * NOTE: This method is not currently recommended for public use.
       * The internal tree representation is unstable and is very likely
       * to change. Use at your own risk.
       */
      __parse: generateParseTree,

      /**
       * Renders the given LaTeX into an HTML+MathML internal DOM tree
       * representation, without flattening that representation to a string.
       *
       * NOTE: This method is not currently recommended for public use.
       * The internal tree representation is unstable and is very likely
       * to change. Use at your own risk.
       */
      __renderToDomTree: renderToDomTree,

      /**
       * Renders the given LaTeX into an HTML internal DOM tree representation,
       * without MathML and without flattening that representation to a string.
       *
       * NOTE: This method is not currently recommended for public use.
       * The internal tree representation is unstable and is very likely
       * to change. Use at your own risk.
       */
      __renderToHTMLTree: renderToHTMLTree,

      /**
       * extends internal font metrics object with a new object
       * each key in the new object represents a font name
      */
      __setFontMetrics: setFontMetrics,

      /**
       * adds a new symbol to builtin symbols table
       */
      __defineSymbol: defineSymbol,

      /**
       * adds a new macro to builtin macro list
       */
      __defineMacro: defineMacro,

      /**
       * Expose the dom tree node types, which can be useful for type checking nodes.
       *
       * NOTE: This method is not currently recommended for public use.
       * The internal tree representation is unstable and is very likely
       * to change. Use at your own risk.
       */
      __domTree: {
        Span,
        Anchor,
        SymbolNode,
        SvgNode,
        PathNode,
        LineNode
      }
    };

    /* src\components\InlineTex.svelte generated by Svelte v3.44.3 */
    const file$3 = "src\\components\\InlineTex.svelte";

    function create_fragment$3(ctx) {
    	let p;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			p = element("p");
    			if (default_slot) default_slot.c();
    			set_style(p, "line-height", "1.3");
    			add_location(p, file$3, 13, 0, 300);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);

    			if (default_slot) {
    				default_slot.m(p, null);
    			}

    			/*p_binding*/ ctx[3](p);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (default_slot) default_slot.d(detaching);
    			/*p_binding*/ ctx[3](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InlineTex', slots, ['default']);
    	let element;
    	onMount(() => $$invalidate(0, element.innerHTML = element.innerHTML.replace(/<i>(.*?)<\/i>/g, (_, s) => katex.renderToString(s, { throwOnError: false })), element));
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InlineTex> was created with unknown prop '${key}'`);
    	});

    	function p_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(0, element);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ onMount, katex, element });

    	$$self.$inject_state = $$props => {
    		if ('element' in $$props) $$invalidate(0, element = $$props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [element, $$scope, slots, p_binding];
    }

    class InlineTex extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InlineTex",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src\components\Sidebar.svelte generated by Svelte v3.44.3 */

    const { document: document_1 } = globals;
    const file$2 = "src\\components\\Sidebar.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (67:4) {#if readMore}
    function create_if_block$1(ctx) {
    	let inlinetex;
    	let current;

    	inlinetex = new InlineTex({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(inlinetex.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(inlinetex, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(inlinetex.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(inlinetex.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(inlinetex, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(67:4) {#if readMore}",
    		ctx
    	});

    	return block;
    }

    // (68:8) <InlineTex>
    function create_default_slot(ctx) {
    	let t0;
    	let i0;
    	let t2;
    	let i1;
    	let t4;
    	let i2;
    	let t7;
    	let i3;
    	let t9;
    	let i4;
    	let t11;
    	let br0;
    	let br1;
    	let t12;
    	let i5;
    	let t14;
    	let i6;
    	let t16;
    	let i7;
    	let t18;
    	let i8;
    	let t20;
    	let i9;
    	let t22;
    	let i10;
    	let t24;
    	let br2;
    	let br3;
    	let t25;
    	let i11;
    	let t27;
    	let i12;
    	let t29;
    	let i13;
    	let t31;
    	let i14;
    	let t33;
    	let i15;
    	let t35;
    	let i16;
    	let t37;
    	let i17;
    	let t39;
    	let strong0;
    	let t41;
    	let strong1;
    	let t43;
    	let strong2;
    	let t45;
    	let i18;
    	let t47;
    	let i19;
    	let t49;
    	let br4;
    	let br5;
    	let t50;
    	let a;
    	let t52;

    	const block = {
    		c: function create() {
    			t0 = text$2("Complex numbers are in the form of ");
    			i0 = element("i");
    			i0.textContent = "a + ib";
    			t2 = text$2(". Here, ");
    			i1 = element("i");
    			i1.textContent = "i";
    			t4 = text$2(" is the ");
    			i2 = element("i");
    			i2.textContent = `\\sqrt${-1}`;
    			t7 = text$2(" and ");
    			i3 = element("i");
    			i3.textContent = "a";
    			t9 = text$2(" is a real number and ");
    			i4 = element("i");
    			i4.textContent = "b";
    			t11 = text$2(" is the real part of the imaginary number.");
    			br0 = element("br");
    			br1 = element("br");
    			t12 = text$2("\r\n            \r\n            A complex function is a function from a complex number to a complex number.\r\n            Here ");
    			i5 = element("i");
    			i5.textContent = "f(z) = w";
    			t14 = text$2(" is a function, where ");
    			i6 = element("i");
    			i6.textContent = "z";
    			t16 = text$2(" and ");
    			i7 = element("i");
    			i7.textContent = "w";
    			t18 = text$2(" is a complex number and can be expressed as ");
    			i8 = element("i");
    			i8.textContent = "z = x + yi";
    			t20 = text$2(" and ");
    			i9 = element("i");
    			i9.textContent = "w = u + iv";
    			t22 = text$2(" respectively. (i.e. ");
    			i10 = element("i");
    			i10.textContent = "f(x + iy) = u + iv";
    			t24 = text$2(").");
    			br2 = element("br");
    			br3 = element("br");
    			t25 = text$2("\r\n\r\n            To plot a complex function in a graph, you would need four dimensions for ");
    			i11 = element("i");
    			i11.textContent = "x";
    			t27 = text$2(", ");
    			i12 = element("i");
    			i12.textContent = "y";
    			t29 = text$2(", ");
    			i13 = element("i");
    			i13.textContent = "u";
    			t31 = text$2(" and ");
    			i14 = element("i");
    			i14.textContent = "v";
    			t33 = text$2(". \r\n            Here, ");
    			i15 = element("i");
    			i15.textContent = "x";
    			t35 = text$2(", ");
    			i16 = element("i");
    			i16.textContent = "y";
    			t37 = text$2(" and ");
    			i17 = element("i");
    			i17.textContent = "u";
    			t39 = text$2(" are represented with ");
    			strong0 = element("strong");
    			strong0.textContent = "Z";
    			t41 = text$2(", ");
    			strong1 = element("strong");
    			strong1.textContent = "Y";
    			t43 = text$2(" and ");
    			strong2 = element("strong");
    			strong2.textContent = "X";
    			t45 = text$2(" axes. \r\n            We still have the ");
    			i18 = element("i");
    			i18.textContent = "v";
    			t47 = text$2(" variable and since, we ran out of dimensions, we will be using colours to represent the ");
    			i19 = element("i");
    			i19.textContent = "v";
    			t49 = text$2(" variable with a heatmap shown below.\r\n            ");
    			br4 = element("br");
    			br5 = element("br");
    			t50 = text$2("\r\n\r\n            This graph system is similar to ");
    			a = element("a");
    			a.textContent = "Reimann surface";
    			t52 = text$2(" but uses a set of lines instead of a surface.");
    			add_location(i0, file$2, 68, 47, 2275);
    			add_location(i1, file$2, 68, 68, 2296);
    			add_location(i2, file$2, 68, 84, 2312);
    			add_location(i3, file$2, 68, 105, 2333);
    			add_location(i4, file$2, 68, 135, 2363);
    			add_location(br0, file$2, 68, 185, 2413);
    			add_location(br1, file$2, 68, 190, 2418);
    			add_location(i5, file$2, 71, 17, 2545);
    			add_location(i6, file$2, 71, 54, 2582);
    			add_location(i7, file$2, 71, 67, 2595);
    			add_location(i8, file$2, 71, 120, 2648);
    			add_location(i9, file$2, 71, 142, 2670);
    			add_location(i10, file$2, 71, 180, 2708);
    			add_location(br2, file$2, 71, 207, 2735);
    			add_location(br3, file$2, 71, 212, 2740);
    			add_location(i11, file$2, 73, 86, 2835);
    			add_location(i12, file$2, 73, 96, 2845);
    			add_location(i13, file$2, 73, 106, 2855);
    			add_location(i14, file$2, 73, 119, 2868);
    			add_location(i15, file$2, 74, 18, 2898);
    			add_location(i16, file$2, 74, 28, 2908);
    			add_location(i17, file$2, 74, 41, 2921);
    			add_location(strong0, file$2, 74, 71, 2951);
    			add_location(strong1, file$2, 74, 91, 2971);
    			add_location(strong2, file$2, 74, 114, 2994);
    			add_location(i18, file$2, 75, 30, 3051);
    			add_location(i19, file$2, 75, 127, 3148);
    			add_location(br4, file$2, 76, 12, 3207);
    			add_location(br5, file$2, 76, 17, 3212);
    			attr_dev(a, "href", "https://en.wikipedia.org/wiki/Riemann_surface");
    			set_style(a, "color", "black");
    			add_location(a, file$2, 78, 44, 3265);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, i0, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, i1, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, i2, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, i3, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, i4, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, br0, anchor);
    			insert_dev(target, br1, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, i5, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, i6, anchor);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, i7, anchor);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, i8, anchor);
    			insert_dev(target, t20, anchor);
    			insert_dev(target, i9, anchor);
    			insert_dev(target, t22, anchor);
    			insert_dev(target, i10, anchor);
    			insert_dev(target, t24, anchor);
    			insert_dev(target, br2, anchor);
    			insert_dev(target, br3, anchor);
    			insert_dev(target, t25, anchor);
    			insert_dev(target, i11, anchor);
    			insert_dev(target, t27, anchor);
    			insert_dev(target, i12, anchor);
    			insert_dev(target, t29, anchor);
    			insert_dev(target, i13, anchor);
    			insert_dev(target, t31, anchor);
    			insert_dev(target, i14, anchor);
    			insert_dev(target, t33, anchor);
    			insert_dev(target, i15, anchor);
    			insert_dev(target, t35, anchor);
    			insert_dev(target, i16, anchor);
    			insert_dev(target, t37, anchor);
    			insert_dev(target, i17, anchor);
    			insert_dev(target, t39, anchor);
    			insert_dev(target, strong0, anchor);
    			insert_dev(target, t41, anchor);
    			insert_dev(target, strong1, anchor);
    			insert_dev(target, t43, anchor);
    			insert_dev(target, strong2, anchor);
    			insert_dev(target, t45, anchor);
    			insert_dev(target, i18, anchor);
    			insert_dev(target, t47, anchor);
    			insert_dev(target, i19, anchor);
    			insert_dev(target, t49, anchor);
    			insert_dev(target, br4, anchor);
    			insert_dev(target, br5, anchor);
    			insert_dev(target, t50, anchor);
    			insert_dev(target, a, anchor);
    			insert_dev(target, t52, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(i0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(i1);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(i2);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(i3);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(i4);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(br0);
    			if (detaching) detach_dev(br1);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(i5);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(i6);
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(i7);
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(i8);
    			if (detaching) detach_dev(t20);
    			if (detaching) detach_dev(i9);
    			if (detaching) detach_dev(t22);
    			if (detaching) detach_dev(i10);
    			if (detaching) detach_dev(t24);
    			if (detaching) detach_dev(br2);
    			if (detaching) detach_dev(br3);
    			if (detaching) detach_dev(t25);
    			if (detaching) detach_dev(i11);
    			if (detaching) detach_dev(t27);
    			if (detaching) detach_dev(i12);
    			if (detaching) detach_dev(t29);
    			if (detaching) detach_dev(i13);
    			if (detaching) detach_dev(t31);
    			if (detaching) detach_dev(i14);
    			if (detaching) detach_dev(t33);
    			if (detaching) detach_dev(i15);
    			if (detaching) detach_dev(t35);
    			if (detaching) detach_dev(i16);
    			if (detaching) detach_dev(t37);
    			if (detaching) detach_dev(i17);
    			if (detaching) detach_dev(t39);
    			if (detaching) detach_dev(strong0);
    			if (detaching) detach_dev(t41);
    			if (detaching) detach_dev(strong1);
    			if (detaching) detach_dev(t43);
    			if (detaching) detach_dev(strong2);
    			if (detaching) detach_dev(t45);
    			if (detaching) detach_dev(i18);
    			if (detaching) detach_dev(t47);
    			if (detaching) detach_dev(i19);
    			if (detaching) detach_dev(t49);
    			if (detaching) detach_dev(br4);
    			if (detaching) detach_dev(br5);
    			if (detaching) detach_dev(t50);
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t52);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(68:8) <InlineTex>",
    		ctx
    	});

    	return block;
    }

    // (117:8) {#each ['Z', 'X', 'Y'] as x}
    function create_each_block(ctx) {
    	let input0;
    	let t0;
    	let strong;
    	let t1_value = /*DIMENSION_MAP*/ ctx[12][/*x*/ ctx[11]] + "";
    	let t1;
    	let t2;
    	let input1;
    	let t3;
    	let div;
    	let mounted;
    	let dispose;

    	function change_handler(...args) {
    		return /*change_handler*/ ctx[19](/*x*/ ctx[11], ...args);
    	}

    	function change_handler_1(...args) {
    		return /*change_handler_1*/ ctx[20](/*x*/ ctx[11], ...args);
    	}

    	const block = {
    		c: function create() {
    			input0 = element("input");
    			t0 = text$2(" ≤ \r\n\r\n            ");
    			strong = element("strong");
    			t1 = text$2(t1_value);
    			t2 = text$2(" ≤ \r\n            ");
    			input1 = element("input");
    			t3 = space();
    			div = element("div");
    			attr_dev(input0, "type", "number");
    			input0.value = "-10";
    			attr_dev(input0, "id", "min-" + /*x*/ ctx[11]);
    			attr_dev(input0, "class", "svelte-9h67e5");
    			add_location(input0, file$2, 117, 12, 4672);
    			add_location(strong, file$2, 132, 12, 5174);
    			attr_dev(input1, "type", "number");
    			input1.value = "10";
    			attr_dev(input1, "id", "max-" + /*x*/ ctx[11]);
    			attr_dev(input1, "class", "svelte-9h67e5");
    			add_location(input1, file$2, 133, 12, 5226);
    			set_style(div, "margin-top", "4px");
    			add_location(div, file$2, 148, 12, 5724);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, strong, anchor);
    			append_dev(strong, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, input1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", change_handler, false, false, false),
    					listen_dev(input1, "change", change_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(strong);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(input1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(117:8) {#each ['Z', 'X', 'Y'] as x}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let link;
    	let t0;
    	let div4;
    	let h2;
    	let t2;
    	let p0;
    	let t4;
    	let t5;
    	let a0;
    	let t6;
    	let t7_value = (/*readMore*/ ctx[10] ? 'less...' : 'more...') + "";
    	let t7;
    	let t8;
    	let h30;
    	let t10;
    	let div0;
    	let input0;
    	let t11;
    	let a1;
    	let t12_value = (/*graphError*/ ctx[9] ? 'Error!' : 'Graph') + "";
    	let t12;
    	let t13;
    	let html_tag;
    	let raw0_value = /*texToStr*/ ctx[13](`f(z) = ${/*tex*/ ctx[6]}`) + "";
    	let t14;
    	let h31;
    	let t16;
    	let div2;
    	let p1;
    	let html_tag_1;
    	let raw1_value = /*texToStr*/ ctx[13]('z = x + yi') + "";
    	let t17;
    	let html_tag_2;
    	let raw2_value = /*texToStr*/ ctx[13]('f(z) = w = u + vi') + "";
    	let t18;
    	let strong0;
    	let t20;
    	let t21;
    	let br0;
    	let t22;
    	let strong1;
    	let t24;
    	let t25_value = (isNaN(/*y*/ ctx[3]) ? 0 : /*y*/ ctx[3]) + "";
    	let t25;
    	let br1;
    	let t26;
    	let strong2;
    	let t28;
    	let t29;
    	let br2;
    	let t30;
    	let strong3;
    	let t32;
    	let t33;
    	let t34;
    	let div1;
    	let t36;
    	let span;
    	let p2;
    	let t37_value = /*heatMapIndices*/ ctx[1][0].toFixed(2) + "";
    	let t37;
    	let t38;
    	let p3;
    	let t39_value = /*heatMapIndices*/ ctx[1][1].toFixed(2) + "";
    	let t39;
    	let t40;
    	let h40;
    	let t42;
    	let t43;
    	let strong4;
    	let t45;
    	let input1;
    	let t46;
    	let h41;
    	let t48;
    	let input2;
    	let t49;
    	let h42;
    	let t51;
    	let input3;
    	let t52;
    	let h32;
    	let t54;
    	let a2;
    	let t56;
    	let a3;
    	let br3;
    	let t58;
    	let div3;
    	let input4;
    	let t59;
    	let label0;
    	let br4;
    	let t61;
    	let input5;
    	let t62;
    	let label1;
    	let br5;
    	let t64;
    	let br6;
    	let t65;
    	let hr;
    	let t66;
    	let a4;
    	let br7;
    	let t68;
    	let t69_value = new Date().getFullYear() + "";
    	let t69;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*readMore*/ ctx[10] && create_if_block$1(ctx);
    	let each_value = ['Z', 'X', 'Y'];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < 3; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			link = element("link");
    			t0 = space();
    			div4 = element("div");
    			h2 = element("h2");
    			h2.textContent = "3D Complex Graph";
    			t2 = space();
    			p0 = element("p");
    			p0.textContent = "A simple three dimensional graph system to visualize 3D complex functions.";
    			t4 = space();
    			if (if_block) if_block.c();
    			t5 = space();
    			a0 = element("a");
    			t6 = text$2("Read ");
    			t7 = text$2(t7_value);
    			t8 = space();
    			h30 = element("h3");
    			h30.textContent = "Equation:";
    			t10 = space();
    			div0 = element("div");
    			input0 = element("input");
    			t11 = space();
    			a1 = element("a");
    			t12 = text$2(t12_value);
    			t13 = space();
    			html_tag = new HtmlTag();
    			t14 = space();
    			h31 = element("h3");
    			h31.textContent = "Values:";
    			t16 = space();
    			div2 = element("div");
    			p1 = element("p");
    			html_tag_1 = new HtmlTag();
    			t17 = space();
    			html_tag_2 = new HtmlTag();
    			t18 = space();
    			strong0 = element("strong");
    			strong0.textContent = "X";
    			t20 = text$2(": ");
    			t21 = text$2(/*z*/ ctx[4]);
    			br0 = element("br");
    			t22 = space();
    			strong1 = element("strong");
    			strong1.textContent = "Y";
    			t24 = text$2(": ");
    			t25 = text$2(t25_value);
    			br1 = element("br");
    			t26 = space();
    			strong2 = element("strong");
    			strong2.textContent = "U";
    			t28 = text$2(": ");
    			t29 = text$2(/*x*/ ctx[11]);
    			br2 = element("br");
    			t30 = space();
    			strong3 = element("strong");
    			strong3.textContent = "V";
    			t32 = text$2(": ");
    			t33 = text$2(/*v*/ ctx[5]);
    			t34 = space();
    			div1 = element("div");
    			div1.textContent = "V";
    			t36 = space();
    			span = element("span");
    			p2 = element("p");
    			t37 = text$2(t37_value);
    			t38 = space();
    			p3 = element("p");
    			t39 = text$2(t39_value);
    			t40 = space();
    			h40 = element("h4");
    			h40.textContent = "Range:";
    			t42 = space();

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks[i].c();
    			}

    			t43 = space();
    			strong4 = element("strong");
    			strong4.textContent = "Interval (Y):";
    			t45 = space();
    			input1 = element("input");
    			t46 = space();
    			h41 = element("h4");
    			h41.textContent = "Input:";
    			t48 = space();
    			input2 = element("input");
    			t49 = space();
    			h42 = element("h4");
    			h42.textContent = "Output:";
    			t51 = space();
    			input3 = element("input");
    			t52 = space();
    			h32 = element("h3");
    			h32.textContent = "Settings:";
    			t54 = space();
    			a2 = element("a");
    			a2.textContent = "Zoom In";
    			t56 = space();
    			a3 = element("a");
    			a3.textContent = "Zoom Out";
    			br3 = element("br");
    			t58 = space();
    			div3 = element("div");
    			input4 = element("input");
    			t59 = space();
    			label0 = element("label");
    			label0.textContent = "Axes";
    			br4 = element("br");
    			t61 = space();
    			input5 = element("input");
    			t62 = space();
    			label1 = element("label");
    			label1.textContent = "Labels";
    			br5 = element("br");
    			t64 = space();
    			br6 = element("br");
    			t65 = space();
    			hr = element("hr");
    			t66 = text$2("\r\n\r\n    Made by ");
    			a4 = element("a");
    			a4.textContent = "TheSudarsanDev";
    			br7 = element("br");
    			t68 = text$2("\r\n    TheSudarsanDev © ");
    			t69 = text$2(t69_value);
    			attr_dev(link, "rel", "stylesheet");
    			attr_dev(link, "href", "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css");
    			attr_dev(link, "integrity", "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X");
    			attr_dev(link, "crossorigin", "anonymous");
    			add_location(link, file$2, 56, 1, 1800);
    			add_location(h2, file$2, 60, 4, 2053);
    			add_location(p0, file$2, 62, 4, 2086);
    			attr_dev(a0, "href", "#more");
    			attr_dev(a0, "class", "author svelte-9h67e5");
    			add_location(a0, file$2, 82, 4, 3449);
    			attr_dev(h30, "class", "svelte-9h67e5");
    			add_location(h30, file$2, 84, 4, 3569);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "class", "svelte-9h67e5");
    			add_location(input0, file$2, 86, 8, 3625);
    			attr_dev(a1, "href", "#graph");
    			attr_dev(a1, "class", "btn svelte-9h67e5");
    			set_style(a1, "background-color", /*graphError*/ ctx[9] ? 'red' : 'black');
    			set_style(a1, "width", "calc(100% - 18px)");
    			set_style(a1, "margin-left", "0");
    			set_style(a1, "text-align", "center");
    			add_location(a1, file$2, 87, 8, 3677);
    			html_tag.a = null;
    			attr_dev(div0, "class", "contain svelte-9h67e5");
    			add_location(div0, file$2, 85, 4, 3594);
    			attr_dev(h31, "class", "svelte-9h67e5");
    			add_location(h31, file$2, 97, 4, 4013);
    			html_tag_1.a = t17;
    			html_tag_2.a = null;
    			attr_dev(p1, "class", "value-expr svelte-9h67e5");
    			add_location(p1, file$2, 99, 8, 4067);
    			add_location(strong0, file$2, 104, 8, 4210);
    			add_location(br0, file$2, 104, 31, 4233);
    			add_location(strong1, file$2, 105, 8, 4248);
    			add_location(br1, file$2, 105, 46, 4286);
    			add_location(strong2, file$2, 106, 8, 4301);
    			add_location(br2, file$2, 106, 31, 4324);
    			add_location(strong3, file$2, 107, 8, 4339);
    			attr_dev(div1, "class", "heatmap svelte-9h67e5");
    			add_location(div1, file$2, 109, 8, 4374);
    			attr_dev(p2, "class", "svelte-9h67e5");
    			add_location(p2, file$2, 111, 12, 4461);
    			set_style(p3, "text-align", "right");
    			attr_dev(p3, "class", "svelte-9h67e5");
    			add_location(p3, file$2, 112, 12, 4512);
    			attr_dev(span, "class", "flex flex-nowrap hmi svelte-9h67e5");
    			add_location(span, file$2, 110, 8, 4412);
    			attr_dev(h40, "class", "svelte-9h67e5");
    			add_location(h40, file$2, 115, 8, 4605);
    			add_location(strong4, file$2, 151, 8, 5784);
    			attr_dev(input1, "type", "number");
    			input1.value = "1";
    			attr_dev(input1, "class", "svelte-9h67e5");
    			add_location(input1, file$2, 152, 8, 5825);
    			attr_dev(h41, "class", "svelte-9h67e5");
    			add_location(h41, file$2, 163, 8, 6135);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "class", "svelte-9h67e5");
    			add_location(input2, file$2, 164, 8, 6160);
    			attr_dev(h42, "class", "svelte-9h67e5");
    			add_location(h42, file$2, 184, 8, 6888);
    			input3.readOnly = true;
    			attr_dev(input3, "type", "text");
    			input3.value = /*output*/ ctx[8];
    			attr_dev(input3, "class", "svelte-9h67e5");
    			add_location(input3, file$2, 185, 8, 6914);
    			attr_dev(div2, "class", "contain svelte-9h67e5");
    			add_location(div2, file$2, 98, 4, 4036);
    			attr_dev(h32, "class", "svelte-9h67e5");
    			add_location(h32, file$2, 188, 4, 6978);
    			attr_dev(a2, "class", "btn svelte-9h67e5");
    			attr_dev(a2, "href", "#graph");
    			add_location(a2, file$2, 190, 4, 7005);
    			attr_dev(a3, "class", "btn svelte-9h67e5");
    			attr_dev(a3, "href", "#graph");
    			add_location(a3, file$2, 191, 4, 7081);
    			add_location(br3, file$2, 191, 79, 7156);
    			attr_dev(input4, "type", "checkbox");
    			attr_dev(input4, "name", "axes");
    			attr_dev(input4, "class", "svelte-9h67e5");
    			add_location(input4, file$2, 194, 8, 7225);
    			attr_dev(label0, "for", "axes");
    			add_location(label0, file$2, 195, 8, 7301);
    			add_location(br4, file$2, 195, 38, 7331);
    			attr_dev(input5, "type", "checkbox");
    			attr_dev(input5, "name", "labels");
    			attr_dev(input5, "class", "svelte-9h67e5");
    			add_location(input5, file$2, 197, 8, 7348);
    			attr_dev(label1, "for", "axes");
    			add_location(label1, file$2, 198, 8, 7428);
    			add_location(br5, file$2, 198, 40, 7460);
    			attr_dev(div3, "class", "contain svelte-9h67e5");
    			set_style(div3, "margin-top", "5px");
    			add_location(div3, file$2, 193, 4, 7169);
    			add_location(br6, file$2, 199, 10, 7477);
    			add_location(hr, file$2, 201, 4, 7490);
    			attr_dev(a4, "href", "https://github.com/scientific-dev");
    			attr_dev(a4, "class", "author svelte-9h67e5");
    			add_location(a4, file$2, 203, 12, 7511);
    			add_location(br7, file$2, 203, 89, 7588);
    			attr_dev(div4, "class", "sidebar shadow svelte-9h67e5");
    			add_location(div4, file$2, 59, 0, 2019);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document_1.head, link);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, h2);
    			append_dev(div4, t2);
    			append_dev(div4, p0);
    			append_dev(div4, t4);
    			if (if_block) if_block.m(div4, null);
    			append_dev(div4, t5);
    			append_dev(div4, a0);
    			append_dev(a0, t6);
    			append_dev(a0, t7);
    			append_dev(div4, t8);
    			append_dev(div4, h30);
    			append_dev(div4, t10);
    			append_dev(div4, div0);
    			append_dev(div0, input0);
    			set_input_value(input0, /*eqnInput*/ ctx[2]);
    			append_dev(div0, t11);
    			append_dev(div0, a1);
    			append_dev(a1, t12);
    			append_dev(div0, t13);
    			html_tag.m(raw0_value, div0);
    			append_dev(div4, t14);
    			append_dev(div4, h31);
    			append_dev(div4, t16);
    			append_dev(div4, div2);
    			append_dev(div2, p1);
    			html_tag_1.m(raw1_value, p1);
    			append_dev(p1, t17);
    			html_tag_2.m(raw2_value, p1);
    			append_dev(div2, t18);
    			append_dev(div2, strong0);
    			append_dev(div2, t20);
    			append_dev(div2, t21);
    			append_dev(div2, br0);
    			append_dev(div2, t22);
    			append_dev(div2, strong1);
    			append_dev(div2, t24);
    			append_dev(div2, t25);
    			append_dev(div2, br1);
    			append_dev(div2, t26);
    			append_dev(div2, strong2);
    			append_dev(div2, t28);
    			append_dev(div2, t29);
    			append_dev(div2, br2);
    			append_dev(div2, t30);
    			append_dev(div2, strong3);
    			append_dev(div2, t32);
    			append_dev(div2, t33);
    			append_dev(div2, t34);
    			append_dev(div2, div1);
    			append_dev(div2, t36);
    			append_dev(div2, span);
    			append_dev(span, p2);
    			append_dev(p2, t37);
    			append_dev(span, t38);
    			append_dev(span, p3);
    			append_dev(p3, t39);
    			append_dev(div2, t40);
    			append_dev(div2, h40);
    			append_dev(div2, t42);

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks[i].m(div2, null);
    			}

    			append_dev(div2, t43);
    			append_dev(div2, strong4);
    			append_dev(div2, t45);
    			append_dev(div2, input1);
    			append_dev(div2, t46);
    			append_dev(div2, h41);
    			append_dev(div2, t48);
    			append_dev(div2, input2);
    			set_input_value(input2, /*input*/ ctx[7]);
    			append_dev(div2, t49);
    			append_dev(div2, h42);
    			append_dev(div2, t51);
    			append_dev(div2, input3);
    			append_dev(div4, t52);
    			append_dev(div4, h32);
    			append_dev(div4, t54);
    			append_dev(div4, a2);
    			append_dev(div4, t56);
    			append_dev(div4, a3);
    			append_dev(div4, br3);
    			append_dev(div4, t58);
    			append_dev(div4, div3);
    			append_dev(div3, input4);
    			input4.checked = /*graph*/ ctx[0].drawAxes;
    			append_dev(div3, t59);
    			append_dev(div3, label0);
    			append_dev(div3, br4);
    			append_dev(div3, t61);
    			append_dev(div3, input5);
    			input5.checked = /*graph*/ ctx[0].drawLabels;
    			append_dev(div3, t62);
    			append_dev(div3, label1);
    			append_dev(div3, br5);
    			append_dev(div3, t64);
    			append_dev(div4, br6);
    			append_dev(div4, t65);
    			append_dev(div4, hr);
    			append_dev(div4, t66);
    			append_dev(div4, a4);
    			append_dev(div4, br7);
    			append_dev(div4, t68);
    			append_dev(div4, t69);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(a0, "click", /*click_handler*/ ctx[17], false, false, false),
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[18]),
    					listen_dev(a1, "click", /*drawGraph*/ ctx[14], false, false, false),
    					listen_dev(input1, "change", /*change_handler_2*/ ctx[21], false, false, false),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[22]),
    					listen_dev(input2, "change", /*change_handler_3*/ ctx[23], false, false, false),
    					listen_dev(a2, "click", /*click_handler_1*/ ctx[24], false, false, false),
    					listen_dev(a3, "click", /*click_handler_2*/ ctx[25], false, false, false),
    					listen_dev(input4, "change", /*input4_change_handler*/ ctx[26]),
    					listen_dev(input5, "change", /*input5_change_handler*/ ctx[27])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*readMore*/ ctx[10]) {
    				if (if_block) {
    					if (dirty[0] & /*readMore*/ 1024) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div4, t5);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty[0] & /*readMore*/ 1024) && t7_value !== (t7_value = (/*readMore*/ ctx[10] ? 'less...' : 'more...') + "")) set_data_dev(t7, t7_value);

    			if (dirty[0] & /*eqnInput*/ 4 && input0.value !== /*eqnInput*/ ctx[2]) {
    				set_input_value(input0, /*eqnInput*/ ctx[2]);
    			}

    			if ((!current || dirty[0] & /*graphError*/ 512) && t12_value !== (t12_value = (/*graphError*/ ctx[9] ? 'Error!' : 'Graph') + "")) set_data_dev(t12, t12_value);

    			if (!current || dirty[0] & /*graphError*/ 512) {
    				set_style(a1, "background-color", /*graphError*/ ctx[9] ? 'red' : 'black');
    			}

    			if ((!current || dirty[0] & /*tex*/ 64) && raw0_value !== (raw0_value = /*texToStr*/ ctx[13](`f(z) = ${/*tex*/ ctx[6]}`) + "")) html_tag.p(raw0_value);
    			if (!current || dirty[0] & /*z*/ 16) set_data_dev(t21, /*z*/ ctx[4]);
    			if ((!current || dirty[0] & /*y*/ 8) && t25_value !== (t25_value = (isNaN(/*y*/ ctx[3]) ? 0 : /*y*/ ctx[3]) + "")) set_data_dev(t25, t25_value);
    			if (!current || dirty[0] & /*x*/ 2048) set_data_dev(t29, /*x*/ ctx[11]);
    			if (!current || dirty[0] & /*v*/ 32) set_data_dev(t33, /*v*/ ctx[5]);
    			if ((!current || dirty[0] & /*heatMapIndices*/ 2) && t37_value !== (t37_value = /*heatMapIndices*/ ctx[1][0].toFixed(2) + "")) set_data_dev(t37, t37_value);
    			if ((!current || dirty[0] & /*heatMapIndices*/ 2) && t39_value !== (t39_value = /*heatMapIndices*/ ctx[1][1].toFixed(2) + "")) set_data_dev(t39, t39_value);

    			if (dirty[0] & /*graph, DIMENSION_MAP*/ 4097) {
    				each_value = ['Z', 'X', 'Y'];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < 3; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div2, t43);
    					}
    				}

    				for (; i < 3; i += 1) {
    					each_blocks[i].d(1);
    				}
    			}

    			if (dirty[0] & /*input*/ 128 && input2.value !== /*input*/ ctx[7]) {
    				set_input_value(input2, /*input*/ ctx[7]);
    			}

    			if (!current || dirty[0] & /*output*/ 256 && input3.value !== /*output*/ ctx[8]) {
    				prop_dev(input3, "value", /*output*/ ctx[8]);
    			}

    			if (dirty[0] & /*graph*/ 1) {
    				input4.checked = /*graph*/ ctx[0].drawAxes;
    			}

    			if (dirty[0] & /*graph*/ 1) {
    				input5.checked = /*graph*/ ctx[0].drawLabels;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div4);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Sidebar', slots, []);
    	let { hoverMarkerPosition, heatMapIndices, graph } = $$props;
    	const DIMENSION_MAP = { X: 'U', Y: 'Y', Z: 'X' };
    	let round = a => parseFloat(a?.toFixed(2));
    	let y = 0, x = 0, z = 0, v = 0;
    	let eqnInput = 'z ^ 2', tex = '';
    	let input, output = '';
    	let graphError = false, readMore = false;

    	function texToStr(string) {
    		return katex.renderToString(string, { displayMode: true, throwOnError: false });
    	}

    	function drawGraph() {
    		try {
    			let compiled = parse(eqnInput).compile();
    			compiled.evaluate({ z: Complex({ re: 0, im: 1 }), x: 0, y: 0 }); // tes
    			graph.clear();
    			graph.plot(compiled);
    			$$invalidate(9, graphError = false);
    		} catch(e) {
    			$$invalidate(9, graphError = true);
    		}
    	}

    	function updateInputAndOutput() {
    		let l = graph.compiled.evaluate({ z: Complex({ re: z, im: y }), x: z, y });
    		$$invalidate(5, v = round(typeof l == 'object' ? l.im : 0));
    		$$invalidate(11, x = round(typeof l == 'object' ? l.re : 0));
    		$$invalidate(7, input = `${z} ${y < 0 ? '-' : ' +'} ${Math.abs(y)}i`);
    		$$invalidate(8, output = typeof l == 'object' ? l.format({ precision: 4 }) : l);
    	}

    	function updateXYZ() {
    		$$invalidate(3, y = round(hoverMarkerPosition.y));
    		$$invalidate(11, x = round(hoverMarkerPosition.x));
    		$$invalidate(4, z = round(hoverMarkerPosition.z));
    		if (graph.compiled) updateInputAndOutput();
    	}

    	const writable_props = ['hoverMarkerPosition', 'heatMapIndices', 'graph'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Sidebar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(10, readMore = !readMore);

    	function input0_input_handler() {
    		eqnInput = this.value;
    		$$invalidate(2, eqnInput);
    	}

    	const change_handler = (x, e) => {
    		let value = parseFloat(e.target.value);
    		let max = graph[`max${x}`];
    		value = max >= value ? value : max - 1;
    		$$invalidate(0, graph[`min${x}`] = value, graph);
    		e.target.value = value;
    		graph.resizeGraphSpace();
    	};

    	const change_handler_1 = (x, e) => {
    		let value = parseFloat(e.target.value);
    		let min = graph[`min${x}`];
    		value = min <= value ? value : min + 1;
    		$$invalidate(0, graph[`max${x}`] = value, graph);
    		e.target.value = value;
    		graph.resizeGraphSpace();
    	};

    	const change_handler_2 = e => {
    		let value = parseFloat(e.target.value);
    		if (value <= 0) return;
    		$$invalidate(0, graph.intervalY = value, graph);
    		graph.resizeGraphSpace();
    	};

    	function input2_input_handler() {
    		input = this.value;
    		$$invalidate(7, input);
    	}

    	const change_handler_3 = () => {
    		try {
    			let { re, im } = Complex(input);
    			$$invalidate(4, z = re);
    			$$invalidate(3, y = im);
    			document.getElementById('min-Y').value = $$invalidate(0, graph.minY = y - 5, graph);
    			document.getElementById('max-Y').value = $$invalidate(0, graph.maxY = y + 5, graph);
    			document.getElementById('min-Z').value = $$invalidate(0, graph.minZ = z - 5, graph);
    			document.getElementById('max-Z').value = $$invalidate(0, graph.maxZ = z + 5, graph);
    			graph.resizeGraphSpace();
    			updateInputAndOutput();
    		} catch(e) {
    			
    		}
    	};

    	const click_handler_1 = () => graph.zoom();
    	const click_handler_2 = () => graph.zoom(true);

    	function input4_change_handler() {
    		graph.drawAxes = this.checked;
    		$$invalidate(0, graph);
    	}

    	function input5_change_handler() {
    		graph.drawLabels = this.checked;
    		$$invalidate(0, graph);
    	}

    	$$self.$$set = $$props => {
    		if ('hoverMarkerPosition' in $$props) $$invalidate(16, hoverMarkerPosition = $$props.hoverMarkerPosition);
    		if ('heatMapIndices' in $$props) $$invalidate(1, heatMapIndices = $$props.heatMapIndices);
    		if ('graph' in $$props) $$invalidate(0, graph = $$props.graph);
    	};

    	$$self.$capture_state = () => ({
    		Complex,
    		parseExpr: parse,
    		katex,
    		InlineTex,
    		hoverMarkerPosition,
    		heatMapIndices,
    		graph,
    		DIMENSION_MAP,
    		round,
    		y,
    		x,
    		z,
    		v,
    		eqnInput,
    		tex,
    		input,
    		output,
    		graphError,
    		readMore,
    		texToStr,
    		drawGraph,
    		updateInputAndOutput,
    		updateXYZ
    	});

    	$$self.$inject_state = $$props => {
    		if ('hoverMarkerPosition' in $$props) $$invalidate(16, hoverMarkerPosition = $$props.hoverMarkerPosition);
    		if ('heatMapIndices' in $$props) $$invalidate(1, heatMapIndices = $$props.heatMapIndices);
    		if ('graph' in $$props) $$invalidate(0, graph = $$props.graph);
    		if ('round' in $$props) round = $$props.round;
    		if ('y' in $$props) $$invalidate(3, y = $$props.y);
    		if ('x' in $$props) $$invalidate(11, x = $$props.x);
    		if ('z' in $$props) $$invalidate(4, z = $$props.z);
    		if ('v' in $$props) $$invalidate(5, v = $$props.v);
    		if ('eqnInput' in $$props) $$invalidate(2, eqnInput = $$props.eqnInput);
    		if ('tex' in $$props) $$invalidate(6, tex = $$props.tex);
    		if ('input' in $$props) $$invalidate(7, input = $$props.input);
    		if ('output' in $$props) $$invalidate(8, output = $$props.output);
    		if ('graphError' in $$props) $$invalidate(9, graphError = $$props.graphError);
    		if ('readMore' in $$props) $$invalidate(10, readMore = $$props.readMore);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*hoverMarkerPosition*/ 65536) {
    			updateXYZ();
    		}

    		if ($$self.$$.dirty[0] & /*eqnInput*/ 4) {
    			try {
    				$$invalidate(6, tex = parse(eqnInput).toTex());
    			} catch(e) {
    				$$invalidate(6, tex = 'undefined');
    			}
    		}
    	};

    	return [
    		graph,
    		heatMapIndices,
    		eqnInput,
    		y,
    		z,
    		v,
    		tex,
    		input,
    		output,
    		graphError,
    		readMore,
    		x,
    		DIMENSION_MAP,
    		texToStr,
    		drawGraph,
    		updateInputAndOutput,
    		hoverMarkerPosition,
    		click_handler,
    		input0_input_handler,
    		change_handler,
    		change_handler_1,
    		change_handler_2,
    		input2_input_handler,
    		change_handler_3,
    		click_handler_1,
    		click_handler_2,
    		input4_change_handler,
    		input5_change_handler
    	];
    }

    class Sidebar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$2,
    			create_fragment$2,
    			safe_not_equal,
    			{
    				hoverMarkerPosition: 16,
    				heatMapIndices: 1,
    				graph: 0
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sidebar",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*hoverMarkerPosition*/ ctx[16] === undefined && !('hoverMarkerPosition' in props)) {
    			console.warn("<Sidebar> was created without expected prop 'hoverMarkerPosition'");
    		}

    		if (/*heatMapIndices*/ ctx[1] === undefined && !('heatMapIndices' in props)) {
    			console.warn("<Sidebar> was created without expected prop 'heatMapIndices'");
    		}

    		if (/*graph*/ ctx[0] === undefined && !('graph' in props)) {
    			console.warn("<Sidebar> was created without expected prop 'graph'");
    		}
    	}

    	get hoverMarkerPosition() {
    		throw new Error("<Sidebar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hoverMarkerPosition(value) {
    		throw new Error("<Sidebar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get heatMapIndices() {
    		throw new Error("<Sidebar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set heatMapIndices(value) {
    		throw new Error("<Sidebar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get graph() {
    		throw new Error("<Sidebar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set graph(value) {
    		throw new Error("<Sidebar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @license
     * Copyright 2010-2022 Three.js Authors
     * SPDX-License-Identifier: MIT
     */
    const REVISION = '141';
    const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
    const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
    const CullFaceNone = 0;
    const CullFaceBack = 1;
    const CullFaceFront = 2;
    const PCFShadowMap = 1;
    const PCFSoftShadowMap = 2;
    const VSMShadowMap = 3;
    const FrontSide = 0;
    const BackSide = 1;
    const DoubleSide = 2;
    const FlatShading = 1;
    const NoBlending = 0;
    const NormalBlending = 1;
    const AdditiveBlending = 2;
    const SubtractiveBlending = 3;
    const MultiplyBlending = 4;
    const CustomBlending = 5;
    const AddEquation = 100;
    const SubtractEquation = 101;
    const ReverseSubtractEquation = 102;
    const MinEquation = 103;
    const MaxEquation = 104;
    const ZeroFactor = 200;
    const OneFactor = 201;
    const SrcColorFactor = 202;
    const OneMinusSrcColorFactor = 203;
    const SrcAlphaFactor = 204;
    const OneMinusSrcAlphaFactor = 205;
    const DstAlphaFactor = 206;
    const OneMinusDstAlphaFactor = 207;
    const DstColorFactor = 208;
    const OneMinusDstColorFactor = 209;
    const SrcAlphaSaturateFactor = 210;
    const NeverDepth = 0;
    const AlwaysDepth = 1;
    const LessDepth = 2;
    const LessEqualDepth = 3;
    const EqualDepth = 4;
    const GreaterEqualDepth = 5;
    const GreaterDepth = 6;
    const NotEqualDepth = 7;
    const MultiplyOperation = 0;
    const MixOperation = 1;
    const AddOperation = 2;
    const NoToneMapping = 0;
    const LinearToneMapping = 1;
    const ReinhardToneMapping = 2;
    const CineonToneMapping = 3;
    const ACESFilmicToneMapping = 4;
    const CustomToneMapping = 5;

    const UVMapping = 300;
    const CubeReflectionMapping = 301;
    const CubeRefractionMapping = 302;
    const EquirectangularReflectionMapping = 303;
    const EquirectangularRefractionMapping = 304;
    const CubeUVReflectionMapping = 306;
    const RepeatWrapping = 1000;
    const ClampToEdgeWrapping = 1001;
    const MirroredRepeatWrapping = 1002;
    const NearestFilter = 1003;
    const NearestMipmapNearestFilter = 1004;
    const NearestMipmapLinearFilter = 1005;
    const LinearFilter = 1006;
    const LinearMipmapNearestFilter = 1007;
    const LinearMipmapLinearFilter = 1008;
    const UnsignedByteType = 1009;
    const ByteType = 1010;
    const ShortType = 1011;
    const UnsignedShortType = 1012;
    const IntType = 1013;
    const UnsignedIntType = 1014;
    const FloatType = 1015;
    const HalfFloatType = 1016;
    const UnsignedShort4444Type = 1017;
    const UnsignedShort5551Type = 1018;
    const UnsignedInt248Type = 1020;
    const AlphaFormat = 1021;
    const RGBFormat = 1022;
    const RGBAFormat = 1023;
    const LuminanceFormat = 1024;
    const LuminanceAlphaFormat = 1025;
    const DepthFormat = 1026;
    const DepthStencilFormat = 1027;
    const RedFormat = 1028;
    const RedIntegerFormat = 1029;
    const RGFormat = 1030;
    const RGIntegerFormat = 1031;
    const RGBAIntegerFormat = 1033;

    const RGB_S3TC_DXT1_Format = 33776;
    const RGBA_S3TC_DXT1_Format = 33777;
    const RGBA_S3TC_DXT3_Format = 33778;
    const RGBA_S3TC_DXT5_Format = 33779;
    const RGB_PVRTC_4BPPV1_Format = 35840;
    const RGB_PVRTC_2BPPV1_Format = 35841;
    const RGBA_PVRTC_4BPPV1_Format = 35842;
    const RGBA_PVRTC_2BPPV1_Format = 35843;
    const RGB_ETC1_Format = 36196;
    const RGB_ETC2_Format = 37492;
    const RGBA_ETC2_EAC_Format = 37496;
    const RGBA_ASTC_4x4_Format = 37808;
    const RGBA_ASTC_5x4_Format = 37809;
    const RGBA_ASTC_5x5_Format = 37810;
    const RGBA_ASTC_6x5_Format = 37811;
    const RGBA_ASTC_6x6_Format = 37812;
    const RGBA_ASTC_8x5_Format = 37813;
    const RGBA_ASTC_8x6_Format = 37814;
    const RGBA_ASTC_8x8_Format = 37815;
    const RGBA_ASTC_10x5_Format = 37816;
    const RGBA_ASTC_10x6_Format = 37817;
    const RGBA_ASTC_10x8_Format = 37818;
    const RGBA_ASTC_10x10_Format = 37819;
    const RGBA_ASTC_12x10_Format = 37820;
    const RGBA_ASTC_12x12_Format = 37821;
    const RGBA_BPTC_Format = 36492;
    const LinearEncoding = 3000;
    const sRGBEncoding = 3001;
    const BasicDepthPacking = 3200;
    const RGBADepthPacking = 3201;
    const TangentSpaceNormalMap = 0;
    const ObjectSpaceNormalMap = 1;
    const SRGBColorSpace = 'srgb';
    const LinearSRGBColorSpace = 'srgb-linear';
    const KeepStencilOp = 7680;
    const AlwaysStencilFunc = 519;

    const StaticDrawUsage = 35044;
    const GLSL3 = '300 es';

    const _SRGBAFormat = 1035; // fallback for WebGL 1

    /**
     * https://github.com/mrdoob/eventdispatcher.js/
     */

    class EventDispatcher {

    	addEventListener( type, listener ) {

    		if ( this._listeners === undefined ) this._listeners = {};

    		const listeners = this._listeners;

    		if ( listeners[ type ] === undefined ) {

    			listeners[ type ] = [];

    		}

    		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

    			listeners[ type ].push( listener );

    		}

    	}

    	hasEventListener( type, listener ) {

    		if ( this._listeners === undefined ) return false;

    		const listeners = this._listeners;

    		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

    	}

    	removeEventListener( type, listener ) {

    		if ( this._listeners === undefined ) return;

    		const listeners = this._listeners;
    		const listenerArray = listeners[ type ];

    		if ( listenerArray !== undefined ) {

    			const index = listenerArray.indexOf( listener );

    			if ( index !== - 1 ) {

    				listenerArray.splice( index, 1 );

    			}

    		}

    	}

    	dispatchEvent( event ) {

    		if ( this._listeners === undefined ) return;

    		const listeners = this._listeners;
    		const listenerArray = listeners[ event.type ];

    		if ( listenerArray !== undefined ) {

    			event.target = this;

    			// Make a copy, in case listeners are removed while iterating.
    			const array = listenerArray.slice( 0 );

    			for ( let i = 0, l = array.length; i < l; i ++ ) {

    				array[ i ].call( this, event );

    			}

    			event.target = null;

    		}

    	}

    }

    const _lut = [];

    for ( let i = 0; i < 256; i ++ ) {

    	_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

    }


    const DEG2RAD = Math.PI / 180;
    const RAD2DEG = 180 / Math.PI;

    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
    function generateUUID() {

    	const d0 = Math.random() * 0xffffffff | 0;
    	const d1 = Math.random() * 0xffffffff | 0;
    	const d2 = Math.random() * 0xffffffff | 0;
    	const d3 = Math.random() * 0xffffffff | 0;
    	const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
    			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
    			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
    			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

    	// .toLowerCase() here flattens concatenated strings to save heap memory space.
    	return uuid.toLowerCase();

    }

    function clamp( value, min, max ) {

    	return Math.max( min, Math.min( max, value ) );

    }

    // compute euclidean modulo of m % n
    // https://en.wikipedia.org/wiki/Modulo_operation
    function euclideanModulo( n, m ) {

    	return ( ( n % m ) + m ) % m;

    }

    // https://en.wikipedia.org/wiki/Linear_interpolation
    function lerp( x, y, t ) {

    	return ( 1 - t ) * x + t * y;

    }

    function isPowerOfTwo( value ) {

    	return ( value & ( value - 1 ) ) === 0 && value !== 0;

    }

    function floorPowerOfTwo( value ) {

    	return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

    }

    class Vector2 {

    	constructor( x = 0, y = 0 ) {

    		this.isVector2 = true;

    		this.x = x;
    		this.y = y;

    	}

    	get width() {

    		return this.x;

    	}

    	set width( value ) {

    		this.x = value;

    	}

    	get height() {

    		return this.y;

    	}

    	set height( value ) {

    		this.y = value;

    	}

    	set( x, y ) {

    		this.x = x;
    		this.y = y;

    		return this;

    	}

    	setScalar( scalar ) {

    		this.x = scalar;
    		this.y = scalar;

    		return this;

    	}

    	setX( x ) {

    		this.x = x;

    		return this;

    	}

    	setY( y ) {

    		this.y = y;

    		return this;

    	}

    	setComponent( index, value ) {

    		switch ( index ) {

    			case 0: this.x = value; break;
    			case 1: this.y = value; break;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    		return this;

    	}

    	getComponent( index ) {

    		switch ( index ) {

    			case 0: return this.x;
    			case 1: return this.y;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    	}

    	clone() {

    		return new this.constructor( this.x, this.y );

    	}

    	copy( v ) {

    		this.x = v.x;
    		this.y = v.y;

    		return this;

    	}

    	add( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
    			return this.addVectors( v, w );

    		}

    		this.x += v.x;
    		this.y += v.y;

    		return this;

    	}

    	addScalar( s ) {

    		this.x += s;
    		this.y += s;

    		return this;

    	}

    	addVectors( a, b ) {

    		this.x = a.x + b.x;
    		this.y = a.y + b.y;

    		return this;

    	}

    	addScaledVector( v, s ) {

    		this.x += v.x * s;
    		this.y += v.y * s;

    		return this;

    	}

    	sub( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
    			return this.subVectors( v, w );

    		}

    		this.x -= v.x;
    		this.y -= v.y;

    		return this;

    	}

    	subScalar( s ) {

    		this.x -= s;
    		this.y -= s;

    		return this;

    	}

    	subVectors( a, b ) {

    		this.x = a.x - b.x;
    		this.y = a.y - b.y;

    		return this;

    	}

    	multiply( v ) {

    		this.x *= v.x;
    		this.y *= v.y;

    		return this;

    	}

    	multiplyScalar( scalar ) {

    		this.x *= scalar;
    		this.y *= scalar;

    		return this;

    	}

    	divide( v ) {

    		this.x /= v.x;
    		this.y /= v.y;

    		return this;

    	}

    	divideScalar( scalar ) {

    		return this.multiplyScalar( 1 / scalar );

    	}

    	applyMatrix3( m ) {

    		const x = this.x, y = this.y;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
    		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

    		return this;

    	}

    	min( v ) {

    		this.x = Math.min( this.x, v.x );
    		this.y = Math.min( this.y, v.y );

    		return this;

    	}

    	max( v ) {

    		this.x = Math.max( this.x, v.x );
    		this.y = Math.max( this.y, v.y );

    		return this;

    	}

    	clamp( min, max ) {

    		// assumes min < max, componentwise

    		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
    		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

    		return this;

    	}

    	clampScalar( minVal, maxVal ) {

    		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
    		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

    		return this;

    	}

    	clampLength( min, max ) {

    		const length = this.length();

    		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

    	}

    	floor() {

    		this.x = Math.floor( this.x );
    		this.y = Math.floor( this.y );

    		return this;

    	}

    	ceil() {

    		this.x = Math.ceil( this.x );
    		this.y = Math.ceil( this.y );

    		return this;

    	}

    	round() {

    		this.x = Math.round( this.x );
    		this.y = Math.round( this.y );

    		return this;

    	}

    	roundToZero() {

    		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
    		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

    		return this;

    	}

    	negate() {

    		this.x = - this.x;
    		this.y = - this.y;

    		return this;

    	}

    	dot( v ) {

    		return this.x * v.x + this.y * v.y;

    	}

    	cross( v ) {

    		return this.x * v.y - this.y * v.x;

    	}

    	lengthSq() {

    		return this.x * this.x + this.y * this.y;

    	}

    	length() {

    		return Math.sqrt( this.x * this.x + this.y * this.y );

    	}

    	manhattanLength() {

    		return Math.abs( this.x ) + Math.abs( this.y );

    	}

    	normalize() {

    		return this.divideScalar( this.length() || 1 );

    	}

    	angle() {

    		// computes the angle in radians with respect to the positive x-axis

    		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

    		return angle;

    	}

    	distanceTo( v ) {

    		return Math.sqrt( this.distanceToSquared( v ) );

    	}

    	distanceToSquared( v ) {

    		const dx = this.x - v.x, dy = this.y - v.y;
    		return dx * dx + dy * dy;

    	}

    	manhattanDistanceTo( v ) {

    		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

    	}

    	setLength( length ) {

    		return this.normalize().multiplyScalar( length );

    	}

    	lerp( v, alpha ) {

    		this.x += ( v.x - this.x ) * alpha;
    		this.y += ( v.y - this.y ) * alpha;

    		return this;

    	}

    	lerpVectors( v1, v2, alpha ) {

    		this.x = v1.x + ( v2.x - v1.x ) * alpha;
    		this.y = v1.y + ( v2.y - v1.y ) * alpha;

    		return this;

    	}

    	equals( v ) {

    		return ( ( v.x === this.x ) && ( v.y === this.y ) );

    	}

    	fromArray( array, offset = 0 ) {

    		this.x = array[ offset ];
    		this.y = array[ offset + 1 ];

    		return this;

    	}

    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this.x;
    		array[ offset + 1 ] = this.y;

    		return array;

    	}

    	fromBufferAttribute( attribute, index, offset ) {

    		if ( offset !== undefined ) {

    			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

    		}

    		this.x = attribute.getX( index );
    		this.y = attribute.getY( index );

    		return this;

    	}

    	rotateAround( center, angle ) {

    		const c = Math.cos( angle ), s = Math.sin( angle );

    		const x = this.x - center.x;
    		const y = this.y - center.y;

    		this.x = x * c - y * s + center.x;
    		this.y = x * s + y * c + center.y;

    		return this;

    	}

    	random() {

    		this.x = Math.random();
    		this.y = Math.random();

    		return this;

    	}

    	*[ Symbol.iterator ]() {

    		yield this.x;
    		yield this.y;

    	}

    }

    class Matrix3 {

    	constructor() {

    		this.isMatrix3 = true;

    		this.elements = [

    			1, 0, 0,
    			0, 1, 0,
    			0, 0, 1

    		];

    		if ( arguments.length > 0 ) {

    			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

    		}

    	}

    	set( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

    		const te = this.elements;

    		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
    		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
    		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

    		return this;

    	}

    	identity() {

    		this.set(

    			1, 0, 0,
    			0, 1, 0,
    			0, 0, 1

    		);

    		return this;

    	}

    	copy( m ) {

    		const te = this.elements;
    		const me = m.elements;

    		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
    		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
    		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

    		return this;

    	}

    	extractBasis( xAxis, yAxis, zAxis ) {

    		xAxis.setFromMatrix3Column( this, 0 );
    		yAxis.setFromMatrix3Column( this, 1 );
    		zAxis.setFromMatrix3Column( this, 2 );

    		return this;

    	}

    	setFromMatrix4( m ) {

    		const me = m.elements;

    		this.set(

    			me[ 0 ], me[ 4 ], me[ 8 ],
    			me[ 1 ], me[ 5 ], me[ 9 ],
    			me[ 2 ], me[ 6 ], me[ 10 ]

    		);

    		return this;

    	}

    	multiply( m ) {

    		return this.multiplyMatrices( this, m );

    	}

    	premultiply( m ) {

    		return this.multiplyMatrices( m, this );

    	}

    	multiplyMatrices( a, b ) {

    		const ae = a.elements;
    		const be = b.elements;
    		const te = this.elements;

    		const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
    		const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
    		const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

    		const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
    		const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
    		const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

    		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
    		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
    		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

    		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
    		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
    		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

    		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
    		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
    		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

    		return this;

    	}

    	multiplyScalar( s ) {

    		const te = this.elements;

    		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
    		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
    		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

    		return this;

    	}

    	determinant() {

    		const te = this.elements;

    		const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
    			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
    			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

    		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

    	}

    	invert() {

    		const te = this.elements,

    			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],
    			n12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],
    			n13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],

    			t11 = n33 * n22 - n32 * n23,
    			t12 = n32 * n13 - n33 * n12,
    			t13 = n23 * n12 - n22 * n13,

    			det = n11 * t11 + n21 * t12 + n31 * t13;

    		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );

    		const detInv = 1 / det;

    		te[ 0 ] = t11 * detInv;
    		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
    		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

    		te[ 3 ] = t12 * detInv;
    		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
    		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

    		te[ 6 ] = t13 * detInv;
    		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
    		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

    		return this;

    	}

    	transpose() {

    		let tmp;
    		const m = this.elements;

    		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
    		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
    		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

    		return this;

    	}

    	getNormalMatrix( matrix4 ) {

    		return this.setFromMatrix4( matrix4 ).invert().transpose();

    	}

    	transposeIntoArray( r ) {

    		const m = this.elements;

    		r[ 0 ] = m[ 0 ];
    		r[ 1 ] = m[ 3 ];
    		r[ 2 ] = m[ 6 ];
    		r[ 3 ] = m[ 1 ];
    		r[ 4 ] = m[ 4 ];
    		r[ 5 ] = m[ 7 ];
    		r[ 6 ] = m[ 2 ];
    		r[ 7 ] = m[ 5 ];
    		r[ 8 ] = m[ 8 ];

    		return this;

    	}

    	setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {

    		const c = Math.cos( rotation );
    		const s = Math.sin( rotation );

    		this.set(
    			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
    			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
    			0, 0, 1
    		);

    		return this;

    	}

    	scale( sx, sy ) {

    		const te = this.elements;

    		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
    		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

    		return this;

    	}

    	rotate( theta ) {

    		const c = Math.cos( theta );
    		const s = Math.sin( theta );

    		const te = this.elements;

    		const a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
    		const a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

    		te[ 0 ] = c * a11 + s * a21;
    		te[ 3 ] = c * a12 + s * a22;
    		te[ 6 ] = c * a13 + s * a23;

    		te[ 1 ] = - s * a11 + c * a21;
    		te[ 4 ] = - s * a12 + c * a22;
    		te[ 7 ] = - s * a13 + c * a23;

    		return this;

    	}

    	translate( tx, ty ) {

    		const te = this.elements;

    		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
    		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

    		return this;

    	}

    	equals( matrix ) {

    		const te = this.elements;
    		const me = matrix.elements;

    		for ( let i = 0; i < 9; i ++ ) {

    			if ( te[ i ] !== me[ i ] ) return false;

    		}

    		return true;

    	}

    	fromArray( array, offset = 0 ) {

    		for ( let i = 0; i < 9; i ++ ) {

    			this.elements[ i ] = array[ i + offset ];

    		}

    		return this;

    	}

    	toArray( array = [], offset = 0 ) {

    		const te = this.elements;

    		array[ offset ] = te[ 0 ];
    		array[ offset + 1 ] = te[ 1 ];
    		array[ offset + 2 ] = te[ 2 ];

    		array[ offset + 3 ] = te[ 3 ];
    		array[ offset + 4 ] = te[ 4 ];
    		array[ offset + 5 ] = te[ 5 ];

    		array[ offset + 6 ] = te[ 6 ];
    		array[ offset + 7 ] = te[ 7 ];
    		array[ offset + 8 ] = te[ 8 ];

    		return array;

    	}

    	clone() {

    		return new this.constructor().fromArray( this.elements );

    	}

    }

    function arrayNeedsUint32( array ) {

    	// assumes larger values usually on last

    	for ( let i = array.length - 1; i >= 0; -- i ) {

    		if ( array[ i ] > 65535 ) return true;

    	}

    	return false;

    }

    function createElementNS( name ) {

    	return document.createElementNS( 'http://www.w3.org/1999/xhtml', name );

    }

    function SRGBToLinear( c ) {

    	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

    }

    function LinearToSRGB( c ) {

    	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

    }

    // JavaScript RGB-to-RGB transforms, defined as
    // FN[InputColorSpace][OutputColorSpace] callback functions.
    const FN = {
    	[ SRGBColorSpace ]: { [ LinearSRGBColorSpace ]: SRGBToLinear },
    	[ LinearSRGBColorSpace ]: { [ SRGBColorSpace ]: LinearToSRGB },
    };

    const ColorManagement = {

    	legacyMode: true,

    	get workingColorSpace() {

    		return LinearSRGBColorSpace;

    	},

    	set workingColorSpace( colorSpace ) {

    		console.warn( 'THREE.ColorManagement: .workingColorSpace is readonly.' );

    	},

    	convert: function ( color, sourceColorSpace, targetColorSpace ) {

    		if ( this.legacyMode || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {

    			return color;

    		}

    		if ( FN[ sourceColorSpace ] && FN[ sourceColorSpace ][ targetColorSpace ] !== undefined ) {

    			const fn = FN[ sourceColorSpace ][ targetColorSpace ];

    			color.r = fn( color.r );
    			color.g = fn( color.g );
    			color.b = fn( color.b );

    			return color;

    		}

    		throw new Error( 'Unsupported color space conversion.' );

    	},

    	fromWorkingColorSpace: function ( color, targetColorSpace ) {

    		return this.convert( color, this.workingColorSpace, targetColorSpace );

    	},

    	toWorkingColorSpace: function ( color, sourceColorSpace ) {

    		return this.convert( color, sourceColorSpace, this.workingColorSpace );

    	},

    };

    const _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
    	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
    	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
    	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
    	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
    	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
    	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
    	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
    	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
    	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
    	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
    	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
    	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
    	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
    	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
    	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
    	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
    	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
    	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
    	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
    	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
    	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
    	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
    	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

    const _rgb = { r: 0, g: 0, b: 0 };
    const _hslA = { h: 0, s: 0, l: 0 };
    const _hslB = { h: 0, s: 0, l: 0 };

    function hue2rgb( p, q, t ) {

    	if ( t < 0 ) t += 1;
    	if ( t > 1 ) t -= 1;
    	if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
    	if ( t < 1 / 2 ) return q;
    	if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
    	return p;

    }

    function toComponents( source, target ) {

    	target.r = source.r;
    	target.g = source.g;
    	target.b = source.b;

    	return target;

    }

    class Color {

    	constructor( r, g, b ) {

    		this.isColor = true;

    		this.r = 1;
    		this.g = 1;
    		this.b = 1;

    		if ( g === undefined && b === undefined ) {

    			// r is THREE.Color, hex or string
    			return this.set( r );

    		}

    		return this.setRGB( r, g, b );

    	}

    	set( value ) {

    		if ( value && value.isColor ) {

    			this.copy( value );

    		} else if ( typeof value === 'number' ) {

    			this.setHex( value );

    		} else if ( typeof value === 'string' ) {

    			this.setStyle( value );

    		}

    		return this;

    	}

    	setScalar( scalar ) {

    		this.r = scalar;
    		this.g = scalar;
    		this.b = scalar;

    		return this;

    	}

    	setHex( hex, colorSpace = SRGBColorSpace ) {

    		hex = Math.floor( hex );

    		this.r = ( hex >> 16 & 255 ) / 255;
    		this.g = ( hex >> 8 & 255 ) / 255;
    		this.b = ( hex & 255 ) / 255;

    		ColorManagement.toWorkingColorSpace( this, colorSpace );

    		return this;

    	}

    	setRGB( r, g, b, colorSpace = LinearSRGBColorSpace ) {

    		this.r = r;
    		this.g = g;
    		this.b = b;

    		ColorManagement.toWorkingColorSpace( this, colorSpace );

    		return this;

    	}

    	setHSL( h, s, l, colorSpace = LinearSRGBColorSpace ) {

    		// h,s,l ranges are in 0.0 - 1.0
    		h = euclideanModulo( h, 1 );
    		s = clamp( s, 0, 1 );
    		l = clamp( l, 0, 1 );

    		if ( s === 0 ) {

    			this.r = this.g = this.b = l;

    		} else {

    			const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
    			const q = ( 2 * l ) - p;

    			this.r = hue2rgb( q, p, h + 1 / 3 );
    			this.g = hue2rgb( q, p, h );
    			this.b = hue2rgb( q, p, h - 1 / 3 );

    		}

    		ColorManagement.toWorkingColorSpace( this, colorSpace );

    		return this;

    	}

    	setStyle( style, colorSpace = SRGBColorSpace ) {

    		function handleAlpha( string ) {

    			if ( string === undefined ) return;

    			if ( parseFloat( string ) < 1 ) {

    				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

    			}

    		}


    		let m;

    		if ( m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec( style ) ) {

    			// rgb / hsl

    			let color;
    			const name = m[ 1 ];
    			const components = m[ 2 ];

    			switch ( name ) {

    				case 'rgb':
    				case 'rgba':

    					if ( color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

    						// rgb(255,0,0) rgba(255,0,0,0.5)
    						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
    						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
    						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

    						ColorManagement.toWorkingColorSpace( this, colorSpace );

    						handleAlpha( color[ 4 ] );

    						return this;

    					}

    					if ( color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

    						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
    						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
    						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
    						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

    						ColorManagement.toWorkingColorSpace( this, colorSpace );

    						handleAlpha( color[ 4 ] );

    						return this;

    					}

    					break;

    				case 'hsl':
    				case 'hsla':

    					if ( color = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

    						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
    						const h = parseFloat( color[ 1 ] ) / 360;
    						const s = parseInt( color[ 2 ], 10 ) / 100;
    						const l = parseInt( color[ 3 ], 10 ) / 100;

    						handleAlpha( color[ 4 ] );

    						return this.setHSL( h, s, l, colorSpace );

    					}

    					break;

    			}

    		} else if ( m = /^\#([A-Fa-f\d]+)$/.exec( style ) ) {

    			// hex color

    			const hex = m[ 1 ];
    			const size = hex.length;

    			if ( size === 3 ) {

    				// #ff0
    				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
    				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
    				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

    				ColorManagement.toWorkingColorSpace( this, colorSpace );

    				return this;

    			} else if ( size === 6 ) {

    				// #ff0000
    				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
    				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
    				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

    				ColorManagement.toWorkingColorSpace( this, colorSpace );

    				return this;

    			}

    		}

    		if ( style && style.length > 0 ) {

    			return this.setColorName( style, colorSpace );

    		}

    		return this;

    	}

    	setColorName( style, colorSpace = SRGBColorSpace ) {

    		// color keywords
    		const hex = _colorKeywords[ style.toLowerCase() ];

    		if ( hex !== undefined ) {

    			// red
    			this.setHex( hex, colorSpace );

    		} else {

    			// unknown color
    			console.warn( 'THREE.Color: Unknown color ' + style );

    		}

    		return this;

    	}

    	clone() {

    		return new this.constructor( this.r, this.g, this.b );

    	}

    	copy( color ) {

    		this.r = color.r;
    		this.g = color.g;
    		this.b = color.b;

    		return this;

    	}

    	copySRGBToLinear( color ) {

    		this.r = SRGBToLinear( color.r );
    		this.g = SRGBToLinear( color.g );
    		this.b = SRGBToLinear( color.b );

    		return this;

    	}

    	copyLinearToSRGB( color ) {

    		this.r = LinearToSRGB( color.r );
    		this.g = LinearToSRGB( color.g );
    		this.b = LinearToSRGB( color.b );

    		return this;

    	}

    	convertSRGBToLinear() {

    		this.copySRGBToLinear( this );

    		return this;

    	}

    	convertLinearToSRGB() {

    		this.copyLinearToSRGB( this );

    		return this;

    	}

    	getHex( colorSpace = SRGBColorSpace ) {

    		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );

    		return clamp( _rgb.r * 255, 0, 255 ) << 16 ^ clamp( _rgb.g * 255, 0, 255 ) << 8 ^ clamp( _rgb.b * 255, 0, 255 ) << 0;

    	}

    	getHexString( colorSpace = SRGBColorSpace ) {

    		return ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );

    	}

    	getHSL( target, colorSpace = LinearSRGBColorSpace ) {

    		// h,s,l ranges are in 0.0 - 1.0

    		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );

    		const r = _rgb.r, g = _rgb.g, b = _rgb.b;

    		const max = Math.max( r, g, b );
    		const min = Math.min( r, g, b );

    		let hue, saturation;
    		const lightness = ( min + max ) / 2.0;

    		if ( min === max ) {

    			hue = 0;
    			saturation = 0;

    		} else {

    			const delta = max - min;

    			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

    			switch ( max ) {

    				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
    				case g: hue = ( b - r ) / delta + 2; break;
    				case b: hue = ( r - g ) / delta + 4; break;

    			}

    			hue /= 6;

    		}

    		target.h = hue;
    		target.s = saturation;
    		target.l = lightness;

    		return target;

    	}

    	getRGB( target, colorSpace = LinearSRGBColorSpace ) {

    		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );

    		target.r = _rgb.r;
    		target.g = _rgb.g;
    		target.b = _rgb.b;

    		return target;

    	}

    	getStyle( colorSpace = SRGBColorSpace ) {

    		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );

    		if ( colorSpace !== SRGBColorSpace ) {

    			// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
    			return `color(${ colorSpace } ${ _rgb.r } ${ _rgb.g } ${ _rgb.b })`;

    		}

    		return `rgb(${( _rgb.r * 255 ) | 0},${( _rgb.g * 255 ) | 0},${( _rgb.b * 255 ) | 0})`;

    	}

    	offsetHSL( h, s, l ) {

    		this.getHSL( _hslA );

    		_hslA.h += h; _hslA.s += s; _hslA.l += l;

    		this.setHSL( _hslA.h, _hslA.s, _hslA.l );

    		return this;

    	}

    	add( color ) {

    		this.r += color.r;
    		this.g += color.g;
    		this.b += color.b;

    		return this;

    	}

    	addColors( color1, color2 ) {

    		this.r = color1.r + color2.r;
    		this.g = color1.g + color2.g;
    		this.b = color1.b + color2.b;

    		return this;

    	}

    	addScalar( s ) {

    		this.r += s;
    		this.g += s;
    		this.b += s;

    		return this;

    	}

    	sub( color ) {

    		this.r = Math.max( 0, this.r - color.r );
    		this.g = Math.max( 0, this.g - color.g );
    		this.b = Math.max( 0, this.b - color.b );

    		return this;

    	}

    	multiply( color ) {

    		this.r *= color.r;
    		this.g *= color.g;
    		this.b *= color.b;

    		return this;

    	}

    	multiplyScalar( s ) {

    		this.r *= s;
    		this.g *= s;
    		this.b *= s;

    		return this;

    	}

    	lerp( color, alpha ) {

    		this.r += ( color.r - this.r ) * alpha;
    		this.g += ( color.g - this.g ) * alpha;
    		this.b += ( color.b - this.b ) * alpha;

    		return this;

    	}

    	lerpColors( color1, color2, alpha ) {

    		this.r = color1.r + ( color2.r - color1.r ) * alpha;
    		this.g = color1.g + ( color2.g - color1.g ) * alpha;
    		this.b = color1.b + ( color2.b - color1.b ) * alpha;

    		return this;

    	}

    	lerpHSL( color, alpha ) {

    		this.getHSL( _hslA );
    		color.getHSL( _hslB );

    		const h = lerp( _hslA.h, _hslB.h, alpha );
    		const s = lerp( _hslA.s, _hslB.s, alpha );
    		const l = lerp( _hslA.l, _hslB.l, alpha );

    		this.setHSL( h, s, l );

    		return this;

    	}

    	equals( c ) {

    		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

    	}

    	fromArray( array, offset = 0 ) {

    		this.r = array[ offset ];
    		this.g = array[ offset + 1 ];
    		this.b = array[ offset + 2 ];

    		return this;

    	}

    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this.r;
    		array[ offset + 1 ] = this.g;
    		array[ offset + 2 ] = this.b;

    		return array;

    	}

    	fromBufferAttribute( attribute, index ) {

    		this.r = attribute.getX( index );
    		this.g = attribute.getY( index );
    		this.b = attribute.getZ( index );

    		if ( attribute.normalized === true ) {

    			// assuming Uint8Array

    			this.r /= 255;
    			this.g /= 255;
    			this.b /= 255;

    		}

    		return this;

    	}

    	toJSON() {

    		return this.getHex();

    	}

    	*[ Symbol.iterator ]() {

    		yield this.r;
    		yield this.g;
    		yield this.b;

    	}

    }

    Color.NAMES = _colorKeywords;

    let _canvas;

    class ImageUtils {

    	static getDataURL( image ) {

    		if ( /^data:/i.test( image.src ) ) {

    			return image.src;

    		}

    		if ( typeof HTMLCanvasElement == 'undefined' ) {

    			return image.src;

    		}

    		let canvas;

    		if ( image instanceof HTMLCanvasElement ) {

    			canvas = image;

    		} else {

    			if ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );

    			_canvas.width = image.width;
    			_canvas.height = image.height;

    			const context = _canvas.getContext( '2d' );

    			if ( image instanceof ImageData ) {

    				context.putImageData( image, 0, 0 );

    			} else {

    				context.drawImage( image, 0, 0, image.width, image.height );

    			}

    			canvas = _canvas;

    		}

    		if ( canvas.width > 2048 || canvas.height > 2048 ) {

    			console.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );

    			return canvas.toDataURL( 'image/jpeg', 0.6 );

    		} else {

    			return canvas.toDataURL( 'image/png' );

    		}

    	}

    	static sRGBToLinear( image ) {

    		if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
    			( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
    			( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

    			const canvas = createElementNS( 'canvas' );

    			canvas.width = image.width;
    			canvas.height = image.height;

    			const context = canvas.getContext( '2d' );
    			context.drawImage( image, 0, 0, image.width, image.height );

    			const imageData = context.getImageData( 0, 0, image.width, image.height );
    			const data = imageData.data;

    			for ( let i = 0; i < data.length; i ++ ) {

    				data[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;

    			}

    			context.putImageData( imageData, 0, 0 );

    			return canvas;

    		} else if ( image.data ) {

    			const data = image.data.slice( 0 );

    			for ( let i = 0; i < data.length; i ++ ) {

    				if ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {

    					data[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );

    				} else {

    					// assuming float

    					data[ i ] = SRGBToLinear( data[ i ] );

    				}

    			}

    			return {
    				data: data,
    				width: image.width,
    				height: image.height
    			};

    		} else {

    			console.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );
    			return image;

    		}

    	}

    }

    class Source {

    	constructor( data = null ) {

    		this.isSource = true;

    		this.uuid = generateUUID();

    		this.data = data;

    		this.version = 0;

    	}

    	set needsUpdate( value ) {

    		if ( value === true ) this.version ++;

    	}

    	toJSON( meta ) {

    		const isRootObject = ( meta === undefined || typeof meta === 'string' );

    		if ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {

    			return meta.images[ this.uuid ];

    		}

    		const output = {
    			uuid: this.uuid,
    			url: ''
    		};

    		const data = this.data;

    		if ( data !== null ) {

    			let url;

    			if ( Array.isArray( data ) ) {

    				// cube texture

    				url = [];

    				for ( let i = 0, l = data.length; i < l; i ++ ) {

    					if ( data[ i ].isDataTexture ) {

    						url.push( serializeImage( data[ i ].image ) );

    					} else {

    						url.push( serializeImage( data[ i ] ) );

    					}

    				}

    			} else {

    				// texture

    				url = serializeImage( data );

    			}

    			output.url = url;

    		}

    		if ( ! isRootObject ) {

    			meta.images[ this.uuid ] = output;

    		}

    		return output;

    	}

    }

    function serializeImage( image ) {

    	if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
    		( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
    		( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

    		// default images

    		return ImageUtils.getDataURL( image );

    	} else {

    		if ( image.data ) {

    			// images of DataTexture

    			return {
    				data: Array.prototype.slice.call( image.data ),
    				width: image.width,
    				height: image.height,
    				type: image.data.constructor.name
    			};

    		} else {

    			console.warn( 'THREE.Texture: Unable to serialize Texture.' );
    			return {};

    		}

    	}

    }

    let textureId = 0;

    class Texture extends EventDispatcher {

    	constructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding ) {

    		super();

    		this.isTexture = true;

    		Object.defineProperty( this, 'id', { value: textureId ++ } );

    		this.uuid = generateUUID();

    		this.name = '';

    		this.source = new Source( image );
    		this.mipmaps = [];

    		this.mapping = mapping;

    		this.wrapS = wrapS;
    		this.wrapT = wrapT;

    		this.magFilter = magFilter;
    		this.minFilter = minFilter;

    		this.anisotropy = anisotropy;

    		this.format = format;
    		this.internalFormat = null;
    		this.type = type;

    		this.offset = new Vector2( 0, 0 );
    		this.repeat = new Vector2( 1, 1 );
    		this.center = new Vector2( 0, 0 );
    		this.rotation = 0;

    		this.matrixAutoUpdate = true;
    		this.matrix = new Matrix3();

    		this.generateMipmaps = true;
    		this.premultiplyAlpha = false;
    		this.flipY = true;
    		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

    		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
    		//
    		// Also changing the encoding after already used by a Material will not automatically make the Material
    		// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
    		this.encoding = encoding;

    		this.userData = {};

    		this.version = 0;
    		this.onUpdate = null;

    		this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
    		this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)

    	}

    	get image() {

    		return this.source.data;

    	}

    	set image( value ) {

    		this.source.data = value;

    	}

    	updateMatrix() {

    		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    	copy( source ) {

    		this.name = source.name;

    		this.source = source.source;
    		this.mipmaps = source.mipmaps.slice( 0 );

    		this.mapping = source.mapping;

    		this.wrapS = source.wrapS;
    		this.wrapT = source.wrapT;

    		this.magFilter = source.magFilter;
    		this.minFilter = source.minFilter;

    		this.anisotropy = source.anisotropy;

    		this.format = source.format;
    		this.internalFormat = source.internalFormat;
    		this.type = source.type;

    		this.offset.copy( source.offset );
    		this.repeat.copy( source.repeat );
    		this.center.copy( source.center );
    		this.rotation = source.rotation;

    		this.matrixAutoUpdate = source.matrixAutoUpdate;
    		this.matrix.copy( source.matrix );

    		this.generateMipmaps = source.generateMipmaps;
    		this.premultiplyAlpha = source.premultiplyAlpha;
    		this.flipY = source.flipY;
    		this.unpackAlignment = source.unpackAlignment;
    		this.encoding = source.encoding;

    		this.userData = JSON.parse( JSON.stringify( source.userData ) );

    		this.needsUpdate = true;

    		return this;

    	}

    	toJSON( meta ) {

    		const isRootObject = ( meta === undefined || typeof meta === 'string' );

    		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

    			return meta.textures[ this.uuid ];

    		}

    		const output = {

    			metadata: {
    				version: 4.5,
    				type: 'Texture',
    				generator: 'Texture.toJSON'
    			},

    			uuid: this.uuid,
    			name: this.name,

    			image: this.source.toJSON( meta ).uuid,

    			mapping: this.mapping,

    			repeat: [ this.repeat.x, this.repeat.y ],
    			offset: [ this.offset.x, this.offset.y ],
    			center: [ this.center.x, this.center.y ],
    			rotation: this.rotation,

    			wrap: [ this.wrapS, this.wrapT ],

    			format: this.format,
    			type: this.type,
    			encoding: this.encoding,

    			minFilter: this.minFilter,
    			magFilter: this.magFilter,
    			anisotropy: this.anisotropy,

    			flipY: this.flipY,

    			premultiplyAlpha: this.premultiplyAlpha,
    			unpackAlignment: this.unpackAlignment

    		};

    		if ( JSON.stringify( this.userData ) !== '{}' ) output.userData = this.userData;

    		if ( ! isRootObject ) {

    			meta.textures[ this.uuid ] = output;

    		}

    		return output;

    	}

    	dispose() {

    		this.dispatchEvent( { type: 'dispose' } );

    	}

    	transformUv( uv ) {

    		if ( this.mapping !== UVMapping ) return uv;

    		uv.applyMatrix3( this.matrix );

    		if ( uv.x < 0 || uv.x > 1 ) {

    			switch ( this.wrapS ) {

    				case RepeatWrapping:

    					uv.x = uv.x - Math.floor( uv.x );
    					break;

    				case ClampToEdgeWrapping:

    					uv.x = uv.x < 0 ? 0 : 1;
    					break;

    				case MirroredRepeatWrapping:

    					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

    						uv.x = Math.ceil( uv.x ) - uv.x;

    					} else {

    						uv.x = uv.x - Math.floor( uv.x );

    					}

    					break;

    			}

    		}

    		if ( uv.y < 0 || uv.y > 1 ) {

    			switch ( this.wrapT ) {

    				case RepeatWrapping:

    					uv.y = uv.y - Math.floor( uv.y );
    					break;

    				case ClampToEdgeWrapping:

    					uv.y = uv.y < 0 ? 0 : 1;
    					break;

    				case MirroredRepeatWrapping:

    					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

    						uv.y = Math.ceil( uv.y ) - uv.y;

    					} else {

    						uv.y = uv.y - Math.floor( uv.y );

    					}

    					break;

    			}

    		}

    		if ( this.flipY ) {

    			uv.y = 1 - uv.y;

    		}

    		return uv;

    	}

    	set needsUpdate( value ) {

    		if ( value === true ) {

    			this.version ++;
    			this.source.needsUpdate = true;

    		}

    	}

    }

    Texture.DEFAULT_IMAGE = null;
    Texture.DEFAULT_MAPPING = UVMapping;

    class Vector4 {

    	constructor( x = 0, y = 0, z = 0, w = 1 ) {

    		this.isVector4 = true;

    		this.x = x;
    		this.y = y;
    		this.z = z;
    		this.w = w;

    	}

    	get width() {

    		return this.z;

    	}

    	set width( value ) {

    		this.z = value;

    	}

    	get height() {

    		return this.w;

    	}

    	set height( value ) {

    		this.w = value;

    	}

    	set( x, y, z, w ) {

    		this.x = x;
    		this.y = y;
    		this.z = z;
    		this.w = w;

    		return this;

    	}

    	setScalar( scalar ) {

    		this.x = scalar;
    		this.y = scalar;
    		this.z = scalar;
    		this.w = scalar;

    		return this;

    	}

    	setX( x ) {

    		this.x = x;

    		return this;

    	}

    	setY( y ) {

    		this.y = y;

    		return this;

    	}

    	setZ( z ) {

    		this.z = z;

    		return this;

    	}

    	setW( w ) {

    		this.w = w;

    		return this;

    	}

    	setComponent( index, value ) {

    		switch ( index ) {

    			case 0: this.x = value; break;
    			case 1: this.y = value; break;
    			case 2: this.z = value; break;
    			case 3: this.w = value; break;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    		return this;

    	}

    	getComponent( index ) {

    		switch ( index ) {

    			case 0: return this.x;
    			case 1: return this.y;
    			case 2: return this.z;
    			case 3: return this.w;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    	}

    	clone() {

    		return new this.constructor( this.x, this.y, this.z, this.w );

    	}

    	copy( v ) {

    		this.x = v.x;
    		this.y = v.y;
    		this.z = v.z;
    		this.w = ( v.w !== undefined ) ? v.w : 1;

    		return this;

    	}

    	add( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
    			return this.addVectors( v, w );

    		}

    		this.x += v.x;
    		this.y += v.y;
    		this.z += v.z;
    		this.w += v.w;

    		return this;

    	}

    	addScalar( s ) {

    		this.x += s;
    		this.y += s;
    		this.z += s;
    		this.w += s;

    		return this;

    	}

    	addVectors( a, b ) {

    		this.x = a.x + b.x;
    		this.y = a.y + b.y;
    		this.z = a.z + b.z;
    		this.w = a.w + b.w;

    		return this;

    	}

    	addScaledVector( v, s ) {

    		this.x += v.x * s;
    		this.y += v.y * s;
    		this.z += v.z * s;
    		this.w += v.w * s;

    		return this;

    	}

    	sub( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
    			return this.subVectors( v, w );

    		}

    		this.x -= v.x;
    		this.y -= v.y;
    		this.z -= v.z;
    		this.w -= v.w;

    		return this;

    	}

    	subScalar( s ) {

    		this.x -= s;
    		this.y -= s;
    		this.z -= s;
    		this.w -= s;

    		return this;

    	}

    	subVectors( a, b ) {

    		this.x = a.x - b.x;
    		this.y = a.y - b.y;
    		this.z = a.z - b.z;
    		this.w = a.w - b.w;

    		return this;

    	}

    	multiply( v ) {

    		this.x *= v.x;
    		this.y *= v.y;
    		this.z *= v.z;
    		this.w *= v.w;

    		return this;

    	}

    	multiplyScalar( scalar ) {

    		this.x *= scalar;
    		this.y *= scalar;
    		this.z *= scalar;
    		this.w *= scalar;

    		return this;

    	}

    	applyMatrix4( m ) {

    		const x = this.x, y = this.y, z = this.z, w = this.w;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
    		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
    		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
    		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

    		return this;

    	}

    	divideScalar( scalar ) {

    		return this.multiplyScalar( 1 / scalar );

    	}

    	setAxisAngleFromQuaternion( q ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

    		// q is assumed to be normalized

    		this.w = 2 * Math.acos( q.w );

    		const s = Math.sqrt( 1 - q.w * q.w );

    		if ( s < 0.0001 ) {

    			this.x = 1;
    			this.y = 0;
    			this.z = 0;

    		} else {

    			this.x = q.x / s;
    			this.y = q.y / s;
    			this.z = q.z / s;

    		}

    		return this;

    	}

    	setAxisAngleFromRotationMatrix( m ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    		let angle, x, y, z; // variables for result
    		const epsilon = 0.01,		// margin to allow for rounding errors
    			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

    			te = m.elements,

    			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
    			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
    			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

    		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
    		     ( Math.abs( m13 - m31 ) < epsilon ) &&
    		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

    			// singularity found
    			// first check for identity matrix which must have +1 for all terms
    			// in leading diagonal and zero in other terms

    			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
    			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
    			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
    			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

    				// this singularity is identity matrix so angle = 0

    				this.set( 1, 0, 0, 0 );

    				return this; // zero angle, arbitrary axis

    			}

    			// otherwise this singularity is angle = 180

    			angle = Math.PI;

    			const xx = ( m11 + 1 ) / 2;
    			const yy = ( m22 + 1 ) / 2;
    			const zz = ( m33 + 1 ) / 2;
    			const xy = ( m12 + m21 ) / 4;
    			const xz = ( m13 + m31 ) / 4;
    			const yz = ( m23 + m32 ) / 4;

    			if ( ( xx > yy ) && ( xx > zz ) ) {

    				// m11 is the largest diagonal term

    				if ( xx < epsilon ) {

    					x = 0;
    					y = 0.707106781;
    					z = 0.707106781;

    				} else {

    					x = Math.sqrt( xx );
    					y = xy / x;
    					z = xz / x;

    				}

    			} else if ( yy > zz ) {

    				// m22 is the largest diagonal term

    				if ( yy < epsilon ) {

    					x = 0.707106781;
    					y = 0;
    					z = 0.707106781;

    				} else {

    					y = Math.sqrt( yy );
    					x = xy / y;
    					z = yz / y;

    				}

    			} else {

    				// m33 is the largest diagonal term so base result on this

    				if ( zz < epsilon ) {

    					x = 0.707106781;
    					y = 0.707106781;
    					z = 0;

    				} else {

    					z = Math.sqrt( zz );
    					x = xz / z;
    					y = yz / z;

    				}

    			}

    			this.set( x, y, z, angle );

    			return this; // return 180 deg rotation

    		}

    		// as we have reached here there are no singularities so we can handle normally

    		let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
    			( m13 - m31 ) * ( m13 - m31 ) +
    			( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

    		if ( Math.abs( s ) < 0.001 ) s = 1;

    		// prevent divide by zero, should not happen if matrix is orthogonal and should be
    		// caught by singularity test above, but I've left it in just in case

    		this.x = ( m32 - m23 ) / s;
    		this.y = ( m13 - m31 ) / s;
    		this.z = ( m21 - m12 ) / s;
    		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

    		return this;

    	}

    	min( v ) {

    		this.x = Math.min( this.x, v.x );
    		this.y = Math.min( this.y, v.y );
    		this.z = Math.min( this.z, v.z );
    		this.w = Math.min( this.w, v.w );

    		return this;

    	}

    	max( v ) {

    		this.x = Math.max( this.x, v.x );
    		this.y = Math.max( this.y, v.y );
    		this.z = Math.max( this.z, v.z );
    		this.w = Math.max( this.w, v.w );

    		return this;

    	}

    	clamp( min, max ) {

    		// assumes min < max, componentwise

    		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
    		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
    		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
    		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

    		return this;

    	}

    	clampScalar( minVal, maxVal ) {

    		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
    		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
    		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
    		this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

    		return this;

    	}

    	clampLength( min, max ) {

    		const length = this.length();

    		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

    	}

    	floor() {

    		this.x = Math.floor( this.x );
    		this.y = Math.floor( this.y );
    		this.z = Math.floor( this.z );
    		this.w = Math.floor( this.w );

    		return this;

    	}

    	ceil() {

    		this.x = Math.ceil( this.x );
    		this.y = Math.ceil( this.y );
    		this.z = Math.ceil( this.z );
    		this.w = Math.ceil( this.w );

    		return this;

    	}

    	round() {

    		this.x = Math.round( this.x );
    		this.y = Math.round( this.y );
    		this.z = Math.round( this.z );
    		this.w = Math.round( this.w );

    		return this;

    	}

    	roundToZero() {

    		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
    		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
    		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
    		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

    		return this;

    	}

    	negate() {

    		this.x = - this.x;
    		this.y = - this.y;
    		this.z = - this.z;
    		this.w = - this.w;

    		return this;

    	}

    	dot( v ) {

    		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

    	}

    	lengthSq() {

    		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

    	}

    	length() {

    		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

    	}

    	manhattanLength() {

    		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

    	}

    	normalize() {

    		return this.divideScalar( this.length() || 1 );

    	}

    	setLength( length ) {

    		return this.normalize().multiplyScalar( length );

    	}

    	lerp( v, alpha ) {

    		this.x += ( v.x - this.x ) * alpha;
    		this.y += ( v.y - this.y ) * alpha;
    		this.z += ( v.z - this.z ) * alpha;
    		this.w += ( v.w - this.w ) * alpha;

    		return this;

    	}

    	lerpVectors( v1, v2, alpha ) {

    		this.x = v1.x + ( v2.x - v1.x ) * alpha;
    		this.y = v1.y + ( v2.y - v1.y ) * alpha;
    		this.z = v1.z + ( v2.z - v1.z ) * alpha;
    		this.w = v1.w + ( v2.w - v1.w ) * alpha;

    		return this;

    	}

    	equals( v ) {

    		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

    	}

    	fromArray( array, offset = 0 ) {

    		this.x = array[ offset ];
    		this.y = array[ offset + 1 ];
    		this.z = array[ offset + 2 ];
    		this.w = array[ offset + 3 ];

    		return this;

    	}

    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this.x;
    		array[ offset + 1 ] = this.y;
    		array[ offset + 2 ] = this.z;
    		array[ offset + 3 ] = this.w;

    		return array;

    	}

    	fromBufferAttribute( attribute, index, offset ) {

    		if ( offset !== undefined ) {

    			console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

    		}

    		this.x = attribute.getX( index );
    		this.y = attribute.getY( index );
    		this.z = attribute.getZ( index );
    		this.w = attribute.getW( index );

    		return this;

    	}

    	random() {

    		this.x = Math.random();
    		this.y = Math.random();
    		this.z = Math.random();
    		this.w = Math.random();

    		return this;

    	}

    	*[ Symbol.iterator ]() {

    		yield this.x;
    		yield this.y;
    		yield this.z;
    		yield this.w;

    	}

    }

    /*
     In options, we can specify:
     * Texture parameters for an auto-generated target texture
     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
    */
    class WebGLRenderTarget extends EventDispatcher {

    	constructor( width, height, options = {} ) {

    		super();

    		this.isWebGLRenderTarget = true;

    		this.width = width;
    		this.height = height;
    		this.depth = 1;

    		this.scissor = new Vector4( 0, 0, width, height );
    		this.scissorTest = false;

    		this.viewport = new Vector4( 0, 0, width, height );

    		const image = { width: width, height: height, depth: 1 };

    		this.texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
    		this.texture.isRenderTargetTexture = true;

    		this.texture.flipY = false;
    		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
    		this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
    		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

    		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
    		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;

    		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

    		this.samples = options.samples !== undefined ? options.samples : 0;

    	}

    	setSize( width, height, depth = 1 ) {

    		if ( this.width !== width || this.height !== height || this.depth !== depth ) {

    			this.width = width;
    			this.height = height;
    			this.depth = depth;

    			this.texture.image.width = width;
    			this.texture.image.height = height;
    			this.texture.image.depth = depth;

    			this.dispose();

    		}

    		this.viewport.set( 0, 0, width, height );
    		this.scissor.set( 0, 0, width, height );

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    	copy( source ) {

    		this.width = source.width;
    		this.height = source.height;
    		this.depth = source.depth;

    		this.viewport.copy( source.viewport );

    		this.texture = source.texture.clone();
    		this.texture.isRenderTargetTexture = true;

    		// ensure image object is not shared, see #20328

    		const image = Object.assign( {}, source.texture.image );
    		this.texture.source = new Source( image );

    		this.depthBuffer = source.depthBuffer;
    		this.stencilBuffer = source.stencilBuffer;

    		if ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();

    		this.samples = source.samples;

    		return this;

    	}

    	dispose() {

    		this.dispatchEvent( { type: 'dispose' } );

    	}

    }

    class DataArrayTexture extends Texture {

    	constructor( data = null, width = 1, height = 1, depth = 1 ) {

    		super( null );

    		this.isDataArrayTexture = true;

    		this.image = { data, width, height, depth };

    		this.magFilter = NearestFilter;
    		this.minFilter = NearestFilter;

    		this.wrapR = ClampToEdgeWrapping;

    		this.generateMipmaps = false;
    		this.flipY = false;
    		this.unpackAlignment = 1;

    	}

    }

    class Data3DTexture extends Texture {

    	constructor( data = null, width = 1, height = 1, depth = 1 ) {

    		// We're going to add .setXXX() methods for setting properties later.
    		// Users can still set in DataTexture3D directly.
    		//
    		//	const texture = new THREE.DataTexture3D( data, width, height, depth );
    		// 	texture.anisotropy = 16;
    		//
    		// See #14839

    		super( null );

    		this.isData3DTexture = true;

    		this.image = { data, width, height, depth };

    		this.magFilter = NearestFilter;
    		this.minFilter = NearestFilter;

    		this.wrapR = ClampToEdgeWrapping;

    		this.generateMipmaps = false;
    		this.flipY = false;
    		this.unpackAlignment = 1;

    	}

    }

    class Quaternion {

    	constructor( x = 0, y = 0, z = 0, w = 1 ) {

    		this.isQuaternion = true;

    		this._x = x;
    		this._y = y;
    		this._z = z;
    		this._w = w;

    	}

    	static slerp( qa, qb, qm, t ) {

    		console.warn( 'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.' );
    		return qm.slerpQuaternions( qa, qb, t );

    	}

    	static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

    		// fuzz-free, array-based Quaternion SLERP operation

    		let x0 = src0[ srcOffset0 + 0 ],
    			y0 = src0[ srcOffset0 + 1 ],
    			z0 = src0[ srcOffset0 + 2 ],
    			w0 = src0[ srcOffset0 + 3 ];

    		const x1 = src1[ srcOffset1 + 0 ],
    			y1 = src1[ srcOffset1 + 1 ],
    			z1 = src1[ srcOffset1 + 2 ],
    			w1 = src1[ srcOffset1 + 3 ];

    		if ( t === 0 ) {

    			dst[ dstOffset + 0 ] = x0;
    			dst[ dstOffset + 1 ] = y0;
    			dst[ dstOffset + 2 ] = z0;
    			dst[ dstOffset + 3 ] = w0;
    			return;

    		}

    		if ( t === 1 ) {

    			dst[ dstOffset + 0 ] = x1;
    			dst[ dstOffset + 1 ] = y1;
    			dst[ dstOffset + 2 ] = z1;
    			dst[ dstOffset + 3 ] = w1;
    			return;

    		}

    		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

    			let s = 1 - t;
    			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
    				dir = ( cos >= 0 ? 1 : - 1 ),
    				sqrSin = 1 - cos * cos;

    			// Skip the Slerp for tiny steps to avoid numeric problems:
    			if ( sqrSin > Number.EPSILON ) {

    				const sin = Math.sqrt( sqrSin ),
    					len = Math.atan2( sin, cos * dir );

    				s = Math.sin( s * len ) / sin;
    				t = Math.sin( t * len ) / sin;

    			}

    			const tDir = t * dir;

    			x0 = x0 * s + x1 * tDir;
    			y0 = y0 * s + y1 * tDir;
    			z0 = z0 * s + z1 * tDir;
    			w0 = w0 * s + w1 * tDir;

    			// Normalize in case we just did a lerp:
    			if ( s === 1 - t ) {

    				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

    				x0 *= f;
    				y0 *= f;
    				z0 *= f;
    				w0 *= f;

    			}

    		}

    		dst[ dstOffset ] = x0;
    		dst[ dstOffset + 1 ] = y0;
    		dst[ dstOffset + 2 ] = z0;
    		dst[ dstOffset + 3 ] = w0;

    	}

    	static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

    		const x0 = src0[ srcOffset0 ];
    		const y0 = src0[ srcOffset0 + 1 ];
    		const z0 = src0[ srcOffset0 + 2 ];
    		const w0 = src0[ srcOffset0 + 3 ];

    		const x1 = src1[ srcOffset1 ];
    		const y1 = src1[ srcOffset1 + 1 ];
    		const z1 = src1[ srcOffset1 + 2 ];
    		const w1 = src1[ srcOffset1 + 3 ];

    		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
    		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
    		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
    		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

    		return dst;

    	}

    	get x() {

    		return this._x;

    	}

    	set x( value ) {

    		this._x = value;
    		this._onChangeCallback();

    	}

    	get y() {

    		return this._y;

    	}

    	set y( value ) {

    		this._y = value;
    		this._onChangeCallback();

    	}

    	get z() {

    		return this._z;

    	}

    	set z( value ) {

    		this._z = value;
    		this._onChangeCallback();

    	}

    	get w() {

    		return this._w;

    	}

    	set w( value ) {

    		this._w = value;
    		this._onChangeCallback();

    	}

    	set( x, y, z, w ) {

    		this._x = x;
    		this._y = y;
    		this._z = z;
    		this._w = w;

    		this._onChangeCallback();

    		return this;

    	}

    	clone() {

    		return new this.constructor( this._x, this._y, this._z, this._w );

    	}

    	copy( quaternion ) {

    		this._x = quaternion.x;
    		this._y = quaternion.y;
    		this._z = quaternion.z;
    		this._w = quaternion.w;

    		this._onChangeCallback();

    		return this;

    	}

    	setFromEuler( euler, update ) {

    		if ( ! ( euler && euler.isEuler ) ) {

    			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

    		}

    		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

    		// http://www.mathworks.com/matlabcentral/fileexchange/
    		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
    		//	content/SpinCalc.m

    		const cos = Math.cos;
    		const sin = Math.sin;

    		const c1 = cos( x / 2 );
    		const c2 = cos( y / 2 );
    		const c3 = cos( z / 2 );

    		const s1 = sin( x / 2 );
    		const s2 = sin( y / 2 );
    		const s3 = sin( z / 2 );

    		switch ( order ) {

    			case 'XYZ':
    				this._x = s1 * c2 * c3 + c1 * s2 * s3;
    				this._y = c1 * s2 * c3 - s1 * c2 * s3;
    				this._z = c1 * c2 * s3 + s1 * s2 * c3;
    				this._w = c1 * c2 * c3 - s1 * s2 * s3;
    				break;

    			case 'YXZ':
    				this._x = s1 * c2 * c3 + c1 * s2 * s3;
    				this._y = c1 * s2 * c3 - s1 * c2 * s3;
    				this._z = c1 * c2 * s3 - s1 * s2 * c3;
    				this._w = c1 * c2 * c3 + s1 * s2 * s3;
    				break;

    			case 'ZXY':
    				this._x = s1 * c2 * c3 - c1 * s2 * s3;
    				this._y = c1 * s2 * c3 + s1 * c2 * s3;
    				this._z = c1 * c2 * s3 + s1 * s2 * c3;
    				this._w = c1 * c2 * c3 - s1 * s2 * s3;
    				break;

    			case 'ZYX':
    				this._x = s1 * c2 * c3 - c1 * s2 * s3;
    				this._y = c1 * s2 * c3 + s1 * c2 * s3;
    				this._z = c1 * c2 * s3 - s1 * s2 * c3;
    				this._w = c1 * c2 * c3 + s1 * s2 * s3;
    				break;

    			case 'YZX':
    				this._x = s1 * c2 * c3 + c1 * s2 * s3;
    				this._y = c1 * s2 * c3 + s1 * c2 * s3;
    				this._z = c1 * c2 * s3 - s1 * s2 * c3;
    				this._w = c1 * c2 * c3 - s1 * s2 * s3;
    				break;

    			case 'XZY':
    				this._x = s1 * c2 * c3 - c1 * s2 * s3;
    				this._y = c1 * s2 * c3 - s1 * c2 * s3;
    				this._z = c1 * c2 * s3 + s1 * s2 * c3;
    				this._w = c1 * c2 * c3 + s1 * s2 * s3;
    				break;

    			default:
    				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

    		}

    		if ( update !== false ) this._onChangeCallback();

    		return this;

    	}

    	setFromAxisAngle( axis, angle ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

    		// assumes axis is normalized

    		const halfAngle = angle / 2, s = Math.sin( halfAngle );

    		this._x = axis.x * s;
    		this._y = axis.y * s;
    		this._z = axis.z * s;
    		this._w = Math.cos( halfAngle );

    		this._onChangeCallback();

    		return this;

    	}

    	setFromRotationMatrix( m ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    		const te = m.elements,

    			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
    			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
    			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

    			trace = m11 + m22 + m33;

    		if ( trace > 0 ) {

    			const s = 0.5 / Math.sqrt( trace + 1.0 );

    			this._w = 0.25 / s;
    			this._x = ( m32 - m23 ) * s;
    			this._y = ( m13 - m31 ) * s;
    			this._z = ( m21 - m12 ) * s;

    		} else if ( m11 > m22 && m11 > m33 ) {

    			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

    			this._w = ( m32 - m23 ) / s;
    			this._x = 0.25 * s;
    			this._y = ( m12 + m21 ) / s;
    			this._z = ( m13 + m31 ) / s;

    		} else if ( m22 > m33 ) {

    			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

    			this._w = ( m13 - m31 ) / s;
    			this._x = ( m12 + m21 ) / s;
    			this._y = 0.25 * s;
    			this._z = ( m23 + m32 ) / s;

    		} else {

    			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

    			this._w = ( m21 - m12 ) / s;
    			this._x = ( m13 + m31 ) / s;
    			this._y = ( m23 + m32 ) / s;
    			this._z = 0.25 * s;

    		}

    		this._onChangeCallback();

    		return this;

    	}

    	setFromUnitVectors( vFrom, vTo ) {

    		// assumes direction vectors vFrom and vTo are normalized

    		let r = vFrom.dot( vTo ) + 1;

    		if ( r < Number.EPSILON ) {

    			// vFrom and vTo point in opposite directions

    			r = 0;

    			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

    				this._x = - vFrom.y;
    				this._y = vFrom.x;
    				this._z = 0;
    				this._w = r;

    			} else {

    				this._x = 0;
    				this._y = - vFrom.z;
    				this._z = vFrom.y;
    				this._w = r;

    			}

    		} else {

    			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

    			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
    			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
    			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
    			this._w = r;

    		}

    		return this.normalize();

    	}

    	angleTo( q ) {

    		return 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );

    	}

    	rotateTowards( q, step ) {

    		const angle = this.angleTo( q );

    		if ( angle === 0 ) return this;

    		const t = Math.min( 1, step / angle );

    		this.slerp( q, t );

    		return this;

    	}

    	identity() {

    		return this.set( 0, 0, 0, 1 );

    	}

    	invert() {

    		// quaternion is assumed to have unit length

    		return this.conjugate();

    	}

    	conjugate() {

    		this._x *= - 1;
    		this._y *= - 1;
    		this._z *= - 1;

    		this._onChangeCallback();

    		return this;

    	}

    	dot( v ) {

    		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

    	}

    	lengthSq() {

    		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

    	}

    	length() {

    		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

    	}

    	normalize() {

    		let l = this.length();

    		if ( l === 0 ) {

    			this._x = 0;
    			this._y = 0;
    			this._z = 0;
    			this._w = 1;

    		} else {

    			l = 1 / l;

    			this._x = this._x * l;
    			this._y = this._y * l;
    			this._z = this._z * l;
    			this._w = this._w * l;

    		}

    		this._onChangeCallback();

    		return this;

    	}

    	multiply( q, p ) {

    		if ( p !== undefined ) {

    			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
    			return this.multiplyQuaternions( q, p );

    		}

    		return this.multiplyQuaternions( this, q );

    	}

    	premultiply( q ) {

    		return this.multiplyQuaternions( q, this );

    	}

    	multiplyQuaternions( a, b ) {

    		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

    		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
    		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

    		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

    		this._onChangeCallback();

    		return this;

    	}

    	slerp( qb, t ) {

    		if ( t === 0 ) return this;
    		if ( t === 1 ) return this.copy( qb );

    		const x = this._x, y = this._y, z = this._z, w = this._w;

    		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

    		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

    		if ( cosHalfTheta < 0 ) {

    			this._w = - qb._w;
    			this._x = - qb._x;
    			this._y = - qb._y;
    			this._z = - qb._z;

    			cosHalfTheta = - cosHalfTheta;

    		} else {

    			this.copy( qb );

    		}

    		if ( cosHalfTheta >= 1.0 ) {

    			this._w = w;
    			this._x = x;
    			this._y = y;
    			this._z = z;

    			return this;

    		}

    		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

    		if ( sqrSinHalfTheta <= Number.EPSILON ) {

    			const s = 1 - t;
    			this._w = s * w + t * this._w;
    			this._x = s * x + t * this._x;
    			this._y = s * y + t * this._y;
    			this._z = s * z + t * this._z;

    			this.normalize();
    			this._onChangeCallback();

    			return this;

    		}

    		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
    		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
    		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
    			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

    		this._w = ( w * ratioA + this._w * ratioB );
    		this._x = ( x * ratioA + this._x * ratioB );
    		this._y = ( y * ratioA + this._y * ratioB );
    		this._z = ( z * ratioA + this._z * ratioB );

    		this._onChangeCallback();

    		return this;

    	}

    	slerpQuaternions( qa, qb, t ) {

    		return this.copy( qa ).slerp( qb, t );

    	}

    	random() {

    		// Derived from http://planning.cs.uiuc.edu/node198.html
    		// Note, this source uses w, x, y, z ordering,
    		// so we swap the order below.

    		const u1 = Math.random();
    		const sqrt1u1 = Math.sqrt( 1 - u1 );
    		const sqrtu1 = Math.sqrt( u1 );

    		const u2 = 2 * Math.PI * Math.random();

    		const u3 = 2 * Math.PI * Math.random();

    		return this.set(
    			sqrt1u1 * Math.cos( u2 ),
    			sqrtu1 * Math.sin( u3 ),
    			sqrtu1 * Math.cos( u3 ),
    			sqrt1u1 * Math.sin( u2 ),
    		);

    	}

    	equals( quaternion ) {

    		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

    	}

    	fromArray( array, offset = 0 ) {

    		this._x = array[ offset ];
    		this._y = array[ offset + 1 ];
    		this._z = array[ offset + 2 ];
    		this._w = array[ offset + 3 ];

    		this._onChangeCallback();

    		return this;

    	}

    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this._x;
    		array[ offset + 1 ] = this._y;
    		array[ offset + 2 ] = this._z;
    		array[ offset + 3 ] = this._w;

    		return array;

    	}

    	fromBufferAttribute( attribute, index ) {

    		this._x = attribute.getX( index );
    		this._y = attribute.getY( index );
    		this._z = attribute.getZ( index );
    		this._w = attribute.getW( index );

    		return this;

    	}

    	_onChange( callback ) {

    		this._onChangeCallback = callback;

    		return this;

    	}

    	_onChangeCallback() {}

    	*[ Symbol.iterator ]() {

    		yield this._x;
    		yield this._y;
    		yield this._z;
    		yield this._w;

    	}

    }

    class Vector3 {

    	constructor( x = 0, y = 0, z = 0 ) {

    		this.isVector3 = true;

    		this.x = x;
    		this.y = y;
    		this.z = z;

    	}

    	set( x, y, z ) {

    		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

    		this.x = x;
    		this.y = y;
    		this.z = z;

    		return this;

    	}

    	setScalar( scalar ) {

    		this.x = scalar;
    		this.y = scalar;
    		this.z = scalar;

    		return this;

    	}

    	setX( x ) {

    		this.x = x;

    		return this;

    	}

    	setY( y ) {

    		this.y = y;

    		return this;

    	}

    	setZ( z ) {

    		this.z = z;

    		return this;

    	}

    	setComponent( index, value ) {

    		switch ( index ) {

    			case 0: this.x = value; break;
    			case 1: this.y = value; break;
    			case 2: this.z = value; break;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    		return this;

    	}

    	getComponent( index ) {

    		switch ( index ) {

    			case 0: return this.x;
    			case 1: return this.y;
    			case 2: return this.z;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    	}

    	clone() {

    		return new this.constructor( this.x, this.y, this.z );

    	}

    	copy( v ) {

    		this.x = v.x;
    		this.y = v.y;
    		this.z = v.z;

    		return this;

    	}

    	add( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
    			return this.addVectors( v, w );

    		}

    		this.x += v.x;
    		this.y += v.y;
    		this.z += v.z;

    		return this;

    	}

    	addScalar( s ) {

    		this.x += s;
    		this.y += s;
    		this.z += s;

    		return this;

    	}

    	addVectors( a, b ) {

    		this.x = a.x + b.x;
    		this.y = a.y + b.y;
    		this.z = a.z + b.z;

    		return this;

    	}

    	addScaledVector( v, s ) {

    		this.x += v.x * s;
    		this.y += v.y * s;
    		this.z += v.z * s;

    		return this;

    	}

    	sub( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
    			return this.subVectors( v, w );

    		}

    		this.x -= v.x;
    		this.y -= v.y;
    		this.z -= v.z;

    		return this;

    	}

    	subScalar( s ) {

    		this.x -= s;
    		this.y -= s;
    		this.z -= s;

    		return this;

    	}

    	subVectors( a, b ) {

    		this.x = a.x - b.x;
    		this.y = a.y - b.y;
    		this.z = a.z - b.z;

    		return this;

    	}

    	multiply( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
    			return this.multiplyVectors( v, w );

    		}

    		this.x *= v.x;
    		this.y *= v.y;
    		this.z *= v.z;

    		return this;

    	}

    	multiplyScalar( scalar ) {

    		this.x *= scalar;
    		this.y *= scalar;
    		this.z *= scalar;

    		return this;

    	}

    	multiplyVectors( a, b ) {

    		this.x = a.x * b.x;
    		this.y = a.y * b.y;
    		this.z = a.z * b.z;

    		return this;

    	}

    	applyEuler( euler ) {

    		if ( ! ( euler && euler.isEuler ) ) {

    			console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

    		}

    		return this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );

    	}

    	applyAxisAngle( axis, angle ) {

    		return this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );

    	}

    	applyMatrix3( m ) {

    		const x = this.x, y = this.y, z = this.z;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
    		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
    		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

    		return this;

    	}

    	applyNormalMatrix( m ) {

    		return this.applyMatrix3( m ).normalize();

    	}

    	applyMatrix4( m ) {

    		const x = this.x, y = this.y, z = this.z;
    		const e = m.elements;

    		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

    		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
    		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
    		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

    		return this;

    	}

    	applyQuaternion( q ) {

    		const x = this.x, y = this.y, z = this.z;
    		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

    		// calculate quat * vector

    		const ix = qw * x + qy * z - qz * y;
    		const iy = qw * y + qz * x - qx * z;
    		const iz = qw * z + qx * y - qy * x;
    		const iw = - qx * x - qy * y - qz * z;

    		// calculate result * inverse quat

    		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
    		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
    		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

    		return this;

    	}

    	project( camera ) {

    		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

    	}

    	unproject( camera ) {

    		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

    	}

    	transformDirection( m ) {

    		// input: THREE.Matrix4 affine matrix
    		// vector interpreted as a direction

    		const x = this.x, y = this.y, z = this.z;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
    		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
    		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

    		return this.normalize();

    	}

    	divide( v ) {

    		this.x /= v.x;
    		this.y /= v.y;
    		this.z /= v.z;

    		return this;

    	}

    	divideScalar( scalar ) {

    		return this.multiplyScalar( 1 / scalar );

    	}

    	min( v ) {

    		this.x = Math.min( this.x, v.x );
    		this.y = Math.min( this.y, v.y );
    		this.z = Math.min( this.z, v.z );

    		return this;

    	}

    	max( v ) {

    		this.x = Math.max( this.x, v.x );
    		this.y = Math.max( this.y, v.y );
    		this.z = Math.max( this.z, v.z );

    		return this;

    	}

    	clamp( min, max ) {

    		// assumes min < max, componentwise

    		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
    		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
    		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

    		return this;

    	}

    	clampScalar( minVal, maxVal ) {

    		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
    		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
    		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

    		return this;

    	}

    	clampLength( min, max ) {

    		const length = this.length();

    		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

    	}

    	floor() {

    		this.x = Math.floor( this.x );
    		this.y = Math.floor( this.y );
    		this.z = Math.floor( this.z );

    		return this;

    	}

    	ceil() {

    		this.x = Math.ceil( this.x );
    		this.y = Math.ceil( this.y );
    		this.z = Math.ceil( this.z );

    		return this;

    	}

    	round() {

    		this.x = Math.round( this.x );
    		this.y = Math.round( this.y );
    		this.z = Math.round( this.z );

    		return this;

    	}

    	roundToZero() {

    		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
    		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
    		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

    		return this;

    	}

    	negate() {

    		this.x = - this.x;
    		this.y = - this.y;
    		this.z = - this.z;

    		return this;

    	}

    	dot( v ) {

    		return this.x * v.x + this.y * v.y + this.z * v.z;

    	}

    	// TODO lengthSquared?

    	lengthSq() {

    		return this.x * this.x + this.y * this.y + this.z * this.z;

    	}

    	length() {

    		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

    	}

    	manhattanLength() {

    		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

    	}

    	normalize() {

    		return this.divideScalar( this.length() || 1 );

    	}

    	setLength( length ) {

    		return this.normalize().multiplyScalar( length );

    	}

    	lerp( v, alpha ) {

    		this.x += ( v.x - this.x ) * alpha;
    		this.y += ( v.y - this.y ) * alpha;
    		this.z += ( v.z - this.z ) * alpha;

    		return this;

    	}

    	lerpVectors( v1, v2, alpha ) {

    		this.x = v1.x + ( v2.x - v1.x ) * alpha;
    		this.y = v1.y + ( v2.y - v1.y ) * alpha;
    		this.z = v1.z + ( v2.z - v1.z ) * alpha;

    		return this;

    	}

    	cross( v, w ) {

    		if ( w !== undefined ) {

    			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
    			return this.crossVectors( v, w );

    		}

    		return this.crossVectors( this, v );

    	}

    	crossVectors( a, b ) {

    		const ax = a.x, ay = a.y, az = a.z;
    		const bx = b.x, by = b.y, bz = b.z;

    		this.x = ay * bz - az * by;
    		this.y = az * bx - ax * bz;
    		this.z = ax * by - ay * bx;

    		return this;

    	}

    	projectOnVector( v ) {

    		const denominator = v.lengthSq();

    		if ( denominator === 0 ) return this.set( 0, 0, 0 );

    		const scalar = v.dot( this ) / denominator;

    		return this.copy( v ).multiplyScalar( scalar );

    	}

    	projectOnPlane( planeNormal ) {

    		_vector$c.copy( this ).projectOnVector( planeNormal );

    		return this.sub( _vector$c );

    	}

    	reflect( normal ) {

    		// reflect incident vector off plane orthogonal to normal
    		// normal is assumed to have unit length

    		return this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

    	}

    	angleTo( v ) {

    		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

    		if ( denominator === 0 ) return Math.PI / 2;

    		const theta = this.dot( v ) / denominator;

    		// clamp, to handle numerical problems

    		return Math.acos( clamp( theta, - 1, 1 ) );

    	}

    	distanceTo( v ) {

    		return Math.sqrt( this.distanceToSquared( v ) );

    	}

    	distanceToSquared( v ) {

    		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

    		return dx * dx + dy * dy + dz * dz;

    	}

    	manhattanDistanceTo( v ) {

    		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

    	}

    	setFromSpherical( s ) {

    		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

    	}

    	setFromSphericalCoords( radius, phi, theta ) {

    		const sinPhiRadius = Math.sin( phi ) * radius;

    		this.x = sinPhiRadius * Math.sin( theta );
    		this.y = Math.cos( phi ) * radius;
    		this.z = sinPhiRadius * Math.cos( theta );

    		return this;

    	}

    	setFromCylindrical( c ) {

    		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

    	}

    	setFromCylindricalCoords( radius, theta, y ) {

    		this.x = radius * Math.sin( theta );
    		this.y = y;
    		this.z = radius * Math.cos( theta );

    		return this;

    	}

    	setFromMatrixPosition( m ) {

    		const e = m.elements;

    		this.x = e[ 12 ];
    		this.y = e[ 13 ];
    		this.z = e[ 14 ];

    		return this;

    	}

    	setFromMatrixScale( m ) {

    		const sx = this.setFromMatrixColumn( m, 0 ).length();
    		const sy = this.setFromMatrixColumn( m, 1 ).length();
    		const sz = this.setFromMatrixColumn( m, 2 ).length();

    		this.x = sx;
    		this.y = sy;
    		this.z = sz;

    		return this;

    	}

    	setFromMatrixColumn( m, index ) {

    		return this.fromArray( m.elements, index * 4 );

    	}

    	setFromMatrix3Column( m, index ) {

    		return this.fromArray( m.elements, index * 3 );

    	}

    	setFromEuler( e ) {

    		this.x = e._x;
    		this.y = e._y;
    		this.z = e._z;

    		return this;

    	}

    	equals( v ) {

    		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

    	}

    	fromArray( array, offset = 0 ) {

    		this.x = array[ offset ];
    		this.y = array[ offset + 1 ];
    		this.z = array[ offset + 2 ];

    		return this;

    	}

    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this.x;
    		array[ offset + 1 ] = this.y;
    		array[ offset + 2 ] = this.z;

    		return array;

    	}

    	fromBufferAttribute( attribute, index, offset ) {

    		if ( offset !== undefined ) {

    			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

    		}

    		this.x = attribute.getX( index );
    		this.y = attribute.getY( index );
    		this.z = attribute.getZ( index );

    		return this;

    	}

    	random() {

    		this.x = Math.random();
    		this.y = Math.random();
    		this.z = Math.random();

    		return this;

    	}

    	randomDirection() {

    		// Derived from https://mathworld.wolfram.com/SpherePointPicking.html

    		const u = ( Math.random() - 0.5 ) * 2;
    		const t = Math.random() * Math.PI * 2;
    		const f = Math.sqrt( 1 - u ** 2 );

    		this.x = f * Math.cos( t );
    		this.y = f * Math.sin( t );
    		this.z = u;

    		return this;

    	}

    	*[ Symbol.iterator ]() {

    		yield this.x;
    		yield this.y;
    		yield this.z;

    	}

    }

    const _vector$c = /*@__PURE__*/ new Vector3();
    const _quaternion$4 = /*@__PURE__*/ new Quaternion();

    class Box3 {

    	constructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {

    		this.isBox3 = true;

    		this.min = min;
    		this.max = max;

    	}

    	set( min, max ) {

    		this.min.copy( min );
    		this.max.copy( max );

    		return this;

    	}

    	setFromArray( array ) {

    		let minX = + Infinity;
    		let minY = + Infinity;
    		let minZ = + Infinity;

    		let maxX = - Infinity;
    		let maxY = - Infinity;
    		let maxZ = - Infinity;

    		for ( let i = 0, l = array.length; i < l; i += 3 ) {

    			const x = array[ i ];
    			const y = array[ i + 1 ];
    			const z = array[ i + 2 ];

    			if ( x < minX ) minX = x;
    			if ( y < minY ) minY = y;
    			if ( z < minZ ) minZ = z;

    			if ( x > maxX ) maxX = x;
    			if ( y > maxY ) maxY = y;
    			if ( z > maxZ ) maxZ = z;

    		}

    		this.min.set( minX, minY, minZ );
    		this.max.set( maxX, maxY, maxZ );

    		return this;

    	}

    	setFromBufferAttribute( attribute ) {

    		let minX = + Infinity;
    		let minY = + Infinity;
    		let minZ = + Infinity;

    		let maxX = - Infinity;
    		let maxY = - Infinity;
    		let maxZ = - Infinity;

    		for ( let i = 0, l = attribute.count; i < l; i ++ ) {

    			const x = attribute.getX( i );
    			const y = attribute.getY( i );
    			const z = attribute.getZ( i );

    			if ( x < minX ) minX = x;
    			if ( y < minY ) minY = y;
    			if ( z < minZ ) minZ = z;

    			if ( x > maxX ) maxX = x;
    			if ( y > maxY ) maxY = y;
    			if ( z > maxZ ) maxZ = z;

    		}

    		this.min.set( minX, minY, minZ );
    		this.max.set( maxX, maxY, maxZ );

    		return this;

    	}

    	setFromPoints( points ) {

    		this.makeEmpty();

    		for ( let i = 0, il = points.length; i < il; i ++ ) {

    			this.expandByPoint( points[ i ] );

    		}

    		return this;

    	}

    	setFromCenterAndSize( center, size ) {

    		const halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );

    		this.min.copy( center ).sub( halfSize );
    		this.max.copy( center ).add( halfSize );

    		return this;

    	}

    	setFromObject( object, precise = false ) {

    		this.makeEmpty();

    		return this.expandByObject( object, precise );

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    	copy( box ) {

    		this.min.copy( box.min );
    		this.max.copy( box.max );

    		return this;

    	}

    	makeEmpty() {

    		this.min.x = this.min.y = this.min.z = + Infinity;
    		this.max.x = this.max.y = this.max.z = - Infinity;

    		return this;

    	}

    	isEmpty() {

    		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

    		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

    	}

    	getCenter( target ) {

    		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

    	}

    	getSize( target ) {

    		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

    	}

    	expandByPoint( point ) {

    		this.min.min( point );
    		this.max.max( point );

    		return this;

    	}

    	expandByVector( vector ) {

    		this.min.sub( vector );
    		this.max.add( vector );

    		return this;

    	}

    	expandByScalar( scalar ) {

    		this.min.addScalar( - scalar );
    		this.max.addScalar( scalar );

    		return this;

    	}

    	expandByObject( object, precise = false ) {

    		// Computes the world-axis-aligned bounding box of an object (including its children),
    		// accounting for both the object's, and children's, world transforms

    		object.updateWorldMatrix( false, false );

    		const geometry = object.geometry;

    		if ( geometry !== undefined ) {

    			if ( precise && geometry.attributes != undefined && geometry.attributes.position !== undefined ) {

    				const position = geometry.attributes.position;
    				for ( let i = 0, l = position.count; i < l; i ++ ) {

    					_vector$b.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );
    					this.expandByPoint( _vector$b );

    				}

    			} else {

    				if ( geometry.boundingBox === null ) {

    					geometry.computeBoundingBox();

    				}

    				_box$3.copy( geometry.boundingBox );
    				_box$3.applyMatrix4( object.matrixWorld );

    				this.union( _box$3 );

    			}

    		}

    		const children = object.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			this.expandByObject( children[ i ], precise );

    		}

    		return this;

    	}

    	containsPoint( point ) {

    		return point.x < this.min.x || point.x > this.max.x ||
    			point.y < this.min.y || point.y > this.max.y ||
    			point.z < this.min.z || point.z > this.max.z ? false : true;

    	}

    	containsBox( box ) {

    		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
    			this.min.y <= box.min.y && box.max.y <= this.max.y &&
    			this.min.z <= box.min.z && box.max.z <= this.max.z;

    	}

    	getParameter( point, target ) {

    		// This can potentially have a divide by zero if the box
    		// has a size dimension of 0.

    		return target.set(
    			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
    			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
    			( point.z - this.min.z ) / ( this.max.z - this.min.z )
    		);

    	}

    	intersectsBox( box ) {

    		// using 6 splitting planes to rule out intersections.
    		return box.max.x < this.min.x || box.min.x > this.max.x ||
    			box.max.y < this.min.y || box.min.y > this.max.y ||
    			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

    	}

    	intersectsSphere( sphere ) {

    		// Find the point on the AABB closest to the sphere center.
    		this.clampPoint( sphere.center, _vector$b );

    		// If that point is inside the sphere, the AABB and sphere intersect.
    		return _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

    	}

    	intersectsPlane( plane ) {

    		// We compute the minimum and maximum dot product values. If those values
    		// are on the same side (back or front) of the plane, then there is no intersection.

    		let min, max;

    		if ( plane.normal.x > 0 ) {

    			min = plane.normal.x * this.min.x;
    			max = plane.normal.x * this.max.x;

    		} else {

    			min = plane.normal.x * this.max.x;
    			max = plane.normal.x * this.min.x;

    		}

    		if ( plane.normal.y > 0 ) {

    			min += plane.normal.y * this.min.y;
    			max += plane.normal.y * this.max.y;

    		} else {

    			min += plane.normal.y * this.max.y;
    			max += plane.normal.y * this.min.y;

    		}

    		if ( plane.normal.z > 0 ) {

    			min += plane.normal.z * this.min.z;
    			max += plane.normal.z * this.max.z;

    		} else {

    			min += plane.normal.z * this.max.z;
    			max += plane.normal.z * this.min.z;

    		}

    		return ( min <= - plane.constant && max >= - plane.constant );

    	}

    	intersectsTriangle( triangle ) {

    		if ( this.isEmpty() ) {

    			return false;

    		}

    		// compute box center and extents
    		this.getCenter( _center );
    		_extents.subVectors( this.max, _center );

    		// translate triangle to aabb origin
    		_v0$2.subVectors( triangle.a, _center );
    		_v1$7.subVectors( triangle.b, _center );
    		_v2$3.subVectors( triangle.c, _center );

    		// compute edge vectors for triangle
    		_f0.subVectors( _v1$7, _v0$2 );
    		_f1.subVectors( _v2$3, _v1$7 );
    		_f2.subVectors( _v0$2, _v2$3 );

    		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
    		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
    		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
    		let axes = [
    			0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
    			_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
    			- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
    		];
    		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {

    			return false;

    		}

    		// test 3 face normals from the aabb
    		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
    		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {

    			return false;

    		}

    		// finally testing the face normal of the triangle
    		// use already existing triangle edge vectors here
    		_triangleNormal.crossVectors( _f0, _f1 );
    		axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

    		return satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents );

    	}

    	clampPoint( point, target ) {

    		return target.copy( point ).clamp( this.min, this.max );

    	}

    	distanceToPoint( point ) {

    		const clampedPoint = _vector$b.copy( point ).clamp( this.min, this.max );

    		return clampedPoint.sub( point ).length();

    	}

    	getBoundingSphere( target ) {

    		this.getCenter( target.center );

    		target.radius = this.getSize( _vector$b ).length() * 0.5;

    		return target;

    	}

    	intersect( box ) {

    		this.min.max( box.min );
    		this.max.min( box.max );

    		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
    		if ( this.isEmpty() ) this.makeEmpty();

    		return this;

    	}

    	union( box ) {

    		this.min.min( box.min );
    		this.max.max( box.max );

    		return this;

    	}

    	applyMatrix4( matrix ) {

    		// transform of empty box is an empty box.
    		if ( this.isEmpty() ) return this;

    		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
    		_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
    		_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
    		_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
    		_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
    		_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
    		_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
    		_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
    		_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

    		this.setFromPoints( _points );

    		return this;

    	}

    	translate( offset ) {

    		this.min.add( offset );
    		this.max.add( offset );

    		return this;

    	}

    	equals( box ) {

    		return box.min.equals( this.min ) && box.max.equals( this.max );

    	}

    }

    const _points = [
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3()
    ];

    const _vector$b = /*@__PURE__*/ new Vector3();

    const _box$3 = /*@__PURE__*/ new Box3();

    // triangle centered vertices

    const _v0$2 = /*@__PURE__*/ new Vector3();
    const _v1$7 = /*@__PURE__*/ new Vector3();
    const _v2$3 = /*@__PURE__*/ new Vector3();

    // triangle edge vectors

    const _f0 = /*@__PURE__*/ new Vector3();
    const _f1 = /*@__PURE__*/ new Vector3();
    const _f2 = /*@__PURE__*/ new Vector3();

    const _center = /*@__PURE__*/ new Vector3();
    const _extents = /*@__PURE__*/ new Vector3();
    const _triangleNormal = /*@__PURE__*/ new Vector3();
    const _testAxis = /*@__PURE__*/ new Vector3();

    function satForAxes( axes, v0, v1, v2, extents ) {

    	for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {

    		_testAxis.fromArray( axes, i );
    		// project the aabb onto the separating axis
    		const r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
    		// project all 3 vertices of the triangle onto the separating axis
    		const p0 = v0.dot( _testAxis );
    		const p1 = v1.dot( _testAxis );
    		const p2 = v2.dot( _testAxis );
    		// actual test, basically see if either of the most extreme of the triangle points intersects r
    		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

    			// points of the projected triangle are outside the projected half-length of the aabb
    			// the axis is separating and we can exit
    			return false;

    		}

    	}

    	return true;

    }

    const _box$2 = /*@__PURE__*/ new Box3();
    const _v1$6 = /*@__PURE__*/ new Vector3();
    const _toFarthestPoint = /*@__PURE__*/ new Vector3();
    const _toPoint = /*@__PURE__*/ new Vector3();

    class Sphere {

    	constructor( center = new Vector3(), radius = - 1 ) {

    		this.center = center;
    		this.radius = radius;

    	}

    	set( center, radius ) {

    		this.center.copy( center );
    		this.radius = radius;

    		return this;

    	}

    	setFromPoints( points, optionalCenter ) {

    		const center = this.center;

    		if ( optionalCenter !== undefined ) {

    			center.copy( optionalCenter );

    		} else {

    			_box$2.setFromPoints( points ).getCenter( center );

    		}

    		let maxRadiusSq = 0;

    		for ( let i = 0, il = points.length; i < il; i ++ ) {

    			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

    		}

    		this.radius = Math.sqrt( maxRadiusSq );

    		return this;

    	}

    	copy( sphere ) {

    		this.center.copy( sphere.center );
    		this.radius = sphere.radius;

    		return this;

    	}

    	isEmpty() {

    		return ( this.radius < 0 );

    	}

    	makeEmpty() {

    		this.center.set( 0, 0, 0 );
    		this.radius = - 1;

    		return this;

    	}

    	containsPoint( point ) {

    		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

    	}

    	distanceToPoint( point ) {

    		return ( point.distanceTo( this.center ) - this.radius );

    	}

    	intersectsSphere( sphere ) {

    		const radiusSum = this.radius + sphere.radius;

    		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

    	}

    	intersectsBox( box ) {

    		return box.intersectsSphere( this );

    	}

    	intersectsPlane( plane ) {

    		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

    	}

    	clampPoint( point, target ) {

    		const deltaLengthSq = this.center.distanceToSquared( point );

    		target.copy( point );

    		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

    			target.sub( this.center ).normalize();
    			target.multiplyScalar( this.radius ).add( this.center );

    		}

    		return target;

    	}

    	getBoundingBox( target ) {

    		if ( this.isEmpty() ) {

    			// Empty sphere produces empty bounding box
    			target.makeEmpty();
    			return target;

    		}

    		target.set( this.center, this.center );
    		target.expandByScalar( this.radius );

    		return target;

    	}

    	applyMatrix4( matrix ) {

    		this.center.applyMatrix4( matrix );
    		this.radius = this.radius * matrix.getMaxScaleOnAxis();

    		return this;

    	}

    	translate( offset ) {

    		this.center.add( offset );

    		return this;

    	}

    	expandByPoint( point ) {

    		// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671

    		_toPoint.subVectors( point, this.center );

    		const lengthSq = _toPoint.lengthSq();

    		if ( lengthSq > ( this.radius * this.radius ) ) {

    			const length = Math.sqrt( lengthSq );
    			const missingRadiusHalf = ( length - this.radius ) * 0.5;

    			// Nudge this sphere towards the target point. Add half the missing distance to radius,
    			// and the other half to position. This gives a tighter enclosure, instead of if
    			// the whole missing distance were just added to radius.

    			this.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );
    			this.radius += missingRadiusHalf;

    		}

    		return this;

    	}

    	union( sphere ) {

    		// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769

    		// To enclose another sphere into this sphere, we only need to enclose two points:
    		// 1) Enclose the farthest point on the other sphere into this sphere.
    		// 2) Enclose the opposite point of the farthest point into this sphere.

    		 if ( this.center.equals( sphere.center ) === true ) {

    			 _toFarthestPoint.set( 0, 0, 1 ).multiplyScalar( sphere.radius );


    		} else {

    			_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );

    		}

    		this.expandByPoint( _v1$6.copy( sphere.center ).add( _toFarthestPoint ) );
    		this.expandByPoint( _v1$6.copy( sphere.center ).sub( _toFarthestPoint ) );

    		return this;

    	}

    	equals( sphere ) {

    		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    }

    const _vector$a = /*@__PURE__*/ new Vector3();
    const _segCenter = /*@__PURE__*/ new Vector3();
    const _segDir = /*@__PURE__*/ new Vector3();
    const _diff = /*@__PURE__*/ new Vector3();

    const _edge1 = /*@__PURE__*/ new Vector3();
    const _edge2 = /*@__PURE__*/ new Vector3();
    const _normal$1 = /*@__PURE__*/ new Vector3();

    class Ray {

    	constructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {

    		this.origin = origin;
    		this.direction = direction;

    	}

    	set( origin, direction ) {

    		this.origin.copy( origin );
    		this.direction.copy( direction );

    		return this;

    	}

    	copy( ray ) {

    		this.origin.copy( ray.origin );
    		this.direction.copy( ray.direction );

    		return this;

    	}

    	at( t, target ) {

    		return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );

    	}

    	lookAt( v ) {

    		this.direction.copy( v ).sub( this.origin ).normalize();

    		return this;

    	}

    	recast( t ) {

    		this.origin.copy( this.at( t, _vector$a ) );

    		return this;

    	}

    	closestPointToPoint( point, target ) {

    		target.subVectors( point, this.origin );

    		const directionDistance = target.dot( this.direction );

    		if ( directionDistance < 0 ) {

    			return target.copy( this.origin );

    		}

    		return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

    	}

    	distanceToPoint( point ) {

    		return Math.sqrt( this.distanceSqToPoint( point ) );

    	}

    	distanceSqToPoint( point ) {

    		const directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );

    		// point behind the ray

    		if ( directionDistance < 0 ) {

    			return this.origin.distanceToSquared( point );

    		}

    		_vector$a.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

    		return _vector$a.distanceToSquared( point );

    	}

    	distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

    		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
    		// It returns the min distance between the ray and the segment
    		// defined by v0 and v1
    		// It can also set two optional targets :
    		// - The closest point on the ray
    		// - The closest point on the segment

    		_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
    		_segDir.copy( v1 ).sub( v0 ).normalize();
    		_diff.copy( this.origin ).sub( _segCenter );

    		const segExtent = v0.distanceTo( v1 ) * 0.5;
    		const a01 = - this.direction.dot( _segDir );
    		const b0 = _diff.dot( this.direction );
    		const b1 = - _diff.dot( _segDir );
    		const c = _diff.lengthSq();
    		const det = Math.abs( 1 - a01 * a01 );
    		let s0, s1, sqrDist, extDet;

    		if ( det > 0 ) {

    			// The ray and segment are not parallel.

    			s0 = a01 * b1 - b0;
    			s1 = a01 * b0 - b1;
    			extDet = segExtent * det;

    			if ( s0 >= 0 ) {

    				if ( s1 >= - extDet ) {

    					if ( s1 <= extDet ) {

    						// region 0
    						// Minimum at interior points of ray and segment.

    						const invDet = 1 / det;
    						s0 *= invDet;
    						s1 *= invDet;
    						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

    					} else {

    						// region 1

    						s1 = segExtent;
    						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
    						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    					}

    				} else {

    					// region 5

    					s1 = - segExtent;
    					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
    					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    				}

    			} else {

    				if ( s1 <= - extDet ) {

    					// region 4

    					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
    					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
    					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    				} else if ( s1 <= extDet ) {

    					// region 3

    					s0 = 0;
    					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
    					sqrDist = s1 * ( s1 + 2 * b1 ) + c;

    				} else {

    					// region 2

    					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
    					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
    					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    				}

    			}

    		} else {

    			// Ray and segment are parallel.

    			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
    			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
    			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    		}

    		if ( optionalPointOnRay ) {

    			optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

    		}

    		if ( optionalPointOnSegment ) {

    			optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );

    		}

    		return sqrDist;

    	}

    	intersectSphere( sphere, target ) {

    		_vector$a.subVectors( sphere.center, this.origin );
    		const tca = _vector$a.dot( this.direction );
    		const d2 = _vector$a.dot( _vector$a ) - tca * tca;
    		const radius2 = sphere.radius * sphere.radius;

    		if ( d2 > radius2 ) return null;

    		const thc = Math.sqrt( radius2 - d2 );

    		// t0 = first intersect point - entrance on front of sphere
    		const t0 = tca - thc;

    		// t1 = second intersect point - exit point on back of sphere
    		const t1 = tca + thc;

    		// test to see if both t0 and t1 are behind the ray - if so, return null
    		if ( t0 < 0 && t1 < 0 ) return null;

    		// test to see if t0 is behind the ray:
    		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
    		// in order to always return an intersect point that is in front of the ray.
    		if ( t0 < 0 ) return this.at( t1, target );

    		// else t0 is in front of the ray, so return the first collision point scaled by t0
    		return this.at( t0, target );

    	}

    	intersectsSphere( sphere ) {

    		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

    	}

    	distanceToPlane( plane ) {

    		const denominator = plane.normal.dot( this.direction );

    		if ( denominator === 0 ) {

    			// line is coplanar, return origin
    			if ( plane.distanceToPoint( this.origin ) === 0 ) {

    				return 0;

    			}

    			// Null is preferable to undefined since undefined means.... it is undefined

    			return null;

    		}

    		const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

    		// Return if the ray never intersects the plane

    		return t >= 0 ? t : null;

    	}

    	intersectPlane( plane, target ) {

    		const t = this.distanceToPlane( plane );

    		if ( t === null ) {

    			return null;

    		}

    		return this.at( t, target );

    	}

    	intersectsPlane( plane ) {

    		// check if the ray lies on the plane first

    		const distToPoint = plane.distanceToPoint( this.origin );

    		if ( distToPoint === 0 ) {

    			return true;

    		}

    		const denominator = plane.normal.dot( this.direction );

    		if ( denominator * distToPoint < 0 ) {

    			return true;

    		}

    		// ray origin is behind the plane (and is pointing behind it)

    		return false;

    	}

    	intersectBox( box, target ) {

    		let tmin, tmax, tymin, tymax, tzmin, tzmax;

    		const invdirx = 1 / this.direction.x,
    			invdiry = 1 / this.direction.y,
    			invdirz = 1 / this.direction.z;

    		const origin = this.origin;

    		if ( invdirx >= 0 ) {

    			tmin = ( box.min.x - origin.x ) * invdirx;
    			tmax = ( box.max.x - origin.x ) * invdirx;

    		} else {

    			tmin = ( box.max.x - origin.x ) * invdirx;
    			tmax = ( box.min.x - origin.x ) * invdirx;

    		}

    		if ( invdiry >= 0 ) {

    			tymin = ( box.min.y - origin.y ) * invdiry;
    			tymax = ( box.max.y - origin.y ) * invdiry;

    		} else {

    			tymin = ( box.max.y - origin.y ) * invdiry;
    			tymax = ( box.min.y - origin.y ) * invdiry;

    		}

    		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

    		// These lines also handle the case where tmin or tmax is NaN
    		// (result of 0 * Infinity). x !== x returns true if x is NaN

    		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

    		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

    		if ( invdirz >= 0 ) {

    			tzmin = ( box.min.z - origin.z ) * invdirz;
    			tzmax = ( box.max.z - origin.z ) * invdirz;

    		} else {

    			tzmin = ( box.max.z - origin.z ) * invdirz;
    			tzmax = ( box.min.z - origin.z ) * invdirz;

    		}

    		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

    		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

    		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

    		//return point closest to the ray (positive side)

    		if ( tmax < 0 ) return null;

    		return this.at( tmin >= 0 ? tmin : tmax, target );

    	}

    	intersectsBox( box ) {

    		return this.intersectBox( box, _vector$a ) !== null;

    	}

    	intersectTriangle( a, b, c, backfaceCulling, target ) {

    		// Compute the offset origin, edges, and normal.

    		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

    		_edge1.subVectors( b, a );
    		_edge2.subVectors( c, a );
    		_normal$1.crossVectors( _edge1, _edge2 );

    		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
    		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
    		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
    		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
    		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
    		let DdN = this.direction.dot( _normal$1 );
    		let sign;

    		if ( DdN > 0 ) {

    			if ( backfaceCulling ) return null;
    			sign = 1;

    		} else if ( DdN < 0 ) {

    			sign = - 1;
    			DdN = - DdN;

    		} else {

    			return null;

    		}

    		_diff.subVectors( this.origin, a );
    		const DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

    		// b1 < 0, no intersection
    		if ( DdQxE2 < 0 ) {

    			return null;

    		}

    		const DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

    		// b2 < 0, no intersection
    		if ( DdE1xQ < 0 ) {

    			return null;

    		}

    		// b1+b2 > 1, no intersection
    		if ( DdQxE2 + DdE1xQ > DdN ) {

    			return null;

    		}

    		// Line intersects triangle, check if ray does.
    		const QdN = - sign * _diff.dot( _normal$1 );

    		// t < 0, no intersection
    		if ( QdN < 0 ) {

    			return null;

    		}

    		// Ray intersects triangle.
    		return this.at( QdN / DdN, target );

    	}

    	applyMatrix4( matrix4 ) {

    		this.origin.applyMatrix4( matrix4 );
    		this.direction.transformDirection( matrix4 );

    		return this;

    	}

    	equals( ray ) {

    		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    }

    class Matrix4 {

    	constructor() {

    		this.isMatrix4 = true;

    		this.elements = [

    			1, 0, 0, 0,
    			0, 1, 0, 0,
    			0, 0, 1, 0,
    			0, 0, 0, 1

    		];

    		if ( arguments.length > 0 ) {

    			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

    		}

    	}

    	set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

    		const te = this.elements;

    		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
    		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
    		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
    		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

    		return this;

    	}

    	identity() {

    		this.set(

    			1, 0, 0, 0,
    			0, 1, 0, 0,
    			0, 0, 1, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	clone() {

    		return new Matrix4().fromArray( this.elements );

    	}

    	copy( m ) {

    		const te = this.elements;
    		const me = m.elements;

    		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
    		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
    		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
    		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

    		return this;

    	}

    	copyPosition( m ) {

    		const te = this.elements, me = m.elements;

    		te[ 12 ] = me[ 12 ];
    		te[ 13 ] = me[ 13 ];
    		te[ 14 ] = me[ 14 ];

    		return this;

    	}

    	setFromMatrix3( m ) {

    		const me = m.elements;

    		this.set(

    			me[ 0 ], me[ 3 ], me[ 6 ], 0,
    			me[ 1 ], me[ 4 ], me[ 7 ], 0,
    			me[ 2 ], me[ 5 ], me[ 8 ], 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	extractBasis( xAxis, yAxis, zAxis ) {

    		xAxis.setFromMatrixColumn( this, 0 );
    		yAxis.setFromMatrixColumn( this, 1 );
    		zAxis.setFromMatrixColumn( this, 2 );

    		return this;

    	}

    	makeBasis( xAxis, yAxis, zAxis ) {

    		this.set(
    			xAxis.x, yAxis.x, zAxis.x, 0,
    			xAxis.y, yAxis.y, zAxis.y, 0,
    			xAxis.z, yAxis.z, zAxis.z, 0,
    			0, 0, 0, 1
    		);

    		return this;

    	}

    	extractRotation( m ) {

    		// this method does not support reflection matrices

    		const te = this.elements;
    		const me = m.elements;

    		const scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();
    		const scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();
    		const scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();

    		te[ 0 ] = me[ 0 ] * scaleX;
    		te[ 1 ] = me[ 1 ] * scaleX;
    		te[ 2 ] = me[ 2 ] * scaleX;
    		te[ 3 ] = 0;

    		te[ 4 ] = me[ 4 ] * scaleY;
    		te[ 5 ] = me[ 5 ] * scaleY;
    		te[ 6 ] = me[ 6 ] * scaleY;
    		te[ 7 ] = 0;

    		te[ 8 ] = me[ 8 ] * scaleZ;
    		te[ 9 ] = me[ 9 ] * scaleZ;
    		te[ 10 ] = me[ 10 ] * scaleZ;
    		te[ 11 ] = 0;

    		te[ 12 ] = 0;
    		te[ 13 ] = 0;
    		te[ 14 ] = 0;
    		te[ 15 ] = 1;

    		return this;

    	}

    	makeRotationFromEuler( euler ) {

    		if ( ! ( euler && euler.isEuler ) ) {

    			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

    		}

    		const te = this.elements;

    		const x = euler.x, y = euler.y, z = euler.z;
    		const a = Math.cos( x ), b = Math.sin( x );
    		const c = Math.cos( y ), d = Math.sin( y );
    		const e = Math.cos( z ), f = Math.sin( z );

    		if ( euler.order === 'XYZ' ) {

    			const ae = a * e, af = a * f, be = b * e, bf = b * f;

    			te[ 0 ] = c * e;
    			te[ 4 ] = - c * f;
    			te[ 8 ] = d;

    			te[ 1 ] = af + be * d;
    			te[ 5 ] = ae - bf * d;
    			te[ 9 ] = - b * c;

    			te[ 2 ] = bf - ae * d;
    			te[ 6 ] = be + af * d;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'YXZ' ) {

    			const ce = c * e, cf = c * f, de = d * e, df = d * f;

    			te[ 0 ] = ce + df * b;
    			te[ 4 ] = de * b - cf;
    			te[ 8 ] = a * d;

    			te[ 1 ] = a * f;
    			te[ 5 ] = a * e;
    			te[ 9 ] = - b;

    			te[ 2 ] = cf * b - de;
    			te[ 6 ] = df + ce * b;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'ZXY' ) {

    			const ce = c * e, cf = c * f, de = d * e, df = d * f;

    			te[ 0 ] = ce - df * b;
    			te[ 4 ] = - a * f;
    			te[ 8 ] = de + cf * b;

    			te[ 1 ] = cf + de * b;
    			te[ 5 ] = a * e;
    			te[ 9 ] = df - ce * b;

    			te[ 2 ] = - a * d;
    			te[ 6 ] = b;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'ZYX' ) {

    			const ae = a * e, af = a * f, be = b * e, bf = b * f;

    			te[ 0 ] = c * e;
    			te[ 4 ] = be * d - af;
    			te[ 8 ] = ae * d + bf;

    			te[ 1 ] = c * f;
    			te[ 5 ] = bf * d + ae;
    			te[ 9 ] = af * d - be;

    			te[ 2 ] = - d;
    			te[ 6 ] = b * c;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'YZX' ) {

    			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

    			te[ 0 ] = c * e;
    			te[ 4 ] = bd - ac * f;
    			te[ 8 ] = bc * f + ad;

    			te[ 1 ] = f;
    			te[ 5 ] = a * e;
    			te[ 9 ] = - b * e;

    			te[ 2 ] = - d * e;
    			te[ 6 ] = ad * f + bc;
    			te[ 10 ] = ac - bd * f;

    		} else if ( euler.order === 'XZY' ) {

    			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

    			te[ 0 ] = c * e;
    			te[ 4 ] = - f;
    			te[ 8 ] = d * e;

    			te[ 1 ] = ac * f + bd;
    			te[ 5 ] = a * e;
    			te[ 9 ] = ad * f - bc;

    			te[ 2 ] = bc * f - ad;
    			te[ 6 ] = b * e;
    			te[ 10 ] = bd * f + ac;

    		}

    		// bottom row
    		te[ 3 ] = 0;
    		te[ 7 ] = 0;
    		te[ 11 ] = 0;

    		// last column
    		te[ 12 ] = 0;
    		te[ 13 ] = 0;
    		te[ 14 ] = 0;
    		te[ 15 ] = 1;

    		return this;

    	}

    	makeRotationFromQuaternion( q ) {

    		return this.compose( _zero, q, _one );

    	}

    	lookAt( eye, target, up ) {

    		const te = this.elements;

    		_z.subVectors( eye, target );

    		if ( _z.lengthSq() === 0 ) {

    			// eye and target are in the same position

    			_z.z = 1;

    		}

    		_z.normalize();
    		_x.crossVectors( up, _z );

    		if ( _x.lengthSq() === 0 ) {

    			// up and z are parallel

    			if ( Math.abs( up.z ) === 1 ) {

    				_z.x += 0.0001;

    			} else {

    				_z.z += 0.0001;

    			}

    			_z.normalize();
    			_x.crossVectors( up, _z );

    		}

    		_x.normalize();
    		_y.crossVectors( _z, _x );

    		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
    		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
    		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

    		return this;

    	}

    	multiply( m, n ) {

    		if ( n !== undefined ) {

    			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
    			return this.multiplyMatrices( m, n );

    		}

    		return this.multiplyMatrices( this, m );

    	}

    	premultiply( m ) {

    		return this.multiplyMatrices( m, this );

    	}

    	multiplyMatrices( a, b ) {

    		const ae = a.elements;
    		const be = b.elements;
    		const te = this.elements;

    		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
    		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
    		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
    		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

    		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
    		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
    		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
    		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

    		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

    		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

    		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

    		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

    		return this;

    	}

    	multiplyScalar( s ) {

    		const te = this.elements;

    		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
    		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
    		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
    		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

    		return this;

    	}

    	determinant() {

    		const te = this.elements;

    		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
    		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
    		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
    		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

    		//TODO: make this more efficient
    		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

    		return (
    			n41 * (
    				+ n14 * n23 * n32
    				 - n13 * n24 * n32
    				 - n14 * n22 * n33
    				 + n12 * n24 * n33
    				 + n13 * n22 * n34
    				 - n12 * n23 * n34
    			) +
    			n42 * (
    				+ n11 * n23 * n34
    				 - n11 * n24 * n33
    				 + n14 * n21 * n33
    				 - n13 * n21 * n34
    				 + n13 * n24 * n31
    				 - n14 * n23 * n31
    			) +
    			n43 * (
    				+ n11 * n24 * n32
    				 - n11 * n22 * n34
    				 - n14 * n21 * n32
    				 + n12 * n21 * n34
    				 + n14 * n22 * n31
    				 - n12 * n24 * n31
    			) +
    			n44 * (
    				- n13 * n22 * n31
    				 - n11 * n23 * n32
    				 + n11 * n22 * n33
    				 + n13 * n21 * n32
    				 - n12 * n21 * n33
    				 + n12 * n23 * n31
    			)

    		);

    	}

    	transpose() {

    		const te = this.elements;
    		let tmp;

    		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
    		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
    		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

    		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
    		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
    		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

    		return this;

    	}

    	setPosition( x, y, z ) {

    		const te = this.elements;

    		if ( x.isVector3 ) {

    			te[ 12 ] = x.x;
    			te[ 13 ] = x.y;
    			te[ 14 ] = x.z;

    		} else {

    			te[ 12 ] = x;
    			te[ 13 ] = y;
    			te[ 14 ] = z;

    		}

    		return this;

    	}

    	invert() {

    		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
    		const te = this.elements,

    			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
    			n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
    			n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
    			n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],

    			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
    			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
    			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
    			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

    		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

    		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

    		const detInv = 1 / det;

    		te[ 0 ] = t11 * detInv;
    		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
    		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
    		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

    		te[ 4 ] = t12 * detInv;
    		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
    		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
    		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

    		te[ 8 ] = t13 * detInv;
    		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
    		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
    		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

    		te[ 12 ] = t14 * detInv;
    		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
    		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
    		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

    		return this;

    	}

    	scale( v ) {

    		const te = this.elements;
    		const x = v.x, y = v.y, z = v.z;

    		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
    		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
    		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
    		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

    		return this;

    	}

    	getMaxScaleOnAxis() {

    		const te = this.elements;

    		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
    		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
    		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

    		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

    	}

    	makeTranslation( x, y, z ) {

    		this.set(

    			1, 0, 0, x,
    			0, 1, 0, y,
    			0, 0, 1, z,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	makeRotationX( theta ) {

    		const c = Math.cos( theta ), s = Math.sin( theta );

    		this.set(

    			1, 0, 0, 0,
    			0, c, - s, 0,
    			0, s, c, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	makeRotationY( theta ) {

    		const c = Math.cos( theta ), s = Math.sin( theta );

    		this.set(

    			 c, 0, s, 0,
    			 0, 1, 0, 0,
    			- s, 0, c, 0,
    			 0, 0, 0, 1

    		);

    		return this;

    	}

    	makeRotationZ( theta ) {

    		const c = Math.cos( theta ), s = Math.sin( theta );

    		this.set(

    			c, - s, 0, 0,
    			s, c, 0, 0,
    			0, 0, 1, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	makeRotationAxis( axis, angle ) {

    		// Based on http://www.gamedev.net/reference/articles/article1199.asp

    		const c = Math.cos( angle );
    		const s = Math.sin( angle );
    		const t = 1 - c;
    		const x = axis.x, y = axis.y, z = axis.z;
    		const tx = t * x, ty = t * y;

    		this.set(

    			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
    			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
    			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	makeScale( x, y, z ) {

    		this.set(

    			x, 0, 0, 0,
    			0, y, 0, 0,
    			0, 0, z, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	makeShear( xy, xz, yx, yz, zx, zy ) {

    		this.set(

    			1, yx, zx, 0,
    			xy, 1, zy, 0,
    			xz, yz, 1, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	compose( position, quaternion, scale ) {

    		const te = this.elements;

    		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
    		const x2 = x + x,	y2 = y + y, z2 = z + z;
    		const xx = x * x2, xy = x * y2, xz = x * z2;
    		const yy = y * y2, yz = y * z2, zz = z * z2;
    		const wx = w * x2, wy = w * y2, wz = w * z2;

    		const sx = scale.x, sy = scale.y, sz = scale.z;

    		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
    		te[ 1 ] = ( xy + wz ) * sx;
    		te[ 2 ] = ( xz - wy ) * sx;
    		te[ 3 ] = 0;

    		te[ 4 ] = ( xy - wz ) * sy;
    		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
    		te[ 6 ] = ( yz + wx ) * sy;
    		te[ 7 ] = 0;

    		te[ 8 ] = ( xz + wy ) * sz;
    		te[ 9 ] = ( yz - wx ) * sz;
    		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
    		te[ 11 ] = 0;

    		te[ 12 ] = position.x;
    		te[ 13 ] = position.y;
    		te[ 14 ] = position.z;
    		te[ 15 ] = 1;

    		return this;

    	}

    	decompose( position, quaternion, scale ) {

    		const te = this.elements;

    		let sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
    		const sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
    		const sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

    		// if determine is negative, we need to invert one scale
    		const det = this.determinant();
    		if ( det < 0 ) sx = - sx;

    		position.x = te[ 12 ];
    		position.y = te[ 13 ];
    		position.z = te[ 14 ];

    		// scale the rotation part
    		_m1$2.copy( this );

    		const invSX = 1 / sx;
    		const invSY = 1 / sy;
    		const invSZ = 1 / sz;

    		_m1$2.elements[ 0 ] *= invSX;
    		_m1$2.elements[ 1 ] *= invSX;
    		_m1$2.elements[ 2 ] *= invSX;

    		_m1$2.elements[ 4 ] *= invSY;
    		_m1$2.elements[ 5 ] *= invSY;
    		_m1$2.elements[ 6 ] *= invSY;

    		_m1$2.elements[ 8 ] *= invSZ;
    		_m1$2.elements[ 9 ] *= invSZ;
    		_m1$2.elements[ 10 ] *= invSZ;

    		quaternion.setFromRotationMatrix( _m1$2 );

    		scale.x = sx;
    		scale.y = sy;
    		scale.z = sz;

    		return this;

    	}

    	makePerspective( left, right, top, bottom, near, far ) {

    		if ( far === undefined ) {

    			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

    		}

    		const te = this.elements;
    		const x = 2 * near / ( right - left );
    		const y = 2 * near / ( top - bottom );

    		const a = ( right + left ) / ( right - left );
    		const b = ( top + bottom ) / ( top - bottom );
    		const c = - ( far + near ) / ( far - near );
    		const d = - 2 * far * near / ( far - near );

    		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
    		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
    		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
    		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

    		return this;

    	}

    	makeOrthographic( left, right, top, bottom, near, far ) {

    		const te = this.elements;
    		const w = 1.0 / ( right - left );
    		const h = 1.0 / ( top - bottom );
    		const p = 1.0 / ( far - near );

    		const x = ( right + left ) * w;
    		const y = ( top + bottom ) * h;
    		const z = ( far + near ) * p;

    		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
    		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
    		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
    		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

    		return this;

    	}

    	equals( matrix ) {

    		const te = this.elements;
    		const me = matrix.elements;

    		for ( let i = 0; i < 16; i ++ ) {

    			if ( te[ i ] !== me[ i ] ) return false;

    		}

    		return true;

    	}

    	fromArray( array, offset = 0 ) {

    		for ( let i = 0; i < 16; i ++ ) {

    			this.elements[ i ] = array[ i + offset ];

    		}

    		return this;

    	}

    	toArray( array = [], offset = 0 ) {

    		const te = this.elements;

    		array[ offset ] = te[ 0 ];
    		array[ offset + 1 ] = te[ 1 ];
    		array[ offset + 2 ] = te[ 2 ];
    		array[ offset + 3 ] = te[ 3 ];

    		array[ offset + 4 ] = te[ 4 ];
    		array[ offset + 5 ] = te[ 5 ];
    		array[ offset + 6 ] = te[ 6 ];
    		array[ offset + 7 ] = te[ 7 ];

    		array[ offset + 8 ] = te[ 8 ];
    		array[ offset + 9 ] = te[ 9 ];
    		array[ offset + 10 ] = te[ 10 ];
    		array[ offset + 11 ] = te[ 11 ];

    		array[ offset + 12 ] = te[ 12 ];
    		array[ offset + 13 ] = te[ 13 ];
    		array[ offset + 14 ] = te[ 14 ];
    		array[ offset + 15 ] = te[ 15 ];

    		return array;

    	}

    }

    const _v1$5 = /*@__PURE__*/ new Vector3();
    const _m1$2 = /*@__PURE__*/ new Matrix4();
    const _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );
    const _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );
    const _x = /*@__PURE__*/ new Vector3();
    const _y = /*@__PURE__*/ new Vector3();
    const _z = /*@__PURE__*/ new Vector3();

    const _matrix$1 = /*@__PURE__*/ new Matrix4();
    const _quaternion$3 = /*@__PURE__*/ new Quaternion();

    class Euler {

    	constructor( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {

    		this.isEuler = true;

    		this._x = x;
    		this._y = y;
    		this._z = z;
    		this._order = order;

    	}

    	get x() {

    		return this._x;

    	}

    	set x( value ) {

    		this._x = value;
    		this._onChangeCallback();

    	}

    	get y() {

    		return this._y;

    	}

    	set y( value ) {

    		this._y = value;
    		this._onChangeCallback();

    	}

    	get z() {

    		return this._z;

    	}

    	set z( value ) {

    		this._z = value;
    		this._onChangeCallback();

    	}

    	get order() {

    		return this._order;

    	}

    	set order( value ) {

    		this._order = value;
    		this._onChangeCallback();

    	}

    	set( x, y, z, order = this._order ) {

    		this._x = x;
    		this._y = y;
    		this._z = z;
    		this._order = order;

    		this._onChangeCallback();

    		return this;

    	}

    	clone() {

    		return new this.constructor( this._x, this._y, this._z, this._order );

    	}

    	copy( euler ) {

    		this._x = euler._x;
    		this._y = euler._y;
    		this._z = euler._z;
    		this._order = euler._order;

    		this._onChangeCallback();

    		return this;

    	}

    	setFromRotationMatrix( m, order = this._order, update = true ) {

    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    		const te = m.elements;
    		const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
    		const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
    		const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

    		switch ( order ) {

    			case 'XYZ':

    				this._y = Math.asin( clamp( m13, - 1, 1 ) );

    				if ( Math.abs( m13 ) < 0.9999999 ) {

    					this._x = Math.atan2( - m23, m33 );
    					this._z = Math.atan2( - m12, m11 );

    				} else {

    					this._x = Math.atan2( m32, m22 );
    					this._z = 0;

    				}

    				break;

    			case 'YXZ':

    				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

    				if ( Math.abs( m23 ) < 0.9999999 ) {

    					this._y = Math.atan2( m13, m33 );
    					this._z = Math.atan2( m21, m22 );

    				} else {

    					this._y = Math.atan2( - m31, m11 );
    					this._z = 0;

    				}

    				break;

    			case 'ZXY':

    				this._x = Math.asin( clamp( m32, - 1, 1 ) );

    				if ( Math.abs( m32 ) < 0.9999999 ) {

    					this._y = Math.atan2( - m31, m33 );
    					this._z = Math.atan2( - m12, m22 );

    				} else {

    					this._y = 0;
    					this._z = Math.atan2( m21, m11 );

    				}

    				break;

    			case 'ZYX':

    				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

    				if ( Math.abs( m31 ) < 0.9999999 ) {

    					this._x = Math.atan2( m32, m33 );
    					this._z = Math.atan2( m21, m11 );

    				} else {

    					this._x = 0;
    					this._z = Math.atan2( - m12, m22 );

    				}

    				break;

    			case 'YZX':

    				this._z = Math.asin( clamp( m21, - 1, 1 ) );

    				if ( Math.abs( m21 ) < 0.9999999 ) {

    					this._x = Math.atan2( - m23, m22 );
    					this._y = Math.atan2( - m31, m11 );

    				} else {

    					this._x = 0;
    					this._y = Math.atan2( m13, m33 );

    				}

    				break;

    			case 'XZY':

    				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

    				if ( Math.abs( m12 ) < 0.9999999 ) {

    					this._x = Math.atan2( m32, m22 );
    					this._y = Math.atan2( m13, m11 );

    				} else {

    					this._x = Math.atan2( - m23, m33 );
    					this._y = 0;

    				}

    				break;

    			default:

    				console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );

    		}

    		this._order = order;

    		if ( update === true ) this._onChangeCallback();

    		return this;

    	}

    	setFromQuaternion( q, order, update ) {

    		_matrix$1.makeRotationFromQuaternion( q );

    		return this.setFromRotationMatrix( _matrix$1, order, update );

    	}

    	setFromVector3( v, order = this._order ) {

    		return this.set( v.x, v.y, v.z, order );

    	}

    	reorder( newOrder ) {

    		// WARNING: this discards revolution information -bhouston

    		_quaternion$3.setFromEuler( this );

    		return this.setFromQuaternion( _quaternion$3, newOrder );

    	}

    	equals( euler ) {

    		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

    	}

    	fromArray( array ) {

    		this._x = array[ 0 ];
    		this._y = array[ 1 ];
    		this._z = array[ 2 ];
    		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

    		this._onChangeCallback();

    		return this;

    	}

    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this._x;
    		array[ offset + 1 ] = this._y;
    		array[ offset + 2 ] = this._z;
    		array[ offset + 3 ] = this._order;

    		return array;

    	}

    	_onChange( callback ) {

    		this._onChangeCallback = callback;

    		return this;

    	}

    	_onChangeCallback() {}

    	*[ Symbol.iterator ]() {

    		yield this._x;
    		yield this._y;
    		yield this._z;
    		yield this._order;

    	}

    	// @deprecated since r138, 02cf0df1cb4575d5842fef9c85bb5a89fe020d53

    	toVector3() {

    		console.error( 'THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead' );

    	}

    }

    Euler.DefaultOrder = 'XYZ';
    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

    class Layers {

    	constructor() {

    		this.mask = 1 | 0;

    	}

    	set( channel ) {

    		this.mask = ( 1 << channel | 0 ) >>> 0;

    	}

    	enable( channel ) {

    		this.mask |= 1 << channel | 0;

    	}

    	enableAll() {

    		this.mask = 0xffffffff | 0;

    	}

    	toggle( channel ) {

    		this.mask ^= 1 << channel | 0;

    	}

    	disable( channel ) {

    		this.mask &= ~ ( 1 << channel | 0 );

    	}

    	disableAll() {

    		this.mask = 0;

    	}

    	test( layers ) {

    		return ( this.mask & layers.mask ) !== 0;

    	}

    	isEnabled( channel ) {

    		return ( this.mask & ( 1 << channel | 0 ) ) !== 0;

    	}

    }

    let _object3DId = 0;

    const _v1$4 = /*@__PURE__*/ new Vector3();
    const _q1 = /*@__PURE__*/ new Quaternion();
    const _m1$1 = /*@__PURE__*/ new Matrix4();
    const _target = /*@__PURE__*/ new Vector3();

    const _position$3 = /*@__PURE__*/ new Vector3();
    const _scale$2 = /*@__PURE__*/ new Vector3();
    const _quaternion$2 = /*@__PURE__*/ new Quaternion();

    const _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );
    const _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );
    const _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );

    const _addedEvent = { type: 'added' };
    const _removedEvent = { type: 'removed' };

    class Object3D extends EventDispatcher {

    	constructor() {

    		super();

    		this.isObject3D = true;

    		Object.defineProperty( this, 'id', { value: _object3DId ++ } );

    		this.uuid = generateUUID();

    		this.name = '';
    		this.type = 'Object3D';

    		this.parent = null;
    		this.children = [];

    		this.up = Object3D.DefaultUp.clone();

    		const position = new Vector3();
    		const rotation = new Euler();
    		const quaternion = new Quaternion();
    		const scale = new Vector3( 1, 1, 1 );

    		function onRotationChange() {

    			quaternion.setFromEuler( rotation, false );

    		}

    		function onQuaternionChange() {

    			rotation.setFromQuaternion( quaternion, undefined, false );

    		}

    		rotation._onChange( onRotationChange );
    		quaternion._onChange( onQuaternionChange );

    		Object.defineProperties( this, {
    			position: {
    				configurable: true,
    				enumerable: true,
    				value: position
    			},
    			rotation: {
    				configurable: true,
    				enumerable: true,
    				value: rotation
    			},
    			quaternion: {
    				configurable: true,
    				enumerable: true,
    				value: quaternion
    			},
    			scale: {
    				configurable: true,
    				enumerable: true,
    				value: scale
    			},
    			modelViewMatrix: {
    				value: new Matrix4()
    			},
    			normalMatrix: {
    				value: new Matrix3()
    			}
    		} );

    		this.matrix = new Matrix4();
    		this.matrixWorld = new Matrix4();

    		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
    		this.matrixWorldNeedsUpdate = false;

    		this.layers = new Layers();
    		this.visible = true;

    		this.castShadow = false;
    		this.receiveShadow = false;

    		this.frustumCulled = true;
    		this.renderOrder = 0;

    		this.animations = [];

    		this.userData = {};

    	}

    	onBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}

    	onAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}

    	applyMatrix4( matrix ) {

    		if ( this.matrixAutoUpdate ) this.updateMatrix();

    		this.matrix.premultiply( matrix );

    		this.matrix.decompose( this.position, this.quaternion, this.scale );

    	}

    	applyQuaternion( q ) {

    		this.quaternion.premultiply( q );

    		return this;

    	}

    	setRotationFromAxisAngle( axis, angle ) {

    		// assumes axis is normalized

    		this.quaternion.setFromAxisAngle( axis, angle );

    	}

    	setRotationFromEuler( euler ) {

    		this.quaternion.setFromEuler( euler, true );

    	}

    	setRotationFromMatrix( m ) {

    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    		this.quaternion.setFromRotationMatrix( m );

    	}

    	setRotationFromQuaternion( q ) {

    		// assumes q is normalized

    		this.quaternion.copy( q );

    	}

    	rotateOnAxis( axis, angle ) {

    		// rotate object on axis in object space
    		// axis is assumed to be normalized

    		_q1.setFromAxisAngle( axis, angle );

    		this.quaternion.multiply( _q1 );

    		return this;

    	}

    	rotateOnWorldAxis( axis, angle ) {

    		// rotate object on axis in world space
    		// axis is assumed to be normalized
    		// method assumes no rotated parent

    		_q1.setFromAxisAngle( axis, angle );

    		this.quaternion.premultiply( _q1 );

    		return this;

    	}

    	rotateX( angle ) {

    		return this.rotateOnAxis( _xAxis, angle );

    	}

    	rotateY( angle ) {

    		return this.rotateOnAxis( _yAxis, angle );

    	}

    	rotateZ( angle ) {

    		return this.rotateOnAxis( _zAxis, angle );

    	}

    	translateOnAxis( axis, distance ) {

    		// translate object by distance along axis in object space
    		// axis is assumed to be normalized

    		_v1$4.copy( axis ).applyQuaternion( this.quaternion );

    		this.position.add( _v1$4.multiplyScalar( distance ) );

    		return this;

    	}

    	translateX( distance ) {

    		return this.translateOnAxis( _xAxis, distance );

    	}

    	translateY( distance ) {

    		return this.translateOnAxis( _yAxis, distance );

    	}

    	translateZ( distance ) {

    		return this.translateOnAxis( _zAxis, distance );

    	}

    	localToWorld( vector ) {

    		return vector.applyMatrix4( this.matrixWorld );

    	}

    	worldToLocal( vector ) {

    		return vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );

    	}

    	lookAt( x, y, z ) {

    		// This method does not support objects having non-uniformly-scaled parent(s)

    		if ( x.isVector3 ) {

    			_target.copy( x );

    		} else {

    			_target.set( x, y, z );

    		}

    		const parent = this.parent;

    		this.updateWorldMatrix( true, false );

    		_position$3.setFromMatrixPosition( this.matrixWorld );

    		if ( this.isCamera || this.isLight ) {

    			_m1$1.lookAt( _position$3, _target, this.up );

    		} else {

    			_m1$1.lookAt( _target, _position$3, this.up );

    		}

    		this.quaternion.setFromRotationMatrix( _m1$1 );

    		if ( parent ) {

    			_m1$1.extractRotation( parent.matrixWorld );
    			_q1.setFromRotationMatrix( _m1$1 );
    			this.quaternion.premultiply( _q1.invert() );

    		}

    	}

    	add( object ) {

    		if ( arguments.length > 1 ) {

    			for ( let i = 0; i < arguments.length; i ++ ) {

    				this.add( arguments[ i ] );

    			}

    			return this;

    		}

    		if ( object === this ) {

    			console.error( 'THREE.Object3D.add: object can\'t be added as a child of itself.', object );
    			return this;

    		}

    		if ( object && object.isObject3D ) {

    			if ( object.parent !== null ) {

    				object.parent.remove( object );

    			}

    			object.parent = this;
    			this.children.push( object );

    			object.dispatchEvent( _addedEvent );

    		} else {

    			console.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );

    		}

    		return this;

    	}

    	remove( object ) {

    		if ( arguments.length > 1 ) {

    			for ( let i = 0; i < arguments.length; i ++ ) {

    				this.remove( arguments[ i ] );

    			}

    			return this;

    		}

    		const index = this.children.indexOf( object );

    		if ( index !== - 1 ) {

    			object.parent = null;
    			this.children.splice( index, 1 );

    			object.dispatchEvent( _removedEvent );

    		}

    		return this;

    	}

    	removeFromParent() {

    		const parent = this.parent;

    		if ( parent !== null ) {

    			parent.remove( this );

    		}

    		return this;

    	}

    	clear() {

    		for ( let i = 0; i < this.children.length; i ++ ) {

    			const object = this.children[ i ];

    			object.parent = null;

    			object.dispatchEvent( _removedEvent );

    		}

    		this.children.length = 0;

    		return this;


    	}

    	attach( object ) {

    		// adds object as a child of this, while maintaining the object's world transform

    		// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)

    		this.updateWorldMatrix( true, false );

    		_m1$1.copy( this.matrixWorld ).invert();

    		if ( object.parent !== null ) {

    			object.parent.updateWorldMatrix( true, false );

    			_m1$1.multiply( object.parent.matrixWorld );

    		}

    		object.applyMatrix4( _m1$1 );

    		this.add( object );

    		object.updateWorldMatrix( false, true );

    		return this;

    	}

    	getObjectById( id ) {

    		return this.getObjectByProperty( 'id', id );

    	}

    	getObjectByName( name ) {

    		return this.getObjectByProperty( 'name', name );

    	}

    	getObjectByProperty( name, value ) {

    		if ( this[ name ] === value ) return this;

    		for ( let i = 0, l = this.children.length; i < l; i ++ ) {

    			const child = this.children[ i ];
    			const object = child.getObjectByProperty( name, value );

    			if ( object !== undefined ) {

    				return object;

    			}

    		}

    		return undefined;

    	}

    	getWorldPosition( target ) {

    		this.updateWorldMatrix( true, false );

    		return target.setFromMatrixPosition( this.matrixWorld );

    	}

    	getWorldQuaternion( target ) {

    		this.updateWorldMatrix( true, false );

    		this.matrixWorld.decompose( _position$3, target, _scale$2 );

    		return target;

    	}

    	getWorldScale( target ) {

    		this.updateWorldMatrix( true, false );

    		this.matrixWorld.decompose( _position$3, _quaternion$2, target );

    		return target;

    	}

    	getWorldDirection( target ) {

    		this.updateWorldMatrix( true, false );

    		const e = this.matrixWorld.elements;

    		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

    	}

    	raycast( /* raycaster, intersects */ ) {}

    	traverse( callback ) {

    		callback( this );

    		const children = this.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			children[ i ].traverse( callback );

    		}

    	}

    	traverseVisible( callback ) {

    		if ( this.visible === false ) return;

    		callback( this );

    		const children = this.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			children[ i ].traverseVisible( callback );

    		}

    	}

    	traverseAncestors( callback ) {

    		const parent = this.parent;

    		if ( parent !== null ) {

    			callback( parent );

    			parent.traverseAncestors( callback );

    		}

    	}

    	updateMatrix() {

    		this.matrix.compose( this.position, this.quaternion, this.scale );

    		this.matrixWorldNeedsUpdate = true;

    	}

    	updateMatrixWorld( force ) {

    		if ( this.matrixAutoUpdate ) this.updateMatrix();

    		if ( this.matrixWorldNeedsUpdate || force ) {

    			if ( this.parent === null ) {

    				this.matrixWorld.copy( this.matrix );

    			} else {

    				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

    			}

    			this.matrixWorldNeedsUpdate = false;

    			force = true;

    		}

    		// update children

    		const children = this.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			children[ i ].updateMatrixWorld( force );

    		}

    	}

    	updateWorldMatrix( updateParents, updateChildren ) {

    		const parent = this.parent;

    		if ( updateParents === true && parent !== null ) {

    			parent.updateWorldMatrix( true, false );

    		}

    		if ( this.matrixAutoUpdate ) this.updateMatrix();

    		if ( this.parent === null ) {

    			this.matrixWorld.copy( this.matrix );

    		} else {

    			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

    		}

    		// update children

    		if ( updateChildren === true ) {

    			const children = this.children;

    			for ( let i = 0, l = children.length; i < l; i ++ ) {

    				children[ i ].updateWorldMatrix( false, true );

    			}

    		}

    	}

    	toJSON( meta ) {

    		// meta is a string when called from JSON.stringify
    		const isRootObject = ( meta === undefined || typeof meta === 'string' );

    		const output = {};

    		// meta is a hash used to collect geometries, materials.
    		// not providing it implies that this is the root object
    		// being serialized.
    		if ( isRootObject ) {

    			// initialize meta obj
    			meta = {
    				geometries: {},
    				materials: {},
    				textures: {},
    				images: {},
    				shapes: {},
    				skeletons: {},
    				animations: {},
    				nodes: {}
    			};

    			output.metadata = {
    				version: 4.5,
    				type: 'Object',
    				generator: 'Object3D.toJSON'
    			};

    		}

    		// standard Object3D serialization

    		const object = {};

    		object.uuid = this.uuid;
    		object.type = this.type;

    		if ( this.name !== '' ) object.name = this.name;
    		if ( this.castShadow === true ) object.castShadow = true;
    		if ( this.receiveShadow === true ) object.receiveShadow = true;
    		if ( this.visible === false ) object.visible = false;
    		if ( this.frustumCulled === false ) object.frustumCulled = false;
    		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
    		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;

    		object.layers = this.layers.mask;
    		object.matrix = this.matrix.toArray();

    		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

    		// object specific properties

    		if ( this.isInstancedMesh ) {

    			object.type = 'InstancedMesh';
    			object.count = this.count;
    			object.instanceMatrix = this.instanceMatrix.toJSON();
    			if ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();

    		}

    		//

    		function serialize( library, element ) {

    			if ( library[ element.uuid ] === undefined ) {

    				library[ element.uuid ] = element.toJSON( meta );

    			}

    			return element.uuid;

    		}

    		if ( this.isScene ) {

    			if ( this.background ) {

    				if ( this.background.isColor ) {

    					object.background = this.background.toJSON();

    				} else if ( this.background.isTexture ) {

    					object.background = this.background.toJSON( meta ).uuid;

    				}

    			}

    			if ( this.environment && this.environment.isTexture ) {

    				object.environment = this.environment.toJSON( meta ).uuid;

    			}

    		} else if ( this.isMesh || this.isLine || this.isPoints ) {

    			object.geometry = serialize( meta.geometries, this.geometry );

    			const parameters = this.geometry.parameters;

    			if ( parameters !== undefined && parameters.shapes !== undefined ) {

    				const shapes = parameters.shapes;

    				if ( Array.isArray( shapes ) ) {

    					for ( let i = 0, l = shapes.length; i < l; i ++ ) {

    						const shape = shapes[ i ];

    						serialize( meta.shapes, shape );

    					}

    				} else {

    					serialize( meta.shapes, shapes );

    				}

    			}

    		}

    		if ( this.isSkinnedMesh ) {

    			object.bindMode = this.bindMode;
    			object.bindMatrix = this.bindMatrix.toArray();

    			if ( this.skeleton !== undefined ) {

    				serialize( meta.skeletons, this.skeleton );

    				object.skeleton = this.skeleton.uuid;

    			}

    		}

    		if ( this.material !== undefined ) {

    			if ( Array.isArray( this.material ) ) {

    				const uuids = [];

    				for ( let i = 0, l = this.material.length; i < l; i ++ ) {

    					uuids.push( serialize( meta.materials, this.material[ i ] ) );

    				}

    				object.material = uuids;

    			} else {

    				object.material = serialize( meta.materials, this.material );

    			}

    		}

    		//

    		if ( this.children.length > 0 ) {

    			object.children = [];

    			for ( let i = 0; i < this.children.length; i ++ ) {

    				object.children.push( this.children[ i ].toJSON( meta ).object );

    			}

    		}

    		//

    		if ( this.animations.length > 0 ) {

    			object.animations = [];

    			for ( let i = 0; i < this.animations.length; i ++ ) {

    				const animation = this.animations[ i ];

    				object.animations.push( serialize( meta.animations, animation ) );

    			}

    		}

    		if ( isRootObject ) {

    			const geometries = extractFromCache( meta.geometries );
    			const materials = extractFromCache( meta.materials );
    			const textures = extractFromCache( meta.textures );
    			const images = extractFromCache( meta.images );
    			const shapes = extractFromCache( meta.shapes );
    			const skeletons = extractFromCache( meta.skeletons );
    			const animations = extractFromCache( meta.animations );
    			const nodes = extractFromCache( meta.nodes );

    			if ( geometries.length > 0 ) output.geometries = geometries;
    			if ( materials.length > 0 ) output.materials = materials;
    			if ( textures.length > 0 ) output.textures = textures;
    			if ( images.length > 0 ) output.images = images;
    			if ( shapes.length > 0 ) output.shapes = shapes;
    			if ( skeletons.length > 0 ) output.skeletons = skeletons;
    			if ( animations.length > 0 ) output.animations = animations;
    			if ( nodes.length > 0 ) output.nodes = nodes;

    		}

    		output.object = object;

    		return output;

    		// extract data from the cache hash
    		// remove metadata on each item
    		// and return as array
    		function extractFromCache( cache ) {

    			const values = [];
    			for ( const key in cache ) {

    				const data = cache[ key ];
    				delete data.metadata;
    				values.push( data );

    			}

    			return values;

    		}

    	}

    	clone( recursive ) {

    		return new this.constructor().copy( this, recursive );

    	}

    	copy( source, recursive = true ) {

    		this.name = source.name;

    		this.up.copy( source.up );

    		this.position.copy( source.position );
    		this.rotation.order = source.rotation.order;
    		this.quaternion.copy( source.quaternion );
    		this.scale.copy( source.scale );

    		this.matrix.copy( source.matrix );
    		this.matrixWorld.copy( source.matrixWorld );

    		this.matrixAutoUpdate = source.matrixAutoUpdate;
    		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

    		this.layers.mask = source.layers.mask;
    		this.visible = source.visible;

    		this.castShadow = source.castShadow;
    		this.receiveShadow = source.receiveShadow;

    		this.frustumCulled = source.frustumCulled;
    		this.renderOrder = source.renderOrder;

    		this.userData = JSON.parse( JSON.stringify( source.userData ) );

    		if ( recursive === true ) {

    			for ( let i = 0; i < source.children.length; i ++ ) {

    				const child = source.children[ i ];
    				this.add( child.clone() );

    			}

    		}

    		return this;

    	}

    }

    Object3D.DefaultUp = new Vector3( 0, 1, 0 );
    Object3D.DefaultMatrixAutoUpdate = true;

    const _v0$1 = /*@__PURE__*/ new Vector3();
    const _v1$3 = /*@__PURE__*/ new Vector3();
    const _v2$2 = /*@__PURE__*/ new Vector3();
    const _v3$1 = /*@__PURE__*/ new Vector3();

    const _vab = /*@__PURE__*/ new Vector3();
    const _vac = /*@__PURE__*/ new Vector3();
    const _vbc = /*@__PURE__*/ new Vector3();
    const _vap = /*@__PURE__*/ new Vector3();
    const _vbp = /*@__PURE__*/ new Vector3();
    const _vcp = /*@__PURE__*/ new Vector3();

    class Triangle {

    	constructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {

    		this.a = a;
    		this.b = b;
    		this.c = c;

    	}

    	static getNormal( a, b, c, target ) {

    		target.subVectors( c, b );
    		_v0$1.subVectors( a, b );
    		target.cross( _v0$1 );

    		const targetLengthSq = target.lengthSq();
    		if ( targetLengthSq > 0 ) {

    			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

    		}

    		return target.set( 0, 0, 0 );

    	}

    	// static/instance method to calculate barycentric coordinates
    	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    	static getBarycoord( point, a, b, c, target ) {

    		_v0$1.subVectors( c, a );
    		_v1$3.subVectors( b, a );
    		_v2$2.subVectors( point, a );

    		const dot00 = _v0$1.dot( _v0$1 );
    		const dot01 = _v0$1.dot( _v1$3 );
    		const dot02 = _v0$1.dot( _v2$2 );
    		const dot11 = _v1$3.dot( _v1$3 );
    		const dot12 = _v1$3.dot( _v2$2 );

    		const denom = ( dot00 * dot11 - dot01 * dot01 );

    		// collinear or singular triangle
    		if ( denom === 0 ) {

    			// arbitrary location outside of triangle?
    			// not sure if this is the best idea, maybe should be returning undefined
    			return target.set( - 2, - 1, - 1 );

    		}

    		const invDenom = 1 / denom;
    		const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
    		const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

    		// barycentric coordinates must always sum to 1
    		return target.set( 1 - u - v, v, u );

    	}

    	static containsPoint( point, a, b, c ) {

    		this.getBarycoord( point, a, b, c, _v3$1 );

    		return ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );

    	}

    	static getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {

    		this.getBarycoord( point, p1, p2, p3, _v3$1 );

    		target.set( 0, 0 );
    		target.addScaledVector( uv1, _v3$1.x );
    		target.addScaledVector( uv2, _v3$1.y );
    		target.addScaledVector( uv3, _v3$1.z );

    		return target;

    	}

    	static isFrontFacing( a, b, c, direction ) {

    		_v0$1.subVectors( c, b );
    		_v1$3.subVectors( a, b );

    		// strictly front facing
    		return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;

    	}

    	set( a, b, c ) {

    		this.a.copy( a );
    		this.b.copy( b );
    		this.c.copy( c );

    		return this;

    	}

    	setFromPointsAndIndices( points, i0, i1, i2 ) {

    		this.a.copy( points[ i0 ] );
    		this.b.copy( points[ i1 ] );
    		this.c.copy( points[ i2 ] );

    		return this;

    	}

    	setFromAttributeAndIndices( attribute, i0, i1, i2 ) {

    		this.a.fromBufferAttribute( attribute, i0 );
    		this.b.fromBufferAttribute( attribute, i1 );
    		this.c.fromBufferAttribute( attribute, i2 );

    		return this;

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    	copy( triangle ) {

    		this.a.copy( triangle.a );
    		this.b.copy( triangle.b );
    		this.c.copy( triangle.c );

    		return this;

    	}

    	getArea() {

    		_v0$1.subVectors( this.c, this.b );
    		_v1$3.subVectors( this.a, this.b );

    		return _v0$1.cross( _v1$3 ).length() * 0.5;

    	}

    	getMidpoint( target ) {

    		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

    	}

    	getNormal( target ) {

    		return Triangle.getNormal( this.a, this.b, this.c, target );

    	}

    	getPlane( target ) {

    		return target.setFromCoplanarPoints( this.a, this.b, this.c );

    	}

    	getBarycoord( point, target ) {

    		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

    	}

    	getUV( point, uv1, uv2, uv3, target ) {

    		return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );

    	}

    	containsPoint( point ) {

    		return Triangle.containsPoint( point, this.a, this.b, this.c );

    	}

    	isFrontFacing( direction ) {

    		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

    	}

    	intersectsBox( box ) {

    		return box.intersectsTriangle( this );

    	}

    	closestPointToPoint( p, target ) {

    		const a = this.a, b = this.b, c = this.c;
    		let v, w;

    		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
    		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
    		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
    		// basically, we're distinguishing which of the voronoi regions of the triangle
    		// the point lies in with the minimum amount of redundant computation.

    		_vab.subVectors( b, a );
    		_vac.subVectors( c, a );
    		_vap.subVectors( p, a );
    		const d1 = _vab.dot( _vap );
    		const d2 = _vac.dot( _vap );
    		if ( d1 <= 0 && d2 <= 0 ) {

    			// vertex region of A; barycentric coords (1, 0, 0)
    			return target.copy( a );

    		}

    		_vbp.subVectors( p, b );
    		const d3 = _vab.dot( _vbp );
    		const d4 = _vac.dot( _vbp );
    		if ( d3 >= 0 && d4 <= d3 ) {

    			// vertex region of B; barycentric coords (0, 1, 0)
    			return target.copy( b );

    		}

    		const vc = d1 * d4 - d3 * d2;
    		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

    			v = d1 / ( d1 - d3 );
    			// edge region of AB; barycentric coords (1-v, v, 0)
    			return target.copy( a ).addScaledVector( _vab, v );

    		}

    		_vcp.subVectors( p, c );
    		const d5 = _vab.dot( _vcp );
    		const d6 = _vac.dot( _vcp );
    		if ( d6 >= 0 && d5 <= d6 ) {

    			// vertex region of C; barycentric coords (0, 0, 1)
    			return target.copy( c );

    		}

    		const vb = d5 * d2 - d1 * d6;
    		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

    			w = d2 / ( d2 - d6 );
    			// edge region of AC; barycentric coords (1-w, 0, w)
    			return target.copy( a ).addScaledVector( _vac, w );

    		}

    		const va = d3 * d6 - d5 * d4;
    		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

    			_vbc.subVectors( c, b );
    			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
    			// edge region of BC; barycentric coords (0, 1-w, w)
    			return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

    		}

    		// face region
    		const denom = 1 / ( va + vb + vc );
    		// u = va * denom
    		v = vb * denom;
    		w = vc * denom;

    		return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

    	}

    	equals( triangle ) {

    		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

    	}

    }

    let materialId = 0;

    class Material extends EventDispatcher {

    	constructor() {

    		super();

    		this.isMaterial = true;

    		Object.defineProperty( this, 'id', { value: materialId ++ } );

    		this.uuid = generateUUID();

    		this.name = '';
    		this.type = 'Material';

    		this.blending = NormalBlending;
    		this.side = FrontSide;
    		this.vertexColors = false;

    		this.opacity = 1;
    		this.transparent = false;

    		this.blendSrc = SrcAlphaFactor;
    		this.blendDst = OneMinusSrcAlphaFactor;
    		this.blendEquation = AddEquation;
    		this.blendSrcAlpha = null;
    		this.blendDstAlpha = null;
    		this.blendEquationAlpha = null;

    		this.depthFunc = LessEqualDepth;
    		this.depthTest = true;
    		this.depthWrite = true;

    		this.stencilWriteMask = 0xff;
    		this.stencilFunc = AlwaysStencilFunc;
    		this.stencilRef = 0;
    		this.stencilFuncMask = 0xff;
    		this.stencilFail = KeepStencilOp;
    		this.stencilZFail = KeepStencilOp;
    		this.stencilZPass = KeepStencilOp;
    		this.stencilWrite = false;

    		this.clippingPlanes = null;
    		this.clipIntersection = false;
    		this.clipShadows = false;

    		this.shadowSide = null;

    		this.colorWrite = true;

    		this.precision = null; // override the renderer's default precision for this material

    		this.polygonOffset = false;
    		this.polygonOffsetFactor = 0;
    		this.polygonOffsetUnits = 0;

    		this.dithering = false;

    		this.alphaToCoverage = false;
    		this.premultipliedAlpha = false;

    		this.visible = true;

    		this.toneMapped = true;

    		this.userData = {};

    		this.version = 0;

    		this._alphaTest = 0;

    	}

    	get alphaTest() {

    		return this._alphaTest;

    	}

    	set alphaTest( value ) {

    		if ( this._alphaTest > 0 !== value > 0 ) {

    			this.version ++;

    		}

    		this._alphaTest = value;

    	}

    	onBuild( /* shaderobject, renderer */ ) {}

    	onBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}

    	onBeforeCompile( /* shaderobject, renderer */ ) {}

    	customProgramCacheKey() {

    		return this.onBeforeCompile.toString();

    	}

    	setValues( values ) {

    		if ( values === undefined ) return;

    		for ( const key in values ) {

    			const newValue = values[ key ];

    			if ( newValue === undefined ) {

    				console.warn( 'THREE.Material: \'' + key + '\' parameter is undefined.' );
    				continue;

    			}

    			// for backward compatibility if shading is set in the constructor
    			if ( key === 'shading' ) {

    				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
    				this.flatShading = ( newValue === FlatShading ) ? true : false;
    				continue;

    			}

    			const currentValue = this[ key ];

    			if ( currentValue === undefined ) {

    				console.warn( 'THREE.' + this.type + ': \'' + key + '\' is not a property of this material.' );
    				continue;

    			}

    			if ( currentValue && currentValue.isColor ) {

    				currentValue.set( newValue );

    			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

    				currentValue.copy( newValue );

    			} else {

    				this[ key ] = newValue;

    			}

    		}

    	}

    	toJSON( meta ) {

    		const isRootObject = ( meta === undefined || typeof meta === 'string' );

    		if ( isRootObject ) {

    			meta = {
    				textures: {},
    				images: {}
    			};

    		}

    		const data = {
    			metadata: {
    				version: 4.5,
    				type: 'Material',
    				generator: 'Material.toJSON'
    			}
    		};

    		// standard Material serialization
    		data.uuid = this.uuid;
    		data.type = this.type;

    		if ( this.name !== '' ) data.name = this.name;

    		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

    		if ( this.roughness !== undefined ) data.roughness = this.roughness;
    		if ( this.metalness !== undefined ) data.metalness = this.metalness;

    		if ( this.sheen !== undefined ) data.sheen = this.sheen;
    		if ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();
    		if ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;
    		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
    		if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

    		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
    		if ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;
    		if ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();
    		if ( this.shininess !== undefined ) data.shininess = this.shininess;
    		if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
    		if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;

    		if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {

    			data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;

    		}

    		if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {

    			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;

    		}

    		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

    			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
    			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

    		}

    		if ( this.iridescence !== undefined ) data.iridescence = this.iridescence;
    		if ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;
    		if ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;

    		if ( this.iridescenceMap && this.iridescenceMap.isTexture ) {

    			data.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;

    		}

    		if ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {

    			data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;

    		}

    		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
    		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
    		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;

    		if ( this.lightMap && this.lightMap.isTexture ) {

    			data.lightMap = this.lightMap.toJSON( meta ).uuid;
    			data.lightMapIntensity = this.lightMapIntensity;

    		}

    		if ( this.aoMap && this.aoMap.isTexture ) {

    			data.aoMap = this.aoMap.toJSON( meta ).uuid;
    			data.aoMapIntensity = this.aoMapIntensity;

    		}

    		if ( this.bumpMap && this.bumpMap.isTexture ) {

    			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
    			data.bumpScale = this.bumpScale;

    		}

    		if ( this.normalMap && this.normalMap.isTexture ) {

    			data.normalMap = this.normalMap.toJSON( meta ).uuid;
    			data.normalMapType = this.normalMapType;
    			data.normalScale = this.normalScale.toArray();

    		}

    		if ( this.displacementMap && this.displacementMap.isTexture ) {

    			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
    			data.displacementScale = this.displacementScale;
    			data.displacementBias = this.displacementBias;

    		}

    		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
    		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

    		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
    		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
    		if ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;
    		if ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;

    		if ( this.envMap && this.envMap.isTexture ) {

    			data.envMap = this.envMap.toJSON( meta ).uuid;

    			if ( this.combine !== undefined ) data.combine = this.combine;

    		}

    		if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
    		if ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;
    		if ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;

    		if ( this.gradientMap && this.gradientMap.isTexture ) {

    			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

    		}

    		if ( this.transmission !== undefined ) data.transmission = this.transmission;
    		if ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;
    		if ( this.thickness !== undefined ) data.thickness = this.thickness;
    		if ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;
    		if ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;
    		if ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();

    		if ( this.size !== undefined ) data.size = this.size;
    		if ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;
    		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

    		if ( this.blending !== NormalBlending ) data.blending = this.blending;
    		if ( this.side !== FrontSide ) data.side = this.side;
    		if ( this.vertexColors ) data.vertexColors = true;

    		if ( this.opacity < 1 ) data.opacity = this.opacity;
    		if ( this.transparent === true ) data.transparent = this.transparent;

    		data.depthFunc = this.depthFunc;
    		data.depthTest = this.depthTest;
    		data.depthWrite = this.depthWrite;
    		data.colorWrite = this.colorWrite;

    		data.stencilWrite = this.stencilWrite;
    		data.stencilWriteMask = this.stencilWriteMask;
    		data.stencilFunc = this.stencilFunc;
    		data.stencilRef = this.stencilRef;
    		data.stencilFuncMask = this.stencilFuncMask;
    		data.stencilFail = this.stencilFail;
    		data.stencilZFail = this.stencilZFail;
    		data.stencilZPass = this.stencilZPass;

    		// rotation (SpriteMaterial)
    		if ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;

    		if ( this.polygonOffset === true ) data.polygonOffset = true;
    		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
    		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;

    		if ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;
    		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
    		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
    		if ( this.scale !== undefined ) data.scale = this.scale;

    		if ( this.dithering === true ) data.dithering = true;

    		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
    		if ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;
    		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;

    		if ( this.wireframe === true ) data.wireframe = this.wireframe;
    		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
    		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
    		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

    		if ( this.flatShading === true ) data.flatShading = this.flatShading;

    		if ( this.visible === false ) data.visible = false;

    		if ( this.toneMapped === false ) data.toneMapped = false;

    		if ( this.fog === false ) data.fog = false;

    		if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;

    		// TODO: Copied from Object3D.toJSON

    		function extractFromCache( cache ) {

    			const values = [];

    			for ( const key in cache ) {

    				const data = cache[ key ];
    				delete data.metadata;
    				values.push( data );

    			}

    			return values;

    		}

    		if ( isRootObject ) {

    			const textures = extractFromCache( meta.textures );
    			const images = extractFromCache( meta.images );

    			if ( textures.length > 0 ) data.textures = textures;
    			if ( images.length > 0 ) data.images = images;

    		}

    		return data;

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    	copy( source ) {

    		this.name = source.name;

    		this.blending = source.blending;
    		this.side = source.side;
    		this.vertexColors = source.vertexColors;

    		this.opacity = source.opacity;
    		this.transparent = source.transparent;

    		this.blendSrc = source.blendSrc;
    		this.blendDst = source.blendDst;
    		this.blendEquation = source.blendEquation;
    		this.blendSrcAlpha = source.blendSrcAlpha;
    		this.blendDstAlpha = source.blendDstAlpha;
    		this.blendEquationAlpha = source.blendEquationAlpha;

    		this.depthFunc = source.depthFunc;
    		this.depthTest = source.depthTest;
    		this.depthWrite = source.depthWrite;

    		this.stencilWriteMask = source.stencilWriteMask;
    		this.stencilFunc = source.stencilFunc;
    		this.stencilRef = source.stencilRef;
    		this.stencilFuncMask = source.stencilFuncMask;
    		this.stencilFail = source.stencilFail;
    		this.stencilZFail = source.stencilZFail;
    		this.stencilZPass = source.stencilZPass;
    		this.stencilWrite = source.stencilWrite;

    		const srcPlanes = source.clippingPlanes;
    		let dstPlanes = null;

    		if ( srcPlanes !== null ) {

    			const n = srcPlanes.length;
    			dstPlanes = new Array( n );

    			for ( let i = 0; i !== n; ++ i ) {

    				dstPlanes[ i ] = srcPlanes[ i ].clone();

    			}

    		}

    		this.clippingPlanes = dstPlanes;
    		this.clipIntersection = source.clipIntersection;
    		this.clipShadows = source.clipShadows;

    		this.shadowSide = source.shadowSide;

    		this.colorWrite = source.colorWrite;

    		this.precision = source.precision;

    		this.polygonOffset = source.polygonOffset;
    		this.polygonOffsetFactor = source.polygonOffsetFactor;
    		this.polygonOffsetUnits = source.polygonOffsetUnits;

    		this.dithering = source.dithering;

    		this.alphaTest = source.alphaTest;
    		this.alphaToCoverage = source.alphaToCoverage;
    		this.premultipliedAlpha = source.premultipliedAlpha;

    		this.visible = source.visible;

    		this.toneMapped = source.toneMapped;

    		this.userData = JSON.parse( JSON.stringify( source.userData ) );

    		return this;

    	}

    	dispose() {

    		this.dispatchEvent( { type: 'dispose' } );

    	}

    	set needsUpdate( value ) {

    		if ( value === true ) this.version ++;

    	}

    	// @deprecated since r131, f5803c62cc4a29d90744e9dc7811d086e354c1d8

    	get vertexTangents() {

    		console.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );
    		return false;

    	}

    	set vertexTangents( value ) {

    		console.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );

    	}

    }

    Material.fromType = function ( /*type*/ ) {

    	// TODO: Behavior added in Materials.js

    	return null;

    };

    class MeshBasicMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isMeshBasicMaterial = true;

    		this.type = 'MeshBasicMaterial';

    		this.color = new Color( 0xffffff ); // emissive

    		this.map = null;

    		this.lightMap = null;
    		this.lightMapIntensity = 1.0;

    		this.aoMap = null;
    		this.aoMapIntensity = 1.0;

    		this.specularMap = null;

    		this.alphaMap = null;

    		this.envMap = null;
    		this.combine = MultiplyOperation;
    		this.reflectivity = 1;
    		this.refractionRatio = 0.98;

    		this.wireframe = false;
    		this.wireframeLinewidth = 1;
    		this.wireframeLinecap = 'round';
    		this.wireframeLinejoin = 'round';

    		this.fog = true;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.color.copy( source.color );

    		this.map = source.map;

    		this.lightMap = source.lightMap;
    		this.lightMapIntensity = source.lightMapIntensity;

    		this.aoMap = source.aoMap;
    		this.aoMapIntensity = source.aoMapIntensity;

    		this.specularMap = source.specularMap;

    		this.alphaMap = source.alphaMap;

    		this.envMap = source.envMap;
    		this.combine = source.combine;
    		this.reflectivity = source.reflectivity;
    		this.refractionRatio = source.refractionRatio;

    		this.wireframe = source.wireframe;
    		this.wireframeLinewidth = source.wireframeLinewidth;
    		this.wireframeLinecap = source.wireframeLinecap;
    		this.wireframeLinejoin = source.wireframeLinejoin;

    		this.fog = source.fog;

    		return this;

    	}

    }

    const _vector$9 = /*@__PURE__*/ new Vector3();
    const _vector2$1 = /*@__PURE__*/ new Vector2();

    class BufferAttribute {

    	constructor( array, itemSize, normalized ) {

    		if ( Array.isArray( array ) ) {

    			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

    		}

    		this.isBufferAttribute = true;

    		this.name = '';

    		this.array = array;
    		this.itemSize = itemSize;
    		this.count = array !== undefined ? array.length / itemSize : 0;
    		this.normalized = normalized === true;

    		this.usage = StaticDrawUsage;
    		this.updateRange = { offset: 0, count: - 1 };

    		this.version = 0;

    	}

    	onUploadCallback() {}

    	set needsUpdate( value ) {

    		if ( value === true ) this.version ++;

    	}

    	setUsage( value ) {

    		this.usage = value;

    		return this;

    	}

    	copy( source ) {

    		this.name = source.name;
    		this.array = new source.array.constructor( source.array );
    		this.itemSize = source.itemSize;
    		this.count = source.count;
    		this.normalized = source.normalized;

    		this.usage = source.usage;

    		return this;

    	}

    	copyAt( index1, attribute, index2 ) {

    		index1 *= this.itemSize;
    		index2 *= attribute.itemSize;

    		for ( let i = 0, l = this.itemSize; i < l; i ++ ) {

    			this.array[ index1 + i ] = attribute.array[ index2 + i ];

    		}

    		return this;

    	}

    	copyArray( array ) {

    		this.array.set( array );

    		return this;

    	}

    	copyColorsArray( colors ) {

    		const array = this.array;
    		let offset = 0;

    		for ( let i = 0, l = colors.length; i < l; i ++ ) {

    			let color = colors[ i ];

    			if ( color === undefined ) {

    				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
    				color = new Color();

    			}

    			array[ offset ++ ] = color.r;
    			array[ offset ++ ] = color.g;
    			array[ offset ++ ] = color.b;

    		}

    		return this;

    	}

    	copyVector2sArray( vectors ) {

    		const array = this.array;
    		let offset = 0;

    		for ( let i = 0, l = vectors.length; i < l; i ++ ) {

    			let vector = vectors[ i ];

    			if ( vector === undefined ) {

    				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
    				vector = new Vector2();

    			}

    			array[ offset ++ ] = vector.x;
    			array[ offset ++ ] = vector.y;

    		}

    		return this;

    	}

    	copyVector3sArray( vectors ) {

    		const array = this.array;
    		let offset = 0;

    		for ( let i = 0, l = vectors.length; i < l; i ++ ) {

    			let vector = vectors[ i ];

    			if ( vector === undefined ) {

    				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
    				vector = new Vector3();

    			}

    			array[ offset ++ ] = vector.x;
    			array[ offset ++ ] = vector.y;
    			array[ offset ++ ] = vector.z;

    		}

    		return this;

    	}

    	copyVector4sArray( vectors ) {

    		const array = this.array;
    		let offset = 0;

    		for ( let i = 0, l = vectors.length; i < l; i ++ ) {

    			let vector = vectors[ i ];

    			if ( vector === undefined ) {

    				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
    				vector = new Vector4();

    			}

    			array[ offset ++ ] = vector.x;
    			array[ offset ++ ] = vector.y;
    			array[ offset ++ ] = vector.z;
    			array[ offset ++ ] = vector.w;

    		}

    		return this;

    	}

    	applyMatrix3( m ) {

    		if ( this.itemSize === 2 ) {

    			for ( let i = 0, l = this.count; i < l; i ++ ) {

    				_vector2$1.fromBufferAttribute( this, i );
    				_vector2$1.applyMatrix3( m );

    				this.setXY( i, _vector2$1.x, _vector2$1.y );

    			}

    		} else if ( this.itemSize === 3 ) {

    			for ( let i = 0, l = this.count; i < l; i ++ ) {

    				_vector$9.fromBufferAttribute( this, i );
    				_vector$9.applyMatrix3( m );

    				this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

    			}

    		}

    		return this;

    	}

    	applyMatrix4( m ) {

    		for ( let i = 0, l = this.count; i < l; i ++ ) {

    			_vector$9.fromBufferAttribute( this, i );

    			_vector$9.applyMatrix4( m );

    			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

    		}

    		return this;

    	}

    	applyNormalMatrix( m ) {

    		for ( let i = 0, l = this.count; i < l; i ++ ) {

    			_vector$9.fromBufferAttribute( this, i );

    			_vector$9.applyNormalMatrix( m );

    			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

    		}

    		return this;

    	}

    	transformDirection( m ) {

    		for ( let i = 0, l = this.count; i < l; i ++ ) {

    			_vector$9.fromBufferAttribute( this, i );

    			_vector$9.transformDirection( m );

    			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

    		}

    		return this;

    	}

    	set( value, offset = 0 ) {

    		this.array.set( value, offset );

    		return this;

    	}

    	getX( index ) {

    		return this.array[ index * this.itemSize ];

    	}

    	setX( index, x ) {

    		this.array[ index * this.itemSize ] = x;

    		return this;

    	}

    	getY( index ) {

    		return this.array[ index * this.itemSize + 1 ];

    	}

    	setY( index, y ) {

    		this.array[ index * this.itemSize + 1 ] = y;

    		return this;

    	}

    	getZ( index ) {

    		return this.array[ index * this.itemSize + 2 ];

    	}

    	setZ( index, z ) {

    		this.array[ index * this.itemSize + 2 ] = z;

    		return this;

    	}

    	getW( index ) {

    		return this.array[ index * this.itemSize + 3 ];

    	}

    	setW( index, w ) {

    		this.array[ index * this.itemSize + 3 ] = w;

    		return this;

    	}

    	setXY( index, x, y ) {

    		index *= this.itemSize;

    		this.array[ index + 0 ] = x;
    		this.array[ index + 1 ] = y;

    		return this;

    	}

    	setXYZ( index, x, y, z ) {

    		index *= this.itemSize;

    		this.array[ index + 0 ] = x;
    		this.array[ index + 1 ] = y;
    		this.array[ index + 2 ] = z;

    		return this;

    	}

    	setXYZW( index, x, y, z, w ) {

    		index *= this.itemSize;

    		this.array[ index + 0 ] = x;
    		this.array[ index + 1 ] = y;
    		this.array[ index + 2 ] = z;
    		this.array[ index + 3 ] = w;

    		return this;

    	}

    	onUpload( callback ) {

    		this.onUploadCallback = callback;

    		return this;

    	}

    	clone() {

    		return new this.constructor( this.array, this.itemSize ).copy( this );

    	}

    	toJSON() {

    		const data = {
    			itemSize: this.itemSize,
    			type: this.array.constructor.name,
    			array: Array.prototype.slice.call( this.array ),
    			normalized: this.normalized
    		};

    		if ( this.name !== '' ) data.name = this.name;
    		if ( this.usage !== StaticDrawUsage ) data.usage = this.usage;
    		if ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;

    		return data;

    	}

    }

    class Uint16BufferAttribute extends BufferAttribute {

    	constructor( array, itemSize, normalized ) {

    		super( new Uint16Array( array ), itemSize, normalized );

    	}

    }

    class Uint32BufferAttribute extends BufferAttribute {

    	constructor( array, itemSize, normalized ) {

    		super( new Uint32Array( array ), itemSize, normalized );

    	}

    }


    class Float32BufferAttribute extends BufferAttribute {

    	constructor( array, itemSize, normalized ) {

    		super( new Float32Array( array ), itemSize, normalized );

    	}

    }

    let _id$1 = 0;

    const _m1 = /*@__PURE__*/ new Matrix4();
    const _obj = /*@__PURE__*/ new Object3D();
    const _offset = /*@__PURE__*/ new Vector3();
    const _box$1 = /*@__PURE__*/ new Box3();
    const _boxMorphTargets = /*@__PURE__*/ new Box3();
    const _vector$8 = /*@__PURE__*/ new Vector3();

    class BufferGeometry extends EventDispatcher {

    	constructor() {

    		super();

    		this.isBufferGeometry = true;

    		Object.defineProperty( this, 'id', { value: _id$1 ++ } );

    		this.uuid = generateUUID();

    		this.name = '';
    		this.type = 'BufferGeometry';

    		this.index = null;
    		this.attributes = {};

    		this.morphAttributes = {};
    		this.morphTargetsRelative = false;

    		this.groups = [];

    		this.boundingBox = null;
    		this.boundingSphere = null;

    		this.drawRange = { start: 0, count: Infinity };

    		this.userData = {};

    	}

    	getIndex() {

    		return this.index;

    	}

    	setIndex( index ) {

    		if ( Array.isArray( index ) ) {

    			this.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

    		} else {

    			this.index = index;

    		}

    		return this;

    	}

    	getAttribute( name ) {

    		return this.attributes[ name ];

    	}

    	setAttribute( name, attribute ) {

    		this.attributes[ name ] = attribute;

    		return this;

    	}

    	deleteAttribute( name ) {

    		delete this.attributes[ name ];

    		return this;

    	}

    	hasAttribute( name ) {

    		return this.attributes[ name ] !== undefined;

    	}

    	addGroup( start, count, materialIndex = 0 ) {

    		this.groups.push( {

    			start: start,
    			count: count,
    			materialIndex: materialIndex

    		} );

    	}

    	clearGroups() {

    		this.groups = [];

    	}

    	setDrawRange( start, count ) {

    		this.drawRange.start = start;
    		this.drawRange.count = count;

    	}

    	applyMatrix4( matrix ) {

    		const position = this.attributes.position;

    		if ( position !== undefined ) {

    			position.applyMatrix4( matrix );

    			position.needsUpdate = true;

    		}

    		const normal = this.attributes.normal;

    		if ( normal !== undefined ) {

    			const normalMatrix = new Matrix3().getNormalMatrix( matrix );

    			normal.applyNormalMatrix( normalMatrix );

    			normal.needsUpdate = true;

    		}

    		const tangent = this.attributes.tangent;

    		if ( tangent !== undefined ) {

    			tangent.transformDirection( matrix );

    			tangent.needsUpdate = true;

    		}

    		if ( this.boundingBox !== null ) {

    			this.computeBoundingBox();

    		}

    		if ( this.boundingSphere !== null ) {

    			this.computeBoundingSphere();

    		}

    		return this;

    	}

    	applyQuaternion( q ) {

    		_m1.makeRotationFromQuaternion( q );

    		this.applyMatrix4( _m1 );

    		return this;

    	}

    	rotateX( angle ) {

    		// rotate geometry around world x-axis

    		_m1.makeRotationX( angle );

    		this.applyMatrix4( _m1 );

    		return this;

    	}

    	rotateY( angle ) {

    		// rotate geometry around world y-axis

    		_m1.makeRotationY( angle );

    		this.applyMatrix4( _m1 );

    		return this;

    	}

    	rotateZ( angle ) {

    		// rotate geometry around world z-axis

    		_m1.makeRotationZ( angle );

    		this.applyMatrix4( _m1 );

    		return this;

    	}

    	translate( x, y, z ) {

    		// translate geometry

    		_m1.makeTranslation( x, y, z );

    		this.applyMatrix4( _m1 );

    		return this;

    	}

    	scale( x, y, z ) {

    		// scale geometry

    		_m1.makeScale( x, y, z );

    		this.applyMatrix4( _m1 );

    		return this;

    	}

    	lookAt( vector ) {

    		_obj.lookAt( vector );

    		_obj.updateMatrix();

    		this.applyMatrix4( _obj.matrix );

    		return this;

    	}

    	center() {

    		this.computeBoundingBox();

    		this.boundingBox.getCenter( _offset ).negate();

    		this.translate( _offset.x, _offset.y, _offset.z );

    		return this;

    	}

    	setFromPoints( points ) {

    		const position = [];

    		for ( let i = 0, l = points.length; i < l; i ++ ) {

    			const point = points[ i ];
    			position.push( point.x, point.y, point.z || 0 );

    		}

    		this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

    		return this;

    	}

    	computeBoundingBox() {

    		if ( this.boundingBox === null ) {

    			this.boundingBox = new Box3();

    		}

    		const position = this.attributes.position;
    		const morphAttributesPosition = this.morphAttributes.position;

    		if ( position && position.isGLBufferAttribute ) {

    			console.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this );

    			this.boundingBox.set(
    				new Vector3( - Infinity, - Infinity, - Infinity ),
    				new Vector3( + Infinity, + Infinity, + Infinity )
    			);

    			return;

    		}

    		if ( position !== undefined ) {

    			this.boundingBox.setFromBufferAttribute( position );

    			// process morph attributes if present

    			if ( morphAttributesPosition ) {

    				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

    					const morphAttribute = morphAttributesPosition[ i ];
    					_box$1.setFromBufferAttribute( morphAttribute );

    					if ( this.morphTargetsRelative ) {

    						_vector$8.addVectors( this.boundingBox.min, _box$1.min );
    						this.boundingBox.expandByPoint( _vector$8 );

    						_vector$8.addVectors( this.boundingBox.max, _box$1.max );
    						this.boundingBox.expandByPoint( _vector$8 );

    					} else {

    						this.boundingBox.expandByPoint( _box$1.min );
    						this.boundingBox.expandByPoint( _box$1.max );

    					}

    				}

    			}

    		} else {

    			this.boundingBox.makeEmpty();

    		}

    		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

    			console.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

    		}

    	}

    	computeBoundingSphere() {

    		if ( this.boundingSphere === null ) {

    			this.boundingSphere = new Sphere();

    		}

    		const position = this.attributes.position;
    		const morphAttributesPosition = this.morphAttributes.position;

    		if ( position && position.isGLBufferAttribute ) {

    			console.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this );

    			this.boundingSphere.set( new Vector3(), Infinity );

    			return;

    		}

    		if ( position ) {

    			// first, find the center of the bounding sphere

    			const center = this.boundingSphere.center;

    			_box$1.setFromBufferAttribute( position );

    			// process morph attributes if present

    			if ( morphAttributesPosition ) {

    				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

    					const morphAttribute = morphAttributesPosition[ i ];
    					_boxMorphTargets.setFromBufferAttribute( morphAttribute );

    					if ( this.morphTargetsRelative ) {

    						_vector$8.addVectors( _box$1.min, _boxMorphTargets.min );
    						_box$1.expandByPoint( _vector$8 );

    						_vector$8.addVectors( _box$1.max, _boxMorphTargets.max );
    						_box$1.expandByPoint( _vector$8 );

    					} else {

    						_box$1.expandByPoint( _boxMorphTargets.min );
    						_box$1.expandByPoint( _boxMorphTargets.max );

    					}

    				}

    			}

    			_box$1.getCenter( center );

    			// second, try to find a boundingSphere with a radius smaller than the
    			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

    			let maxRadiusSq = 0;

    			for ( let i = 0, il = position.count; i < il; i ++ ) {

    				_vector$8.fromBufferAttribute( position, i );

    				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );

    			}

    			// process morph attributes if present

    			if ( morphAttributesPosition ) {

    				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

    					const morphAttribute = morphAttributesPosition[ i ];
    					const morphTargetsRelative = this.morphTargetsRelative;

    					for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

    						_vector$8.fromBufferAttribute( morphAttribute, j );

    						if ( morphTargetsRelative ) {

    							_offset.fromBufferAttribute( position, j );
    							_vector$8.add( _offset );

    						}

    						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );

    					}

    				}

    			}

    			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

    			if ( isNaN( this.boundingSphere.radius ) ) {

    				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

    			}

    		}

    	}

    	computeTangents() {

    		const index = this.index;
    		const attributes = this.attributes;

    		// based on http://www.terathon.com/code/tangent.html
    		// (per vertex tangents)

    		if ( index === null ||
    			 attributes.position === undefined ||
    			 attributes.normal === undefined ||
    			 attributes.uv === undefined ) {

    			console.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );
    			return;

    		}

    		const indices = index.array;
    		const positions = attributes.position.array;
    		const normals = attributes.normal.array;
    		const uvs = attributes.uv.array;

    		const nVertices = positions.length / 3;

    		if ( this.hasAttribute( 'tangent' ) === false ) {

    			this.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );

    		}

    		const tangents = this.getAttribute( 'tangent' ).array;

    		const tan1 = [], tan2 = [];

    		for ( let i = 0; i < nVertices; i ++ ) {

    			tan1[ i ] = new Vector3();
    			tan2[ i ] = new Vector3();

    		}

    		const vA = new Vector3(),
    			vB = new Vector3(),
    			vC = new Vector3(),

    			uvA = new Vector2(),
    			uvB = new Vector2(),
    			uvC = new Vector2(),

    			sdir = new Vector3(),
    			tdir = new Vector3();

    		function handleTriangle( a, b, c ) {

    			vA.fromArray( positions, a * 3 );
    			vB.fromArray( positions, b * 3 );
    			vC.fromArray( positions, c * 3 );

    			uvA.fromArray( uvs, a * 2 );
    			uvB.fromArray( uvs, b * 2 );
    			uvC.fromArray( uvs, c * 2 );

    			vB.sub( vA );
    			vC.sub( vA );

    			uvB.sub( uvA );
    			uvC.sub( uvA );

    			const r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );

    			// silently ignore degenerate uv triangles having coincident or colinear vertices

    			if ( ! isFinite( r ) ) return;

    			sdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );
    			tdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );

    			tan1[ a ].add( sdir );
    			tan1[ b ].add( sdir );
    			tan1[ c ].add( sdir );

    			tan2[ a ].add( tdir );
    			tan2[ b ].add( tdir );
    			tan2[ c ].add( tdir );

    		}

    		let groups = this.groups;

    		if ( groups.length === 0 ) {

    			groups = [ {
    				start: 0,
    				count: indices.length
    			} ];

    		}

    		for ( let i = 0, il = groups.length; i < il; ++ i ) {

    			const group = groups[ i ];

    			const start = group.start;
    			const count = group.count;

    			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

    				handleTriangle(
    					indices[ j + 0 ],
    					indices[ j + 1 ],
    					indices[ j + 2 ]
    				);

    			}

    		}

    		const tmp = new Vector3(), tmp2 = new Vector3();
    		const n = new Vector3(), n2 = new Vector3();

    		function handleVertex( v ) {

    			n.fromArray( normals, v * 3 );
    			n2.copy( n );

    			const t = tan1[ v ];

    			// Gram-Schmidt orthogonalize

    			tmp.copy( t );
    			tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

    			// Calculate handedness

    			tmp2.crossVectors( n2, t );
    			const test = tmp2.dot( tan2[ v ] );
    			const w = ( test < 0.0 ) ? - 1.0 : 1.0;

    			tangents[ v * 4 ] = tmp.x;
    			tangents[ v * 4 + 1 ] = tmp.y;
    			tangents[ v * 4 + 2 ] = tmp.z;
    			tangents[ v * 4 + 3 ] = w;

    		}

    		for ( let i = 0, il = groups.length; i < il; ++ i ) {

    			const group = groups[ i ];

    			const start = group.start;
    			const count = group.count;

    			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

    				handleVertex( indices[ j + 0 ] );
    				handleVertex( indices[ j + 1 ] );
    				handleVertex( indices[ j + 2 ] );

    			}

    		}

    	}

    	computeVertexNormals() {

    		const index = this.index;
    		const positionAttribute = this.getAttribute( 'position' );

    		if ( positionAttribute !== undefined ) {

    			let normalAttribute = this.getAttribute( 'normal' );

    			if ( normalAttribute === undefined ) {

    				normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );
    				this.setAttribute( 'normal', normalAttribute );

    			} else {

    				// reset existing normals to zero

    				for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {

    					normalAttribute.setXYZ( i, 0, 0, 0 );

    				}

    			}

    			const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
    			const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
    			const cb = new Vector3(), ab = new Vector3();

    			// indexed elements

    			if ( index ) {

    				for ( let i = 0, il = index.count; i < il; i += 3 ) {

    					const vA = index.getX( i + 0 );
    					const vB = index.getX( i + 1 );
    					const vC = index.getX( i + 2 );

    					pA.fromBufferAttribute( positionAttribute, vA );
    					pB.fromBufferAttribute( positionAttribute, vB );
    					pC.fromBufferAttribute( positionAttribute, vC );

    					cb.subVectors( pC, pB );
    					ab.subVectors( pA, pB );
    					cb.cross( ab );

    					nA.fromBufferAttribute( normalAttribute, vA );
    					nB.fromBufferAttribute( normalAttribute, vB );
    					nC.fromBufferAttribute( normalAttribute, vC );

    					nA.add( cb );
    					nB.add( cb );
    					nC.add( cb );

    					normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
    					normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
    					normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );

    				}

    			} else {

    				// non-indexed elements (unconnected triangle soup)

    				for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {

    					pA.fromBufferAttribute( positionAttribute, i + 0 );
    					pB.fromBufferAttribute( positionAttribute, i + 1 );
    					pC.fromBufferAttribute( positionAttribute, i + 2 );

    					cb.subVectors( pC, pB );
    					ab.subVectors( pA, pB );
    					cb.cross( ab );

    					normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );
    					normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );
    					normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );

    				}

    			}

    			this.normalizeNormals();

    			normalAttribute.needsUpdate = true;

    		}

    	}

    	merge( geometry, offset ) {

    		if ( ! ( geometry && geometry.isBufferGeometry ) ) {

    			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
    			return;

    		}

    		if ( offset === undefined ) {

    			offset = 0;

    			console.warn(
    				'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
    				+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
    			);

    		}

    		const attributes = this.attributes;

    		for ( const key in attributes ) {

    			if ( geometry.attributes[ key ] === undefined ) continue;

    			const attribute1 = attributes[ key ];
    			const attributeArray1 = attribute1.array;

    			const attribute2 = geometry.attributes[ key ];
    			const attributeArray2 = attribute2.array;

    			const attributeOffset = attribute2.itemSize * offset;
    			const length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );

    			for ( let i = 0, j = attributeOffset; i < length; i ++, j ++ ) {

    				attributeArray1[ j ] = attributeArray2[ i ];

    			}

    		}

    		return this;

    	}

    	normalizeNormals() {

    		const normals = this.attributes.normal;

    		for ( let i = 0, il = normals.count; i < il; i ++ ) {

    			_vector$8.fromBufferAttribute( normals, i );

    			_vector$8.normalize();

    			normals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

    		}

    	}

    	toNonIndexed() {

    		function convertBufferAttribute( attribute, indices ) {

    			const array = attribute.array;
    			const itemSize = attribute.itemSize;
    			const normalized = attribute.normalized;

    			const array2 = new array.constructor( indices.length * itemSize );

    			let index = 0, index2 = 0;

    			for ( let i = 0, l = indices.length; i < l; i ++ ) {

    				if ( attribute.isInterleavedBufferAttribute ) {

    					index = indices[ i ] * attribute.data.stride + attribute.offset;

    				} else {

    					index = indices[ i ] * itemSize;

    				}

    				for ( let j = 0; j < itemSize; j ++ ) {

    					array2[ index2 ++ ] = array[ index ++ ];

    				}

    			}

    			return new BufferAttribute( array2, itemSize, normalized );

    		}

    		//

    		if ( this.index === null ) {

    			console.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );
    			return this;

    		}

    		const geometry2 = new BufferGeometry();

    		const indices = this.index.array;
    		const attributes = this.attributes;

    		// attributes

    		for ( const name in attributes ) {

    			const attribute = attributes[ name ];

    			const newAttribute = convertBufferAttribute( attribute, indices );

    			geometry2.setAttribute( name, newAttribute );

    		}

    		// morph attributes

    		const morphAttributes = this.morphAttributes;

    		for ( const name in morphAttributes ) {

    			const morphArray = [];
    			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

    			for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {

    				const attribute = morphAttribute[ i ];

    				const newAttribute = convertBufferAttribute( attribute, indices );

    				morphArray.push( newAttribute );

    			}

    			geometry2.morphAttributes[ name ] = morphArray;

    		}

    		geometry2.morphTargetsRelative = this.morphTargetsRelative;

    		// groups

    		const groups = this.groups;

    		for ( let i = 0, l = groups.length; i < l; i ++ ) {

    			const group = groups[ i ];
    			geometry2.addGroup( group.start, group.count, group.materialIndex );

    		}

    		return geometry2;

    	}

    	toJSON() {

    		const data = {
    			metadata: {
    				version: 4.5,
    				type: 'BufferGeometry',
    				generator: 'BufferGeometry.toJSON'
    			}
    		};

    		// standard BufferGeometry serialization

    		data.uuid = this.uuid;
    		data.type = this.type;
    		if ( this.name !== '' ) data.name = this.name;
    		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

    		if ( this.parameters !== undefined ) {

    			const parameters = this.parameters;

    			for ( const key in parameters ) {

    				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

    			}

    			return data;

    		}

    		// for simplicity the code assumes attributes are not shared across geometries, see #15811

    		data.data = { attributes: {} };

    		const index = this.index;

    		if ( index !== null ) {

    			data.data.index = {
    				type: index.array.constructor.name,
    				array: Array.prototype.slice.call( index.array )
    			};

    		}

    		const attributes = this.attributes;

    		for ( const key in attributes ) {

    			const attribute = attributes[ key ];

    			data.data.attributes[ key ] = attribute.toJSON( data.data );

    		}

    		const morphAttributes = {};
    		let hasMorphAttributes = false;

    		for ( const key in this.morphAttributes ) {

    			const attributeArray = this.morphAttributes[ key ];

    			const array = [];

    			for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {

    				const attribute = attributeArray[ i ];

    				array.push( attribute.toJSON( data.data ) );

    			}

    			if ( array.length > 0 ) {

    				morphAttributes[ key ] = array;

    				hasMorphAttributes = true;

    			}

    		}

    		if ( hasMorphAttributes ) {

    			data.data.morphAttributes = morphAttributes;
    			data.data.morphTargetsRelative = this.morphTargetsRelative;

    		}

    		const groups = this.groups;

    		if ( groups.length > 0 ) {

    			data.data.groups = JSON.parse( JSON.stringify( groups ) );

    		}

    		const boundingSphere = this.boundingSphere;

    		if ( boundingSphere !== null ) {

    			data.data.boundingSphere = {
    				center: boundingSphere.center.toArray(),
    				radius: boundingSphere.radius
    			};

    		}

    		return data;

    	}

    	clone() {

    		 return new this.constructor().copy( this );

    	}

    	copy( source ) {

    		// reset

    		this.index = null;
    		this.attributes = {};
    		this.morphAttributes = {};
    		this.groups = [];
    		this.boundingBox = null;
    		this.boundingSphere = null;

    		// used for storing cloned, shared data

    		const data = {};

    		// name

    		this.name = source.name;

    		// index

    		const index = source.index;

    		if ( index !== null ) {

    			this.setIndex( index.clone( data ) );

    		}

    		// attributes

    		const attributes = source.attributes;

    		for ( const name in attributes ) {

    			const attribute = attributes[ name ];
    			this.setAttribute( name, attribute.clone( data ) );

    		}

    		// morph attributes

    		const morphAttributes = source.morphAttributes;

    		for ( const name in morphAttributes ) {

    			const array = [];
    			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

    			for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {

    				array.push( morphAttribute[ i ].clone( data ) );

    			}

    			this.morphAttributes[ name ] = array;

    		}

    		this.morphTargetsRelative = source.morphTargetsRelative;

    		// groups

    		const groups = source.groups;

    		for ( let i = 0, l = groups.length; i < l; i ++ ) {

    			const group = groups[ i ];
    			this.addGroup( group.start, group.count, group.materialIndex );

    		}

    		// bounding box

    		const boundingBox = source.boundingBox;

    		if ( boundingBox !== null ) {

    			this.boundingBox = boundingBox.clone();

    		}

    		// bounding sphere

    		const boundingSphere = source.boundingSphere;

    		if ( boundingSphere !== null ) {

    			this.boundingSphere = boundingSphere.clone();

    		}

    		// draw range

    		this.drawRange.start = source.drawRange.start;
    		this.drawRange.count = source.drawRange.count;

    		// user data

    		this.userData = source.userData;

    		// geometry generator parameters

    		if ( source.parameters !== undefined ) this.parameters = Object.assign( {}, source.parameters );

    		return this;

    	}

    	dispose() {

    		this.dispatchEvent( { type: 'dispose' } );

    	}

    }

    const _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();
    const _ray$2 = /*@__PURE__*/ new Ray();
    const _sphere$3 = /*@__PURE__*/ new Sphere();

    const _vA$1 = /*@__PURE__*/ new Vector3();
    const _vB$1 = /*@__PURE__*/ new Vector3();
    const _vC$1 = /*@__PURE__*/ new Vector3();

    const _tempA = /*@__PURE__*/ new Vector3();
    const _tempB = /*@__PURE__*/ new Vector3();
    const _tempC = /*@__PURE__*/ new Vector3();

    const _morphA = /*@__PURE__*/ new Vector3();
    const _morphB = /*@__PURE__*/ new Vector3();
    const _morphC = /*@__PURE__*/ new Vector3();

    const _uvA$1 = /*@__PURE__*/ new Vector2();
    const _uvB$1 = /*@__PURE__*/ new Vector2();
    const _uvC$1 = /*@__PURE__*/ new Vector2();

    const _intersectionPoint = /*@__PURE__*/ new Vector3();
    const _intersectionPointWorld = /*@__PURE__*/ new Vector3();

    class Mesh extends Object3D {

    	constructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {

    		super();

    		this.isMesh = true;

    		this.type = 'Mesh';

    		this.geometry = geometry;
    		this.material = material;

    		this.updateMorphTargets();

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		if ( source.morphTargetInfluences !== undefined ) {

    			this.morphTargetInfluences = source.morphTargetInfluences.slice();

    		}

    		if ( source.morphTargetDictionary !== undefined ) {

    			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

    		}

    		this.material = source.material;
    		this.geometry = source.geometry;

    		return this;

    	}

    	updateMorphTargets() {

    		const geometry = this.geometry;

    		const morphAttributes = geometry.morphAttributes;
    		const keys = Object.keys( morphAttributes );

    		if ( keys.length > 0 ) {

    			const morphAttribute = morphAttributes[ keys[ 0 ] ];

    			if ( morphAttribute !== undefined ) {

    				this.morphTargetInfluences = [];
    				this.morphTargetDictionary = {};

    				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

    					const name = morphAttribute[ m ].name || String( m );

    					this.morphTargetInfluences.push( 0 );
    					this.morphTargetDictionary[ name ] = m;

    				}

    			}

    		}

    	}

    	raycast( raycaster, intersects ) {

    		const geometry = this.geometry;
    		const material = this.material;
    		const matrixWorld = this.matrixWorld;

    		if ( material === undefined ) return;

    		// Checking boundingSphere distance to ray

    		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

    		_sphere$3.copy( geometry.boundingSphere );
    		_sphere$3.applyMatrix4( matrixWorld );

    		if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;

    		//

    		_inverseMatrix$2.copy( matrixWorld ).invert();
    		_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );

    		// Check boundingBox before continuing

    		if ( geometry.boundingBox !== null ) {

    			if ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;

    		}

    		let intersection;

    		const index = geometry.index;
    		const position = geometry.attributes.position;
    		const morphPosition = geometry.morphAttributes.position;
    		const morphTargetsRelative = geometry.morphTargetsRelative;
    		const uv = geometry.attributes.uv;
    		const uv2 = geometry.attributes.uv2;
    		const groups = geometry.groups;
    		const drawRange = geometry.drawRange;

    		if ( index !== null ) {

    			// indexed buffer geometry

    			if ( Array.isArray( material ) ) {

    				for ( let i = 0, il = groups.length; i < il; i ++ ) {

    					const group = groups[ i ];
    					const groupMaterial = material[ group.materialIndex ];

    					const start = Math.max( group.start, drawRange.start );
    					const end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

    					for ( let j = start, jl = end; j < jl; j += 3 ) {

    						const a = index.getX( j );
    						const b = index.getX( j + 1 );
    						const c = index.getX( j + 2 );

    						intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

    						if ( intersection ) {

    							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
    							intersection.face.materialIndex = group.materialIndex;
    							intersects.push( intersection );

    						}

    					}

    				}

    			} else {

    				const start = Math.max( 0, drawRange.start );
    				const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

    				for ( let i = start, il = end; i < il; i += 3 ) {

    					const a = index.getX( i );
    					const b = index.getX( i + 1 );
    					const c = index.getX( i + 2 );

    					intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

    					if ( intersection ) {

    						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
    						intersects.push( intersection );

    					}

    				}

    			}

    		} else if ( position !== undefined ) {

    			// non-indexed buffer geometry

    			if ( Array.isArray( material ) ) {

    				for ( let i = 0, il = groups.length; i < il; i ++ ) {

    					const group = groups[ i ];
    					const groupMaterial = material[ group.materialIndex ];

    					const start = Math.max( group.start, drawRange.start );
    					const end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

    					for ( let j = start, jl = end; j < jl; j += 3 ) {

    						const a = j;
    						const b = j + 1;
    						const c = j + 2;

    						intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

    						if ( intersection ) {

    							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
    							intersection.face.materialIndex = group.materialIndex;
    							intersects.push( intersection );

    						}

    					}

    				}

    			} else {

    				const start = Math.max( 0, drawRange.start );
    				const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

    				for ( let i = start, il = end; i < il; i += 3 ) {

    					const a = i;
    					const b = i + 1;
    					const c = i + 2;

    					intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

    					if ( intersection ) {

    						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
    						intersects.push( intersection );

    					}

    				}

    			}

    		}

    	}

    }

    function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

    	let intersect;

    	if ( material.side === BackSide ) {

    		intersect = ray.intersectTriangle( pC, pB, pA, true, point );

    	} else {

    		intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

    	}

    	if ( intersect === null ) return null;

    	_intersectionPointWorld.copy( point );
    	_intersectionPointWorld.applyMatrix4( object.matrixWorld );

    	const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

    	if ( distance < raycaster.near || distance > raycaster.far ) return null;

    	return {
    		distance: distance,
    		point: _intersectionPointWorld.clone(),
    		object: object
    	};

    }

    function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {

    	_vA$1.fromBufferAttribute( position, a );
    	_vB$1.fromBufferAttribute( position, b );
    	_vC$1.fromBufferAttribute( position, c );

    	const morphInfluences = object.morphTargetInfluences;

    	if ( morphPosition && morphInfluences ) {

    		_morphA.set( 0, 0, 0 );
    		_morphB.set( 0, 0, 0 );
    		_morphC.set( 0, 0, 0 );

    		for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {

    			const influence = morphInfluences[ i ];
    			const morphAttribute = morphPosition[ i ];

    			if ( influence === 0 ) continue;

    			_tempA.fromBufferAttribute( morphAttribute, a );
    			_tempB.fromBufferAttribute( morphAttribute, b );
    			_tempC.fromBufferAttribute( morphAttribute, c );

    			if ( morphTargetsRelative ) {

    				_morphA.addScaledVector( _tempA, influence );
    				_morphB.addScaledVector( _tempB, influence );
    				_morphC.addScaledVector( _tempC, influence );

    			} else {

    				_morphA.addScaledVector( _tempA.sub( _vA$1 ), influence );
    				_morphB.addScaledVector( _tempB.sub( _vB$1 ), influence );
    				_morphC.addScaledVector( _tempC.sub( _vC$1 ), influence );

    			}

    		}

    		_vA$1.add( _morphA );
    		_vB$1.add( _morphB );
    		_vC$1.add( _morphC );

    	}

    	if ( object.isSkinnedMesh ) {

    		object.boneTransform( a, _vA$1 );
    		object.boneTransform( b, _vB$1 );
    		object.boneTransform( c, _vC$1 );

    	}

    	const intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );

    	if ( intersection ) {

    		if ( uv ) {

    			_uvA$1.fromBufferAttribute( uv, a );
    			_uvB$1.fromBufferAttribute( uv, b );
    			_uvC$1.fromBufferAttribute( uv, c );

    			intersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );

    		}

    		if ( uv2 ) {

    			_uvA$1.fromBufferAttribute( uv2, a );
    			_uvB$1.fromBufferAttribute( uv2, b );
    			_uvC$1.fromBufferAttribute( uv2, c );

    			intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );

    		}

    		const face = {
    			a: a,
    			b: b,
    			c: c,
    			normal: new Vector3(),
    			materialIndex: 0
    		};

    		Triangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );

    		intersection.face = face;

    	}

    	return intersection;

    }

    class BoxGeometry extends BufferGeometry {

    	constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {

    		super();

    		this.type = 'BoxGeometry';

    		this.parameters = {
    			width: width,
    			height: height,
    			depth: depth,
    			widthSegments: widthSegments,
    			heightSegments: heightSegments,
    			depthSegments: depthSegments
    		};

    		const scope = this;

    		// segments

    		widthSegments = Math.floor( widthSegments );
    		heightSegments = Math.floor( heightSegments );
    		depthSegments = Math.floor( depthSegments );

    		// buffers

    		const indices = [];
    		const vertices = [];
    		const normals = [];
    		const uvs = [];

    		// helper variables

    		let numberOfVertices = 0;
    		let groupStart = 0;

    		// build each side of the box geometry

    		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
    		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
    		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
    		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
    		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
    		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

    		// build geometry

    		this.setIndex( indices );
    		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

    			const segmentWidth = width / gridX;
    			const segmentHeight = height / gridY;

    			const widthHalf = width / 2;
    			const heightHalf = height / 2;
    			const depthHalf = depth / 2;

    			const gridX1 = gridX + 1;
    			const gridY1 = gridY + 1;

    			let vertexCounter = 0;
    			let groupCount = 0;

    			const vector = new Vector3();

    			// generate vertices, normals and uvs

    			for ( let iy = 0; iy < gridY1; iy ++ ) {

    				const y = iy * segmentHeight - heightHalf;

    				for ( let ix = 0; ix < gridX1; ix ++ ) {

    					const x = ix * segmentWidth - widthHalf;

    					// set values to correct vector component

    					vector[ u ] = x * udir;
    					vector[ v ] = y * vdir;
    					vector[ w ] = depthHalf;

    					// now apply vector to vertex buffer

    					vertices.push( vector.x, vector.y, vector.z );

    					// set values to correct vector component

    					vector[ u ] = 0;
    					vector[ v ] = 0;
    					vector[ w ] = depth > 0 ? 1 : - 1;

    					// now apply vector to normal buffer

    					normals.push( vector.x, vector.y, vector.z );

    					// uvs

    					uvs.push( ix / gridX );
    					uvs.push( 1 - ( iy / gridY ) );

    					// counters

    					vertexCounter += 1;

    				}

    			}

    			// indices

    			// 1. you need three indices to draw a single face
    			// 2. a single segment consists of two faces
    			// 3. so we need to generate six (2*3) indices per segment

    			for ( let iy = 0; iy < gridY; iy ++ ) {

    				for ( let ix = 0; ix < gridX; ix ++ ) {

    					const a = numberOfVertices + ix + gridX1 * iy;
    					const b = numberOfVertices + ix + gridX1 * ( iy + 1 );
    					const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
    					const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

    					// faces

    					indices.push( a, b, d );
    					indices.push( b, c, d );

    					// increase counter

    					groupCount += 6;

    				}

    			}

    			// add a group to the geometry. this will ensure multi material support

    			scope.addGroup( groupStart, groupCount, materialIndex );

    			// calculate new start value for groups

    			groupStart += groupCount;

    			// update total number of vertices

    			numberOfVertices += vertexCounter;

    		}

    	}

    	static fromJSON( data ) {

    		return new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );

    	}

    }

    /**
     * Uniform Utilities
     */

    function cloneUniforms( src ) {

    	const dst = {};

    	for ( const u in src ) {

    		dst[ u ] = {};

    		for ( const p in src[ u ] ) {

    			const property = src[ u ][ p ];

    			if ( property && ( property.isColor ||
    				property.isMatrix3 || property.isMatrix4 ||
    				property.isVector2 || property.isVector3 || property.isVector4 ||
    				property.isTexture || property.isQuaternion ) ) {

    				dst[ u ][ p ] = property.clone();

    			} else if ( Array.isArray( property ) ) {

    				dst[ u ][ p ] = property.slice();

    			} else {

    				dst[ u ][ p ] = property;

    			}

    		}

    	}

    	return dst;

    }

    function mergeUniforms( uniforms ) {

    	const merged = {};

    	for ( let u = 0; u < uniforms.length; u ++ ) {

    		const tmp = cloneUniforms( uniforms[ u ] );

    		for ( const p in tmp ) {

    			merged[ p ] = tmp[ p ];

    		}

    	}

    	return merged;

    }

    // Legacy

    const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

    var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

    var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

    class ShaderMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isShaderMaterial = true;

    		this.type = 'ShaderMaterial';

    		this.defines = {};
    		this.uniforms = {};

    		this.vertexShader = default_vertex;
    		this.fragmentShader = default_fragment;

    		this.linewidth = 1;

    		this.wireframe = false;
    		this.wireframeLinewidth = 1;

    		this.fog = false; // set to use scene fog
    		this.lights = false; // set to use scene lights
    		this.clipping = false; // set to use user-defined clipping planes

    		this.extensions = {
    			derivatives: false, // set to use derivatives
    			fragDepth: false, // set to use fragment depth values
    			drawBuffers: false, // set to use draw buffers
    			shaderTextureLOD: false // set to use shader texture LOD
    		};

    		// When rendered geometry doesn't include these attributes but the material does,
    		// use these default values in WebGL. This avoids errors when buffer data is missing.
    		this.defaultAttributeValues = {
    			'color': [ 1, 1, 1 ],
    			'uv': [ 0, 0 ],
    			'uv2': [ 0, 0 ]
    		};

    		this.index0AttributeName = undefined;
    		this.uniformsNeedUpdate = false;

    		this.glslVersion = null;

    		if ( parameters !== undefined ) {

    			if ( parameters.attributes !== undefined ) {

    				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

    			}

    			this.setValues( parameters );

    		}

    	}

    	copy( source ) {

    		super.copy( source );

    		this.fragmentShader = source.fragmentShader;
    		this.vertexShader = source.vertexShader;

    		this.uniforms = cloneUniforms( source.uniforms );

    		this.defines = Object.assign( {}, source.defines );

    		this.wireframe = source.wireframe;
    		this.wireframeLinewidth = source.wireframeLinewidth;

    		this.fog = source.fog;
    		this.lights = source.lights;
    		this.clipping = source.clipping;

    		this.extensions = Object.assign( {}, source.extensions );

    		this.glslVersion = source.glslVersion;

    		return this;

    	}

    	toJSON( meta ) {

    		const data = super.toJSON( meta );

    		data.glslVersion = this.glslVersion;
    		data.uniforms = {};

    		for ( const name in this.uniforms ) {

    			const uniform = this.uniforms[ name ];
    			const value = uniform.value;

    			if ( value && value.isTexture ) {

    				data.uniforms[ name ] = {
    					type: 't',
    					value: value.toJSON( meta ).uuid
    				};

    			} else if ( value && value.isColor ) {

    				data.uniforms[ name ] = {
    					type: 'c',
    					value: value.getHex()
    				};

    			} else if ( value && value.isVector2 ) {

    				data.uniforms[ name ] = {
    					type: 'v2',
    					value: value.toArray()
    				};

    			} else if ( value && value.isVector3 ) {

    				data.uniforms[ name ] = {
    					type: 'v3',
    					value: value.toArray()
    				};

    			} else if ( value && value.isVector4 ) {

    				data.uniforms[ name ] = {
    					type: 'v4',
    					value: value.toArray()
    				};

    			} else if ( value && value.isMatrix3 ) {

    				data.uniforms[ name ] = {
    					type: 'm3',
    					value: value.toArray()
    				};

    			} else if ( value && value.isMatrix4 ) {

    				data.uniforms[ name ] = {
    					type: 'm4',
    					value: value.toArray()
    				};

    			} else {

    				data.uniforms[ name ] = {
    					value: value
    				};

    				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

    			}

    		}

    		if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;

    		data.vertexShader = this.vertexShader;
    		data.fragmentShader = this.fragmentShader;

    		const extensions = {};

    		for ( const key in this.extensions ) {

    			if ( this.extensions[ key ] === true ) extensions[ key ] = true;

    		}

    		if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;

    		return data;

    	}

    }

    class Camera extends Object3D {

    	constructor() {

    		super();

    		this.isCamera = true;

    		this.type = 'Camera';

    		this.matrixWorldInverse = new Matrix4();

    		this.projectionMatrix = new Matrix4();
    		this.projectionMatrixInverse = new Matrix4();

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		this.matrixWorldInverse.copy( source.matrixWorldInverse );

    		this.projectionMatrix.copy( source.projectionMatrix );
    		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

    		return this;

    	}

    	getWorldDirection( target ) {

    		this.updateWorldMatrix( true, false );

    		const e = this.matrixWorld.elements;

    		return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();

    	}

    	updateMatrixWorld( force ) {

    		super.updateMatrixWorld( force );

    		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

    	}

    	updateWorldMatrix( updateParents, updateChildren ) {

    		super.updateWorldMatrix( updateParents, updateChildren );

    		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    }

    class PerspectiveCamera extends Camera {

    	constructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {

    		super();

    		this.isPerspectiveCamera = true;

    		this.type = 'PerspectiveCamera';

    		this.fov = fov;
    		this.zoom = 1;

    		this.near = near;
    		this.far = far;
    		this.focus = 10;

    		this.aspect = aspect;
    		this.view = null;

    		this.filmGauge = 35;	// width of the film (default in millimeters)
    		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

    		this.updateProjectionMatrix();

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		this.fov = source.fov;
    		this.zoom = source.zoom;

    		this.near = source.near;
    		this.far = source.far;
    		this.focus = source.focus;

    		this.aspect = source.aspect;
    		this.view = source.view === null ? null : Object.assign( {}, source.view );

    		this.filmGauge = source.filmGauge;
    		this.filmOffset = source.filmOffset;

    		return this;

    	}

    	/**
    	 * Sets the FOV by focal length in respect to the current .filmGauge.
    	 *
    	 * The default film gauge is 35, so that the focal length can be specified for
    	 * a 35mm (full frame) camera.
    	 *
    	 * Values for focal length and film gauge must have the same unit.
    	 */
    	setFocalLength( focalLength ) {

    		/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
    		const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

    		this.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );
    		this.updateProjectionMatrix();

    	}

    	/**
    	 * Calculates the focal length from the current .fov and .filmGauge.
    	 */
    	getFocalLength() {

    		const vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );

    		return 0.5 * this.getFilmHeight() / vExtentSlope;

    	}

    	getEffectiveFOV() {

    		return RAD2DEG * 2 * Math.atan(
    			Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );

    	}

    	getFilmWidth() {

    		// film not completely covered in portrait format (aspect < 1)
    		return this.filmGauge * Math.min( this.aspect, 1 );

    	}

    	getFilmHeight() {

    		// film not completely covered in landscape format (aspect > 1)
    		return this.filmGauge / Math.max( this.aspect, 1 );

    	}

    	/**
    	 * Sets an offset in a larger frustum. This is useful for multi-window or
    	 * multi-monitor/multi-machine setups.
    	 *
    	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
    	 * the monitors are in grid like this
    	 *
    	 *   +---+---+---+
    	 *   | A | B | C |
    	 *   +---+---+---+
    	 *   | D | E | F |
    	 *   +---+---+---+
    	 *
    	 * then for each monitor you would call it like this
    	 *
    	 *   const w = 1920;
    	 *   const h = 1080;
    	 *   const fullWidth = w * 3;
    	 *   const fullHeight = h * 2;
    	 *
    	 *   --A--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
    	 *   --B--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
    	 *   --C--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
    	 *   --D--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
    	 *   --E--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
    	 *   --F--
    	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
    	 *
    	 *   Note there is no reason monitors have to be the same size or in a grid.
    	 */
    	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

    		this.aspect = fullWidth / fullHeight;

    		if ( this.view === null ) {

    			this.view = {
    				enabled: true,
    				fullWidth: 1,
    				fullHeight: 1,
    				offsetX: 0,
    				offsetY: 0,
    				width: 1,
    				height: 1
    			};

    		}

    		this.view.enabled = true;
    		this.view.fullWidth = fullWidth;
    		this.view.fullHeight = fullHeight;
    		this.view.offsetX = x;
    		this.view.offsetY = y;
    		this.view.width = width;
    		this.view.height = height;

    		this.updateProjectionMatrix();

    	}

    	clearViewOffset() {

    		if ( this.view !== null ) {

    			this.view.enabled = false;

    		}

    		this.updateProjectionMatrix();

    	}

    	updateProjectionMatrix() {

    		const near = this.near;
    		let top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;
    		let height = 2 * top;
    		let width = this.aspect * height;
    		let left = - 0.5 * width;
    		const view = this.view;

    		if ( this.view !== null && this.view.enabled ) {

    			const fullWidth = view.fullWidth,
    				fullHeight = view.fullHeight;

    			left += view.offsetX * width / fullWidth;
    			top -= view.offsetY * height / fullHeight;
    			width *= view.width / fullWidth;
    			height *= view.height / fullHeight;

    		}

    		const skew = this.filmOffset;
    		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

    		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

    		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

    	}

    	toJSON( meta ) {

    		const data = super.toJSON( meta );

    		data.object.fov = this.fov;
    		data.object.zoom = this.zoom;

    		data.object.near = this.near;
    		data.object.far = this.far;
    		data.object.focus = this.focus;

    		data.object.aspect = this.aspect;

    		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

    		data.object.filmGauge = this.filmGauge;
    		data.object.filmOffset = this.filmOffset;

    		return data;

    	}

    }

    const fov = 90, aspect = 1;

    class CubeCamera extends Object3D {

    	constructor( near, far, renderTarget ) {

    		super();

    		this.type = 'CubeCamera';

    		if ( renderTarget.isWebGLCubeRenderTarget !== true ) {

    			console.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );
    			return;

    		}

    		this.renderTarget = renderTarget;

    		const cameraPX = new PerspectiveCamera( fov, aspect, near, far );
    		cameraPX.layers = this.layers;
    		cameraPX.up.set( 0, - 1, 0 );
    		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
    		this.add( cameraPX );

    		const cameraNX = new PerspectiveCamera( fov, aspect, near, far );
    		cameraNX.layers = this.layers;
    		cameraNX.up.set( 0, - 1, 0 );
    		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
    		this.add( cameraNX );

    		const cameraPY = new PerspectiveCamera( fov, aspect, near, far );
    		cameraPY.layers = this.layers;
    		cameraPY.up.set( 0, 0, 1 );
    		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
    		this.add( cameraPY );

    		const cameraNY = new PerspectiveCamera( fov, aspect, near, far );
    		cameraNY.layers = this.layers;
    		cameraNY.up.set( 0, 0, - 1 );
    		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
    		this.add( cameraNY );

    		const cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
    		cameraPZ.layers = this.layers;
    		cameraPZ.up.set( 0, - 1, 0 );
    		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
    		this.add( cameraPZ );

    		const cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
    		cameraNZ.layers = this.layers;
    		cameraNZ.up.set( 0, - 1, 0 );
    		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
    		this.add( cameraNZ );

    	}

    	update( renderer, scene ) {

    		if ( this.parent === null ) this.updateMatrixWorld();

    		const renderTarget = this.renderTarget;

    		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;

    		const currentRenderTarget = renderer.getRenderTarget();

    		const currentToneMapping = renderer.toneMapping;
    		const currentXrEnabled = renderer.xr.enabled;

    		renderer.toneMapping = NoToneMapping;
    		renderer.xr.enabled = false;

    		const generateMipmaps = renderTarget.texture.generateMipmaps;

    		renderTarget.texture.generateMipmaps = false;

    		renderer.setRenderTarget( renderTarget, 0 );
    		renderer.render( scene, cameraPX );

    		renderer.setRenderTarget( renderTarget, 1 );
    		renderer.render( scene, cameraNX );

    		renderer.setRenderTarget( renderTarget, 2 );
    		renderer.render( scene, cameraPY );

    		renderer.setRenderTarget( renderTarget, 3 );
    		renderer.render( scene, cameraNY );

    		renderer.setRenderTarget( renderTarget, 4 );
    		renderer.render( scene, cameraPZ );

    		renderTarget.texture.generateMipmaps = generateMipmaps;

    		renderer.setRenderTarget( renderTarget, 5 );
    		renderer.render( scene, cameraNZ );

    		renderer.setRenderTarget( currentRenderTarget );

    		renderer.toneMapping = currentToneMapping;
    		renderer.xr.enabled = currentXrEnabled;

    		renderTarget.texture.needsPMREMUpdate = true;

    	}

    }

    class CubeTexture extends Texture {

    	constructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

    		images = images !== undefined ? images : [];
    		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

    		super( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

    		this.isCubeTexture = true;

    		this.flipY = false;

    	}

    	get images() {

    		return this.image;

    	}

    	set images( value ) {

    		this.image = value;

    	}

    }

    class WebGLCubeRenderTarget extends WebGLRenderTarget {

    	constructor( size, options = {} ) {

    		super( size, size, options );

    		this.isWebGLCubeRenderTarget = true;

    		const image = { width: size, height: size, depth: 1 };
    		const images = [ image, image, image, image, image, image ];

    		this.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

    		// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
    		// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
    		// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.

    		// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
    		// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
    		// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).

    		this.texture.isRenderTargetTexture = true;

    		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
    		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

    	}

    	fromEquirectangularTexture( renderer, texture ) {

    		this.texture.type = texture.type;
    		this.texture.encoding = texture.encoding;

    		this.texture.generateMipmaps = texture.generateMipmaps;
    		this.texture.minFilter = texture.minFilter;
    		this.texture.magFilter = texture.magFilter;

    		const shader = {

    			uniforms: {
    				tEquirect: { value: null },
    			},

    			vertexShader: /* glsl */`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,

    			fragmentShader: /* glsl */`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
    		};

    		const geometry = new BoxGeometry( 5, 5, 5 );

    		const material = new ShaderMaterial( {

    			name: 'CubemapFromEquirect',

    			uniforms: cloneUniforms( shader.uniforms ),
    			vertexShader: shader.vertexShader,
    			fragmentShader: shader.fragmentShader,
    			side: BackSide,
    			blending: NoBlending

    		} );

    		material.uniforms.tEquirect.value = texture;

    		const mesh = new Mesh( geometry, material );

    		const currentMinFilter = texture.minFilter;

    		// Avoid blurred poles
    		if ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;

    		const camera = new CubeCamera( 1, 10, this );
    		camera.update( renderer, mesh );

    		texture.minFilter = currentMinFilter;

    		mesh.geometry.dispose();
    		mesh.material.dispose();

    		return this;

    	}

    	clear( renderer, color, depth, stencil ) {

    		const currentRenderTarget = renderer.getRenderTarget();

    		for ( let i = 0; i < 6; i ++ ) {

    			renderer.setRenderTarget( this, i );

    			renderer.clear( color, depth, stencil );

    		}

    		renderer.setRenderTarget( currentRenderTarget );

    	}

    }

    const _vector1 = /*@__PURE__*/ new Vector3();
    const _vector2 = /*@__PURE__*/ new Vector3();
    const _normalMatrix = /*@__PURE__*/ new Matrix3();

    class Plane {

    	constructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {

    		this.isPlane = true;

    		// normal is assumed to be normalized

    		this.normal = normal;
    		this.constant = constant;

    	}

    	set( normal, constant ) {

    		this.normal.copy( normal );
    		this.constant = constant;

    		return this;

    	}

    	setComponents( x, y, z, w ) {

    		this.normal.set( x, y, z );
    		this.constant = w;

    		return this;

    	}

    	setFromNormalAndCoplanarPoint( normal, point ) {

    		this.normal.copy( normal );
    		this.constant = - point.dot( this.normal );

    		return this;

    	}

    	setFromCoplanarPoints( a, b, c ) {

    		const normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

    		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

    		this.setFromNormalAndCoplanarPoint( normal, a );

    		return this;

    	}

    	copy( plane ) {

    		this.normal.copy( plane.normal );
    		this.constant = plane.constant;

    		return this;

    	}

    	normalize() {

    		// Note: will lead to a divide by zero if the plane is invalid.

    		const inverseNormalLength = 1.0 / this.normal.length();
    		this.normal.multiplyScalar( inverseNormalLength );
    		this.constant *= inverseNormalLength;

    		return this;

    	}

    	negate() {

    		this.constant *= - 1;
    		this.normal.negate();

    		return this;

    	}

    	distanceToPoint( point ) {

    		return this.normal.dot( point ) + this.constant;

    	}

    	distanceToSphere( sphere ) {

    		return this.distanceToPoint( sphere.center ) - sphere.radius;

    	}

    	projectPoint( point, target ) {

    		return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

    	}

    	intersectLine( line, target ) {

    		const direction = line.delta( _vector1 );

    		const denominator = this.normal.dot( direction );

    		if ( denominator === 0 ) {

    			// line is coplanar, return origin
    			if ( this.distanceToPoint( line.start ) === 0 ) {

    				return target.copy( line.start );

    			}

    			// Unsure if this is the correct method to handle this case.
    			return null;

    		}

    		const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

    		if ( t < 0 || t > 1 ) {

    			return null;

    		}

    		return target.copy( direction ).multiplyScalar( t ).add( line.start );

    	}

    	intersectsLine( line ) {

    		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

    		const startSign = this.distanceToPoint( line.start );
    		const endSign = this.distanceToPoint( line.end );

    		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

    	}

    	intersectsBox( box ) {

    		return box.intersectsPlane( this );

    	}

    	intersectsSphere( sphere ) {

    		return sphere.intersectsPlane( this );

    	}

    	coplanarPoint( target ) {

    		return target.copy( this.normal ).multiplyScalar( - this.constant );

    	}

    	applyMatrix4( matrix, optionalNormalMatrix ) {

    		const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

    		const referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

    		const normal = this.normal.applyMatrix3( normalMatrix ).normalize();

    		this.constant = - referencePoint.dot( normal );

    		return this;

    	}

    	translate( offset ) {

    		this.constant -= offset.dot( this.normal );

    		return this;

    	}

    	equals( plane ) {

    		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    }

    const _sphere$2 = /*@__PURE__*/ new Sphere();
    const _vector$7 = /*@__PURE__*/ new Vector3();

    class Frustum {

    	constructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {

    		this.planes = [ p0, p1, p2, p3, p4, p5 ];

    	}

    	set( p0, p1, p2, p3, p4, p5 ) {

    		const planes = this.planes;

    		planes[ 0 ].copy( p0 );
    		planes[ 1 ].copy( p1 );
    		planes[ 2 ].copy( p2 );
    		planes[ 3 ].copy( p3 );
    		planes[ 4 ].copy( p4 );
    		planes[ 5 ].copy( p5 );

    		return this;

    	}

    	copy( frustum ) {

    		const planes = this.planes;

    		for ( let i = 0; i < 6; i ++ ) {

    			planes[ i ].copy( frustum.planes[ i ] );

    		}

    		return this;

    	}

    	setFromProjectionMatrix( m ) {

    		const planes = this.planes;
    		const me = m.elements;
    		const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
    		const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
    		const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
    		const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

    		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
    		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
    		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
    		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
    		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
    		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

    		return this;

    	}

    	intersectsObject( object ) {

    		const geometry = object.geometry;

    		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

    		_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

    		return this.intersectsSphere( _sphere$2 );

    	}

    	intersectsSprite( sprite ) {

    		_sphere$2.center.set( 0, 0, 0 );
    		_sphere$2.radius = 0.7071067811865476;
    		_sphere$2.applyMatrix4( sprite.matrixWorld );

    		return this.intersectsSphere( _sphere$2 );

    	}

    	intersectsSphere( sphere ) {

    		const planes = this.planes;
    		const center = sphere.center;
    		const negRadius = - sphere.radius;

    		for ( let i = 0; i < 6; i ++ ) {

    			const distance = planes[ i ].distanceToPoint( center );

    			if ( distance < negRadius ) {

    				return false;

    			}

    		}

    		return true;

    	}

    	intersectsBox( box ) {

    		const planes = this.planes;

    		for ( let i = 0; i < 6; i ++ ) {

    			const plane = planes[ i ];

    			// corner at max distance

    			_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
    			_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
    			_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;

    			if ( plane.distanceToPoint( _vector$7 ) < 0 ) {

    				return false;

    			}

    		}

    		return true;

    	}

    	containsPoint( point ) {

    		const planes = this.planes;

    		for ( let i = 0; i < 6; i ++ ) {

    			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

    				return false;

    			}

    		}

    		return true;

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    }

    function WebGLAnimation() {

    	let context = null;
    	let isAnimating = false;
    	let animationLoop = null;
    	let requestId = null;

    	function onAnimationFrame( time, frame ) {

    		animationLoop( time, frame );

    		requestId = context.requestAnimationFrame( onAnimationFrame );

    	}

    	return {

    		start: function () {

    			if ( isAnimating === true ) return;
    			if ( animationLoop === null ) return;

    			requestId = context.requestAnimationFrame( onAnimationFrame );

    			isAnimating = true;

    		},

    		stop: function () {

    			context.cancelAnimationFrame( requestId );

    			isAnimating = false;

    		},

    		setAnimationLoop: function ( callback ) {

    			animationLoop = callback;

    		},

    		setContext: function ( value ) {

    			context = value;

    		}

    	};

    }

    function WebGLAttributes( gl, capabilities ) {

    	const isWebGL2 = capabilities.isWebGL2;

    	const buffers = new WeakMap();

    	function createBuffer( attribute, bufferType ) {

    		const array = attribute.array;
    		const usage = attribute.usage;

    		const buffer = gl.createBuffer();

    		gl.bindBuffer( bufferType, buffer );
    		gl.bufferData( bufferType, array, usage );

    		attribute.onUploadCallback();

    		let type;

    		if ( array instanceof Float32Array ) {

    			type = 5126;

    		} else if ( array instanceof Uint16Array ) {

    			if ( attribute.isFloat16BufferAttribute ) {

    				if ( isWebGL2 ) {

    					type = 5131;

    				} else {

    					throw new Error( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );

    				}

    			} else {

    				type = 5123;

    			}

    		} else if ( array instanceof Int16Array ) {

    			type = 5122;

    		} else if ( array instanceof Uint32Array ) {

    			type = 5125;

    		} else if ( array instanceof Int32Array ) {

    			type = 5124;

    		} else if ( array instanceof Int8Array ) {

    			type = 5120;

    		} else if ( array instanceof Uint8Array ) {

    			type = 5121;

    		} else if ( array instanceof Uint8ClampedArray ) {

    			type = 5121;

    		} else {

    			throw new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );

    		}

    		return {
    			buffer: buffer,
    			type: type,
    			bytesPerElement: array.BYTES_PER_ELEMENT,
    			version: attribute.version
    		};

    	}

    	function updateBuffer( buffer, attribute, bufferType ) {

    		const array = attribute.array;
    		const updateRange = attribute.updateRange;

    		gl.bindBuffer( bufferType, buffer );

    		if ( updateRange.count === - 1 ) {

    			// Not using update ranges

    			gl.bufferSubData( bufferType, 0, array );

    		} else {

    			if ( isWebGL2 ) {

    				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
    					array, updateRange.offset, updateRange.count );

    			} else {

    				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
    					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

    			}

    			updateRange.count = - 1; // reset range

    		}

    	}

    	//

    	function get( attribute ) {

    		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

    		return buffers.get( attribute );

    	}

    	function remove( attribute ) {

    		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

    		const data = buffers.get( attribute );

    		if ( data ) {

    			gl.deleteBuffer( data.buffer );

    			buffers.delete( attribute );

    		}

    	}

    	function update( attribute, bufferType ) {

    		if ( attribute.isGLBufferAttribute ) {

    			const cached = buffers.get( attribute );

    			if ( ! cached || cached.version < attribute.version ) {

    				buffers.set( attribute, {
    					buffer: attribute.buffer,
    					type: attribute.type,
    					bytesPerElement: attribute.elementSize,
    					version: attribute.version
    				} );

    			}

    			return;

    		}

    		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

    		const data = buffers.get( attribute );

    		if ( data === undefined ) {

    			buffers.set( attribute, createBuffer( attribute, bufferType ) );

    		} else if ( data.version < attribute.version ) {

    			updateBuffer( data.buffer, attribute, bufferType );

    			data.version = attribute.version;

    		}

    	}

    	return {

    		get: get,
    		remove: remove,
    		update: update

    	};

    }

    class PlaneGeometry extends BufferGeometry {

    	constructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {

    		super();
    		this.type = 'PlaneGeometry';

    		this.parameters = {
    			width: width,
    			height: height,
    			widthSegments: widthSegments,
    			heightSegments: heightSegments
    		};

    		const width_half = width / 2;
    		const height_half = height / 2;

    		const gridX = Math.floor( widthSegments );
    		const gridY = Math.floor( heightSegments );

    		const gridX1 = gridX + 1;
    		const gridY1 = gridY + 1;

    		const segment_width = width / gridX;
    		const segment_height = height / gridY;

    		//

    		const indices = [];
    		const vertices = [];
    		const normals = [];
    		const uvs = [];

    		for ( let iy = 0; iy < gridY1; iy ++ ) {

    			const y = iy * segment_height - height_half;

    			for ( let ix = 0; ix < gridX1; ix ++ ) {

    				const x = ix * segment_width - width_half;

    				vertices.push( x, - y, 0 );

    				normals.push( 0, 0, 1 );

    				uvs.push( ix / gridX );
    				uvs.push( 1 - ( iy / gridY ) );

    			}

    		}

    		for ( let iy = 0; iy < gridY; iy ++ ) {

    			for ( let ix = 0; ix < gridX; ix ++ ) {

    				const a = ix + gridX1 * iy;
    				const b = ix + gridX1 * ( iy + 1 );
    				const c = ( ix + 1 ) + gridX1 * ( iy + 1 );
    				const d = ( ix + 1 ) + gridX1 * iy;

    				indices.push( a, b, d );
    				indices.push( b, c, d );

    			}

    		}

    		this.setIndex( indices );
    		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    	}

    	static fromJSON( data ) {

    		return new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );

    	}

    }

    var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";

    var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

    var alphatest_fragment = "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";

    var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";

    var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";

    var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

    var begin_vertex = "vec3 transformed = vec3( position );";

    var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

    var bsdfs = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#ifdef USE_IRIDESCENCE\nvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = mix(F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence);\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#endif\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";

    var iridescence_fragment = "#ifdef USE_IRIDESCENCE\nconst mat3 XYZ_TO_REC709 = mat3(\n    3.2404542, -0.9692660,  0.0556434,\n   -1.5371385,  1.8760108, -0.2040259,\n   -0.4985314,  0.0415560,  1.0572252\n);\nvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n   vec3 sqrtF0 = sqrt( fresnel0 );\n   return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n}\nvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n   return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n}\nfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n   return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n}\nvec3 evalSensitivity( float OPD, vec3 shift ) {\n   float phase = 2.0 * PI * OPD * 1.0e-9;\n   vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n   vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n   vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n   vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( -pow2( phase ) * var );\n   xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[0] ) * exp( -4.5282e+09 * pow2( phase ) );\n   xyz /= 1.0685e-7;\n   vec3 srgb = XYZ_TO_REC709 * xyz;\n   return srgb;\n}\nvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n   vec3 I;\n   float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n   float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n   float cosTheta2Sq = 1.0 - sinTheta2Sq;\n   if ( cosTheta2Sq < 0.0 ) {\n       return vec3( 1.0 );\n   }\n   float cosTheta2 = sqrt( cosTheta2Sq );\n   float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n   float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n   float R21 = R12;\n   float T121 = 1.0 - R12;\n   float phi12 = 0.0;\n   if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n   float phi21 = PI - phi12;\n   vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );   vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n   vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n   vec3 phi23 = vec3( 0.0 );\n   if ( baseIOR[0] < iridescenceIOR ) phi23[0] = PI;\n   if ( baseIOR[1] < iridescenceIOR ) phi23[1] = PI;\n   if ( baseIOR[2] < iridescenceIOR ) phi23[2] = PI;\n   float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n   vec3 phi = vec3( phi21 ) + phi23;\n   vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n   vec3 r123 = sqrt( R123 );\n   vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n   vec3 C0 = R12 + Rs;\n   I = C0;\n   vec3 Cm = Rs - T121;\n   for ( int m = 1; m <= 2; ++m ) {\n       Cm *= r123;\n       vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n       I += Cm * Sm;\n   }\n   return max( I, vec3( 0.0 ) );\n}\n#endif";

    var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

    var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

    var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

    var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

    var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

    var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";

    var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";

    var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";

    var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";

    var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";

    var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";

    var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

    var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

    var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";

    var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

    var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

    var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

    var encodings_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";

    var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

    var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

    var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

    var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

    var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

    var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";

    var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";

    var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

    var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

    var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";

    var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";

    var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

    var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";

    var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";

    var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";

    var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";

    var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";

    var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

    var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";

    var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";

    var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\n\t#else\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

    var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\nfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\nif ( material.iridescenceThickness == 0.0 ) {\n\tmaterial.iridescence = 0.0;\n} else {\n\tmaterial.iridescence = saturate( material.iridescence );\n}\nif ( material.iridescence > 0.0 ) {\n\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

    var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";

    var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";

    var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

    var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

    var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

    var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

    var map_fragment = "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";

    var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

    var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

    var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

    var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

    var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

    var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";

    var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";

    var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";

    var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";

    var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";

    var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";

    var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

    var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

    var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";

    var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";

    var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";

    var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";

    var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";

    var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";

    var output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";

    var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";

    var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

    var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

    var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

    var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

    var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

    var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

    var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

    var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

    var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";

    var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

    var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

    var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif";

    var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

    var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

    var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

    var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

    var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

    var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";

    var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";

    var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";

    var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";

    var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";

    var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

    var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

    var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";

    var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";

    var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

    const vertex$g = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

    const fragment$g = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tgl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );\n\t#endif\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

    const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

    const fragment$f = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

    const vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";

    const fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";

    const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

    const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

    const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

    const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

    const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

    const vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$9 = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$9 = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

    const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

    const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";

    const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";

    const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

    const vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

    const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

    const ShaderChunk = {
    	alphamap_fragment: alphamap_fragment,
    	alphamap_pars_fragment: alphamap_pars_fragment,
    	alphatest_fragment: alphatest_fragment,
    	alphatest_pars_fragment: alphatest_pars_fragment,
    	aomap_fragment: aomap_fragment,
    	aomap_pars_fragment: aomap_pars_fragment,
    	begin_vertex: begin_vertex,
    	beginnormal_vertex: beginnormal_vertex,
    	bsdfs: bsdfs,
    	iridescence_fragment: iridescence_fragment,
    	bumpmap_pars_fragment: bumpmap_pars_fragment,
    	clipping_planes_fragment: clipping_planes_fragment,
    	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
    	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
    	clipping_planes_vertex: clipping_planes_vertex,
    	color_fragment: color_fragment,
    	color_pars_fragment: color_pars_fragment,
    	color_pars_vertex: color_pars_vertex,
    	color_vertex: color_vertex,
    	common: common,
    	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
    	defaultnormal_vertex: defaultnormal_vertex,
    	displacementmap_pars_vertex: displacementmap_pars_vertex,
    	displacementmap_vertex: displacementmap_vertex,
    	emissivemap_fragment: emissivemap_fragment,
    	emissivemap_pars_fragment: emissivemap_pars_fragment,
    	encodings_fragment: encodings_fragment,
    	encodings_pars_fragment: encodings_pars_fragment,
    	envmap_fragment: envmap_fragment,
    	envmap_common_pars_fragment: envmap_common_pars_fragment,
    	envmap_pars_fragment: envmap_pars_fragment,
    	envmap_pars_vertex: envmap_pars_vertex,
    	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
    	envmap_vertex: envmap_vertex,
    	fog_vertex: fog_vertex,
    	fog_pars_vertex: fog_pars_vertex,
    	fog_fragment: fog_fragment,
    	fog_pars_fragment: fog_pars_fragment,
    	gradientmap_pars_fragment: gradientmap_pars_fragment,
    	lightmap_fragment: lightmap_fragment,
    	lightmap_pars_fragment: lightmap_pars_fragment,
    	lights_lambert_vertex: lights_lambert_vertex,
    	lights_pars_begin: lights_pars_begin,
    	lights_toon_fragment: lights_toon_fragment,
    	lights_toon_pars_fragment: lights_toon_pars_fragment,
    	lights_phong_fragment: lights_phong_fragment,
    	lights_phong_pars_fragment: lights_phong_pars_fragment,
    	lights_physical_fragment: lights_physical_fragment,
    	lights_physical_pars_fragment: lights_physical_pars_fragment,
    	lights_fragment_begin: lights_fragment_begin,
    	lights_fragment_maps: lights_fragment_maps,
    	lights_fragment_end: lights_fragment_end,
    	logdepthbuf_fragment: logdepthbuf_fragment,
    	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
    	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
    	logdepthbuf_vertex: logdepthbuf_vertex,
    	map_fragment: map_fragment,
    	map_pars_fragment: map_pars_fragment,
    	map_particle_fragment: map_particle_fragment,
    	map_particle_pars_fragment: map_particle_pars_fragment,
    	metalnessmap_fragment: metalnessmap_fragment,
    	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
    	morphcolor_vertex: morphcolor_vertex,
    	morphnormal_vertex: morphnormal_vertex,
    	morphtarget_pars_vertex: morphtarget_pars_vertex,
    	morphtarget_vertex: morphtarget_vertex,
    	normal_fragment_begin: normal_fragment_begin,
    	normal_fragment_maps: normal_fragment_maps,
    	normal_pars_fragment: normal_pars_fragment,
    	normal_pars_vertex: normal_pars_vertex,
    	normal_vertex: normal_vertex,
    	normalmap_pars_fragment: normalmap_pars_fragment,
    	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
    	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
    	clearcoat_pars_fragment: clearcoat_pars_fragment,
    	iridescence_pars_fragment: iridescence_pars_fragment,
    	output_fragment: output_fragment,
    	packing: packing,
    	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
    	project_vertex: project_vertex,
    	dithering_fragment: dithering_fragment,
    	dithering_pars_fragment: dithering_pars_fragment,
    	roughnessmap_fragment: roughnessmap_fragment,
    	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
    	shadowmap_pars_fragment: shadowmap_pars_fragment,
    	shadowmap_pars_vertex: shadowmap_pars_vertex,
    	shadowmap_vertex: shadowmap_vertex,
    	shadowmask_pars_fragment: shadowmask_pars_fragment,
    	skinbase_vertex: skinbase_vertex,
    	skinning_pars_vertex: skinning_pars_vertex,
    	skinning_vertex: skinning_vertex,
    	skinnormal_vertex: skinnormal_vertex,
    	specularmap_fragment: specularmap_fragment,
    	specularmap_pars_fragment: specularmap_pars_fragment,
    	tonemapping_fragment: tonemapping_fragment,
    	tonemapping_pars_fragment: tonemapping_pars_fragment,
    	transmission_fragment: transmission_fragment,
    	transmission_pars_fragment: transmission_pars_fragment,
    	uv_pars_fragment: uv_pars_fragment,
    	uv_pars_vertex: uv_pars_vertex,
    	uv_vertex: uv_vertex,
    	uv2_pars_fragment: uv2_pars_fragment,
    	uv2_pars_vertex: uv2_pars_vertex,
    	uv2_vertex: uv2_vertex,
    	worldpos_vertex: worldpos_vertex,

    	background_vert: vertex$g,
    	background_frag: fragment$g,
    	cube_vert: vertex$f,
    	cube_frag: fragment$f,
    	depth_vert: vertex$e,
    	depth_frag: fragment$e,
    	distanceRGBA_vert: vertex$d,
    	distanceRGBA_frag: fragment$d,
    	equirect_vert: vertex$c,
    	equirect_frag: fragment$c,
    	linedashed_vert: vertex$b,
    	linedashed_frag: fragment$b,
    	meshbasic_vert: vertex$a,
    	meshbasic_frag: fragment$a,
    	meshlambert_vert: vertex$9,
    	meshlambert_frag: fragment$9,
    	meshmatcap_vert: vertex$8,
    	meshmatcap_frag: fragment$8,
    	meshnormal_vert: vertex$7,
    	meshnormal_frag: fragment$7,
    	meshphong_vert: vertex$6,
    	meshphong_frag: fragment$6,
    	meshphysical_vert: vertex$5,
    	meshphysical_frag: fragment$5,
    	meshtoon_vert: vertex$4,
    	meshtoon_frag: fragment$4,
    	points_vert: vertex$3,
    	points_frag: fragment$3,
    	shadow_vert: vertex$2,
    	shadow_frag: fragment$2,
    	sprite_vert: vertex$1,
    	sprite_frag: fragment$1
    };

    /**
     * Uniforms library for shared webgl shaders
     */

    const UniformsLib = {

    	common: {

    		diffuse: { value: new Color( 0xffffff ) },
    		opacity: { value: 1.0 },

    		map: { value: null },
    		uvTransform: { value: new Matrix3() },
    		uv2Transform: { value: new Matrix3() },

    		alphaMap: { value: null },
    		alphaTest: { value: 0 }

    	},

    	specularmap: {

    		specularMap: { value: null },

    	},

    	envmap: {

    		envMap: { value: null },
    		flipEnvMap: { value: - 1 },
    		reflectivity: { value: 1.0 }, // basic, lambert, phong
    		ior: { value: 1.5 }, // physical
    		refractionRatio: { value: 0.98 } // basic, lambert, phong

    	},

    	aomap: {

    		aoMap: { value: null },
    		aoMapIntensity: { value: 1 }

    	},

    	lightmap: {

    		lightMap: { value: null },
    		lightMapIntensity: { value: 1 }

    	},

    	emissivemap: {

    		emissiveMap: { value: null }

    	},

    	bumpmap: {

    		bumpMap: { value: null },
    		bumpScale: { value: 1 }

    	},

    	normalmap: {

    		normalMap: { value: null },
    		normalScale: { value: new Vector2( 1, 1 ) }

    	},

    	displacementmap: {

    		displacementMap: { value: null },
    		displacementScale: { value: 1 },
    		displacementBias: { value: 0 }

    	},

    	roughnessmap: {

    		roughnessMap: { value: null }

    	},

    	metalnessmap: {

    		metalnessMap: { value: null }

    	},

    	gradientmap: {

    		gradientMap: { value: null }

    	},

    	fog: {

    		fogDensity: { value: 0.00025 },
    		fogNear: { value: 1 },
    		fogFar: { value: 2000 },
    		fogColor: { value: new Color( 0xffffff ) }

    	},

    	lights: {

    		ambientLightColor: { value: [] },

    		lightProbe: { value: [] },

    		directionalLights: { value: [], properties: {
    			direction: {},
    			color: {}
    		} },

    		directionalLightShadows: { value: [], properties: {
    			shadowBias: {},
    			shadowNormalBias: {},
    			shadowRadius: {},
    			shadowMapSize: {}
    		} },

    		directionalShadowMap: { value: [] },
    		directionalShadowMatrix: { value: [] },

    		spotLights: { value: [], properties: {
    			color: {},
    			position: {},
    			direction: {},
    			distance: {},
    			coneCos: {},
    			penumbraCos: {},
    			decay: {}
    		} },

    		spotLightShadows: { value: [], properties: {
    			shadowBias: {},
    			shadowNormalBias: {},
    			shadowRadius: {},
    			shadowMapSize: {}
    		} },

    		spotShadowMap: { value: [] },
    		spotShadowMatrix: { value: [] },

    		pointLights: { value: [], properties: {
    			color: {},
    			position: {},
    			decay: {},
    			distance: {}
    		} },

    		pointLightShadows: { value: [], properties: {
    			shadowBias: {},
    			shadowNormalBias: {},
    			shadowRadius: {},
    			shadowMapSize: {},
    			shadowCameraNear: {},
    			shadowCameraFar: {}
    		} },

    		pointShadowMap: { value: [] },
    		pointShadowMatrix: { value: [] },

    		hemisphereLights: { value: [], properties: {
    			direction: {},
    			skyColor: {},
    			groundColor: {}
    		} },

    		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    		rectAreaLights: { value: [], properties: {
    			color: {},
    			position: {},
    			width: {},
    			height: {}
    		} },

    		ltc_1: { value: null },
    		ltc_2: { value: null }

    	},

    	points: {

    		diffuse: { value: new Color( 0xffffff ) },
    		opacity: { value: 1.0 },
    		size: { value: 1.0 },
    		scale: { value: 1.0 },
    		map: { value: null },
    		alphaMap: { value: null },
    		alphaTest: { value: 0 },
    		uvTransform: { value: new Matrix3() }

    	},

    	sprite: {

    		diffuse: { value: new Color( 0xffffff ) },
    		opacity: { value: 1.0 },
    		center: { value: new Vector2( 0.5, 0.5 ) },
    		rotation: { value: 0.0 },
    		map: { value: null },
    		alphaMap: { value: null },
    		alphaTest: { value: 0 },
    		uvTransform: { value: new Matrix3() }

    	}

    };

    const ShaderLib = {

    	basic: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.specularmap,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.fog
    		] ),

    		vertexShader: ShaderChunk.meshbasic_vert,
    		fragmentShader: ShaderChunk.meshbasic_frag

    	},

    	lambert: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.specularmap,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: new Color( 0x000000 ) }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshlambert_vert,
    		fragmentShader: ShaderChunk.meshlambert_frag

    	},

    	phong: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.specularmap,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: new Color( 0x000000 ) },
    				specular: { value: new Color( 0x111111 ) },
    				shininess: { value: 30 }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshphong_vert,
    		fragmentShader: ShaderChunk.meshphong_frag

    	},

    	standard: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.roughnessmap,
    			UniformsLib.metalnessmap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: new Color( 0x000000 ) },
    				roughness: { value: 1.0 },
    				metalness: { value: 0.0 },
    				envMapIntensity: { value: 1 } // temporary
    			}
    		] ),

    		vertexShader: ShaderChunk.meshphysical_vert,
    		fragmentShader: ShaderChunk.meshphysical_frag

    	},

    	toon: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.gradientmap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: new Color( 0x000000 ) }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshtoon_vert,
    		fragmentShader: ShaderChunk.meshtoon_frag

    	},

    	matcap: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.fog,
    			{
    				matcap: { value: null }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshmatcap_vert,
    		fragmentShader: ShaderChunk.meshmatcap_frag

    	},

    	points: {

    		uniforms: mergeUniforms( [
    			UniformsLib.points,
    			UniformsLib.fog
    		] ),

    		vertexShader: ShaderChunk.points_vert,
    		fragmentShader: ShaderChunk.points_frag

    	},

    	dashed: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.fog,
    			{
    				scale: { value: 1 },
    				dashSize: { value: 1 },
    				totalSize: { value: 2 }
    			}
    		] ),

    		vertexShader: ShaderChunk.linedashed_vert,
    		fragmentShader: ShaderChunk.linedashed_frag

    	},

    	depth: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.displacementmap
    		] ),

    		vertexShader: ShaderChunk.depth_vert,
    		fragmentShader: ShaderChunk.depth_frag

    	},

    	normal: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			{
    				opacity: { value: 1.0 }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshnormal_vert,
    		fragmentShader: ShaderChunk.meshnormal_frag

    	},

    	sprite: {

    		uniforms: mergeUniforms( [
    			UniformsLib.sprite,
    			UniformsLib.fog
    		] ),

    		vertexShader: ShaderChunk.sprite_vert,
    		fragmentShader: ShaderChunk.sprite_frag

    	},

    	background: {

    		uniforms: {
    			uvTransform: { value: new Matrix3() },
    			t2D: { value: null },
    		},

    		vertexShader: ShaderChunk.background_vert,
    		fragmentShader: ShaderChunk.background_frag

    	},
    	/* -------------------------------------------------------------------------
    	//	Cube map shader
    	 ------------------------------------------------------------------------- */

    	cube: {

    		uniforms: mergeUniforms( [
    			UniformsLib.envmap,
    			{
    				opacity: { value: 1.0 }
    			}
    		] ),

    		vertexShader: ShaderChunk.cube_vert,
    		fragmentShader: ShaderChunk.cube_frag

    	},

    	equirect: {

    		uniforms: {
    			tEquirect: { value: null },
    		},

    		vertexShader: ShaderChunk.equirect_vert,
    		fragmentShader: ShaderChunk.equirect_frag

    	},

    	distanceRGBA: {

    		uniforms: mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.displacementmap,
    			{
    				referencePosition: { value: new Vector3() },
    				nearDistance: { value: 1 },
    				farDistance: { value: 1000 }
    			}
    		] ),

    		vertexShader: ShaderChunk.distanceRGBA_vert,
    		fragmentShader: ShaderChunk.distanceRGBA_frag

    	},

    	shadow: {

    		uniforms: mergeUniforms( [
    			UniformsLib.lights,
    			UniformsLib.fog,
    			{
    				color: { value: new Color( 0x00000 ) },
    				opacity: { value: 1.0 }
    			},
    		] ),

    		vertexShader: ShaderChunk.shadow_vert,
    		fragmentShader: ShaderChunk.shadow_frag

    	}

    };

    ShaderLib.physical = {

    	uniforms: mergeUniforms( [
    		ShaderLib.standard.uniforms,
    		{
    			clearcoat: { value: 0 },
    			clearcoatMap: { value: null },
    			clearcoatRoughness: { value: 0 },
    			clearcoatRoughnessMap: { value: null },
    			clearcoatNormalScale: { value: new Vector2( 1, 1 ) },
    			clearcoatNormalMap: { value: null },
    			iridescence: { value: 0 },
    			iridescenceMap: { value: null },
    			iridescenceIOR: { value: 1.3 },
    			iridescenceThicknessMinimum: { value: 100 },
    			iridescenceThicknessMaximum: { value: 400 },
    			iridescenceThicknessMap: { value: null },
    			sheen: { value: 0 },
    			sheenColor: { value: new Color( 0x000000 ) },
    			sheenColorMap: { value: null },
    			sheenRoughness: { value: 1 },
    			sheenRoughnessMap: { value: null },
    			transmission: { value: 0 },
    			transmissionMap: { value: null },
    			transmissionSamplerSize: { value: new Vector2() },
    			transmissionSamplerMap: { value: null },
    			thickness: { value: 0 },
    			thicknessMap: { value: null },
    			attenuationDistance: { value: 0 },
    			attenuationColor: { value: new Color( 0x000000 ) },
    			specularIntensity: { value: 1 },
    			specularIntensityMap: { value: null },
    			specularColor: { value: new Color( 1, 1, 1 ) },
    			specularColorMap: { value: null },
    		}
    	] ),

    	vertexShader: ShaderChunk.meshphysical_vert,
    	fragmentShader: ShaderChunk.meshphysical_frag

    };

    function WebGLBackground( renderer, cubemaps, state, objects, alpha, premultipliedAlpha ) {

    	const clearColor = new Color( 0x000000 );
    	let clearAlpha = alpha === true ? 0 : 1;

    	let planeMesh;
    	let boxMesh;

    	let currentBackground = null;
    	let currentBackgroundVersion = 0;
    	let currentTonemapping = null;

    	function render( renderList, scene ) {

    		let forceClear = false;
    		let background = scene.isScene === true ? scene.background : null;

    		if ( background && background.isTexture ) {

    			background = cubemaps.get( background );

    		}

    		// Ignore background in AR
    		// TODO: Reconsider this.

    		const xr = renderer.xr;
    		const session = xr.getSession && xr.getSession();

    		if ( session && session.environmentBlendMode === 'additive' ) {

    			background = null;

    		}

    		if ( background === null ) {

    			setClear( clearColor, clearAlpha );

    		} else if ( background && background.isColor ) {

    			setClear( background, 1 );
    			forceClear = true;

    		}

    		if ( renderer.autoClear || forceClear ) {

    			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

    		}

    		if ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {

    			if ( boxMesh === undefined ) {

    				boxMesh = new Mesh(
    					new BoxGeometry( 1, 1, 1 ),
    					new ShaderMaterial( {
    						name: 'BackgroundCubeMaterial',
    						uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
    						vertexShader: ShaderLib.cube.vertexShader,
    						fragmentShader: ShaderLib.cube.fragmentShader,
    						side: BackSide,
    						depthTest: false,
    						depthWrite: false,
    						fog: false
    					} )
    				);

    				boxMesh.geometry.deleteAttribute( 'normal' );
    				boxMesh.geometry.deleteAttribute( 'uv' );

    				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

    					this.matrixWorld.copyPosition( camera.matrixWorld );

    				};

    				// enable code injection for non-built-in material
    				Object.defineProperty( boxMesh.material, 'envMap', {

    					get: function () {

    						return this.uniforms.envMap.value;

    					}

    				} );

    				objects.update( boxMesh );

    			}

    			boxMesh.material.uniforms.envMap.value = background;
    			boxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;

    			if ( currentBackground !== background ||
    				currentBackgroundVersion !== background.version ||
    				currentTonemapping !== renderer.toneMapping ) {

    				boxMesh.material.needsUpdate = true;

    				currentBackground = background;
    				currentBackgroundVersion = background.version;
    				currentTonemapping = renderer.toneMapping;

    			}

    			boxMesh.layers.enableAll();

    			// push to the pre-sorted opaque render list
    			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

    		} else if ( background && background.isTexture ) {

    			if ( planeMesh === undefined ) {

    				planeMesh = new Mesh(
    					new PlaneGeometry( 2, 2 ),
    					new ShaderMaterial( {
    						name: 'BackgroundMaterial',
    						uniforms: cloneUniforms( ShaderLib.background.uniforms ),
    						vertexShader: ShaderLib.background.vertexShader,
    						fragmentShader: ShaderLib.background.fragmentShader,
    						side: FrontSide,
    						depthTest: false,
    						depthWrite: false,
    						fog: false
    					} )
    				);

    				planeMesh.geometry.deleteAttribute( 'normal' );

    				// enable code injection for non-built-in material
    				Object.defineProperty( planeMesh.material, 'map', {

    					get: function () {

    						return this.uniforms.t2D.value;

    					}

    				} );

    				objects.update( planeMesh );

    			}

    			planeMesh.material.uniforms.t2D.value = background;

    			if ( background.matrixAutoUpdate === true ) {

    				background.updateMatrix();

    			}

    			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

    			if ( currentBackground !== background ||
    				currentBackgroundVersion !== background.version ||
    				currentTonemapping !== renderer.toneMapping ) {

    				planeMesh.material.needsUpdate = true;

    				currentBackground = background;
    				currentBackgroundVersion = background.version;
    				currentTonemapping = renderer.toneMapping;

    			}

    			planeMesh.layers.enableAll();

    			// push to the pre-sorted opaque render list
    			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

    		}

    	}

    	function setClear( color, alpha ) {

    		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

    	}

    	return {

    		getClearColor: function () {

    			return clearColor;

    		},
    		setClearColor: function ( color, alpha = 1 ) {

    			clearColor.set( color );
    			clearAlpha = alpha;
    			setClear( clearColor, clearAlpha );

    		},
    		getClearAlpha: function () {

    			return clearAlpha;

    		},
    		setClearAlpha: function ( alpha ) {

    			clearAlpha = alpha;
    			setClear( clearColor, clearAlpha );

    		},
    		render: render

    	};

    }

    function WebGLBindingStates( gl, extensions, attributes, capabilities ) {

    	const maxVertexAttributes = gl.getParameter( 34921 );

    	const extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );
    	const vaoAvailable = capabilities.isWebGL2 || extension !== null;

    	const bindingStates = {};

    	const defaultState = createBindingState( null );
    	let currentState = defaultState;
    	let forceUpdate = false;

    	function setup( object, material, program, geometry, index ) {

    		let updateBuffers = false;

    		if ( vaoAvailable ) {

    			const state = getBindingState( geometry, program, material );

    			if ( currentState !== state ) {

    				currentState = state;
    				bindVertexArrayObject( currentState.object );

    			}

    			updateBuffers = needsUpdate( object, geometry, program, index );

    			if ( updateBuffers ) saveCache( object, geometry, program, index );

    		} else {

    			const wireframe = ( material.wireframe === true );

    			if ( currentState.geometry !== geometry.id ||
    				currentState.program !== program.id ||
    				currentState.wireframe !== wireframe ) {

    				currentState.geometry = geometry.id;
    				currentState.program = program.id;
    				currentState.wireframe = wireframe;

    				updateBuffers = true;

    			}

    		}

    		if ( index !== null ) {

    			attributes.update( index, 34963 );

    		}

    		if ( updateBuffers || forceUpdate ) {

    			forceUpdate = false;

    			setupVertexAttributes( object, material, program, geometry );

    			if ( index !== null ) {

    				gl.bindBuffer( 34963, attributes.get( index ).buffer );

    			}

    		}

    	}

    	function createVertexArrayObject() {

    		if ( capabilities.isWebGL2 ) return gl.createVertexArray();

    		return extension.createVertexArrayOES();

    	}

    	function bindVertexArrayObject( vao ) {

    		if ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );

    		return extension.bindVertexArrayOES( vao );

    	}

    	function deleteVertexArrayObject( vao ) {

    		if ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );

    		return extension.deleteVertexArrayOES( vao );

    	}

    	function getBindingState( geometry, program, material ) {

    		const wireframe = ( material.wireframe === true );

    		let programMap = bindingStates[ geometry.id ];

    		if ( programMap === undefined ) {

    			programMap = {};
    			bindingStates[ geometry.id ] = programMap;

    		}

    		let stateMap = programMap[ program.id ];

    		if ( stateMap === undefined ) {

    			stateMap = {};
    			programMap[ program.id ] = stateMap;

    		}

    		let state = stateMap[ wireframe ];

    		if ( state === undefined ) {

    			state = createBindingState( createVertexArrayObject() );
    			stateMap[ wireframe ] = state;

    		}

    		return state;

    	}

    	function createBindingState( vao ) {

    		const newAttributes = [];
    		const enabledAttributes = [];
    		const attributeDivisors = [];

    		for ( let i = 0; i < maxVertexAttributes; i ++ ) {

    			newAttributes[ i ] = 0;
    			enabledAttributes[ i ] = 0;
    			attributeDivisors[ i ] = 0;

    		}

    		return {

    			// for backward compatibility on non-VAO support browser
    			geometry: null,
    			program: null,
    			wireframe: false,

    			newAttributes: newAttributes,
    			enabledAttributes: enabledAttributes,
    			attributeDivisors: attributeDivisors,
    			object: vao,
    			attributes: {},
    			index: null

    		};

    	}

    	function needsUpdate( object, geometry, program, index ) {

    		const cachedAttributes = currentState.attributes;
    		const geometryAttributes = geometry.attributes;

    		let attributesNum = 0;

    		const programAttributes = program.getAttributes();

    		for ( const name in programAttributes ) {

    			const programAttribute = programAttributes[ name ];

    			if ( programAttribute.location >= 0 ) {

    				const cachedAttribute = cachedAttributes[ name ];
    				let geometryAttribute = geometryAttributes[ name ];

    				if ( geometryAttribute === undefined ) {

    					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
    					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

    				}

    				if ( cachedAttribute === undefined ) return true;

    				if ( cachedAttribute.attribute !== geometryAttribute ) return true;

    				if ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;

    				attributesNum ++;

    			}

    		}

    		if ( currentState.attributesNum !== attributesNum ) return true;

    		if ( currentState.index !== index ) return true;

    		return false;

    	}

    	function saveCache( object, geometry, program, index ) {

    		const cache = {};
    		const attributes = geometry.attributes;
    		let attributesNum = 0;

    		const programAttributes = program.getAttributes();

    		for ( const name in programAttributes ) {

    			const programAttribute = programAttributes[ name ];

    			if ( programAttribute.location >= 0 ) {

    				let attribute = attributes[ name ];

    				if ( attribute === undefined ) {

    					if ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;
    					if ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;

    				}

    				const data = {};
    				data.attribute = attribute;

    				if ( attribute && attribute.data ) {

    					data.data = attribute.data;

    				}

    				cache[ name ] = data;

    				attributesNum ++;

    			}

    		}

    		currentState.attributes = cache;
    		currentState.attributesNum = attributesNum;

    		currentState.index = index;

    	}

    	function initAttributes() {

    		const newAttributes = currentState.newAttributes;

    		for ( let i = 0, il = newAttributes.length; i < il; i ++ ) {

    			newAttributes[ i ] = 0;

    		}

    	}

    	function enableAttribute( attribute ) {

    		enableAttributeAndDivisor( attribute, 0 );

    	}

    	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

    		const newAttributes = currentState.newAttributes;
    		const enabledAttributes = currentState.enabledAttributes;
    		const attributeDivisors = currentState.attributeDivisors;

    		newAttributes[ attribute ] = 1;

    		if ( enabledAttributes[ attribute ] === 0 ) {

    			gl.enableVertexAttribArray( attribute );
    			enabledAttributes[ attribute ] = 1;

    		}

    		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

    			const extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

    			extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
    			attributeDivisors[ attribute ] = meshPerAttribute;

    		}

    	}

    	function disableUnusedAttributes() {

    		const newAttributes = currentState.newAttributes;
    		const enabledAttributes = currentState.enabledAttributes;

    		for ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {

    			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

    				gl.disableVertexAttribArray( i );
    				enabledAttributes[ i ] = 0;

    			}

    		}

    	}

    	function vertexAttribPointer( index, size, type, normalized, stride, offset ) {

    		if ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {

    			gl.vertexAttribIPointer( index, size, type, stride, offset );

    		} else {

    			gl.vertexAttribPointer( index, size, type, normalized, stride, offset );

    		}

    	}

    	function setupVertexAttributes( object, material, program, geometry ) {

    		if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {

    			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;

    		}

    		initAttributes();

    		const geometryAttributes = geometry.attributes;

    		const programAttributes = program.getAttributes();

    		const materialDefaultAttributeValues = material.defaultAttributeValues;

    		for ( const name in programAttributes ) {

    			const programAttribute = programAttributes[ name ];

    			if ( programAttribute.location >= 0 ) {

    				let geometryAttribute = geometryAttributes[ name ];

    				if ( geometryAttribute === undefined ) {

    					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
    					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

    				}

    				if ( geometryAttribute !== undefined ) {

    					const normalized = geometryAttribute.normalized;
    					const size = geometryAttribute.itemSize;

    					const attribute = attributes.get( geometryAttribute );

    					// TODO Attribute may not be available on context restore

    					if ( attribute === undefined ) continue;

    					const buffer = attribute.buffer;
    					const type = attribute.type;
    					const bytesPerElement = attribute.bytesPerElement;

    					if ( geometryAttribute.isInterleavedBufferAttribute ) {

    						const data = geometryAttribute.data;
    						const stride = data.stride;
    						const offset = geometryAttribute.offset;

    						if ( data.isInstancedInterleavedBuffer ) {

    							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    								enableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );

    							}

    							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

    								geometry._maxInstanceCount = data.meshPerAttribute * data.count;

    							}

    						} else {

    							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    								enableAttribute( programAttribute.location + i );

    							}

    						}

    						gl.bindBuffer( 34962, buffer );

    						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    							vertexAttribPointer(
    								programAttribute.location + i,
    								size / programAttribute.locationSize,
    								type,
    								normalized,
    								stride * bytesPerElement,
    								( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement
    							);

    						}

    					} else {

    						if ( geometryAttribute.isInstancedBufferAttribute ) {

    							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    								enableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );

    							}

    							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

    								geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

    							}

    						} else {

    							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    								enableAttribute( programAttribute.location + i );

    							}

    						}

    						gl.bindBuffer( 34962, buffer );

    						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    							vertexAttribPointer(
    								programAttribute.location + i,
    								size / programAttribute.locationSize,
    								type,
    								normalized,
    								size * bytesPerElement,
    								( size / programAttribute.locationSize ) * i * bytesPerElement
    							);

    						}

    					}

    				} else if ( materialDefaultAttributeValues !== undefined ) {

    					const value = materialDefaultAttributeValues[ name ];

    					if ( value !== undefined ) {

    						switch ( value.length ) {

    							case 2:
    								gl.vertexAttrib2fv( programAttribute.location, value );
    								break;

    							case 3:
    								gl.vertexAttrib3fv( programAttribute.location, value );
    								break;

    							case 4:
    								gl.vertexAttrib4fv( programAttribute.location, value );
    								break;

    							default:
    								gl.vertexAttrib1fv( programAttribute.location, value );

    						}

    					}

    				}

    			}

    		}

    		disableUnusedAttributes();

    	}

    	function dispose() {

    		reset();

    		for ( const geometryId in bindingStates ) {

    			const programMap = bindingStates[ geometryId ];

    			for ( const programId in programMap ) {

    				const stateMap = programMap[ programId ];

    				for ( const wireframe in stateMap ) {

    					deleteVertexArrayObject( stateMap[ wireframe ].object );

    					delete stateMap[ wireframe ];

    				}

    				delete programMap[ programId ];

    			}

    			delete bindingStates[ geometryId ];

    		}

    	}

    	function releaseStatesOfGeometry( geometry ) {

    		if ( bindingStates[ geometry.id ] === undefined ) return;

    		const programMap = bindingStates[ geometry.id ];

    		for ( const programId in programMap ) {

    			const stateMap = programMap[ programId ];

    			for ( const wireframe in stateMap ) {

    				deleteVertexArrayObject( stateMap[ wireframe ].object );

    				delete stateMap[ wireframe ];

    			}

    			delete programMap[ programId ];

    		}

    		delete bindingStates[ geometry.id ];

    	}

    	function releaseStatesOfProgram( program ) {

    		for ( const geometryId in bindingStates ) {

    			const programMap = bindingStates[ geometryId ];

    			if ( programMap[ program.id ] === undefined ) continue;

    			const stateMap = programMap[ program.id ];

    			for ( const wireframe in stateMap ) {

    				deleteVertexArrayObject( stateMap[ wireframe ].object );

    				delete stateMap[ wireframe ];

    			}

    			delete programMap[ program.id ];

    		}

    	}

    	function reset() {

    		resetDefaultState();
    		forceUpdate = true;

    		if ( currentState === defaultState ) return;

    		currentState = defaultState;
    		bindVertexArrayObject( currentState.object );

    	}

    	// for backward-compatibility

    	function resetDefaultState() {

    		defaultState.geometry = null;
    		defaultState.program = null;
    		defaultState.wireframe = false;

    	}

    	return {

    		setup: setup,
    		reset: reset,
    		resetDefaultState: resetDefaultState,
    		dispose: dispose,
    		releaseStatesOfGeometry: releaseStatesOfGeometry,
    		releaseStatesOfProgram: releaseStatesOfProgram,

    		initAttributes: initAttributes,
    		enableAttribute: enableAttribute,
    		disableUnusedAttributes: disableUnusedAttributes

    	};

    }

    function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

    	const isWebGL2 = capabilities.isWebGL2;

    	let mode;

    	function setMode( value ) {

    		mode = value;

    	}

    	function render( start, count ) {

    		gl.drawArrays( mode, start, count );

    		info.update( count, mode, 1 );

    	}

    	function renderInstances( start, count, primcount ) {

    		if ( primcount === 0 ) return;

    		let extension, methodName;

    		if ( isWebGL2 ) {

    			extension = gl;
    			methodName = 'drawArraysInstanced';

    		} else {

    			extension = extensions.get( 'ANGLE_instanced_arrays' );
    			methodName = 'drawArraysInstancedANGLE';

    			if ( extension === null ) {

    				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
    				return;

    			}

    		}

    		extension[ methodName ]( mode, start, count, primcount );

    		info.update( count, mode, primcount );

    	}

    	//

    	this.setMode = setMode;
    	this.render = render;
    	this.renderInstances = renderInstances;

    }

    function WebGLCapabilities( gl, extensions, parameters ) {

    	let maxAnisotropy;

    	function getMaxAnisotropy() {

    		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

    		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

    			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

    			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

    		} else {

    			maxAnisotropy = 0;

    		}

    		return maxAnisotropy;

    	}

    	function getMaxPrecision( precision ) {

    		if ( precision === 'highp' ) {

    			if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
    				gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {

    				return 'highp';

    			}

    			precision = 'mediump';

    		}

    		if ( precision === 'mediump' ) {

    			if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
    				gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {

    				return 'mediump';

    			}

    		}

    		return 'lowp';

    	}

    	const isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||
    		( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );

    	let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
    	const maxPrecision = getMaxPrecision( precision );

    	if ( maxPrecision !== precision ) {

    		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
    		precision = maxPrecision;

    	}

    	const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );

    	const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

    	const maxTextures = gl.getParameter( 34930 );
    	const maxVertexTextures = gl.getParameter( 35660 );
    	const maxTextureSize = gl.getParameter( 3379 );
    	const maxCubemapSize = gl.getParameter( 34076 );

    	const maxAttributes = gl.getParameter( 34921 );
    	const maxVertexUniforms = gl.getParameter( 36347 );
    	const maxVaryings = gl.getParameter( 36348 );
    	const maxFragmentUniforms = gl.getParameter( 36349 );

    	const vertexTextures = maxVertexTextures > 0;
    	const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );
    	const floatVertexTextures = vertexTextures && floatFragmentTextures;

    	const maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;

    	return {

    		isWebGL2: isWebGL2,

    		drawBuffers: drawBuffers,

    		getMaxAnisotropy: getMaxAnisotropy,
    		getMaxPrecision: getMaxPrecision,

    		precision: precision,
    		logarithmicDepthBuffer: logarithmicDepthBuffer,

    		maxTextures: maxTextures,
    		maxVertexTextures: maxVertexTextures,
    		maxTextureSize: maxTextureSize,
    		maxCubemapSize: maxCubemapSize,

    		maxAttributes: maxAttributes,
    		maxVertexUniforms: maxVertexUniforms,
    		maxVaryings: maxVaryings,
    		maxFragmentUniforms: maxFragmentUniforms,

    		vertexTextures: vertexTextures,
    		floatFragmentTextures: floatFragmentTextures,
    		floatVertexTextures: floatVertexTextures,

    		maxSamples: maxSamples

    	};

    }

    function WebGLClipping( properties ) {

    	const scope = this;

    	let globalState = null,
    		numGlobalPlanes = 0,
    		localClippingEnabled = false,
    		renderingShadows = false;

    	const plane = new Plane(),
    		viewNormalMatrix = new Matrix3(),

    		uniform = { value: null, needsUpdate: false };

    	this.uniform = uniform;
    	this.numPlanes = 0;
    	this.numIntersection = 0;

    	this.init = function ( planes, enableLocalClipping, camera ) {

    		const enabled =
    			planes.length !== 0 ||
    			enableLocalClipping ||
    			// enable state of previous frame - the clipping code has to
    			// run another frame in order to reset the state:
    			numGlobalPlanes !== 0 ||
    			localClippingEnabled;

    		localClippingEnabled = enableLocalClipping;

    		globalState = projectPlanes( planes, camera, 0 );
    		numGlobalPlanes = planes.length;

    		return enabled;

    	};

    	this.beginShadows = function () {

    		renderingShadows = true;
    		projectPlanes( null );

    	};

    	this.endShadows = function () {

    		renderingShadows = false;
    		resetGlobalState();

    	};

    	this.setState = function ( material, camera, useCache ) {

    		const planes = material.clippingPlanes,
    			clipIntersection = material.clipIntersection,
    			clipShadows = material.clipShadows;

    		const materialProperties = properties.get( material );

    		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

    			// there's no local clipping

    			if ( renderingShadows ) {

    				// there's no global clipping

    				projectPlanes( null );

    			} else {

    				resetGlobalState();

    			}

    		} else {

    			const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
    				lGlobal = nGlobal * 4;

    			let dstArray = materialProperties.clippingState || null;

    			uniform.value = dstArray; // ensure unique state

    			dstArray = projectPlanes( planes, camera, lGlobal, useCache );

    			for ( let i = 0; i !== lGlobal; ++ i ) {

    				dstArray[ i ] = globalState[ i ];

    			}

    			materialProperties.clippingState = dstArray;
    			this.numIntersection = clipIntersection ? this.numPlanes : 0;
    			this.numPlanes += nGlobal;

    		}


    	};

    	function resetGlobalState() {

    		if ( uniform.value !== globalState ) {

    			uniform.value = globalState;
    			uniform.needsUpdate = numGlobalPlanes > 0;

    		}

    		scope.numPlanes = numGlobalPlanes;
    		scope.numIntersection = 0;

    	}

    	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

    		const nPlanes = planes !== null ? planes.length : 0;
    		let dstArray = null;

    		if ( nPlanes !== 0 ) {

    			dstArray = uniform.value;

    			if ( skipTransform !== true || dstArray === null ) {

    				const flatSize = dstOffset + nPlanes * 4,
    					viewMatrix = camera.matrixWorldInverse;

    				viewNormalMatrix.getNormalMatrix( viewMatrix );

    				if ( dstArray === null || dstArray.length < flatSize ) {

    					dstArray = new Float32Array( flatSize );

    				}

    				for ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

    					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

    					plane.normal.toArray( dstArray, i4 );
    					dstArray[ i4 + 3 ] = plane.constant;

    				}

    			}

    			uniform.value = dstArray;
    			uniform.needsUpdate = true;

    		}

    		scope.numPlanes = nPlanes;
    		scope.numIntersection = 0;

    		return dstArray;

    	}

    }

    function WebGLCubeMaps( renderer ) {

    	let cubemaps = new WeakMap();

    	function mapTextureMapping( texture, mapping ) {

    		if ( mapping === EquirectangularReflectionMapping ) {

    			texture.mapping = CubeReflectionMapping;

    		} else if ( mapping === EquirectangularRefractionMapping ) {

    			texture.mapping = CubeRefractionMapping;

    		}

    		return texture;

    	}

    	function get( texture ) {

    		if ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {

    			const mapping = texture.mapping;

    			if ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {

    				if ( cubemaps.has( texture ) ) {

    					const cubemap = cubemaps.get( texture ).texture;
    					return mapTextureMapping( cubemap, texture.mapping );

    				} else {

    					const image = texture.image;

    					if ( image && image.height > 0 ) {

    						const renderTarget = new WebGLCubeRenderTarget( image.height / 2 );
    						renderTarget.fromEquirectangularTexture( renderer, texture );
    						cubemaps.set( texture, renderTarget );

    						texture.addEventListener( 'dispose', onTextureDispose );

    						return mapTextureMapping( renderTarget.texture, texture.mapping );

    					} else {

    						// image not yet ready. try the conversion next frame

    						return null;

    					}

    				}

    			}

    		}

    		return texture;

    	}

    	function onTextureDispose( event ) {

    		const texture = event.target;

    		texture.removeEventListener( 'dispose', onTextureDispose );

    		const cubemap = cubemaps.get( texture );

    		if ( cubemap !== undefined ) {

    			cubemaps.delete( texture );
    			cubemap.dispose();

    		}

    	}

    	function dispose() {

    		cubemaps = new WeakMap();

    	}

    	return {
    		get: get,
    		dispose: dispose
    	};

    }

    class OrthographicCamera extends Camera {

    	constructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {

    		super();

    		this.isOrthographicCamera = true;

    		this.type = 'OrthographicCamera';

    		this.zoom = 1;
    		this.view = null;

    		this.left = left;
    		this.right = right;
    		this.top = top;
    		this.bottom = bottom;

    		this.near = near;
    		this.far = far;

    		this.updateProjectionMatrix();

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		this.left = source.left;
    		this.right = source.right;
    		this.top = source.top;
    		this.bottom = source.bottom;
    		this.near = source.near;
    		this.far = source.far;

    		this.zoom = source.zoom;
    		this.view = source.view === null ? null : Object.assign( {}, source.view );

    		return this;

    	}

    	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

    		if ( this.view === null ) {

    			this.view = {
    				enabled: true,
    				fullWidth: 1,
    				fullHeight: 1,
    				offsetX: 0,
    				offsetY: 0,
    				width: 1,
    				height: 1
    			};

    		}

    		this.view.enabled = true;
    		this.view.fullWidth = fullWidth;
    		this.view.fullHeight = fullHeight;
    		this.view.offsetX = x;
    		this.view.offsetY = y;
    		this.view.width = width;
    		this.view.height = height;

    		this.updateProjectionMatrix();

    	}

    	clearViewOffset() {

    		if ( this.view !== null ) {

    			this.view.enabled = false;

    		}

    		this.updateProjectionMatrix();

    	}

    	updateProjectionMatrix() {

    		const dx = ( this.right - this.left ) / ( 2 * this.zoom );
    		const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
    		const cx = ( this.right + this.left ) / 2;
    		const cy = ( this.top + this.bottom ) / 2;

    		let left = cx - dx;
    		let right = cx + dx;
    		let top = cy + dy;
    		let bottom = cy - dy;

    		if ( this.view !== null && this.view.enabled ) {

    			const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
    			const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;

    			left += scaleW * this.view.offsetX;
    			right = left + scaleW * this.view.width;
    			top -= scaleH * this.view.offsetY;
    			bottom = top - scaleH * this.view.height;

    		}

    		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

    		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

    	}

    	toJSON( meta ) {

    		const data = super.toJSON( meta );

    		data.object.zoom = this.zoom;
    		data.object.left = this.left;
    		data.object.right = this.right;
    		data.object.top = this.top;
    		data.object.bottom = this.bottom;
    		data.object.near = this.near;
    		data.object.far = this.far;

    		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

    		return data;

    	}

    }

    const LOD_MIN = 4;

    // The standard deviations (radians) associated with the extra mips. These are
    // chosen to approximate a Trowbridge-Reitz distribution function times the
    // geometric shadowing function. These sigma values squared must match the
    // variance #defines in cube_uv_reflection_fragment.glsl.js.
    const EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];

    // The maximum length of the blur for loop. Smaller sigmas will use fewer
    // samples and exit early, but not recompile the shader.
    const MAX_SAMPLES = 20;

    const _flatCamera = /*@__PURE__*/ new OrthographicCamera();
    const _clearColor = /*@__PURE__*/ new Color();
    let _oldTarget = null;

    // Golden Ratio
    const PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
    const INV_PHI = 1 / PHI;

    // Vertices of a dodecahedron (except the opposites, which represent the
    // same axis), used as axis directions evenly spread on a sphere.
    const _axisDirections = [
    	/*@__PURE__*/ new Vector3( 1, 1, 1 ),
    	/*@__PURE__*/ new Vector3( - 1, 1, 1 ),
    	/*@__PURE__*/ new Vector3( 1, 1, - 1 ),
    	/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),
    	/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),
    	/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),
    	/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),
    	/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),
    	/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),
    	/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];

    /**
     * This class generates a Prefiltered, Mipmapped Radiance Environment Map
     * (PMREM) from a cubeMap environment texture. This allows different levels of
     * blur to be quickly accessed based on material roughness. It is packed into a
     * special CubeUV format that allows us to perform custom interpolation so that
     * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
     * chain, it only goes down to the LOD_MIN level (above), and then creates extra
     * even more filtered 'mips' at the same LOD_MIN resolution, associated with
     * higher roughness levels. In this way we maintain resolution to smoothly
     * interpolate diffuse lighting while limiting sampling computation.
     *
     * Paper: Fast, Accurate Image-Based Lighting
     * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
    */

    class PMREMGenerator {

    	constructor( renderer ) {

    		this._renderer = renderer;
    		this._pingPongRenderTarget = null;

    		this._lodMax = 0;
    		this._cubeSize = 0;
    		this._lodPlanes = [];
    		this._sizeLods = [];
    		this._sigmas = [];

    		this._blurMaterial = null;
    		this._cubemapMaterial = null;
    		this._equirectMaterial = null;

    		this._compileMaterial( this._blurMaterial );

    	}

    	/**
    	 * Generates a PMREM from a supplied Scene, which can be faster than using an
    	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
    	 * in radians to be applied to the scene before PMREM generation. Optional near
    	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
    	 * is placed at the origin).
    	 */
    	fromScene( scene, sigma = 0, near = 0.1, far = 100 ) {

    		_oldTarget = this._renderer.getRenderTarget();

    		this._setSize( 256 );

    		const cubeUVRenderTarget = this._allocateTargets();
    		cubeUVRenderTarget.depthBuffer = true;

    		this._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );

    		if ( sigma > 0 ) {

    			this._blur( cubeUVRenderTarget, 0, 0, sigma );

    		}

    		this._applyPMREM( cubeUVRenderTarget );
    		this._cleanup( cubeUVRenderTarget );

    		return cubeUVRenderTarget;

    	}

    	/**
    	 * Generates a PMREM from an equirectangular texture, which can be either LDR
    	 * or HDR. The ideal input image size is 1k (1024 x 512),
    	 * as this matches best with the 256 x 256 cubemap output.
    	 */
    	fromEquirectangular( equirectangular, renderTarget = null ) {

    		return this._fromTexture( equirectangular, renderTarget );

    	}

    	/**
    	 * Generates a PMREM from an cubemap texture, which can be either LDR
    	 * or HDR. The ideal input cube size is 256 x 256,
    	 * as this matches best with the 256 x 256 cubemap output.
    	 */
    	fromCubemap( cubemap, renderTarget = null ) {

    		return this._fromTexture( cubemap, renderTarget );

    	}

    	/**
    	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
    	 * your texture's network fetch for increased concurrency.
    	 */
    	compileCubemapShader() {

    		if ( this._cubemapMaterial === null ) {

    			this._cubemapMaterial = _getCubemapMaterial();
    			this._compileMaterial( this._cubemapMaterial );

    		}

    	}

    	/**
    	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
    	 * your texture's network fetch for increased concurrency.
    	 */
    	compileEquirectangularShader() {

    		if ( this._equirectMaterial === null ) {

    			this._equirectMaterial = _getEquirectMaterial();
    			this._compileMaterial( this._equirectMaterial );

    		}

    	}

    	/**
    	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
    	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
    	 * one of them will cause any others to also become unusable.
    	 */
    	dispose() {

    		this._dispose();

    		if ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();
    		if ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();

    	}

    	// private interface

    	_setSize( cubeSize ) {

    		this._lodMax = Math.floor( Math.log2( cubeSize ) );
    		this._cubeSize = Math.pow( 2, this._lodMax );

    	}

    	_dispose() {

    		if ( this._blurMaterial !== null ) this._blurMaterial.dispose();

    		if ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();

    		for ( let i = 0; i < this._lodPlanes.length; i ++ ) {

    			this._lodPlanes[ i ].dispose();

    		}

    	}

    	_cleanup( outputTarget ) {

    		this._renderer.setRenderTarget( _oldTarget );
    		outputTarget.scissorTest = false;
    		_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );

    	}

    	_fromTexture( texture, renderTarget ) {

    		if ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {

    			this._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );

    		} else { // Equirectangular

    			this._setSize( texture.image.width / 4 );

    		}

    		_oldTarget = this._renderer.getRenderTarget();

    		const cubeUVRenderTarget = renderTarget || this._allocateTargets();
    		this._textureToCubeUV( texture, cubeUVRenderTarget );
    		this._applyPMREM( cubeUVRenderTarget );
    		this._cleanup( cubeUVRenderTarget );

    		return cubeUVRenderTarget;

    	}

    	_allocateTargets() {

    		const width = 3 * Math.max( this._cubeSize, 16 * 7 );
    		const height = 4 * this._cubeSize;

    		const params = {
    			magFilter: LinearFilter,
    			minFilter: LinearFilter,
    			generateMipmaps: false,
    			type: HalfFloatType,
    			format: RGBAFormat,
    			encoding: LinearEncoding,
    			depthBuffer: false
    		};

    		const cubeUVRenderTarget = _createRenderTarget( width, height, params );

    		if ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width ) {

    			if ( this._pingPongRenderTarget !== null ) {

    				this._dispose();

    			}

    			this._pingPongRenderTarget = _createRenderTarget( width, height, params );

    			const { _lodMax } = this;
    			( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );

    			this._blurMaterial = _getBlurShader( _lodMax, width, height );

    		}

    		return cubeUVRenderTarget;

    	}

    	_compileMaterial( material ) {

    		const tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );
    		this._renderer.compile( tmpMesh, _flatCamera );

    	}

    	_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {

    		const fov = 90;
    		const aspect = 1;
    		const cubeCamera = new PerspectiveCamera( fov, aspect, near, far );
    		const upSign = [ 1, - 1, 1, 1, 1, 1 ];
    		const forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];
    		const renderer = this._renderer;

    		const originalAutoClear = renderer.autoClear;
    		const toneMapping = renderer.toneMapping;
    		renderer.getClearColor( _clearColor );

    		renderer.toneMapping = NoToneMapping;
    		renderer.autoClear = false;

    		const backgroundMaterial = new MeshBasicMaterial( {
    			name: 'PMREM.Background',
    			side: BackSide,
    			depthWrite: false,
    			depthTest: false,
    		} );

    		const backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );

    		let useSolidColor = false;
    		const background = scene.background;

    		if ( background ) {

    			if ( background.isColor ) {

    				backgroundMaterial.color.copy( background );
    				scene.background = null;
    				useSolidColor = true;

    			}

    		} else {

    			backgroundMaterial.color.copy( _clearColor );
    			useSolidColor = true;

    		}

    		for ( let i = 0; i < 6; i ++ ) {

    			const col = i % 3;

    			if ( col === 0 ) {

    				cubeCamera.up.set( 0, upSign[ i ], 0 );
    				cubeCamera.lookAt( forwardSign[ i ], 0, 0 );

    			} else if ( col === 1 ) {

    				cubeCamera.up.set( 0, 0, upSign[ i ] );
    				cubeCamera.lookAt( 0, forwardSign[ i ], 0 );

    			} else {

    				cubeCamera.up.set( 0, upSign[ i ], 0 );
    				cubeCamera.lookAt( 0, 0, forwardSign[ i ] );

    			}

    			const size = this._cubeSize;

    			_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );

    			renderer.setRenderTarget( cubeUVRenderTarget );

    			if ( useSolidColor ) {

    				renderer.render( backgroundBox, cubeCamera );

    			}

    			renderer.render( scene, cubeCamera );

    		}

    		backgroundBox.geometry.dispose();
    		backgroundBox.material.dispose();

    		renderer.toneMapping = toneMapping;
    		renderer.autoClear = originalAutoClear;
    		scene.background = background;

    	}

    	_textureToCubeUV( texture, cubeUVRenderTarget ) {

    		const renderer = this._renderer;

    		const isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );

    		if ( isCubeTexture ) {

    			if ( this._cubemapMaterial === null ) {

    				this._cubemapMaterial = _getCubemapMaterial();

    			}

    			this._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;

    		} else {

    			if ( this._equirectMaterial === null ) {

    				this._equirectMaterial = _getEquirectMaterial();

    			}

    		}

    		const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
    		const mesh = new Mesh( this._lodPlanes[ 0 ], material );

    		const uniforms = material.uniforms;

    		uniforms[ 'envMap' ].value = texture;

    		const size = this._cubeSize;

    		_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );

    		renderer.setRenderTarget( cubeUVRenderTarget );
    		renderer.render( mesh, _flatCamera );

    	}

    	_applyPMREM( cubeUVRenderTarget ) {

    		const renderer = this._renderer;
    		const autoClear = renderer.autoClear;
    		renderer.autoClear = false;

    		for ( let i = 1; i < this._lodPlanes.length; i ++ ) {

    			const sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );

    			const poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];

    			this._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );

    		}

    		renderer.autoClear = autoClear;

    	}

    	/**
    	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
    	 * vertically and horizontally, but this breaks down on a cube. Here we apply
    	 * the blur latitudinally (around the poles), and then longitudinally (towards
    	 * the poles) to approximate the orthogonally-separable blur. It is least
    	 * accurate at the poles, but still does a decent job.
    	 */
    	_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {

    		const pingPongRenderTarget = this._pingPongRenderTarget;

    		this._halfBlur(
    			cubeUVRenderTarget,
    			pingPongRenderTarget,
    			lodIn,
    			lodOut,
    			sigma,
    			'latitudinal',
    			poleAxis );

    		this._halfBlur(
    			pingPongRenderTarget,
    			cubeUVRenderTarget,
    			lodOut,
    			lodOut,
    			sigma,
    			'longitudinal',
    			poleAxis );

    	}

    	_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {

    		const renderer = this._renderer;
    		const blurMaterial = this._blurMaterial;

    		if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {

    			console.error(
    				'blur direction must be either latitudinal or longitudinal!' );

    		}

    		// Number of standard deviations at which to cut off the discrete approximation.
    		const STANDARD_DEVIATIONS = 3;

    		const blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );
    		const blurUniforms = blurMaterial.uniforms;

    		const pixels = this._sizeLods[ lodIn ] - 1;
    		const radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );
    		const sigmaPixels = sigmaRadians / radiansPerPixel;
    		const samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;

    		if ( samples > MAX_SAMPLES ) {

    			console.warn( `sigmaRadians, ${
				sigmaRadians}, is too large and will clip, as it requested ${
				samples} samples when the maximum is set to ${MAX_SAMPLES}` );

    		}

    		const weights = [];
    		let sum = 0;

    		for ( let i = 0; i < MAX_SAMPLES; ++ i ) {

    			const x = i / sigmaPixels;
    			const weight = Math.exp( - x * x / 2 );
    			weights.push( weight );

    			if ( i === 0 ) {

    				sum += weight;

    			} else if ( i < samples ) {

    				sum += 2 * weight;

    			}

    		}

    		for ( let i = 0; i < weights.length; i ++ ) {

    			weights[ i ] = weights[ i ] / sum;

    		}

    		blurUniforms[ 'envMap' ].value = targetIn.texture;
    		blurUniforms[ 'samples' ].value = samples;
    		blurUniforms[ 'weights' ].value = weights;
    		blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';

    		if ( poleAxis ) {

    			blurUniforms[ 'poleAxis' ].value = poleAxis;

    		}

    		const { _lodMax } = this;
    		blurUniforms[ 'dTheta' ].value = radiansPerPixel;
    		blurUniforms[ 'mipInt' ].value = _lodMax - lodIn;

    		const outputSize = this._sizeLods[ lodOut ];
    		const x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );
    		const y = 4 * ( this._cubeSize - outputSize );

    		_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );
    		renderer.setRenderTarget( targetOut );
    		renderer.render( blurMesh, _flatCamera );

    	}

    }



    function _createPlanes( lodMax ) {

    	const lodPlanes = [];
    	const sizeLods = [];
    	const sigmas = [];

    	let lod = lodMax;

    	const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;

    	for ( let i = 0; i < totalLods; i ++ ) {

    		const sizeLod = Math.pow( 2, lod );
    		sizeLods.push( sizeLod );
    		let sigma = 1.0 / sizeLod;

    		if ( i > lodMax - LOD_MIN ) {

    			sigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];

    		} else if ( i === 0 ) {

    			sigma = 0;

    		}

    		sigmas.push( sigma );

    		const texelSize = 1.0 / ( sizeLod - 2 );
    		const min = - texelSize;
    		const max = 1 + texelSize;
    		const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];

    		const cubeFaces = 6;
    		const vertices = 6;
    		const positionSize = 3;
    		const uvSize = 2;
    		const faceIndexSize = 1;

    		const position = new Float32Array( positionSize * vertices * cubeFaces );
    		const uv = new Float32Array( uvSize * vertices * cubeFaces );
    		const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );

    		for ( let face = 0; face < cubeFaces; face ++ ) {

    			const x = ( face % 3 ) * 2 / 3 - 1;
    			const y = face > 2 ? 0 : - 1;
    			const coordinates = [
    				x, y, 0,
    				x + 2 / 3, y, 0,
    				x + 2 / 3, y + 1, 0,
    				x, y, 0,
    				x + 2 / 3, y + 1, 0,
    				x, y + 1, 0
    			];
    			position.set( coordinates, positionSize * vertices * face );
    			uv.set( uv1, uvSize * vertices * face );
    			const fill = [ face, face, face, face, face, face ];
    			faceIndex.set( fill, faceIndexSize * vertices * face );

    		}

    		const planes = new BufferGeometry();
    		planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
    		planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
    		planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
    		lodPlanes.push( planes );

    		if ( lod > LOD_MIN ) {

    			lod --;

    		}

    	}

    	return { lodPlanes, sizeLods, sigmas };

    }

    function _createRenderTarget( width, height, params ) {

    	const cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );
    	cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
    	cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
    	cubeUVRenderTarget.scissorTest = true;
    	return cubeUVRenderTarget;

    }

    function _setViewport( target, x, y, width, height ) {

    	target.viewport.set( x, y, width, height );
    	target.scissor.set( x, y, width, height );

    }

    function _getBlurShader( lodMax, width, height ) {

    	const weights = new Float32Array( MAX_SAMPLES );
    	const poleAxis = new Vector3( 0, 1, 0 );
    	const shaderMaterial = new ShaderMaterial( {

    		name: 'SphericalGaussianBlur',

    		defines: {
    			'n': MAX_SAMPLES,
    			'CUBEUV_TEXEL_WIDTH': 1.0 / width,
    			'CUBEUV_TEXEL_HEIGHT': 1.0 / height,
    			'CUBEUV_MAX_MIP': `${lodMax}.0`,
    		},

    		uniforms: {
    			'envMap': { value: null },
    			'samples': { value: 1 },
    			'weights': { value: weights },
    			'latitudinal': { value: false },
    			'dTheta': { value: 0 },
    			'mipInt': { value: 0 },
    			'poleAxis': { value: poleAxis }
    		},

    		vertexShader: _getCommonVertexShader(),

    		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,

    		blending: NoBlending,
    		depthTest: false,
    		depthWrite: false

    	} );

    	return shaderMaterial;

    }

    function _getEquirectMaterial() {

    	return new ShaderMaterial( {

    		name: 'EquirectangularToCubeUV',

    		uniforms: {
    			'envMap': { value: null }
    		},

    		vertexShader: _getCommonVertexShader(),

    		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,

    		blending: NoBlending,
    		depthTest: false,
    		depthWrite: false

    	} );

    }

    function _getCubemapMaterial() {

    	return new ShaderMaterial( {

    		name: 'CubemapToCubeUV',

    		uniforms: {
    			'envMap': { value: null },
    			'flipEnvMap': { value: - 1 }
    		},

    		vertexShader: _getCommonVertexShader(),

    		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,

    		blending: NoBlending,
    		depthTest: false,
    		depthWrite: false

    	} );

    }

    function _getCommonVertexShader() {

    	return /* glsl */`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;

    }

    function WebGLCubeUVMaps( renderer ) {

    	let cubeUVmaps = new WeakMap();

    	let pmremGenerator = null;

    	function get( texture ) {

    		if ( texture && texture.isTexture ) {

    			const mapping = texture.mapping;

    			const isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );
    			const isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );

    			// equirect/cube map to cubeUV conversion

    			if ( isEquirectMap || isCubeMap ) {

    				if ( texture.isRenderTargetTexture && texture.needsPMREMUpdate === true ) {

    					texture.needsPMREMUpdate = false;

    					let renderTarget = cubeUVmaps.get( texture );

    					if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );

    					renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );
    					cubeUVmaps.set( texture, renderTarget );

    					return renderTarget.texture;

    				} else {

    					if ( cubeUVmaps.has( texture ) ) {

    						return cubeUVmaps.get( texture ).texture;

    					} else {

    						const image = texture.image;

    						if ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {

    							if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );

    							const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );
    							cubeUVmaps.set( texture, renderTarget );

    							texture.addEventListener( 'dispose', onTextureDispose );

    							return renderTarget.texture;

    						} else {

    							// image not yet ready. try the conversion next frame

    							return null;

    						}

    					}

    				}

    			}

    		}

    		return texture;

    	}

    	function isCubeTextureComplete( image ) {

    		let count = 0;
    		const length = 6;

    		for ( let i = 0; i < length; i ++ ) {

    			if ( image[ i ] !== undefined ) count ++;

    		}

    		return count === length;


    	}

    	function onTextureDispose( event ) {

    		const texture = event.target;

    		texture.removeEventListener( 'dispose', onTextureDispose );

    		const cubemapUV = cubeUVmaps.get( texture );

    		if ( cubemapUV !== undefined ) {

    			cubeUVmaps.delete( texture );
    			cubemapUV.dispose();

    		}

    	}

    	function dispose() {

    		cubeUVmaps = new WeakMap();

    		if ( pmremGenerator !== null ) {

    			pmremGenerator.dispose();
    			pmremGenerator = null;

    		}

    	}

    	return {
    		get: get,
    		dispose: dispose
    	};

    }

    function WebGLExtensions( gl ) {

    	const extensions = {};

    	function getExtension( name ) {

    		if ( extensions[ name ] !== undefined ) {

    			return extensions[ name ];

    		}

    		let extension;

    		switch ( name ) {

    			case 'WEBGL_depth_texture':
    				extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
    				break;

    			case 'EXT_texture_filter_anisotropic':
    				extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
    				break;

    			case 'WEBGL_compressed_texture_s3tc':
    				extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
    				break;

    			case 'WEBGL_compressed_texture_pvrtc':
    				extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
    				break;

    			default:
    				extension = gl.getExtension( name );

    		}

    		extensions[ name ] = extension;

    		return extension;

    	}

    	return {

    		has: function ( name ) {

    			return getExtension( name ) !== null;

    		},

    		init: function ( capabilities ) {

    			if ( capabilities.isWebGL2 ) {

    				getExtension( 'EXT_color_buffer_float' );

    			} else {

    				getExtension( 'WEBGL_depth_texture' );
    				getExtension( 'OES_texture_float' );
    				getExtension( 'OES_texture_half_float' );
    				getExtension( 'OES_texture_half_float_linear' );
    				getExtension( 'OES_standard_derivatives' );
    				getExtension( 'OES_element_index_uint' );
    				getExtension( 'OES_vertex_array_object' );
    				getExtension( 'ANGLE_instanced_arrays' );

    			}

    			getExtension( 'OES_texture_float_linear' );
    			getExtension( 'EXT_color_buffer_half_float' );
    			getExtension( 'WEBGL_multisampled_render_to_texture' );

    		},

    		get: function ( name ) {

    			const extension = getExtension( name );

    			if ( extension === null ) {

    				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

    			}

    			return extension;

    		}

    	};

    }

    function WebGLGeometries( gl, attributes, info, bindingStates ) {

    	const geometries = {};
    	const wireframeAttributes = new WeakMap();

    	function onGeometryDispose( event ) {

    		const geometry = event.target;

    		if ( geometry.index !== null ) {

    			attributes.remove( geometry.index );

    		}

    		for ( const name in geometry.attributes ) {

    			attributes.remove( geometry.attributes[ name ] );

    		}

    		geometry.removeEventListener( 'dispose', onGeometryDispose );

    		delete geometries[ geometry.id ];

    		const attribute = wireframeAttributes.get( geometry );

    		if ( attribute ) {

    			attributes.remove( attribute );
    			wireframeAttributes.delete( geometry );

    		}

    		bindingStates.releaseStatesOfGeometry( geometry );

    		if ( geometry.isInstancedBufferGeometry === true ) {

    			delete geometry._maxInstanceCount;

    		}

    		//

    		info.memory.geometries --;

    	}

    	function get( object, geometry ) {

    		if ( geometries[ geometry.id ] === true ) return geometry;

    		geometry.addEventListener( 'dispose', onGeometryDispose );

    		geometries[ geometry.id ] = true;

    		info.memory.geometries ++;

    		return geometry;

    	}

    	function update( geometry ) {

    		const geometryAttributes = geometry.attributes;

    		// Updating index buffer in VAO now. See WebGLBindingStates.

    		for ( const name in geometryAttributes ) {

    			attributes.update( geometryAttributes[ name ], 34962 );

    		}

    		// morph targets

    		const morphAttributes = geometry.morphAttributes;

    		for ( const name in morphAttributes ) {

    			const array = morphAttributes[ name ];

    			for ( let i = 0, l = array.length; i < l; i ++ ) {

    				attributes.update( array[ i ], 34962 );

    			}

    		}

    	}

    	function updateWireframeAttribute( geometry ) {

    		const indices = [];

    		const geometryIndex = geometry.index;
    		const geometryPosition = geometry.attributes.position;
    		let version = 0;

    		if ( geometryIndex !== null ) {

    			const array = geometryIndex.array;
    			version = geometryIndex.version;

    			for ( let i = 0, l = array.length; i < l; i += 3 ) {

    				const a = array[ i + 0 ];
    				const b = array[ i + 1 ];
    				const c = array[ i + 2 ];

    				indices.push( a, b, b, c, c, a );

    			}

    		} else {

    			const array = geometryPosition.array;
    			version = geometryPosition.version;

    			for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

    				const a = i + 0;
    				const b = i + 1;
    				const c = i + 2;

    				indices.push( a, b, b, c, c, a );

    			}

    		}

    		const attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
    		attribute.version = version;

    		// Updating index buffer in VAO now. See WebGLBindingStates

    		//

    		const previousAttribute = wireframeAttributes.get( geometry );

    		if ( previousAttribute ) attributes.remove( previousAttribute );

    		//

    		wireframeAttributes.set( geometry, attribute );

    	}

    	function getWireframeAttribute( geometry ) {

    		const currentAttribute = wireframeAttributes.get( geometry );

    		if ( currentAttribute ) {

    			const geometryIndex = geometry.index;

    			if ( geometryIndex !== null ) {

    				// if the attribute is obsolete, create a new one

    				if ( currentAttribute.version < geometryIndex.version ) {

    					updateWireframeAttribute( geometry );

    				}

    			}

    		} else {

    			updateWireframeAttribute( geometry );

    		}

    		return wireframeAttributes.get( geometry );

    	}

    	return {

    		get: get,
    		update: update,

    		getWireframeAttribute: getWireframeAttribute

    	};

    }

    function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

    	const isWebGL2 = capabilities.isWebGL2;

    	let mode;

    	function setMode( value ) {

    		mode = value;

    	}

    	let type, bytesPerElement;

    	function setIndex( value ) {

    		type = value.type;
    		bytesPerElement = value.bytesPerElement;

    	}

    	function render( start, count ) {

    		gl.drawElements( mode, count, type, start * bytesPerElement );

    		info.update( count, mode, 1 );

    	}

    	function renderInstances( start, count, primcount ) {

    		if ( primcount === 0 ) return;

    		let extension, methodName;

    		if ( isWebGL2 ) {

    			extension = gl;
    			methodName = 'drawElementsInstanced';

    		} else {

    			extension = extensions.get( 'ANGLE_instanced_arrays' );
    			methodName = 'drawElementsInstancedANGLE';

    			if ( extension === null ) {

    				console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
    				return;

    			}

    		}

    		extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );

    		info.update( count, mode, primcount );

    	}

    	//

    	this.setMode = setMode;
    	this.setIndex = setIndex;
    	this.render = render;
    	this.renderInstances = renderInstances;

    }

    function WebGLInfo( gl ) {

    	const memory = {
    		geometries: 0,
    		textures: 0
    	};

    	const render = {
    		frame: 0,
    		calls: 0,
    		triangles: 0,
    		points: 0,
    		lines: 0
    	};

    	function update( count, mode, instanceCount ) {

    		render.calls ++;

    		switch ( mode ) {

    			case 4:
    				render.triangles += instanceCount * ( count / 3 );
    				break;

    			case 1:
    				render.lines += instanceCount * ( count / 2 );
    				break;

    			case 3:
    				render.lines += instanceCount * ( count - 1 );
    				break;

    			case 2:
    				render.lines += instanceCount * count;
    				break;

    			case 0:
    				render.points += instanceCount * count;
    				break;

    			default:
    				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
    				break;

    		}

    	}

    	function reset() {

    		render.frame ++;
    		render.calls = 0;
    		render.triangles = 0;
    		render.points = 0;
    		render.lines = 0;

    	}

    	return {
    		memory: memory,
    		render: render,
    		programs: null,
    		autoReset: true,
    		reset: reset,
    		update: update
    	};

    }

    function numericalSort( a, b ) {

    	return a[ 0 ] - b[ 0 ];

    }

    function absNumericalSort( a, b ) {

    	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

    }

    function denormalize( morph, attribute ) {

    	let denominator = 1;
    	const array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;

    	if ( array instanceof Int8Array ) denominator = 127;
    	else if ( array instanceof Int16Array ) denominator = 32767;
    	else if ( array instanceof Int32Array ) denominator = 2147483647;
    	else console.error( 'THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array );

    	morph.divideScalar( denominator );

    }

    function WebGLMorphtargets( gl, capabilities, textures ) {

    	const influencesList = {};
    	const morphInfluences = new Float32Array( 8 );
    	const morphTextures = new WeakMap();
    	const morph = new Vector4();

    	const workInfluences = [];

    	for ( let i = 0; i < 8; i ++ ) {

    		workInfluences[ i ] = [ i, 0 ];

    	}

    	function update( object, geometry, material, program ) {

    		const objectInfluences = object.morphTargetInfluences;

    		if ( capabilities.isWebGL2 === true ) {

    			// instead of using attributes, the WebGL 2 code path encodes morph targets
    			// into an array of data textures. Each layer represents a single morph target.

    			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    			const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

    			let entry = morphTextures.get( geometry );

    			if ( entry === undefined || entry.count !== morphTargetsCount ) {

    				if ( entry !== undefined ) entry.texture.dispose();

    				const hasMorphPosition = geometry.morphAttributes.position !== undefined;
    				const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
    				const hasMorphColors = geometry.morphAttributes.color !== undefined;

    				const morphTargets = geometry.morphAttributes.position || [];
    				const morphNormals = geometry.morphAttributes.normal || [];
    				const morphColors = geometry.morphAttributes.color || [];

    				let vertexDataCount = 0;

    				if ( hasMorphPosition === true ) vertexDataCount = 1;
    				if ( hasMorphNormals === true ) vertexDataCount = 2;
    				if ( hasMorphColors === true ) vertexDataCount = 3;

    				let width = geometry.attributes.position.count * vertexDataCount;
    				let height = 1;

    				if ( width > capabilities.maxTextureSize ) {

    					height = Math.ceil( width / capabilities.maxTextureSize );
    					width = capabilities.maxTextureSize;

    				}

    				const buffer = new Float32Array( width * height * 4 * morphTargetsCount );

    				const texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );
    				texture.type = FloatType;
    				texture.needsUpdate = true;

    				// fill buffer

    				const vertexDataStride = vertexDataCount * 4;

    				for ( let i = 0; i < morphTargetsCount; i ++ ) {

    					const morphTarget = morphTargets[ i ];
    					const morphNormal = morphNormals[ i ];
    					const morphColor = morphColors[ i ];

    					const offset = width * height * 4 * i;

    					for ( let j = 0; j < morphTarget.count; j ++ ) {

    						const stride = j * vertexDataStride;

    						if ( hasMorphPosition === true ) {

    							morph.fromBufferAttribute( morphTarget, j );

    							if ( morphTarget.normalized === true ) denormalize( morph, morphTarget );

    							buffer[ offset + stride + 0 ] = morph.x;
    							buffer[ offset + stride + 1 ] = morph.y;
    							buffer[ offset + stride + 2 ] = morph.z;
    							buffer[ offset + stride + 3 ] = 0;

    						}

    						if ( hasMorphNormals === true ) {

    							morph.fromBufferAttribute( morphNormal, j );

    							if ( morphNormal.normalized === true ) denormalize( morph, morphNormal );

    							buffer[ offset + stride + 4 ] = morph.x;
    							buffer[ offset + stride + 5 ] = morph.y;
    							buffer[ offset + stride + 6 ] = morph.z;
    							buffer[ offset + stride + 7 ] = 0;

    						}

    						if ( hasMorphColors === true ) {

    							morph.fromBufferAttribute( morphColor, j );

    							if ( morphColor.normalized === true ) denormalize( morph, morphColor );

    							buffer[ offset + stride + 8 ] = morph.x;
    							buffer[ offset + stride + 9 ] = morph.y;
    							buffer[ offset + stride + 10 ] = morph.z;
    							buffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;

    						}

    					}

    				}

    				entry = {
    					count: morphTargetsCount,
    					texture: texture,
    					size: new Vector2( width, height )
    				};

    				morphTextures.set( geometry, entry );

    				function disposeTexture() {

    					texture.dispose();

    					morphTextures.delete( geometry );

    					geometry.removeEventListener( 'dispose', disposeTexture );

    				}

    				geometry.addEventListener( 'dispose', disposeTexture );

    			}

    			//

    			let morphInfluencesSum = 0;

    			for ( let i = 0; i < objectInfluences.length; i ++ ) {

    				morphInfluencesSum += objectInfluences[ i ];

    			}

    			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

    			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
    			program.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );

    			program.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );
    			program.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );


    		} else {

    			// When object doesn't have morph target influences defined, we treat it as a 0-length array
    			// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences

    			const length = objectInfluences === undefined ? 0 : objectInfluences.length;

    			let influences = influencesList[ geometry.id ];

    			if ( influences === undefined || influences.length !== length ) {

    				// initialise list

    				influences = [];

    				for ( let i = 0; i < length; i ++ ) {

    					influences[ i ] = [ i, 0 ];

    				}

    				influencesList[ geometry.id ] = influences;

    			}

    			// Collect influences

    			for ( let i = 0; i < length; i ++ ) {

    				const influence = influences[ i ];

    				influence[ 0 ] = i;
    				influence[ 1 ] = objectInfluences[ i ];

    			}

    			influences.sort( absNumericalSort );

    			for ( let i = 0; i < 8; i ++ ) {

    				if ( i < length && influences[ i ][ 1 ] ) {

    					workInfluences[ i ][ 0 ] = influences[ i ][ 0 ];
    					workInfluences[ i ][ 1 ] = influences[ i ][ 1 ];

    				} else {

    					workInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;
    					workInfluences[ i ][ 1 ] = 0;

    				}

    			}

    			workInfluences.sort( numericalSort );

    			const morphTargets = geometry.morphAttributes.position;
    			const morphNormals = geometry.morphAttributes.normal;

    			let morphInfluencesSum = 0;

    			for ( let i = 0; i < 8; i ++ ) {

    				const influence = workInfluences[ i ];
    				const index = influence[ 0 ];
    				const value = influence[ 1 ];

    				if ( index !== Number.MAX_SAFE_INTEGER && value ) {

    					if ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {

    						geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );

    					}

    					if ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {

    						geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );

    					}

    					morphInfluences[ i ] = value;
    					morphInfluencesSum += value;

    				} else {

    					if ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {

    						geometry.deleteAttribute( 'morphTarget' + i );

    					}

    					if ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {

    						geometry.deleteAttribute( 'morphNormal' + i );

    					}

    					morphInfluences[ i ] = 0;

    				}

    			}

    			// GLSL shader uses formula baseinfluence * base + sum(target * influence)
    			// This allows us to switch between absolute morphs and relative morphs without changing shader code
    			// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
    			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

    			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
    			program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

    		}

    	}

    	return {

    		update: update

    	};

    }

    function WebGLObjects( gl, geometries, attributes, info ) {

    	let updateMap = new WeakMap();

    	function update( object ) {

    		const frame = info.render.frame;

    		const geometry = object.geometry;
    		const buffergeometry = geometries.get( object, geometry );

    		// Update once per frame

    		if ( updateMap.get( buffergeometry ) !== frame ) {

    			geometries.update( buffergeometry );

    			updateMap.set( buffergeometry, frame );

    		}

    		if ( object.isInstancedMesh ) {

    			if ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {

    				object.addEventListener( 'dispose', onInstancedMeshDispose );

    			}

    			attributes.update( object.instanceMatrix, 34962 );

    			if ( object.instanceColor !== null ) {

    				attributes.update( object.instanceColor, 34962 );

    			}

    		}

    		return buffergeometry;

    	}

    	function dispose() {

    		updateMap = new WeakMap();

    	}

    	function onInstancedMeshDispose( event ) {

    		const instancedMesh = event.target;

    		instancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );

    		attributes.remove( instancedMesh.instanceMatrix );

    		if ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );

    	}

    	return {

    		update: update,
    		dispose: dispose

    	};

    }

    /**
     * Uniforms of a program.
     * Those form a tree structure with a special top-level container for the root,
     * which you get by calling 'new WebGLUniforms( gl, program )'.
     *
     *
     * Properties of inner nodes including the top-level container:
     *
     * .seq - array of nested uniforms
     * .map - nested uniforms by name
     *
     *
     * Methods of all nodes except the top-level container:
     *
     * .setValue( gl, value, [textures] )
     *
     * 		uploads a uniform value(s)
     *  	the 'textures' parameter is needed for sampler uniforms
     *
     *
     * Static methods of the top-level container (textures factorizations):
     *
     * .upload( gl, seq, values, textures )
     *
     * 		sets uniforms in 'seq' to 'values[id].value'
     *
     * .seqWithValue( seq, values ) : filteredSeq
     *
     * 		filters 'seq' entries with corresponding entry in values
     *
     *
     * Methods of the top-level container (textures factorizations):
     *
     * .setValue( gl, name, value, textures )
     *
     * 		sets uniform with  name 'name' to 'value'
     *
     * .setOptional( gl, obj, prop )
     *
     * 		like .set for an optional property of the object
     *
     */

    const emptyTexture = new Texture();
    const emptyArrayTexture = new DataArrayTexture();
    const empty3dTexture = new Data3DTexture();
    const emptyCubeTexture = new CubeTexture();

    // --- Utilities ---

    // Array Caches (provide typed arrays for temporary by size)

    const arrayCacheF32 = [];
    const arrayCacheI32 = [];

    // Float32Array caches used for uploading Matrix uniforms

    const mat4array = new Float32Array( 16 );
    const mat3array = new Float32Array( 9 );
    const mat2array = new Float32Array( 4 );

    // Flattening for arrays of vectors and matrices

    function flatten( array, nBlocks, blockSize ) {

    	const firstElem = array[ 0 ];

    	if ( firstElem <= 0 || firstElem > 0 ) return array;
    	// unoptimized: ! isNaN( firstElem )
    	// see http://jacksondunstan.com/articles/983

    	const n = nBlocks * blockSize;
    	let r = arrayCacheF32[ n ];

    	if ( r === undefined ) {

    		r = new Float32Array( n );
    		arrayCacheF32[ n ] = r;

    	}

    	if ( nBlocks !== 0 ) {

    		firstElem.toArray( r, 0 );

    		for ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {

    			offset += blockSize;
    			array[ i ].toArray( r, offset );

    		}

    	}

    	return r;

    }

    function arraysEqual( a, b ) {

    	if ( a.length !== b.length ) return false;

    	for ( let i = 0, l = a.length; i < l; i ++ ) {

    		if ( a[ i ] !== b[ i ] ) return false;

    	}

    	return true;

    }

    function copyArray( a, b ) {

    	for ( let i = 0, l = b.length; i < l; i ++ ) {

    		a[ i ] = b[ i ];

    	}

    }

    // Texture unit allocation

    function allocTexUnits( textures, n ) {

    	let r = arrayCacheI32[ n ];

    	if ( r === undefined ) {

    		r = new Int32Array( n );
    		arrayCacheI32[ n ] = r;

    	}

    	for ( let i = 0; i !== n; ++ i ) {

    		r[ i ] = textures.allocateTextureUnit();

    	}

    	return r;

    }

    // --- Setters ---

    // Note: Defining these methods externally, because they come in a bunch
    // and this way their names minify.

    // Single scalar

    function setValueV1f( gl, v ) {

    	const cache = this.cache;

    	if ( cache[ 0 ] === v ) return;

    	gl.uniform1f( this.addr, v );

    	cache[ 0 ] = v;

    }

    // Single float vector (from flat array or THREE.VectorN)

    function setValueV2f( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

    			gl.uniform2f( this.addr, v.x, v.y );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform2fv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    function setValueV3f( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

    			gl.uniform3f( this.addr, v.x, v.y, v.z );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;
    			cache[ 2 ] = v.z;

    		}

    	} else if ( v.r !== undefined ) {

    		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

    			gl.uniform3f( this.addr, v.r, v.g, v.b );

    			cache[ 0 ] = v.r;
    			cache[ 1 ] = v.g;
    			cache[ 2 ] = v.b;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform3fv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    function setValueV4f( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

    			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;
    			cache[ 2 ] = v.z;
    			cache[ 3 ] = v.w;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform4fv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    // Single matrix (from flat array or THREE.MatrixN)

    function setValueM2( gl, v ) {

    	const cache = this.cache;
    	const elements = v.elements;

    	if ( elements === undefined ) {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniformMatrix2fv( this.addr, false, v );

    		copyArray( cache, v );

    	} else {

    		if ( arraysEqual( cache, elements ) ) return;

    		mat2array.set( elements );

    		gl.uniformMatrix2fv( this.addr, false, mat2array );

    		copyArray( cache, elements );

    	}

    }

    function setValueM3( gl, v ) {

    	const cache = this.cache;
    	const elements = v.elements;

    	if ( elements === undefined ) {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniformMatrix3fv( this.addr, false, v );

    		copyArray( cache, v );

    	} else {

    		if ( arraysEqual( cache, elements ) ) return;

    		mat3array.set( elements );

    		gl.uniformMatrix3fv( this.addr, false, mat3array );

    		copyArray( cache, elements );

    	}

    }

    function setValueM4( gl, v ) {

    	const cache = this.cache;
    	const elements = v.elements;

    	if ( elements === undefined ) {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniformMatrix4fv( this.addr, false, v );

    		copyArray( cache, v );

    	} else {

    		if ( arraysEqual( cache, elements ) ) return;

    		mat4array.set( elements );

    		gl.uniformMatrix4fv( this.addr, false, mat4array );

    		copyArray( cache, elements );

    	}

    }

    // Single integer / boolean

    function setValueV1i( gl, v ) {

    	const cache = this.cache;

    	if ( cache[ 0 ] === v ) return;

    	gl.uniform1i( this.addr, v );

    	cache[ 0 ] = v;

    }

    // Single integer / boolean vector (from flat array)

    function setValueV2i( gl, v ) {

    	const cache = this.cache;

    	if ( arraysEqual( cache, v ) ) return;

    	gl.uniform2iv( this.addr, v );

    	copyArray( cache, v );

    }

    function setValueV3i( gl, v ) {

    	const cache = this.cache;

    	if ( arraysEqual( cache, v ) ) return;

    	gl.uniform3iv( this.addr, v );

    	copyArray( cache, v );

    }

    function setValueV4i( gl, v ) {

    	const cache = this.cache;

    	if ( arraysEqual( cache, v ) ) return;

    	gl.uniform4iv( this.addr, v );

    	copyArray( cache, v );

    }

    // Single unsigned integer

    function setValueV1ui( gl, v ) {

    	const cache = this.cache;

    	if ( cache[ 0 ] === v ) return;

    	gl.uniform1ui( this.addr, v );

    	cache[ 0 ] = v;

    }

    // Single unsigned integer vector (from flat array)

    function setValueV2ui( gl, v ) {

    	const cache = this.cache;

    	if ( arraysEqual( cache, v ) ) return;

    	gl.uniform2uiv( this.addr, v );

    	copyArray( cache, v );

    }

    function setValueV3ui( gl, v ) {

    	const cache = this.cache;

    	if ( arraysEqual( cache, v ) ) return;

    	gl.uniform3uiv( this.addr, v );

    	copyArray( cache, v );

    }

    function setValueV4ui( gl, v ) {

    	const cache = this.cache;

    	if ( arraysEqual( cache, v ) ) return;

    	gl.uniform4uiv( this.addr, v );

    	copyArray( cache, v );

    }


    // Single texture (2D / Cube)

    function setValueT1( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	textures.setTexture2D( v || emptyTexture, unit );

    }

    function setValueT3D1( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	textures.setTexture3D( v || empty3dTexture, unit );

    }

    function setValueT6( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	textures.setTextureCube( v || emptyCubeTexture, unit );

    }

    function setValueT2DArray1( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	textures.setTexture2DArray( v || emptyArrayTexture, unit );

    }

    // Helper to pick the right setter for the singular case

    function getSingularSetter( type ) {

    	switch ( type ) {

    		case 0x1406: return setValueV1f; // FLOAT
    		case 0x8b50: return setValueV2f; // _VEC2
    		case 0x8b51: return setValueV3f; // _VEC3
    		case 0x8b52: return setValueV4f; // _VEC4

    		case 0x8b5a: return setValueM2; // _MAT2
    		case 0x8b5b: return setValueM3; // _MAT3
    		case 0x8b5c: return setValueM4; // _MAT4

    		case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
    		case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
    		case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
    		case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

    		case 0x1405: return setValueV1ui; // UINT
    		case 0x8dc6: return setValueV2ui; // _VEC2
    		case 0x8dc7: return setValueV3ui; // _VEC3
    		case 0x8dc8: return setValueV4ui; // _VEC4

    		case 0x8b5e: // SAMPLER_2D
    		case 0x8d66: // SAMPLER_EXTERNAL_OES
    		case 0x8dca: // INT_SAMPLER_2D
    		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
    		case 0x8b62: // SAMPLER_2D_SHADOW
    			return setValueT1;

    		case 0x8b5f: // SAMPLER_3D
    		case 0x8dcb: // INT_SAMPLER_3D
    		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
    			return setValueT3D1;

    		case 0x8b60: // SAMPLER_CUBE
    		case 0x8dcc: // INT_SAMPLER_CUBE
    		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
    		case 0x8dc5: // SAMPLER_CUBE_SHADOW
    			return setValueT6;

    		case 0x8dc1: // SAMPLER_2D_ARRAY
    		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
    		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
    		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
    			return setValueT2DArray1;

    	}

    }


    // Array of scalars

    function setValueV1fArray( gl, v ) {

    	gl.uniform1fv( this.addr, v );

    }

    // Array of vectors (from flat array or array of THREE.VectorN)

    function setValueV2fArray( gl, v ) {

    	const data = flatten( v, this.size, 2 );

    	gl.uniform2fv( this.addr, data );

    }

    function setValueV3fArray( gl, v ) {

    	const data = flatten( v, this.size, 3 );

    	gl.uniform3fv( this.addr, data );

    }

    function setValueV4fArray( gl, v ) {

    	const data = flatten( v, this.size, 4 );

    	gl.uniform4fv( this.addr, data );

    }

    // Array of matrices (from flat array or array of THREE.MatrixN)

    function setValueM2Array( gl, v ) {

    	const data = flatten( v, this.size, 4 );

    	gl.uniformMatrix2fv( this.addr, false, data );

    }

    function setValueM3Array( gl, v ) {

    	const data = flatten( v, this.size, 9 );

    	gl.uniformMatrix3fv( this.addr, false, data );

    }

    function setValueM4Array( gl, v ) {

    	const data = flatten( v, this.size, 16 );

    	gl.uniformMatrix4fv( this.addr, false, data );

    }

    // Array of integer / boolean

    function setValueV1iArray( gl, v ) {

    	gl.uniform1iv( this.addr, v );

    }

    // Array of integer / boolean vectors (from flat array)

    function setValueV2iArray( gl, v ) {

    	gl.uniform2iv( this.addr, v );

    }

    function setValueV3iArray( gl, v ) {

    	gl.uniform3iv( this.addr, v );

    }

    function setValueV4iArray( gl, v ) {

    	gl.uniform4iv( this.addr, v );

    }

    // Array of unsigned integer

    function setValueV1uiArray( gl, v ) {

    	gl.uniform1uiv( this.addr, v );

    }

    // Array of unsigned integer vectors (from flat array)

    function setValueV2uiArray( gl, v ) {

    	gl.uniform2uiv( this.addr, v );

    }

    function setValueV3uiArray( gl, v ) {

    	gl.uniform3uiv( this.addr, v );

    }

    function setValueV4uiArray( gl, v ) {

    	gl.uniform4uiv( this.addr, v );

    }


    // Array of textures (2D / 3D / Cube / 2DArray)

    function setValueT1Array( gl, v, textures ) {

    	const n = v.length;

    	const units = allocTexUnits( textures, n );

    	gl.uniform1iv( this.addr, units );

    	for ( let i = 0; i !== n; ++ i ) {

    		textures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

    	}

    }

    function setValueT3DArray( gl, v, textures ) {

    	const n = v.length;

    	const units = allocTexUnits( textures, n );

    	gl.uniform1iv( this.addr, units );

    	for ( let i = 0; i !== n; ++ i ) {

    		textures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );

    	}

    }

    function setValueT6Array( gl, v, textures ) {

    	const n = v.length;

    	const units = allocTexUnits( textures, n );

    	gl.uniform1iv( this.addr, units );

    	for ( let i = 0; i !== n; ++ i ) {

    		textures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

    	}

    }

    function setValueT2DArrayArray( gl, v, textures ) {

    	const n = v.length;

    	const units = allocTexUnits( textures, n );

    	gl.uniform1iv( this.addr, units );

    	for ( let i = 0; i !== n; ++ i ) {

    		textures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );

    	}

    }


    // Helper to pick the right setter for a pure (bottom-level) array

    function getPureArraySetter( type ) {

    	switch ( type ) {

    		case 0x1406: return setValueV1fArray; // FLOAT
    		case 0x8b50: return setValueV2fArray; // _VEC2
    		case 0x8b51: return setValueV3fArray; // _VEC3
    		case 0x8b52: return setValueV4fArray; // _VEC4

    		case 0x8b5a: return setValueM2Array; // _MAT2
    		case 0x8b5b: return setValueM3Array; // _MAT3
    		case 0x8b5c: return setValueM4Array; // _MAT4

    		case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
    		case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
    		case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
    		case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

    		case 0x1405: return setValueV1uiArray; // UINT
    		case 0x8dc6: return setValueV2uiArray; // _VEC2
    		case 0x8dc7: return setValueV3uiArray; // _VEC3
    		case 0x8dc8: return setValueV4uiArray; // _VEC4

    		case 0x8b5e: // SAMPLER_2D
    		case 0x8d66: // SAMPLER_EXTERNAL_OES
    		case 0x8dca: // INT_SAMPLER_2D
    		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
    		case 0x8b62: // SAMPLER_2D_SHADOW
    			return setValueT1Array;

    		case 0x8b5f: // SAMPLER_3D
    		case 0x8dcb: // INT_SAMPLER_3D
    		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
    			return setValueT3DArray;

    		case 0x8b60: // SAMPLER_CUBE
    		case 0x8dcc: // INT_SAMPLER_CUBE
    		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
    		case 0x8dc5: // SAMPLER_CUBE_SHADOW
    			return setValueT6Array;

    		case 0x8dc1: // SAMPLER_2D_ARRAY
    		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
    		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
    		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
    			return setValueT2DArrayArray;

    	}

    }

    // --- Uniform Classes ---

    class SingleUniform {

    	constructor( id, activeInfo, addr ) {

    		this.id = id;
    		this.addr = addr;
    		this.cache = [];
    		this.setValue = getSingularSetter( activeInfo.type );

    		// this.path = activeInfo.name; // DEBUG

    	}

    }

    class PureArrayUniform {

    	constructor( id, activeInfo, addr ) {

    		this.id = id;
    		this.addr = addr;
    		this.cache = [];
    		this.size = activeInfo.size;
    		this.setValue = getPureArraySetter( activeInfo.type );

    		// this.path = activeInfo.name; // DEBUG

    	}

    }

    class StructuredUniform {

    	constructor( id ) {

    		this.id = id;

    		this.seq = [];
    		this.map = {};

    	}

    	setValue( gl, value, textures ) {

    		const seq = this.seq;

    		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

    			const u = seq[ i ];
    			u.setValue( gl, value[ u.id ], textures );

    		}

    	}

    }

    // --- Top-level ---

    // Parser - builds up the property tree from the path strings

    const RePathPart = /(\w+)(\])?(\[|\.)?/g;

    // extracts
    // 	- the identifier (member name or array index)
    //  - followed by an optional right bracket (found when array index)
    //  - followed by an optional left bracket or dot (type of subscript)
    //
    // Note: These portions can be read in a non-overlapping fashion and
    // allow straightforward parsing of the hierarchy that WebGL encodes
    // in the uniform names.

    function addUniform( container, uniformObject ) {

    	container.seq.push( uniformObject );
    	container.map[ uniformObject.id ] = uniformObject;

    }

    function parseUniform( activeInfo, addr, container ) {

    	const path = activeInfo.name,
    		pathLength = path.length;

    	// reset RegExp object, because of the early exit of a previous run
    	RePathPart.lastIndex = 0;

    	while ( true ) {

    		const match = RePathPart.exec( path ),
    			matchEnd = RePathPart.lastIndex;

    		let id = match[ 1 ];
    		const idIsIndex = match[ 2 ] === ']',
    			subscript = match[ 3 ];

    		if ( idIsIndex ) id = id | 0; // convert to integer

    		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

    			// bare name or "pure" bottom-level array "[0]" suffix

    			addUniform( container, subscript === undefined ?
    				new SingleUniform( id, activeInfo, addr ) :
    				new PureArrayUniform( id, activeInfo, addr ) );

    			break;

    		} else {

    			// step into inner node / create it in case it doesn't exist

    			const map = container.map;
    			let next = map[ id ];

    			if ( next === undefined ) {

    				next = new StructuredUniform( id );
    				addUniform( container, next );

    			}

    			container = next;

    		}

    	}

    }

    // Root Container

    class WebGLUniforms {

    	constructor( gl, program ) {

    		this.seq = [];
    		this.map = {};

    		const n = gl.getProgramParameter( program, 35718 );

    		for ( let i = 0; i < n; ++ i ) {

    			const info = gl.getActiveUniform( program, i ),
    				addr = gl.getUniformLocation( program, info.name );

    			parseUniform( info, addr, this );

    		}

    	}

    	setValue( gl, name, value, textures ) {

    		const u = this.map[ name ];

    		if ( u !== undefined ) u.setValue( gl, value, textures );

    	}

    	setOptional( gl, object, name ) {

    		const v = object[ name ];

    		if ( v !== undefined ) this.setValue( gl, name, v );

    	}

    	static upload( gl, seq, values, textures ) {

    		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

    			const u = seq[ i ],
    				v = values[ u.id ];

    			if ( v.needsUpdate !== false ) {

    				// note: always updating when .needsUpdate is undefined
    				u.setValue( gl, v.value, textures );

    			}

    		}

    	}

    	static seqWithValue( seq, values ) {

    		const r = [];

    		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

    			const u = seq[ i ];
    			if ( u.id in values ) r.push( u );

    		}

    		return r;

    	}

    }

    function WebGLShader( gl, type, string ) {

    	const shader = gl.createShader( type );

    	gl.shaderSource( shader, string );
    	gl.compileShader( shader );

    	return shader;

    }

    let programIdCount = 0;

    function handleSource( string, errorLine ) {

    	const lines = string.split( '\n' );
    	const lines2 = [];

    	const from = Math.max( errorLine - 6, 0 );
    	const to = Math.min( errorLine + 6, lines.length );

    	for ( let i = from; i < to; i ++ ) {

    		const line = i + 1;
    		lines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );

    	}

    	return lines2.join( '\n' );

    }

    function getEncodingComponents( encoding ) {

    	switch ( encoding ) {

    		case LinearEncoding:
    			return [ 'Linear', '( value )' ];
    		case sRGBEncoding:
    			return [ 'sRGB', '( value )' ];
    		default:
    			console.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );
    			return [ 'Linear', '( value )' ];

    	}

    }

    function getShaderErrors( gl, shader, type ) {

    	const status = gl.getShaderParameter( shader, 35713 );
    	const errors = gl.getShaderInfoLog( shader ).trim();

    	if ( status && errors === '' ) return '';

    	const errorMatches = /ERROR: 0:(\d+)/.exec( errors );
    	if ( errorMatches ) {

    		// --enable-privileged-webgl-extension
    		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

    		const errorLine = parseInt( errorMatches[ 1 ] );
    		return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource( gl.getShaderSource( shader ), errorLine );

    	} else {

    		return errors;

    	}

    }

    function getTexelEncodingFunction( functionName, encoding ) {

    	const components = getEncodingComponents( encoding );
    	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

    }

    function getToneMappingFunction( functionName, toneMapping ) {

    	let toneMappingName;

    	switch ( toneMapping ) {

    		case LinearToneMapping:
    			toneMappingName = 'Linear';
    			break;

    		case ReinhardToneMapping:
    			toneMappingName = 'Reinhard';
    			break;

    		case CineonToneMapping:
    			toneMappingName = 'OptimizedCineon';
    			break;

    		case ACESFilmicToneMapping:
    			toneMappingName = 'ACESFilmic';
    			break;

    		case CustomToneMapping:
    			toneMappingName = 'Custom';
    			break;

    		default:
    			console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );
    			toneMappingName = 'Linear';

    	}

    	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

    }

    function generateExtensions( parameters ) {

    	const chunks = [
    		( parameters.extensionDerivatives || !! parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',
    		( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
    		( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',
    		( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
    	];

    	return chunks.filter( filterEmptyLine ).join( '\n' );

    }

    function generateDefines( defines ) {

    	const chunks = [];

    	for ( const name in defines ) {

    		const value = defines[ name ];

    		if ( value === false ) continue;

    		chunks.push( '#define ' + name + ' ' + value );

    	}

    	return chunks.join( '\n' );

    }

    function fetchAttributeLocations( gl, program ) {

    	const attributes = {};

    	const n = gl.getProgramParameter( program, 35721 );

    	for ( let i = 0; i < n; i ++ ) {

    		const info = gl.getActiveAttrib( program, i );
    		const name = info.name;

    		let locationSize = 1;
    		if ( info.type === 35674 ) locationSize = 2;
    		if ( info.type === 35675 ) locationSize = 3;
    		if ( info.type === 35676 ) locationSize = 4;

    		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

    		attributes[ name ] = {
    			type: info.type,
    			location: gl.getAttribLocation( program, name ),
    			locationSize: locationSize
    		};

    	}

    	return attributes;

    }

    function filterEmptyLine( string ) {

    	return string !== '';

    }

    function replaceLightNums( string, parameters ) {

    	return string
    		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
    		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
    		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
    		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
    		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
    		.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
    		.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
    		.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

    }

    function replaceClippingPlaneNums( string, parameters ) {

    	return string
    		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
    		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

    }

    // Resolve Includes

    const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

    function resolveIncludes( string ) {

    	return string.replace( includePattern, includeReplacer );

    }

    function includeReplacer( match, include ) {

    	const string = ShaderChunk[ include ];

    	if ( string === undefined ) {

    		throw new Error( 'Can not resolve #include <' + include + '>' );

    	}

    	return resolveIncludes( string );

    }

    // Unroll Loops

    const deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
    const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

    function unrollLoops( string ) {

    	return string
    		.replace( unrollLoopPattern, loopReplacer )
    		.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );

    }

    function deprecatedLoopReplacer( match, start, end, snippet ) {

    	console.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );
    	return loopReplacer( match, start, end, snippet );

    }

    function loopReplacer( match, start, end, snippet ) {

    	let string = '';

    	for ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {

    		string += snippet
    			.replace( /\[\s*i\s*\]/g, '[ ' + i + ' ]' )
    			.replace( /UNROLLED_LOOP_INDEX/g, i );

    	}

    	return string;

    }

    //

    function generatePrecision( parameters ) {

    	let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';

    	if ( parameters.precision === 'highp' ) {

    		precisionstring += '\n#define HIGH_PRECISION';

    	} else if ( parameters.precision === 'mediump' ) {

    		precisionstring += '\n#define MEDIUM_PRECISION';

    	} else if ( parameters.precision === 'lowp' ) {

    		precisionstring += '\n#define LOW_PRECISION';

    	}

    	return precisionstring;

    }

    function generateShadowMapTypeDefine( parameters ) {

    	let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

    	if ( parameters.shadowMapType === PCFShadowMap ) {

    		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

    	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

    		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

    	} else if ( parameters.shadowMapType === VSMShadowMap ) {

    		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

    	}

    	return shadowMapTypeDefine;

    }

    function generateEnvMapTypeDefine( parameters ) {

    	let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

    	if ( parameters.envMap ) {

    		switch ( parameters.envMapMode ) {

    			case CubeReflectionMapping:
    			case CubeRefractionMapping:
    				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
    				break;

    			case CubeUVReflectionMapping:
    				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
    				break;

    		}

    	}

    	return envMapTypeDefine;

    }

    function generateEnvMapModeDefine( parameters ) {

    	let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

    	if ( parameters.envMap ) {

    		switch ( parameters.envMapMode ) {

    			case CubeRefractionMapping:

    				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
    				break;

    		}

    	}

    	return envMapModeDefine;

    }

    function generateEnvMapBlendingDefine( parameters ) {

    	let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

    	if ( parameters.envMap ) {

    		switch ( parameters.combine ) {

    			case MultiplyOperation:
    				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
    				break;

    			case MixOperation:
    				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
    				break;

    			case AddOperation:
    				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
    				break;

    		}

    	}

    	return envMapBlendingDefine;

    }

    function generateCubeUVSize( parameters ) {

    	const imageHeight = parameters.envMapCubeUVHeight;

    	if ( imageHeight === null ) return null;

    	const maxMip = Math.log2( imageHeight ) - 2;

    	const texelHeight = 1.0 / imageHeight;

    	const texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );

    	return { texelWidth, texelHeight, maxMip };

    }

    function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {

    	// TODO Send this event to Three.js DevTools
    	// console.log( 'WebGLProgram', cacheKey );

    	const gl = renderer.getContext();

    	const defines = parameters.defines;

    	let vertexShader = parameters.vertexShader;
    	let fragmentShader = parameters.fragmentShader;

    	const shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
    	const envMapTypeDefine = generateEnvMapTypeDefine( parameters );
    	const envMapModeDefine = generateEnvMapModeDefine( parameters );
    	const envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );
    	const envMapCubeUVSize = generateCubeUVSize( parameters );

    	const customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );

    	const customDefines = generateDefines( defines );

    	const program = gl.createProgram();

    	let prefixVertex, prefixFragment;
    	let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';

    	if ( parameters.isRawShaderMaterial ) {

    		prefixVertex = [

    			customDefines

    		].filter( filterEmptyLine ).join( '\n' );

    		if ( prefixVertex.length > 0 ) {

    			prefixVertex += '\n';

    		}

    		prefixFragment = [

    			customExtensions,
    			customDefines

    		].filter( filterEmptyLine ).join( '\n' );

    		if ( prefixFragment.length > 0 ) {

    			prefixFragment += '\n';

    		}

    	} else {

    		prefixVertex = [

    			generatePrecision( parameters ),

    			'#define SHADER_NAME ' + parameters.shaderName,

    			customDefines,

    			parameters.instancing ? '#define USE_INSTANCING' : '',
    			parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',

    			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

    			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
    			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

    			parameters.map ? '#define USE_MAP' : '',
    			parameters.envMap ? '#define USE_ENVMAP' : '',
    			parameters.envMap ? '#define ' + envMapModeDefine : '',
    			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
    			parameters.aoMap ? '#define USE_AOMAP' : '',
    			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
    			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
    			parameters.normalMap ? '#define USE_NORMALMAP' : '',
    			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
    			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',

    			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
    			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
    			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

    			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
    			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

    			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',

    			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
    			parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
    			parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',

    			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
    			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
    			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

    			parameters.transmission ? '#define USE_TRANSMISSION' : '',
    			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
    			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

    			parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
    			parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',

    			parameters.vertexTangents ? '#define USE_TANGENT' : '',
    			parameters.vertexColors ? '#define USE_COLOR' : '',
    			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
    			parameters.vertexUvs ? '#define USE_UV' : '',
    			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

    			parameters.flatShading ? '#define FLAT_SHADED' : '',

    			parameters.skinning ? '#define USE_SKINNING' : '',

    			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
    			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
    			( parameters.morphColors && parameters.isWebGL2 ) ? '#define USE_MORPHCOLORS' : '',
    			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',
    			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',
    			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
    			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
    			parameters.flipSided ? '#define FLIP_SIDED' : '',

    			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
    			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

    			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

    			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
    			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

    			'uniform mat4 modelMatrix;',
    			'uniform mat4 modelViewMatrix;',
    			'uniform mat4 projectionMatrix;',
    			'uniform mat4 viewMatrix;',
    			'uniform mat3 normalMatrix;',
    			'uniform vec3 cameraPosition;',
    			'uniform bool isOrthographic;',

    			'#ifdef USE_INSTANCING',

    			'	attribute mat4 instanceMatrix;',

    			'#endif',

    			'#ifdef USE_INSTANCING_COLOR',

    			'	attribute vec3 instanceColor;',

    			'#endif',

    			'attribute vec3 position;',
    			'attribute vec3 normal;',
    			'attribute vec2 uv;',

    			'#ifdef USE_TANGENT',

    			'	attribute vec4 tangent;',

    			'#endif',

    			'#if defined( USE_COLOR_ALPHA )',

    			'	attribute vec4 color;',

    			'#elif defined( USE_COLOR )',

    			'	attribute vec3 color;',

    			'#endif',

    			'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',

    			'	attribute vec3 morphTarget0;',
    			'	attribute vec3 morphTarget1;',
    			'	attribute vec3 morphTarget2;',
    			'	attribute vec3 morphTarget3;',

    			'	#ifdef USE_MORPHNORMALS',

    			'		attribute vec3 morphNormal0;',
    			'		attribute vec3 morphNormal1;',
    			'		attribute vec3 morphNormal2;',
    			'		attribute vec3 morphNormal3;',

    			'	#else',

    			'		attribute vec3 morphTarget4;',
    			'		attribute vec3 morphTarget5;',
    			'		attribute vec3 morphTarget6;',
    			'		attribute vec3 morphTarget7;',

    			'	#endif',

    			'#endif',

    			'#ifdef USE_SKINNING',

    			'	attribute vec4 skinIndex;',
    			'	attribute vec4 skinWeight;',

    			'#endif',

    			'\n'

    		].filter( filterEmptyLine ).join( '\n' );

    		prefixFragment = [

    			customExtensions,

    			generatePrecision( parameters ),

    			'#define SHADER_NAME ' + parameters.shaderName,

    			customDefines,

    			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
    			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

    			parameters.map ? '#define USE_MAP' : '',
    			parameters.matcap ? '#define USE_MATCAP' : '',
    			parameters.envMap ? '#define USE_ENVMAP' : '',
    			parameters.envMap ? '#define ' + envMapTypeDefine : '',
    			parameters.envMap ? '#define ' + envMapModeDefine : '',
    			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
    			envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',
    			envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',
    			envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',
    			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
    			parameters.aoMap ? '#define USE_AOMAP' : '',
    			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
    			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
    			parameters.normalMap ? '#define USE_NORMALMAP' : '',
    			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
    			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',

    			parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
    			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
    			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
    			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

    			parameters.iridescence ? '#define USE_IRIDESCENCE' : '',
    			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
    			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

    			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
    			parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
    			parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
    			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
    			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',

    			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
    			parameters.alphaTest ? '#define USE_ALPHATEST' : '',

    			parameters.sheen ? '#define USE_SHEEN' : '',
    			parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
    			parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',

    			parameters.transmission ? '#define USE_TRANSMISSION' : '',
    			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
    			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

    			parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',

    			parameters.vertexTangents ? '#define USE_TANGENT' : '',
    			parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',
    			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
    			parameters.vertexUvs ? '#define USE_UV' : '',
    			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

    			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

    			parameters.flatShading ? '#define FLAT_SHADED' : '',

    			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
    			parameters.flipSided ? '#define FLIP_SIDED' : '',

    			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
    			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

    			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

    			parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

    			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
    			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

    			'uniform mat4 viewMatrix;',
    			'uniform vec3 cameraPosition;',
    			'uniform bool isOrthographic;',

    			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
    			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
    			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

    			parameters.dithering ? '#define DITHERING' : '',
    			parameters.opaque ? '#define OPAQUE' : '',

    			ShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below
    			getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),

    			parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',

    			'\n'

    		].filter( filterEmptyLine ).join( '\n' );

    	}

    	vertexShader = resolveIncludes( vertexShader );
    	vertexShader = replaceLightNums( vertexShader, parameters );
    	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

    	fragmentShader = resolveIncludes( fragmentShader );
    	fragmentShader = replaceLightNums( fragmentShader, parameters );
    	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

    	vertexShader = unrollLoops( vertexShader );
    	fragmentShader = unrollLoops( fragmentShader );

    	if ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {

    		// GLSL 3.0 conversion for built-in materials and ShaderMaterial

    		versionString = '#version 300 es\n';

    		prefixVertex = [
    			'precision mediump sampler2DArray;',
    			'#define attribute in',
    			'#define varying out',
    			'#define texture2D texture'
    		].join( '\n' ) + '\n' + prefixVertex;

    		prefixFragment = [
    			'#define varying in',
    			( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
    			( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',
    			'#define gl_FragDepthEXT gl_FragDepth',
    			'#define texture2D texture',
    			'#define textureCube texture',
    			'#define texture2DProj textureProj',
    			'#define texture2DLodEXT textureLod',
    			'#define texture2DProjLodEXT textureProjLod',
    			'#define textureCubeLodEXT textureLod',
    			'#define texture2DGradEXT textureGrad',
    			'#define texture2DProjGradEXT textureProjGrad',
    			'#define textureCubeGradEXT textureGrad'
    		].join( '\n' ) + '\n' + prefixFragment;

    	}

    	const vertexGlsl = versionString + prefixVertex + vertexShader;
    	const fragmentGlsl = versionString + prefixFragment + fragmentShader;

    	// console.log( '*VERTEX*', vertexGlsl );
    	// console.log( '*FRAGMENT*', fragmentGlsl );

    	const glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
    	const glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );

    	gl.attachShader( program, glVertexShader );
    	gl.attachShader( program, glFragmentShader );

    	// Force a particular attribute to index 0.

    	if ( parameters.index0AttributeName !== undefined ) {

    		gl.bindAttribLocation( program, 0, parameters.index0AttributeName );

    	} else if ( parameters.morphTargets === true ) {

    		// programs with morphTargets displace position out of attribute 0
    		gl.bindAttribLocation( program, 0, 'position' );

    	}

    	gl.linkProgram( program );

    	// check for link errors
    	if ( renderer.debug.checkShaderErrors ) {

    		const programLog = gl.getProgramInfoLog( program ).trim();
    		const vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
    		const fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

    		let runnable = true;
    		let haveDiagnostics = true;

    		if ( gl.getProgramParameter( program, 35714 ) === false ) {

    			runnable = false;

    			const vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
    			const fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

    			console.error(
    				'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +
    				'VALIDATE_STATUS ' + gl.getProgramParameter( program, 35715 ) + '\n\n' +
    				'Program Info Log: ' + programLog + '\n' +
    				vertexErrors + '\n' +
    				fragmentErrors
    			);

    		} else if ( programLog !== '' ) {

    			console.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );

    		} else if ( vertexLog === '' || fragmentLog === '' ) {

    			haveDiagnostics = false;

    		}

    		if ( haveDiagnostics ) {

    			this.diagnostics = {

    				runnable: runnable,

    				programLog: programLog,

    				vertexShader: {

    					log: vertexLog,
    					prefix: prefixVertex

    				},

    				fragmentShader: {

    					log: fragmentLog,
    					prefix: prefixFragment

    				}

    			};

    		}

    	}

    	// Clean up

    	// Crashes in iOS9 and iOS10. #18402
    	// gl.detachShader( program, glVertexShader );
    	// gl.detachShader( program, glFragmentShader );

    	gl.deleteShader( glVertexShader );
    	gl.deleteShader( glFragmentShader );

    	// set up caching for uniform locations

    	let cachedUniforms;

    	this.getUniforms = function () {

    		if ( cachedUniforms === undefined ) {

    			cachedUniforms = new WebGLUniforms( gl, program );

    		}

    		return cachedUniforms;

    	};

    	// set up caching for attribute locations

    	let cachedAttributes;

    	this.getAttributes = function () {

    		if ( cachedAttributes === undefined ) {

    			cachedAttributes = fetchAttributeLocations( gl, program );

    		}

    		return cachedAttributes;

    	};

    	// free resource

    	this.destroy = function () {

    		bindingStates.releaseStatesOfProgram( this );

    		gl.deleteProgram( program );
    		this.program = undefined;

    	};

    	//

    	this.name = parameters.shaderName;
    	this.id = programIdCount ++;
    	this.cacheKey = cacheKey;
    	this.usedTimes = 1;
    	this.program = program;
    	this.vertexShader = glVertexShader;
    	this.fragmentShader = glFragmentShader;

    	return this;

    }

    let _id = 0;

    class WebGLShaderCache {

    	constructor() {

    		this.shaderCache = new Map();
    		this.materialCache = new Map();

    	}

    	update( material ) {

    		const vertexShader = material.vertexShader;
    		const fragmentShader = material.fragmentShader;

    		const vertexShaderStage = this._getShaderStage( vertexShader );
    		const fragmentShaderStage = this._getShaderStage( fragmentShader );

    		const materialShaders = this._getShaderCacheForMaterial( material );

    		if ( materialShaders.has( vertexShaderStage ) === false ) {

    			materialShaders.add( vertexShaderStage );
    			vertexShaderStage.usedTimes ++;

    		}

    		if ( materialShaders.has( fragmentShaderStage ) === false ) {

    			materialShaders.add( fragmentShaderStage );
    			fragmentShaderStage.usedTimes ++;

    		}

    		return this;

    	}

    	remove( material ) {

    		const materialShaders = this.materialCache.get( material );

    		for ( const shaderStage of materialShaders ) {

    			shaderStage.usedTimes --;

    			if ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );

    		}

    		this.materialCache.delete( material );

    		return this;

    	}

    	getVertexShaderID( material ) {

    		return this._getShaderStage( material.vertexShader ).id;

    	}

    	getFragmentShaderID( material ) {

    		return this._getShaderStage( material.fragmentShader ).id;

    	}

    	dispose() {

    		this.shaderCache.clear();
    		this.materialCache.clear();

    	}

    	_getShaderCacheForMaterial( material ) {

    		const cache = this.materialCache;

    		if ( cache.has( material ) === false ) {

    			cache.set( material, new Set() );

    		}

    		return cache.get( material );

    	}

    	_getShaderStage( code ) {

    		const cache = this.shaderCache;

    		if ( cache.has( code ) === false ) {

    			const stage = new WebGLShaderStage( code );
    			cache.set( code, stage );

    		}

    		return cache.get( code );

    	}

    }

    class WebGLShaderStage {

    	constructor( code ) {

    		this.id = _id ++;

    		this.code = code;
    		this.usedTimes = 0;

    	}

    }

    function WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {

    	const _programLayers = new Layers();
    	const _customShaders = new WebGLShaderCache();
    	const programs = [];

    	const isWebGL2 = capabilities.isWebGL2;
    	const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    	const vertexTextures = capabilities.vertexTextures;
    	let precision = capabilities.precision;

    	const shaderIDs = {
    		MeshDepthMaterial: 'depth',
    		MeshDistanceMaterial: 'distanceRGBA',
    		MeshNormalMaterial: 'normal',
    		MeshBasicMaterial: 'basic',
    		MeshLambertMaterial: 'lambert',
    		MeshPhongMaterial: 'phong',
    		MeshToonMaterial: 'toon',
    		MeshStandardMaterial: 'physical',
    		MeshPhysicalMaterial: 'physical',
    		MeshMatcapMaterial: 'matcap',
    		LineBasicMaterial: 'basic',
    		LineDashedMaterial: 'dashed',
    		PointsMaterial: 'points',
    		ShadowMaterial: 'shadow',
    		SpriteMaterial: 'sprite'
    	};

    	function getParameters( material, lights, shadows, scene, object ) {

    		const fog = scene.fog;
    		const geometry = object.geometry;
    		const environment = material.isMeshStandardMaterial ? scene.environment : null;

    		const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
    		const envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;

    		const shaderID = shaderIDs[ material.type ];

    		// heuristics to create shader parameters according to lights in the scene
    		// (not to blow over maxLights budget)

    		if ( material.precision !== null ) {

    			precision = capabilities.getMaxPrecision( material.precision );

    			if ( precision !== material.precision ) {

    				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

    			}

    		}

    		//

    		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

    		let morphTextureStride = 0;

    		if ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;
    		if ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;
    		if ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;

    		//

    		let vertexShader, fragmentShader;
    		let customVertexShaderID, customFragmentShaderID;

    		if ( shaderID ) {

    			const shader = ShaderLib[ shaderID ];

    			vertexShader = shader.vertexShader;
    			fragmentShader = shader.fragmentShader;

    		} else {

    			vertexShader = material.vertexShader;
    			fragmentShader = material.fragmentShader;

    			_customShaders.update( material );

    			customVertexShaderID = _customShaders.getVertexShaderID( material );
    			customFragmentShaderID = _customShaders.getFragmentShaderID( material );

    		}

    		const currentRenderTarget = renderer.getRenderTarget();

    		const useAlphaTest = material.alphaTest > 0;
    		const useClearcoat = material.clearcoat > 0;
    		const useIridescence = material.iridescence > 0;

    		const parameters = {

    			isWebGL2: isWebGL2,

    			shaderID: shaderID,
    			shaderName: material.type,

    			vertexShader: vertexShader,
    			fragmentShader: fragmentShader,
    			defines: material.defines,

    			customVertexShaderID: customVertexShaderID,
    			customFragmentShaderID: customFragmentShaderID,

    			isRawShaderMaterial: material.isRawShaderMaterial === true,
    			glslVersion: material.glslVersion,

    			precision: precision,

    			instancing: object.isInstancedMesh === true,
    			instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,

    			supportsVertexTextures: vertexTextures,
    			outputEncoding: ( currentRenderTarget === null ) ? renderer.outputEncoding : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding ),
    			map: !! material.map,
    			matcap: !! material.matcap,
    			envMap: !! envMap,
    			envMapMode: envMap && envMap.mapping,
    			envMapCubeUVHeight: envMapCubeUVHeight,
    			lightMap: !! material.lightMap,
    			aoMap: !! material.aoMap,
    			emissiveMap: !! material.emissiveMap,
    			bumpMap: !! material.bumpMap,
    			normalMap: !! material.normalMap,
    			objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
    			tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,

    			decodeVideoTexture: !! material.map && ( material.map.isVideoTexture === true ) && ( material.map.encoding === sRGBEncoding ),

    			clearcoat: useClearcoat,
    			clearcoatMap: useClearcoat && !! material.clearcoatMap,
    			clearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,
    			clearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,

    			iridescence: useIridescence,
    			iridescenceMap: useIridescence && !! material.iridescenceMap,
    			iridescenceThicknessMap: useIridescence && !! material.iridescenceThicknessMap,

    			displacementMap: !! material.displacementMap,
    			roughnessMap: !! material.roughnessMap,
    			metalnessMap: !! material.metalnessMap,
    			specularMap: !! material.specularMap,
    			specularIntensityMap: !! material.specularIntensityMap,
    			specularColorMap: !! material.specularColorMap,

    			opaque: material.transparent === false && material.blending === NormalBlending,

    			alphaMap: !! material.alphaMap,
    			alphaTest: useAlphaTest,

    			gradientMap: !! material.gradientMap,

    			sheen: material.sheen > 0,
    			sheenColorMap: !! material.sheenColorMap,
    			sheenRoughnessMap: !! material.sheenRoughnessMap,

    			transmission: material.transmission > 0,
    			transmissionMap: !! material.transmissionMap,
    			thicknessMap: !! material.thicknessMap,

    			combine: material.combine,

    			vertexTangents: ( !! material.normalMap && !! geometry.attributes.tangent ),
    			vertexColors: material.vertexColors,
    			vertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,
    			vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.iridescenceMap || !! material.iridescenceThicknessMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheenColorMap || !! material.sheenRoughnessMap,
    			uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.iridescenceMap || !! material.iridescenceThicknessMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || material.sheen > 0 || !! material.sheenColorMap || !! material.sheenRoughnessMap ) && !! material.displacementMap,

    			fog: !! fog,
    			useFog: material.fog === true,
    			fogExp2: ( fog && fog.isFogExp2 ),

    			flatShading: !! material.flatShading,

    			sizeAttenuation: material.sizeAttenuation,
    			logarithmicDepthBuffer: logarithmicDepthBuffer,

    			skinning: object.isSkinnedMesh === true,

    			morphTargets: geometry.morphAttributes.position !== undefined,
    			morphNormals: geometry.morphAttributes.normal !== undefined,
    			morphColors: geometry.morphAttributes.color !== undefined,
    			morphTargetsCount: morphTargetsCount,
    			morphTextureStride: morphTextureStride,

    			numDirLights: lights.directional.length,
    			numPointLights: lights.point.length,
    			numSpotLights: lights.spot.length,
    			numRectAreaLights: lights.rectArea.length,
    			numHemiLights: lights.hemi.length,

    			numDirLightShadows: lights.directionalShadowMap.length,
    			numPointLightShadows: lights.pointShadowMap.length,
    			numSpotLightShadows: lights.spotShadowMap.length,

    			numClippingPlanes: clipping.numPlanes,
    			numClipIntersection: clipping.numIntersection,

    			dithering: material.dithering,

    			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
    			shadowMapType: renderer.shadowMap.type,

    			toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
    			physicallyCorrectLights: renderer.physicallyCorrectLights,

    			premultipliedAlpha: material.premultipliedAlpha,

    			doubleSided: material.side === DoubleSide,
    			flipSided: material.side === BackSide,

    			useDepthPacking: !! material.depthPacking,
    			depthPacking: material.depthPacking || 0,

    			index0AttributeName: material.index0AttributeName,

    			extensionDerivatives: material.extensions && material.extensions.derivatives,
    			extensionFragDepth: material.extensions && material.extensions.fragDepth,
    			extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
    			extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,

    			rendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),
    			rendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),
    			rendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),

    			customProgramCacheKey: material.customProgramCacheKey()

    		};

    		return parameters;

    	}

    	function getProgramCacheKey( parameters ) {

    		const array = [];

    		if ( parameters.shaderID ) {

    			array.push( parameters.shaderID );

    		} else {

    			array.push( parameters.customVertexShaderID );
    			array.push( parameters.customFragmentShaderID );

    		}

    		if ( parameters.defines !== undefined ) {

    			for ( const name in parameters.defines ) {

    				array.push( name );
    				array.push( parameters.defines[ name ] );

    			}

    		}

    		if ( parameters.isRawShaderMaterial === false ) {

    			getProgramCacheKeyParameters( array, parameters );
    			getProgramCacheKeyBooleans( array, parameters );
    			array.push( renderer.outputEncoding );

    		}

    		array.push( parameters.customProgramCacheKey );

    		return array.join();

    	}

    	function getProgramCacheKeyParameters( array, parameters ) {

    		array.push( parameters.precision );
    		array.push( parameters.outputEncoding );
    		array.push( parameters.envMapMode );
    		array.push( parameters.envMapCubeUVHeight );
    		array.push( parameters.combine );
    		array.push( parameters.vertexUvs );
    		array.push( parameters.fogExp2 );
    		array.push( parameters.sizeAttenuation );
    		array.push( parameters.morphTargetsCount );
    		array.push( parameters.morphAttributeCount );
    		array.push( parameters.numDirLights );
    		array.push( parameters.numPointLights );
    		array.push( parameters.numSpotLights );
    		array.push( parameters.numHemiLights );
    		array.push( parameters.numRectAreaLights );
    		array.push( parameters.numDirLightShadows );
    		array.push( parameters.numPointLightShadows );
    		array.push( parameters.numSpotLightShadows );
    		array.push( parameters.shadowMapType );
    		array.push( parameters.toneMapping );
    		array.push( parameters.numClippingPlanes );
    		array.push( parameters.numClipIntersection );
    		array.push( parameters.depthPacking );

    	}

    	function getProgramCacheKeyBooleans( array, parameters ) {

    		_programLayers.disableAll();

    		if ( parameters.isWebGL2 )
    			_programLayers.enable( 0 );
    		if ( parameters.supportsVertexTextures )
    			_programLayers.enable( 1 );
    		if ( parameters.instancing )
    			_programLayers.enable( 2 );
    		if ( parameters.instancingColor )
    			_programLayers.enable( 3 );
    		if ( parameters.map )
    			_programLayers.enable( 4 );
    		if ( parameters.matcap )
    			_programLayers.enable( 5 );
    		if ( parameters.envMap )
    			_programLayers.enable( 6 );
    		if ( parameters.lightMap )
    			_programLayers.enable( 7 );
    		if ( parameters.aoMap )
    			_programLayers.enable( 8 );
    		if ( parameters.emissiveMap )
    			_programLayers.enable( 9 );
    		if ( parameters.bumpMap )
    			_programLayers.enable( 10 );
    		if ( parameters.normalMap )
    			_programLayers.enable( 11 );
    		if ( parameters.objectSpaceNormalMap )
    			_programLayers.enable( 12 );
    		if ( parameters.tangentSpaceNormalMap )
    			_programLayers.enable( 13 );
    		if ( parameters.clearcoat )
    			_programLayers.enable( 14 );
    		if ( parameters.clearcoatMap )
    			_programLayers.enable( 15 );
    		if ( parameters.clearcoatRoughnessMap )
    			_programLayers.enable( 16 );
    		if ( parameters.clearcoatNormalMap )
    			_programLayers.enable( 17 );
    		if ( parameters.iridescence )
    			_programLayers.enable( 18 );
    		if ( parameters.iridescenceMap )
    			_programLayers.enable( 19 );
    		if ( parameters.iridescenceThicknessMap )
    			_programLayers.enable( 20 );
    		if ( parameters.displacementMap )
    			_programLayers.enable( 21 );
    		if ( parameters.specularMap )
    			_programLayers.enable( 22 );
    		if ( parameters.roughnessMap )
    			_programLayers.enable( 23 );
    		if ( parameters.metalnessMap )
    			_programLayers.enable( 24 );
    		if ( parameters.gradientMap )
    			_programLayers.enable( 25 );
    		if ( parameters.alphaMap )
    			_programLayers.enable( 26 );
    		if ( parameters.alphaTest )
    			_programLayers.enable( 27 );
    		if ( parameters.vertexColors )
    			_programLayers.enable( 28 );
    		if ( parameters.vertexAlphas )
    			_programLayers.enable( 29 );
    		if ( parameters.vertexUvs )
    			_programLayers.enable( 30 );
    		if ( parameters.vertexTangents )
    			_programLayers.enable( 31 );
    		if ( parameters.uvsVertexOnly )
    			_programLayers.enable( 32 );
    		if ( parameters.fog )
    			_programLayers.enable( 33 );

    		array.push( _programLayers.mask );
    		_programLayers.disableAll();

    		if ( parameters.useFog )
    			_programLayers.enable( 0 );
    		if ( parameters.flatShading )
    			_programLayers.enable( 1 );
    		if ( parameters.logarithmicDepthBuffer )
    			_programLayers.enable( 2 );
    		if ( parameters.skinning )
    			_programLayers.enable( 3 );
    		if ( parameters.morphTargets )
    			_programLayers.enable( 4 );
    		if ( parameters.morphNormals )
    			_programLayers.enable( 5 );
    		if ( parameters.morphColors )
    			_programLayers.enable( 6 );
    		if ( parameters.premultipliedAlpha )
    			_programLayers.enable( 7 );
    		if ( parameters.shadowMapEnabled )
    			_programLayers.enable( 8 );
    		if ( parameters.physicallyCorrectLights )
    			_programLayers.enable( 9 );
    		if ( parameters.doubleSided )
    			_programLayers.enable( 10 );
    		if ( parameters.flipSided )
    			_programLayers.enable( 11 );
    		if ( parameters.useDepthPacking )
    			_programLayers.enable( 12 );
    		if ( parameters.dithering )
    			_programLayers.enable( 13 );
    		if ( parameters.specularIntensityMap )
    			_programLayers.enable( 14 );
    		if ( parameters.specularColorMap )
    			_programLayers.enable( 15 );
    		if ( parameters.transmission )
    			_programLayers.enable( 16 );
    		if ( parameters.transmissionMap )
    			_programLayers.enable( 17 );
    		if ( parameters.thicknessMap )
    			_programLayers.enable( 18 );
    		if ( parameters.sheen )
    			_programLayers.enable( 19 );
    		if ( parameters.sheenColorMap )
    			_programLayers.enable( 20 );
    		if ( parameters.sheenRoughnessMap )
    			_programLayers.enable( 21 );
    		if ( parameters.decodeVideoTexture )
    			_programLayers.enable( 22 );
    		if ( parameters.opaque )
    			_programLayers.enable( 23 );

    		array.push( _programLayers.mask );

    	}

    	function getUniforms( material ) {

    		const shaderID = shaderIDs[ material.type ];
    		let uniforms;

    		if ( shaderID ) {

    			const shader = ShaderLib[ shaderID ];
    			uniforms = UniformsUtils.clone( shader.uniforms );

    		} else {

    			uniforms = material.uniforms;

    		}

    		return uniforms;

    	}

    	function acquireProgram( parameters, cacheKey ) {

    		let program;

    		// Check if code has been already compiled
    		for ( let p = 0, pl = programs.length; p < pl; p ++ ) {

    			const preexistingProgram = programs[ p ];

    			if ( preexistingProgram.cacheKey === cacheKey ) {

    				program = preexistingProgram;
    				++ program.usedTimes;

    				break;

    			}

    		}

    		if ( program === undefined ) {

    			program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );
    			programs.push( program );

    		}

    		return program;

    	}

    	function releaseProgram( program ) {

    		if ( -- program.usedTimes === 0 ) {

    			// Remove from unordered set
    			const i = programs.indexOf( program );
    			programs[ i ] = programs[ programs.length - 1 ];
    			programs.pop();

    			// Free WebGL resources
    			program.destroy();

    		}

    	}

    	function releaseShaderCache( material ) {

    		_customShaders.remove( material );

    	}

    	function dispose() {

    		_customShaders.dispose();

    	}

    	return {
    		getParameters: getParameters,
    		getProgramCacheKey: getProgramCacheKey,
    		getUniforms: getUniforms,
    		acquireProgram: acquireProgram,
    		releaseProgram: releaseProgram,
    		releaseShaderCache: releaseShaderCache,
    		// Exposed for resource monitoring & error feedback via renderer.info:
    		programs: programs,
    		dispose: dispose
    	};

    }

    function WebGLProperties() {

    	let properties = new WeakMap();

    	function get( object ) {

    		let map = properties.get( object );

    		if ( map === undefined ) {

    			map = {};
    			properties.set( object, map );

    		}

    		return map;

    	}

    	function remove( object ) {

    		properties.delete( object );

    	}

    	function update( object, key, value ) {

    		properties.get( object )[ key ] = value;

    	}

    	function dispose() {

    		properties = new WeakMap();

    	}

    	return {
    		get: get,
    		remove: remove,
    		update: update,
    		dispose: dispose
    	};

    }

    function painterSortStable( a, b ) {

    	if ( a.groupOrder !== b.groupOrder ) {

    		return a.groupOrder - b.groupOrder;

    	} else if ( a.renderOrder !== b.renderOrder ) {

    		return a.renderOrder - b.renderOrder;

    	} else if ( a.material.id !== b.material.id ) {

    		return a.material.id - b.material.id;

    	} else if ( a.z !== b.z ) {

    		return a.z - b.z;

    	} else {

    		return a.id - b.id;

    	}

    }

    function reversePainterSortStable( a, b ) {

    	if ( a.groupOrder !== b.groupOrder ) {

    		return a.groupOrder - b.groupOrder;

    	} else if ( a.renderOrder !== b.renderOrder ) {

    		return a.renderOrder - b.renderOrder;

    	} else if ( a.z !== b.z ) {

    		return b.z - a.z;

    	} else {

    		return a.id - b.id;

    	}

    }


    function WebGLRenderList() {

    	const renderItems = [];
    	let renderItemsIndex = 0;

    	const opaque = [];
    	const transmissive = [];
    	const transparent = [];

    	function init() {

    		renderItemsIndex = 0;

    		opaque.length = 0;
    		transmissive.length = 0;
    		transparent.length = 0;

    	}

    	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

    		let renderItem = renderItems[ renderItemsIndex ];

    		if ( renderItem === undefined ) {

    			renderItem = {
    				id: object.id,
    				object: object,
    				geometry: geometry,
    				material: material,
    				groupOrder: groupOrder,
    				renderOrder: object.renderOrder,
    				z: z,
    				group: group
    			};

    			renderItems[ renderItemsIndex ] = renderItem;

    		} else {

    			renderItem.id = object.id;
    			renderItem.object = object;
    			renderItem.geometry = geometry;
    			renderItem.material = material;
    			renderItem.groupOrder = groupOrder;
    			renderItem.renderOrder = object.renderOrder;
    			renderItem.z = z;
    			renderItem.group = group;

    		}

    		renderItemsIndex ++;

    		return renderItem;

    	}

    	function push( object, geometry, material, groupOrder, z, group ) {

    		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

    		if ( material.transmission > 0.0 ) {

    			transmissive.push( renderItem );

    		} else if ( material.transparent === true ) {

    			transparent.push( renderItem );

    		} else {

    			opaque.push( renderItem );

    		}

    	}

    	function unshift( object, geometry, material, groupOrder, z, group ) {

    		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

    		if ( material.transmission > 0.0 ) {

    			transmissive.unshift( renderItem );

    		} else if ( material.transparent === true ) {

    			transparent.unshift( renderItem );

    		} else {

    			opaque.unshift( renderItem );

    		}

    	}

    	function sort( customOpaqueSort, customTransparentSort ) {

    		if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );
    		if ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );
    		if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );

    	}

    	function finish() {

    		// Clear references from inactive renderItems in the list

    		for ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {

    			const renderItem = renderItems[ i ];

    			if ( renderItem.id === null ) break;

    			renderItem.id = null;
    			renderItem.object = null;
    			renderItem.geometry = null;
    			renderItem.material = null;
    			renderItem.group = null;

    		}

    	}

    	return {

    		opaque: opaque,
    		transmissive: transmissive,
    		transparent: transparent,

    		init: init,
    		push: push,
    		unshift: unshift,
    		finish: finish,

    		sort: sort
    	};

    }

    function WebGLRenderLists() {

    	let lists = new WeakMap();

    	function get( scene, renderCallDepth ) {

    		let list;

    		if ( lists.has( scene ) === false ) {

    			list = new WebGLRenderList();
    			lists.set( scene, [ list ] );

    		} else {

    			if ( renderCallDepth >= lists.get( scene ).length ) {

    				list = new WebGLRenderList();
    				lists.get( scene ).push( list );

    			} else {

    				list = lists.get( scene )[ renderCallDepth ];

    			}

    		}

    		return list;

    	}

    	function dispose() {

    		lists = new WeakMap();

    	}

    	return {
    		get: get,
    		dispose: dispose
    	};

    }

    function UniformsCache() {

    	const lights = {};

    	return {

    		get: function ( light ) {

    			if ( lights[ light.id ] !== undefined ) {

    				return lights[ light.id ];

    			}

    			let uniforms;

    			switch ( light.type ) {

    				case 'DirectionalLight':
    					uniforms = {
    						direction: new Vector3(),
    						color: new Color()
    					};
    					break;

    				case 'SpotLight':
    					uniforms = {
    						position: new Vector3(),
    						direction: new Vector3(),
    						color: new Color(),
    						distance: 0,
    						coneCos: 0,
    						penumbraCos: 0,
    						decay: 0
    					};
    					break;

    				case 'PointLight':
    					uniforms = {
    						position: new Vector3(),
    						color: new Color(),
    						distance: 0,
    						decay: 0
    					};
    					break;

    				case 'HemisphereLight':
    					uniforms = {
    						direction: new Vector3(),
    						skyColor: new Color(),
    						groundColor: new Color()
    					};
    					break;

    				case 'RectAreaLight':
    					uniforms = {
    						color: new Color(),
    						position: new Vector3(),
    						halfWidth: new Vector3(),
    						halfHeight: new Vector3()
    					};
    					break;

    			}

    			lights[ light.id ] = uniforms;

    			return uniforms;

    		}

    	};

    }

    function ShadowUniformsCache() {

    	const lights = {};

    	return {

    		get: function ( light ) {

    			if ( lights[ light.id ] !== undefined ) {

    				return lights[ light.id ];

    			}

    			let uniforms;

    			switch ( light.type ) {

    				case 'DirectionalLight':
    					uniforms = {
    						shadowBias: 0,
    						shadowNormalBias: 0,
    						shadowRadius: 1,
    						shadowMapSize: new Vector2()
    					};
    					break;

    				case 'SpotLight':
    					uniforms = {
    						shadowBias: 0,
    						shadowNormalBias: 0,
    						shadowRadius: 1,
    						shadowMapSize: new Vector2()
    					};
    					break;

    				case 'PointLight':
    					uniforms = {
    						shadowBias: 0,
    						shadowNormalBias: 0,
    						shadowRadius: 1,
    						shadowMapSize: new Vector2(),
    						shadowCameraNear: 1,
    						shadowCameraFar: 1000
    					};
    					break;

    				// TODO (abelnation): set RectAreaLight shadow uniforms

    			}

    			lights[ light.id ] = uniforms;

    			return uniforms;

    		}

    	};

    }



    let nextVersion = 0;

    function shadowCastingLightsFirst( lightA, lightB ) {

    	return ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );

    }

    function WebGLLights( extensions, capabilities ) {

    	const cache = new UniformsCache();

    	const shadowCache = ShadowUniformsCache();

    	const state = {

    		version: 0,

    		hash: {
    			directionalLength: - 1,
    			pointLength: - 1,
    			spotLength: - 1,
    			rectAreaLength: - 1,
    			hemiLength: - 1,

    			numDirectionalShadows: - 1,
    			numPointShadows: - 1,
    			numSpotShadows: - 1
    		},

    		ambient: [ 0, 0, 0 ],
    		probe: [],
    		directional: [],
    		directionalShadow: [],
    		directionalShadowMap: [],
    		directionalShadowMatrix: [],
    		spot: [],
    		spotShadow: [],
    		spotShadowMap: [],
    		spotShadowMatrix: [],
    		rectArea: [],
    		rectAreaLTC1: null,
    		rectAreaLTC2: null,
    		point: [],
    		pointShadow: [],
    		pointShadowMap: [],
    		pointShadowMatrix: [],
    		hemi: []

    	};

    	for ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );

    	const vector3 = new Vector3();
    	const matrix4 = new Matrix4();
    	const matrix42 = new Matrix4();

    	function setup( lights, physicallyCorrectLights ) {

    		let r = 0, g = 0, b = 0;

    		for ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );

    		let directionalLength = 0;
    		let pointLength = 0;
    		let spotLength = 0;
    		let rectAreaLength = 0;
    		let hemiLength = 0;

    		let numDirectionalShadows = 0;
    		let numPointShadows = 0;
    		let numSpotShadows = 0;

    		lights.sort( shadowCastingLightsFirst );

    		// artist-friendly light intensity scaling factor
    		const scaleFactor = ( physicallyCorrectLights !== true ) ? Math.PI : 1;

    		for ( let i = 0, l = lights.length; i < l; i ++ ) {

    			const light = lights[ i ];

    			const color = light.color;
    			const intensity = light.intensity;
    			const distance = light.distance;

    			const shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

    			if ( light.isAmbientLight ) {

    				r += color.r * intensity * scaleFactor;
    				g += color.g * intensity * scaleFactor;
    				b += color.b * intensity * scaleFactor;

    			} else if ( light.isLightProbe ) {

    				for ( let j = 0; j < 9; j ++ ) {

    					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

    				}

    			} else if ( light.isDirectionalLight ) {

    				const uniforms = cache.get( light );

    				uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );

    				if ( light.castShadow ) {

    					const shadow = light.shadow;

    					const shadowUniforms = shadowCache.get( light );

    					shadowUniforms.shadowBias = shadow.bias;
    					shadowUniforms.shadowNormalBias = shadow.normalBias;
    					shadowUniforms.shadowRadius = shadow.radius;
    					shadowUniforms.shadowMapSize = shadow.mapSize;

    					state.directionalShadow[ directionalLength ] = shadowUniforms;
    					state.directionalShadowMap[ directionalLength ] = shadowMap;
    					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

    					numDirectionalShadows ++;

    				}

    				state.directional[ directionalLength ] = uniforms;

    				directionalLength ++;

    			} else if ( light.isSpotLight ) {

    				const uniforms = cache.get( light );

    				uniforms.position.setFromMatrixPosition( light.matrixWorld );

    				uniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );
    				uniforms.distance = distance;

    				uniforms.coneCos = Math.cos( light.angle );
    				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
    				uniforms.decay = light.decay;

    				if ( light.castShadow ) {

    					const shadow = light.shadow;

    					const shadowUniforms = shadowCache.get( light );

    					shadowUniforms.shadowBias = shadow.bias;
    					shadowUniforms.shadowNormalBias = shadow.normalBias;
    					shadowUniforms.shadowRadius = shadow.radius;
    					shadowUniforms.shadowMapSize = shadow.mapSize;

    					state.spotShadow[ spotLength ] = shadowUniforms;
    					state.spotShadowMap[ spotLength ] = shadowMap;
    					state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;

    					numSpotShadows ++;

    				}

    				state.spot[ spotLength ] = uniforms;

    				spotLength ++;

    			} else if ( light.isRectAreaLight ) {

    				const uniforms = cache.get( light );

    				// (a) intensity is the total visible light emitted
    				//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );

    				// (b) intensity is the brightness of the light
    				uniforms.color.copy( color ).multiplyScalar( intensity );

    				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
    				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

    				state.rectArea[ rectAreaLength ] = uniforms;

    				rectAreaLength ++;

    			} else if ( light.isPointLight ) {

    				const uniforms = cache.get( light );

    				uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );
    				uniforms.distance = light.distance;
    				uniforms.decay = light.decay;

    				if ( light.castShadow ) {

    					const shadow = light.shadow;

    					const shadowUniforms = shadowCache.get( light );

    					shadowUniforms.shadowBias = shadow.bias;
    					shadowUniforms.shadowNormalBias = shadow.normalBias;
    					shadowUniforms.shadowRadius = shadow.radius;
    					shadowUniforms.shadowMapSize = shadow.mapSize;
    					shadowUniforms.shadowCameraNear = shadow.camera.near;
    					shadowUniforms.shadowCameraFar = shadow.camera.far;

    					state.pointShadow[ pointLength ] = shadowUniforms;
    					state.pointShadowMap[ pointLength ] = shadowMap;
    					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

    					numPointShadows ++;

    				}

    				state.point[ pointLength ] = uniforms;

    				pointLength ++;

    			} else if ( light.isHemisphereLight ) {

    				const uniforms = cache.get( light );

    				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );
    				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );

    				state.hemi[ hemiLength ] = uniforms;

    				hemiLength ++;

    			}

    		}

    		if ( rectAreaLength > 0 ) {

    			if ( capabilities.isWebGL2 ) {

    				// WebGL 2

    				state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
    				state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

    			} else {

    				// WebGL 1

    				if ( extensions.has( 'OES_texture_float_linear' ) === true ) {

    					state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
    					state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

    				} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {

    					state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
    					state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;

    				} else {

    					console.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );

    				}

    			}

    		}

    		state.ambient[ 0 ] = r;
    		state.ambient[ 1 ] = g;
    		state.ambient[ 2 ] = b;

    		const hash = state.hash;

    		if ( hash.directionalLength !== directionalLength ||
    			hash.pointLength !== pointLength ||
    			hash.spotLength !== spotLength ||
    			hash.rectAreaLength !== rectAreaLength ||
    			hash.hemiLength !== hemiLength ||
    			hash.numDirectionalShadows !== numDirectionalShadows ||
    			hash.numPointShadows !== numPointShadows ||
    			hash.numSpotShadows !== numSpotShadows ) {

    			state.directional.length = directionalLength;
    			state.spot.length = spotLength;
    			state.rectArea.length = rectAreaLength;
    			state.point.length = pointLength;
    			state.hemi.length = hemiLength;

    			state.directionalShadow.length = numDirectionalShadows;
    			state.directionalShadowMap.length = numDirectionalShadows;
    			state.pointShadow.length = numPointShadows;
    			state.pointShadowMap.length = numPointShadows;
    			state.spotShadow.length = numSpotShadows;
    			state.spotShadowMap.length = numSpotShadows;
    			state.directionalShadowMatrix.length = numDirectionalShadows;
    			state.pointShadowMatrix.length = numPointShadows;
    			state.spotShadowMatrix.length = numSpotShadows;

    			hash.directionalLength = directionalLength;
    			hash.pointLength = pointLength;
    			hash.spotLength = spotLength;
    			hash.rectAreaLength = rectAreaLength;
    			hash.hemiLength = hemiLength;

    			hash.numDirectionalShadows = numDirectionalShadows;
    			hash.numPointShadows = numPointShadows;
    			hash.numSpotShadows = numSpotShadows;

    			state.version = nextVersion ++;

    		}

    	}

    	function setupView( lights, camera ) {

    		let directionalLength = 0;
    		let pointLength = 0;
    		let spotLength = 0;
    		let rectAreaLength = 0;
    		let hemiLength = 0;

    		const viewMatrix = camera.matrixWorldInverse;

    		for ( let i = 0, l = lights.length; i < l; i ++ ) {

    			const light = lights[ i ];

    			if ( light.isDirectionalLight ) {

    				const uniforms = state.directional[ directionalLength ];

    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
    				vector3.setFromMatrixPosition( light.target.matrixWorld );
    				uniforms.direction.sub( vector3 );
    				uniforms.direction.transformDirection( viewMatrix );

    				directionalLength ++;

    			} else if ( light.isSpotLight ) {

    				const uniforms = state.spot[ spotLength ];

    				uniforms.position.setFromMatrixPosition( light.matrixWorld );
    				uniforms.position.applyMatrix4( viewMatrix );

    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
    				vector3.setFromMatrixPosition( light.target.matrixWorld );
    				uniforms.direction.sub( vector3 );
    				uniforms.direction.transformDirection( viewMatrix );

    				spotLength ++;

    			} else if ( light.isRectAreaLight ) {

    				const uniforms = state.rectArea[ rectAreaLength ];

    				uniforms.position.setFromMatrixPosition( light.matrixWorld );
    				uniforms.position.applyMatrix4( viewMatrix );

    				// extract local rotation of light to derive width/height half vectors
    				matrix42.identity();
    				matrix4.copy( light.matrixWorld );
    				matrix4.premultiply( viewMatrix );
    				matrix42.extractRotation( matrix4 );

    				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
    				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

    				uniforms.halfWidth.applyMatrix4( matrix42 );
    				uniforms.halfHeight.applyMatrix4( matrix42 );

    				rectAreaLength ++;

    			} else if ( light.isPointLight ) {

    				const uniforms = state.point[ pointLength ];

    				uniforms.position.setFromMatrixPosition( light.matrixWorld );
    				uniforms.position.applyMatrix4( viewMatrix );

    				pointLength ++;

    			} else if ( light.isHemisphereLight ) {

    				const uniforms = state.hemi[ hemiLength ];

    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
    				uniforms.direction.transformDirection( viewMatrix );

    				hemiLength ++;

    			}

    		}

    	}

    	return {
    		setup: setup,
    		setupView: setupView,
    		state: state
    	};

    }

    function WebGLRenderState( extensions, capabilities ) {

    	const lights = new WebGLLights( extensions, capabilities );

    	const lightsArray = [];
    	const shadowsArray = [];

    	function init() {

    		lightsArray.length = 0;
    		shadowsArray.length = 0;

    	}

    	function pushLight( light ) {

    		lightsArray.push( light );

    	}

    	function pushShadow( shadowLight ) {

    		shadowsArray.push( shadowLight );

    	}

    	function setupLights( physicallyCorrectLights ) {

    		lights.setup( lightsArray, physicallyCorrectLights );

    	}

    	function setupLightsView( camera ) {

    		lights.setupView( lightsArray, camera );

    	}

    	const state = {
    		lightsArray: lightsArray,
    		shadowsArray: shadowsArray,

    		lights: lights
    	};

    	return {
    		init: init,
    		state: state,
    		setupLights: setupLights,
    		setupLightsView: setupLightsView,

    		pushLight: pushLight,
    		pushShadow: pushShadow
    	};

    }

    function WebGLRenderStates( extensions, capabilities ) {

    	let renderStates = new WeakMap();

    	function get( scene, renderCallDepth = 0 ) {

    		let renderState;

    		if ( renderStates.has( scene ) === false ) {

    			renderState = new WebGLRenderState( extensions, capabilities );
    			renderStates.set( scene, [ renderState ] );

    		} else {

    			if ( renderCallDepth >= renderStates.get( scene ).length ) {

    				renderState = new WebGLRenderState( extensions, capabilities );
    				renderStates.get( scene ).push( renderState );

    			} else {

    				renderState = renderStates.get( scene )[ renderCallDepth ];

    			}

    		}

    		return renderState;

    	}

    	function dispose() {

    		renderStates = new WeakMap();

    	}

    	return {
    		get: get,
    		dispose: dispose
    	};

    }

    class MeshDepthMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isMeshDepthMaterial = true;

    		this.type = 'MeshDepthMaterial';

    		this.depthPacking = BasicDepthPacking;

    		this.map = null;

    		this.alphaMap = null;

    		this.displacementMap = null;
    		this.displacementScale = 1;
    		this.displacementBias = 0;

    		this.wireframe = false;
    		this.wireframeLinewidth = 1;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.depthPacking = source.depthPacking;

    		this.map = source.map;

    		this.alphaMap = source.alphaMap;

    		this.displacementMap = source.displacementMap;
    		this.displacementScale = source.displacementScale;
    		this.displacementBias = source.displacementBias;

    		this.wireframe = source.wireframe;
    		this.wireframeLinewidth = source.wireframeLinewidth;

    		return this;

    	}

    }

    class MeshDistanceMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isMeshDistanceMaterial = true;

    		this.type = 'MeshDistanceMaterial';

    		this.referencePosition = new Vector3();
    		this.nearDistance = 1;
    		this.farDistance = 1000;

    		this.map = null;

    		this.alphaMap = null;

    		this.displacementMap = null;
    		this.displacementScale = 1;
    		this.displacementBias = 0;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.referencePosition.copy( source.referencePosition );
    		this.nearDistance = source.nearDistance;
    		this.farDistance = source.farDistance;

    		this.map = source.map;

    		this.alphaMap = source.alphaMap;

    		this.displacementMap = source.displacementMap;
    		this.displacementScale = source.displacementScale;
    		this.displacementBias = source.displacementBias;

    		return this;

    	}

    }

    const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

    const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

    function WebGLShadowMap( _renderer, _objects, _capabilities ) {

    	let _frustum = new Frustum();

    	const _shadowMapSize = new Vector2(),
    		_viewportSize = new Vector2(),

    		_viewport = new Vector4(),

    		_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),
    		_distanceMaterial = new MeshDistanceMaterial(),

    		_materialCache = {},

    		_maxTextureSize = _capabilities.maxTextureSize;

    	const shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };

    	const shadowMaterialVertical = new ShaderMaterial( {
    		defines: {
    			VSM_SAMPLES: 8
    		},
    		uniforms: {
    			shadow_pass: { value: null },
    			resolution: { value: new Vector2() },
    			radius: { value: 4.0 }
    		},

    		vertexShader: vertex,
    		fragmentShader: fragment

    	} );

    	const shadowMaterialHorizontal = shadowMaterialVertical.clone();
    	shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;

    	const fullScreenTri = new BufferGeometry();
    	fullScreenTri.setAttribute(
    		'position',
    		new BufferAttribute(
    			new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
    			3
    		)
    	);

    	const fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );

    	const scope = this;

    	this.enabled = false;

    	this.autoUpdate = true;
    	this.needsUpdate = false;

    	this.type = PCFShadowMap;

    	this.render = function ( lights, scene, camera ) {

    		if ( scope.enabled === false ) return;
    		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

    		if ( lights.length === 0 ) return;

    		const currentRenderTarget = _renderer.getRenderTarget();
    		const activeCubeFace = _renderer.getActiveCubeFace();
    		const activeMipmapLevel = _renderer.getActiveMipmapLevel();

    		const _state = _renderer.state;

    		// Set GL state for depth map.
    		_state.setBlending( NoBlending );
    		_state.buffers.color.setClear( 1, 1, 1, 1 );
    		_state.buffers.depth.setTest( true );
    		_state.setScissorTest( false );

    		// render depth map

    		for ( let i = 0, il = lights.length; i < il; i ++ ) {

    			const light = lights[ i ];
    			const shadow = light.shadow;

    			if ( shadow === undefined ) {

    				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
    				continue;

    			}

    			if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;

    			_shadowMapSize.copy( shadow.mapSize );

    			const shadowFrameExtents = shadow.getFrameExtents();

    			_shadowMapSize.multiply( shadowFrameExtents );

    			_viewportSize.copy( shadow.mapSize );

    			if ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {

    				if ( _shadowMapSize.x > _maxTextureSize ) {

    					_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );
    					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
    					shadow.mapSize.x = _viewportSize.x;

    				}

    				if ( _shadowMapSize.y > _maxTextureSize ) {

    					_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );
    					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
    					shadow.mapSize.y = _viewportSize.y;

    				}

    			}

    			if ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

    				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );
    				shadow.map.texture.name = light.name + '.shadowMap';

    				shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );

    				shadow.camera.updateProjectionMatrix();

    			}

    			if ( shadow.map === null ) {

    				const pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

    				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
    				shadow.map.texture.name = light.name + '.shadowMap';

    				shadow.camera.updateProjectionMatrix();

    			}

    			_renderer.setRenderTarget( shadow.map );
    			_renderer.clear();

    			const viewportCount = shadow.getViewportCount();

    			for ( let vp = 0; vp < viewportCount; vp ++ ) {

    				const viewport = shadow.getViewport( vp );

    				_viewport.set(
    					_viewportSize.x * viewport.x,
    					_viewportSize.y * viewport.y,
    					_viewportSize.x * viewport.z,
    					_viewportSize.y * viewport.w
    				);

    				_state.viewport( _viewport );

    				shadow.updateMatrices( light, vp );

    				_frustum = shadow.getFrustum();

    				renderObject( scene, camera, shadow.camera, light, this.type );

    			}

    			// do blur pass for VSM

    			if ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

    				VSMPass( shadow, camera );

    			}

    			shadow.needsUpdate = false;

    		}

    		scope.needsUpdate = false;

    		_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

    	};

    	function VSMPass( shadow, camera ) {

    		const geometry = _objects.update( fullScreenMesh );

    		if ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {

    			shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
    			shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;

    			shadowMaterialVertical.needsUpdate = true;
    			shadowMaterialHorizontal.needsUpdate = true;

    		}

    		// vertical pass

    		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
    		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
    		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
    		_renderer.setRenderTarget( shadow.mapPass );
    		_renderer.clear();
    		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

    		// horizontal pass

    		shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
    		shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
    		shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
    		_renderer.setRenderTarget( shadow.map );
    		_renderer.clear();
    		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );

    	}

    	function getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {

    		let result = null;

    		const customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;

    		if ( customMaterial !== undefined ) {

    			result = customMaterial;

    		} else {

    			result = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;

    		}

    		if ( ( _renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 ) ||
    			( material.displacementMap && material.displacementScale !== 0 ) ||
    			( material.alphaMap && material.alphaTest > 0 ) ) {

    			// in this case we need a unique material instance reflecting the
    			// appropriate state

    			const keyA = result.uuid, keyB = material.uuid;

    			let materialsForVariant = _materialCache[ keyA ];

    			if ( materialsForVariant === undefined ) {

    				materialsForVariant = {};
    				_materialCache[ keyA ] = materialsForVariant;

    			}

    			let cachedMaterial = materialsForVariant[ keyB ];

    			if ( cachedMaterial === undefined ) {

    				cachedMaterial = result.clone();
    				materialsForVariant[ keyB ] = cachedMaterial;

    			}

    			result = cachedMaterial;

    		}

    		result.visible = material.visible;
    		result.wireframe = material.wireframe;

    		if ( type === VSMShadowMap ) {

    			result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

    		} else {

    			result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

    		}

    		result.alphaMap = material.alphaMap;
    		result.alphaTest = material.alphaTest;

    		result.clipShadows = material.clipShadows;
    		result.clippingPlanes = material.clippingPlanes;
    		result.clipIntersection = material.clipIntersection;

    		result.displacementMap = material.displacementMap;
    		result.displacementScale = material.displacementScale;
    		result.displacementBias = material.displacementBias;

    		result.wireframeLinewidth = material.wireframeLinewidth;
    		result.linewidth = material.linewidth;

    		if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

    			result.referencePosition.setFromMatrixPosition( light.matrixWorld );
    			result.nearDistance = shadowCameraNear;
    			result.farDistance = shadowCameraFar;

    		}

    		return result;

    	}

    	function renderObject( object, camera, shadowCamera, light, type ) {

    		if ( object.visible === false ) return;

    		const visible = object.layers.test( camera.layers );

    		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

    			if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

    				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

    				const geometry = _objects.update( object );
    				const material = object.material;

    				if ( Array.isArray( material ) ) {

    					const groups = geometry.groups;

    					for ( let k = 0, kl = groups.length; k < kl; k ++ ) {

    						const group = groups[ k ];
    						const groupMaterial = material[ group.materialIndex ];

    						if ( groupMaterial && groupMaterial.visible ) {

    							const depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );

    							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

    						}

    					}

    				} else if ( material.visible ) {

    					const depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );

    					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

    				}

    			}

    		}

    		const children = object.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			renderObject( children[ i ], camera, shadowCamera, light, type );

    		}

    	}

    }

    function WebGLState( gl, extensions, capabilities ) {

    	const isWebGL2 = capabilities.isWebGL2;

    	function ColorBuffer() {

    		let locked = false;

    		const color = new Vector4();
    		let currentColorMask = null;
    		const currentColorClear = new Vector4( 0, 0, 0, 0 );

    		return {

    			setMask: function ( colorMask ) {

    				if ( currentColorMask !== colorMask && ! locked ) {

    					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
    					currentColorMask = colorMask;

    				}

    			},

    			setLocked: function ( lock ) {

    				locked = lock;

    			},

    			setClear: function ( r, g, b, a, premultipliedAlpha ) {

    				if ( premultipliedAlpha === true ) {

    					r *= a; g *= a; b *= a;

    				}

    				color.set( r, g, b, a );

    				if ( currentColorClear.equals( color ) === false ) {

    					gl.clearColor( r, g, b, a );
    					currentColorClear.copy( color );

    				}

    			},

    			reset: function () {

    				locked = false;

    				currentColorMask = null;
    				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

    			}

    		};

    	}

    	function DepthBuffer() {

    		let locked = false;

    		let currentDepthMask = null;
    		let currentDepthFunc = null;
    		let currentDepthClear = null;

    		return {

    			setTest: function ( depthTest ) {

    				if ( depthTest ) {

    					enable( 2929 );

    				} else {

    					disable( 2929 );

    				}

    			},

    			setMask: function ( depthMask ) {

    				if ( currentDepthMask !== depthMask && ! locked ) {

    					gl.depthMask( depthMask );
    					currentDepthMask = depthMask;

    				}

    			},

    			setFunc: function ( depthFunc ) {

    				if ( currentDepthFunc !== depthFunc ) {

    					if ( depthFunc ) {

    						switch ( depthFunc ) {

    							case NeverDepth:

    								gl.depthFunc( 512 );
    								break;

    							case AlwaysDepth:

    								gl.depthFunc( 519 );
    								break;

    							case LessDepth:

    								gl.depthFunc( 513 );
    								break;

    							case LessEqualDepth:

    								gl.depthFunc( 515 );
    								break;

    							case EqualDepth:

    								gl.depthFunc( 514 );
    								break;

    							case GreaterEqualDepth:

    								gl.depthFunc( 518 );
    								break;

    							case GreaterDepth:

    								gl.depthFunc( 516 );
    								break;

    							case NotEqualDepth:

    								gl.depthFunc( 517 );
    								break;

    							default:

    								gl.depthFunc( 515 );

    						}

    					} else {

    						gl.depthFunc( 515 );

    					}

    					currentDepthFunc = depthFunc;

    				}

    			},

    			setLocked: function ( lock ) {

    				locked = lock;

    			},

    			setClear: function ( depth ) {

    				if ( currentDepthClear !== depth ) {

    					gl.clearDepth( depth );
    					currentDepthClear = depth;

    				}

    			},

    			reset: function () {

    				locked = false;

    				currentDepthMask = null;
    				currentDepthFunc = null;
    				currentDepthClear = null;

    			}

    		};

    	}

    	function StencilBuffer() {

    		let locked = false;

    		let currentStencilMask = null;
    		let currentStencilFunc = null;
    		let currentStencilRef = null;
    		let currentStencilFuncMask = null;
    		let currentStencilFail = null;
    		let currentStencilZFail = null;
    		let currentStencilZPass = null;
    		let currentStencilClear = null;

    		return {

    			setTest: function ( stencilTest ) {

    				if ( ! locked ) {

    					if ( stencilTest ) {

    						enable( 2960 );

    					} else {

    						disable( 2960 );

    					}

    				}

    			},

    			setMask: function ( stencilMask ) {

    				if ( currentStencilMask !== stencilMask && ! locked ) {

    					gl.stencilMask( stencilMask );
    					currentStencilMask = stencilMask;

    				}

    			},

    			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

    				if ( currentStencilFunc !== stencilFunc ||
    				     currentStencilRef !== stencilRef ||
    				     currentStencilFuncMask !== stencilMask ) {

    					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

    					currentStencilFunc = stencilFunc;
    					currentStencilRef = stencilRef;
    					currentStencilFuncMask = stencilMask;

    				}

    			},

    			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

    				if ( currentStencilFail !== stencilFail ||
    				     currentStencilZFail !== stencilZFail ||
    				     currentStencilZPass !== stencilZPass ) {

    					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

    					currentStencilFail = stencilFail;
    					currentStencilZFail = stencilZFail;
    					currentStencilZPass = stencilZPass;

    				}

    			},

    			setLocked: function ( lock ) {

    				locked = lock;

    			},

    			setClear: function ( stencil ) {

    				if ( currentStencilClear !== stencil ) {

    					gl.clearStencil( stencil );
    					currentStencilClear = stencil;

    				}

    			},

    			reset: function () {

    				locked = false;

    				currentStencilMask = null;
    				currentStencilFunc = null;
    				currentStencilRef = null;
    				currentStencilFuncMask = null;
    				currentStencilFail = null;
    				currentStencilZFail = null;
    				currentStencilZPass = null;
    				currentStencilClear = null;

    			}

    		};

    	}

    	//

    	const colorBuffer = new ColorBuffer();
    	const depthBuffer = new DepthBuffer();
    	const stencilBuffer = new StencilBuffer();

    	let enabledCapabilities = {};

    	let currentBoundFramebuffers = {};
    	let currentDrawbuffers = new WeakMap();
    	let defaultDrawbuffers = [];

    	let currentProgram = null;

    	let currentBlendingEnabled = false;
    	let currentBlending = null;
    	let currentBlendEquation = null;
    	let currentBlendSrc = null;
    	let currentBlendDst = null;
    	let currentBlendEquationAlpha = null;
    	let currentBlendSrcAlpha = null;
    	let currentBlendDstAlpha = null;
    	let currentPremultipledAlpha = false;

    	let currentFlipSided = null;
    	let currentCullFace = null;

    	let currentLineWidth = null;

    	let currentPolygonOffsetFactor = null;
    	let currentPolygonOffsetUnits = null;

    	const maxTextures = gl.getParameter( 35661 );

    	let lineWidthAvailable = false;
    	let version = 0;
    	const glVersion = gl.getParameter( 7938 );

    	if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

    		version = parseFloat( /^WebGL (\d)/.exec( glVersion )[ 1 ] );
    		lineWidthAvailable = ( version >= 1.0 );

    	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

    		version = parseFloat( /^OpenGL ES (\d)/.exec( glVersion )[ 1 ] );
    		lineWidthAvailable = ( version >= 2.0 );

    	}

    	let currentTextureSlot = null;
    	let currentBoundTextures = {};

    	const scissorParam = gl.getParameter( 3088 );
    	const viewportParam = gl.getParameter( 2978 );

    	const currentScissor = new Vector4().fromArray( scissorParam );
    	const currentViewport = new Vector4().fromArray( viewportParam );

    	function createTexture( type, target, count ) {

    		const data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
    		const texture = gl.createTexture();

    		gl.bindTexture( type, texture );
    		gl.texParameteri( type, 10241, 9728 );
    		gl.texParameteri( type, 10240, 9728 );

    		for ( let i = 0; i < count; i ++ ) {

    			gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );

    		}

    		return texture;

    	}

    	const emptyTextures = {};
    	emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
    	emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );

    	// init

    	colorBuffer.setClear( 0, 0, 0, 1 );
    	depthBuffer.setClear( 1 );
    	stencilBuffer.setClear( 0 );

    	enable( 2929 );
    	depthBuffer.setFunc( LessEqualDepth );

    	setFlipSided( false );
    	setCullFace( CullFaceBack );
    	enable( 2884 );

    	setBlending( NoBlending );

    	//

    	function enable( id ) {

    		if ( enabledCapabilities[ id ] !== true ) {

    			gl.enable( id );
    			enabledCapabilities[ id ] = true;

    		}

    	}

    	function disable( id ) {

    		if ( enabledCapabilities[ id ] !== false ) {

    			gl.disable( id );
    			enabledCapabilities[ id ] = false;

    		}

    	}

    	function bindFramebuffer( target, framebuffer ) {

    		if ( currentBoundFramebuffers[ target ] !== framebuffer ) {

    			gl.bindFramebuffer( target, framebuffer );

    			currentBoundFramebuffers[ target ] = framebuffer;

    			if ( isWebGL2 ) {

    				// 36009 is equivalent to 36160

    				if ( target === 36009 ) {

    					currentBoundFramebuffers[ 36160 ] = framebuffer;

    				}

    				if ( target === 36160 ) {

    					currentBoundFramebuffers[ 36009 ] = framebuffer;

    				}

    			}

    			return true;

    		}

    		return false;

    	}

    	function drawBuffers( renderTarget, framebuffer ) {

    		let drawBuffers = defaultDrawbuffers;

    		let needsUpdate = false;

    		if ( renderTarget ) {

    			drawBuffers = currentDrawbuffers.get( framebuffer );

    			if ( drawBuffers === undefined ) {

    				drawBuffers = [];
    				currentDrawbuffers.set( framebuffer, drawBuffers );

    			}

    			if ( renderTarget.isWebGLMultipleRenderTargets ) {

    				const textures = renderTarget.texture;

    				if ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== 36064 ) {

    					for ( let i = 0, il = textures.length; i < il; i ++ ) {

    						drawBuffers[ i ] = 36064 + i;

    					}

    					drawBuffers.length = textures.length;

    					needsUpdate = true;

    				}

    			} else {

    				if ( drawBuffers[ 0 ] !== 36064 ) {

    					drawBuffers[ 0 ] = 36064;

    					needsUpdate = true;

    				}

    			}

    		} else {

    			if ( drawBuffers[ 0 ] !== 1029 ) {

    				drawBuffers[ 0 ] = 1029;

    				needsUpdate = true;

    			}

    		}

    		if ( needsUpdate ) {

    			if ( capabilities.isWebGL2 ) {

    				gl.drawBuffers( drawBuffers );

    			} else {

    				extensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );

    			}

    		}


    	}

    	function useProgram( program ) {

    		if ( currentProgram !== program ) {

    			gl.useProgram( program );

    			currentProgram = program;

    			return true;

    		}

    		return false;

    	}

    	const equationToGL = {
    		[ AddEquation ]: 32774,
    		[ SubtractEquation ]: 32778,
    		[ ReverseSubtractEquation ]: 32779
    	};

    	if ( isWebGL2 ) {

    		equationToGL[ MinEquation ] = 32775;
    		equationToGL[ MaxEquation ] = 32776;

    	} else {

    		const extension = extensions.get( 'EXT_blend_minmax' );

    		if ( extension !== null ) {

    			equationToGL[ MinEquation ] = extension.MIN_EXT;
    			equationToGL[ MaxEquation ] = extension.MAX_EXT;

    		}

    	}

    	const factorToGL = {
    		[ ZeroFactor ]: 0,
    		[ OneFactor ]: 1,
    		[ SrcColorFactor ]: 768,
    		[ SrcAlphaFactor ]: 770,
    		[ SrcAlphaSaturateFactor ]: 776,
    		[ DstColorFactor ]: 774,
    		[ DstAlphaFactor ]: 772,
    		[ OneMinusSrcColorFactor ]: 769,
    		[ OneMinusSrcAlphaFactor ]: 771,
    		[ OneMinusDstColorFactor ]: 775,
    		[ OneMinusDstAlphaFactor ]: 773
    	};

    	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

    		if ( blending === NoBlending ) {

    			if ( currentBlendingEnabled === true ) {

    				disable( 3042 );
    				currentBlendingEnabled = false;

    			}

    			return;

    		}

    		if ( currentBlendingEnabled === false ) {

    			enable( 3042 );
    			currentBlendingEnabled = true;

    		}

    		if ( blending !== CustomBlending ) {

    			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

    				if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

    					gl.blendEquation( 32774 );

    					currentBlendEquation = AddEquation;
    					currentBlendEquationAlpha = AddEquation;

    				}

    				if ( premultipliedAlpha ) {

    					switch ( blending ) {

    						case NormalBlending:
    							gl.blendFuncSeparate( 1, 771, 1, 771 );
    							break;

    						case AdditiveBlending:
    							gl.blendFunc( 1, 1 );
    							break;

    						case SubtractiveBlending:
    							gl.blendFuncSeparate( 0, 769, 0, 1 );
    							break;

    						case MultiplyBlending:
    							gl.blendFuncSeparate( 0, 768, 0, 770 );
    							break;

    						default:
    							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
    							break;

    					}

    				} else {

    					switch ( blending ) {

    						case NormalBlending:
    							gl.blendFuncSeparate( 770, 771, 1, 771 );
    							break;

    						case AdditiveBlending:
    							gl.blendFunc( 770, 1 );
    							break;

    						case SubtractiveBlending:
    							gl.blendFuncSeparate( 0, 769, 0, 1 );
    							break;

    						case MultiplyBlending:
    							gl.blendFunc( 0, 768 );
    							break;

    						default:
    							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
    							break;

    					}

    				}

    				currentBlendSrc = null;
    				currentBlendDst = null;
    				currentBlendSrcAlpha = null;
    				currentBlendDstAlpha = null;

    				currentBlending = blending;
    				currentPremultipledAlpha = premultipliedAlpha;

    			}

    			return;

    		}

    		// custom blending

    		blendEquationAlpha = blendEquationAlpha || blendEquation;
    		blendSrcAlpha = blendSrcAlpha || blendSrc;
    		blendDstAlpha = blendDstAlpha || blendDst;

    		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

    			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

    			currentBlendEquation = blendEquation;
    			currentBlendEquationAlpha = blendEquationAlpha;

    		}

    		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

    			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

    			currentBlendSrc = blendSrc;
    			currentBlendDst = blendDst;
    			currentBlendSrcAlpha = blendSrcAlpha;
    			currentBlendDstAlpha = blendDstAlpha;

    		}

    		currentBlending = blending;
    		currentPremultipledAlpha = null;

    	}

    	function setMaterial( material, frontFaceCW ) {

    		material.side === DoubleSide
    			? disable( 2884 )
    			: enable( 2884 );

    		let flipSided = ( material.side === BackSide );
    		if ( frontFaceCW ) flipSided = ! flipSided;

    		setFlipSided( flipSided );

    		( material.blending === NormalBlending && material.transparent === false )
    			? setBlending( NoBlending )
    			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

    		depthBuffer.setFunc( material.depthFunc );
    		depthBuffer.setTest( material.depthTest );
    		depthBuffer.setMask( material.depthWrite );
    		colorBuffer.setMask( material.colorWrite );

    		const stencilWrite = material.stencilWrite;
    		stencilBuffer.setTest( stencilWrite );
    		if ( stencilWrite ) {

    			stencilBuffer.setMask( material.stencilWriteMask );
    			stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
    			stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

    		}

    		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

    		material.alphaToCoverage === true
    			? enable( 32926 )
    			: disable( 32926 );

    	}

    	//

    	function setFlipSided( flipSided ) {

    		if ( currentFlipSided !== flipSided ) {

    			if ( flipSided ) {

    				gl.frontFace( 2304 );

    			} else {

    				gl.frontFace( 2305 );

    			}

    			currentFlipSided = flipSided;

    		}

    	}

    	function setCullFace( cullFace ) {

    		if ( cullFace !== CullFaceNone ) {

    			enable( 2884 );

    			if ( cullFace !== currentCullFace ) {

    				if ( cullFace === CullFaceBack ) {

    					gl.cullFace( 1029 );

    				} else if ( cullFace === CullFaceFront ) {

    					gl.cullFace( 1028 );

    				} else {

    					gl.cullFace( 1032 );

    				}

    			}

    		} else {

    			disable( 2884 );

    		}

    		currentCullFace = cullFace;

    	}

    	function setLineWidth( width ) {

    		if ( width !== currentLineWidth ) {

    			if ( lineWidthAvailable ) gl.lineWidth( width );

    			currentLineWidth = width;

    		}

    	}

    	function setPolygonOffset( polygonOffset, factor, units ) {

    		if ( polygonOffset ) {

    			enable( 32823 );

    			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

    				gl.polygonOffset( factor, units );

    				currentPolygonOffsetFactor = factor;
    				currentPolygonOffsetUnits = units;

    			}

    		} else {

    			disable( 32823 );

    		}

    	}

    	function setScissorTest( scissorTest ) {

    		if ( scissorTest ) {

    			enable( 3089 );

    		} else {

    			disable( 3089 );

    		}

    	}

    	// texture

    	function activeTexture( webglSlot ) {

    		if ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;

    		if ( currentTextureSlot !== webglSlot ) {

    			gl.activeTexture( webglSlot );
    			currentTextureSlot = webglSlot;

    		}

    	}

    	function bindTexture( webglType, webglTexture ) {

    		if ( currentTextureSlot === null ) {

    			activeTexture();

    		}

    		let boundTexture = currentBoundTextures[ currentTextureSlot ];

    		if ( boundTexture === undefined ) {

    			boundTexture = { type: undefined, texture: undefined };
    			currentBoundTextures[ currentTextureSlot ] = boundTexture;

    		}

    		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

    			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

    			boundTexture.type = webglType;
    			boundTexture.texture = webglTexture;

    		}

    	}

    	function unbindTexture() {

    		const boundTexture = currentBoundTextures[ currentTextureSlot ];

    		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

    			gl.bindTexture( boundTexture.type, null );

    			boundTexture.type = undefined;
    			boundTexture.texture = undefined;

    		}

    	}

    	function compressedTexImage2D() {

    		try {

    			gl.compressedTexImage2D.apply( gl, arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texSubImage2D() {

    		try {

    			gl.texSubImage2D.apply( gl, arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texSubImage3D() {

    		try {

    			gl.texSubImage3D.apply( gl, arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function compressedTexSubImage2D() {

    		try {

    			gl.compressedTexSubImage2D.apply( gl, arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texStorage2D() {

    		try {

    			gl.texStorage2D.apply( gl, arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texStorage3D() {

    		try {

    			gl.texStorage3D.apply( gl, arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texImage2D() {

    		try {

    			gl.texImage2D.apply( gl, arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texImage3D() {

    		try {

    			gl.texImage3D.apply( gl, arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	//

    	function scissor( scissor ) {

    		if ( currentScissor.equals( scissor ) === false ) {

    			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
    			currentScissor.copy( scissor );

    		}

    	}

    	function viewport( viewport ) {

    		if ( currentViewport.equals( viewport ) === false ) {

    			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
    			currentViewport.copy( viewport );

    		}

    	}

    	//

    	function reset() {

    		// reset state

    		gl.disable( 3042 );
    		gl.disable( 2884 );
    		gl.disable( 2929 );
    		gl.disable( 32823 );
    		gl.disable( 3089 );
    		gl.disable( 2960 );
    		gl.disable( 32926 );

    		gl.blendEquation( 32774 );
    		gl.blendFunc( 1, 0 );
    		gl.blendFuncSeparate( 1, 0, 1, 0 );

    		gl.colorMask( true, true, true, true );
    		gl.clearColor( 0, 0, 0, 0 );

    		gl.depthMask( true );
    		gl.depthFunc( 513 );
    		gl.clearDepth( 1 );

    		gl.stencilMask( 0xffffffff );
    		gl.stencilFunc( 519, 0, 0xffffffff );
    		gl.stencilOp( 7680, 7680, 7680 );
    		gl.clearStencil( 0 );

    		gl.cullFace( 1029 );
    		gl.frontFace( 2305 );

    		gl.polygonOffset( 0, 0 );

    		gl.activeTexture( 33984 );

    		gl.bindFramebuffer( 36160, null );

    		if ( isWebGL2 === true ) {

    			gl.bindFramebuffer( 36009, null );
    			gl.bindFramebuffer( 36008, null );

    		}

    		gl.useProgram( null );

    		gl.lineWidth( 1 );

    		gl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );
    		gl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );

    		// reset internals

    		enabledCapabilities = {};

    		currentTextureSlot = null;
    		currentBoundTextures = {};

    		currentBoundFramebuffers = {};
    		currentDrawbuffers = new WeakMap();
    		defaultDrawbuffers = [];

    		currentProgram = null;

    		currentBlendingEnabled = false;
    		currentBlending = null;
    		currentBlendEquation = null;
    		currentBlendSrc = null;
    		currentBlendDst = null;
    		currentBlendEquationAlpha = null;
    		currentBlendSrcAlpha = null;
    		currentBlendDstAlpha = null;
    		currentPremultipledAlpha = false;

    		currentFlipSided = null;
    		currentCullFace = null;

    		currentLineWidth = null;

    		currentPolygonOffsetFactor = null;
    		currentPolygonOffsetUnits = null;

    		currentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );
    		currentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );

    		colorBuffer.reset();
    		depthBuffer.reset();
    		stencilBuffer.reset();

    	}

    	return {

    		buffers: {
    			color: colorBuffer,
    			depth: depthBuffer,
    			stencil: stencilBuffer
    		},

    		enable: enable,
    		disable: disable,

    		bindFramebuffer: bindFramebuffer,
    		drawBuffers: drawBuffers,

    		useProgram: useProgram,

    		setBlending: setBlending,
    		setMaterial: setMaterial,

    		setFlipSided: setFlipSided,
    		setCullFace: setCullFace,

    		setLineWidth: setLineWidth,
    		setPolygonOffset: setPolygonOffset,

    		setScissorTest: setScissorTest,

    		activeTexture: activeTexture,
    		bindTexture: bindTexture,
    		unbindTexture: unbindTexture,
    		compressedTexImage2D: compressedTexImage2D,
    		texImage2D: texImage2D,
    		texImage3D: texImage3D,

    		texStorage2D: texStorage2D,
    		texStorage3D: texStorage3D,
    		texSubImage2D: texSubImage2D,
    		texSubImage3D: texSubImage3D,
    		compressedTexSubImage2D: compressedTexSubImage2D,

    		scissor: scissor,
    		viewport: viewport,

    		reset: reset

    	};

    }

    function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

    	const isWebGL2 = capabilities.isWebGL2;
    	const maxTextures = capabilities.maxTextures;
    	const maxCubemapSize = capabilities.maxCubemapSize;
    	const maxTextureSize = capabilities.maxTextureSize;
    	const maxSamples = capabilities.maxSamples;
    	const multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;
    	const supportsInvalidateFramebuffer = /OculusBrowser/g.test( navigator.userAgent );

    	const _videoTextures = new WeakMap();
    	let _canvas;

    	const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source

    	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
    	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
    	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).

    	let useOffscreenCanvas = false;

    	try {

    		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
    			// eslint-disable-next-line compat/compat
    			&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;

    	} catch ( err ) {

    		// Ignore any errors

    	}

    	function createCanvas( width, height ) {

    		// Use OffscreenCanvas when available. Specially needed in web workers

    		return useOffscreenCanvas ?
    			// eslint-disable-next-line compat/compat
    			new OffscreenCanvas( width, height ) : createElementNS( 'canvas' );

    	}

    	function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {

    		let scale = 1;

    		// handle case if texture exceeds max size

    		if ( image.width > maxSize || image.height > maxSize ) {

    			scale = maxSize / Math.max( image.width, image.height );

    		}

    		// only perform resize if necessary

    		if ( scale < 1 || needsPowerOfTwo === true ) {

    			// only perform resize for certain image types

    			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
    				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
    				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

    				const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;

    				const width = floor( scale * image.width );
    				const height = floor( scale * image.height );

    				if ( _canvas === undefined ) _canvas = createCanvas( width, height );

    				// cube textures can't reuse the same canvas

    				const canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

    				canvas.width = width;
    				canvas.height = height;

    				const context = canvas.getContext( '2d' );
    				context.drawImage( image, 0, 0, width, height );

    				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );

    				return canvas;

    			} else {

    				if ( 'data' in image ) {

    					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );

    				}

    				return image;

    			}

    		}

    		return image;

    	}

    	function isPowerOfTwo$1( image ) {

    		return isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );

    	}

    	function textureNeedsPowerOfTwo( texture ) {

    		if ( isWebGL2 ) return false;

    		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
    			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

    	}

    	function textureNeedsGenerateMipmaps( texture, supportsMips ) {

    		return texture.generateMipmaps && supportsMips &&
    			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

    	}

    	function generateMipmap( target ) {

    		_gl.generateMipmap( target );

    	}

    	function getInternalFormat( internalFormatName, glFormat, glType, encoding, isVideoTexture = false ) {

    		if ( isWebGL2 === false ) return glFormat;

    		if ( internalFormatName !== null ) {

    			if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];

    			console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );

    		}

    		let internalFormat = glFormat;

    		if ( glFormat === 6403 ) {

    			if ( glType === 5126 ) internalFormat = 33326;
    			if ( glType === 5131 ) internalFormat = 33325;
    			if ( glType === 5121 ) internalFormat = 33321;

    		}

    		if ( glFormat === 33319 ) {

    			if ( glType === 5126 ) internalFormat = 33328;
    			if ( glType === 5131 ) internalFormat = 33327;
    			if ( glType === 5121 ) internalFormat = 33323;

    		}

    		if ( glFormat === 6408 ) {

    			if ( glType === 5126 ) internalFormat = 34836;
    			if ( glType === 5131 ) internalFormat = 34842;
    			if ( glType === 5121 ) internalFormat = ( encoding === sRGBEncoding && isVideoTexture === false ) ? 35907 : 32856;
    			if ( glType === 32819 ) internalFormat = 32854;
    			if ( glType === 32820 ) internalFormat = 32855;

    		}

    		if ( internalFormat === 33325 || internalFormat === 33326 ||
    			internalFormat === 33327 || internalFormat === 33328 ||
    			internalFormat === 34842 || internalFormat === 34836 ) {

    			extensions.get( 'EXT_color_buffer_float' );

    		}

    		return internalFormat;

    	}

    	function getMipLevels( texture, image, supportsMips ) {

    		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {

    			return Math.log2( Math.max( image.width, image.height ) ) + 1;

    		} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {

    			// user-defined mipmaps

    			return texture.mipmaps.length;

    		} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {

    			return image.mipmaps.length;

    		} else {

    			// texture without mipmaps (only base level)

    			return 1;

    		}

    	}

    	// Fallback filters for non-power-of-2 textures

    	function filterFallback( f ) {

    		if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {

    			return 9728;

    		}

    		return 9729;

    	}

    	//

    	function onTextureDispose( event ) {

    		const texture = event.target;

    		texture.removeEventListener( 'dispose', onTextureDispose );

    		deallocateTexture( texture );

    		if ( texture.isVideoTexture ) {

    			_videoTextures.delete( texture );

    		}

    	}

    	function onRenderTargetDispose( event ) {

    		const renderTarget = event.target;

    		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

    		deallocateRenderTarget( renderTarget );

    	}

    	//

    	function deallocateTexture( texture ) {

    		const textureProperties = properties.get( texture );

    		if ( textureProperties.__webglInit === undefined ) return;

    		// check if it's necessary to remove the WebGLTexture object

    		const source = texture.source;
    		const webglTextures = _sources.get( source );

    		if ( webglTextures ) {

    			const webglTexture = webglTextures[ textureProperties.__cacheKey ];
    			webglTexture.usedTimes --;

    			// the WebGLTexture object is not used anymore, remove it

    			if ( webglTexture.usedTimes === 0 ) {

    				deleteTexture( texture );

    			}

    			// remove the weak map entry if no WebGLTexture uses the source anymore

    			if ( Object.keys( webglTextures ).length === 0 ) {

    				_sources.delete( source );

    			}

    		}

    		properties.remove( texture );

    	}

    	function deleteTexture( texture ) {

    		const textureProperties = properties.get( texture );
    		_gl.deleteTexture( textureProperties.__webglTexture );

    		const source = texture.source;
    		const webglTextures = _sources.get( source );
    		delete webglTextures[ textureProperties.__cacheKey ];

    		info.memory.textures --;

    	}

    	function deallocateRenderTarget( renderTarget ) {

    		const texture = renderTarget.texture;

    		const renderTargetProperties = properties.get( renderTarget );
    		const textureProperties = properties.get( texture );

    		if ( textureProperties.__webglTexture !== undefined ) {

    			_gl.deleteTexture( textureProperties.__webglTexture );

    			info.memory.textures --;

    		}

    		if ( renderTarget.depthTexture ) {

    			renderTarget.depthTexture.dispose();

    		}

    		if ( renderTarget.isWebGLCubeRenderTarget ) {

    			for ( let i = 0; i < 6; i ++ ) {

    				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
    				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

    			}

    		} else {

    			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
    			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
    			if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );

    			if ( renderTargetProperties.__webglColorRenderbuffer ) {

    				for ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {

    					if ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );

    				}

    			}

    			if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );

    		}

    		if ( renderTarget.isWebGLMultipleRenderTargets ) {

    			for ( let i = 0, il = texture.length; i < il; i ++ ) {

    				const attachmentProperties = properties.get( texture[ i ] );

    				if ( attachmentProperties.__webglTexture ) {

    					_gl.deleteTexture( attachmentProperties.__webglTexture );

    					info.memory.textures --;

    				}

    				properties.remove( texture[ i ] );

    			}

    		}

    		properties.remove( texture );
    		properties.remove( renderTarget );

    	}

    	//

    	let textureUnits = 0;

    	function resetTextureUnits() {

    		textureUnits = 0;

    	}

    	function allocateTextureUnit() {

    		const textureUnit = textureUnits;

    		if ( textureUnit >= maxTextures ) {

    			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );

    		}

    		textureUnits += 1;

    		return textureUnit;

    	}

    	function getTextureCacheKey( texture ) {

    		const array = [];

    		array.push( texture.wrapS );
    		array.push( texture.wrapT );
    		array.push( texture.magFilter );
    		array.push( texture.minFilter );
    		array.push( texture.anisotropy );
    		array.push( texture.internalFormat );
    		array.push( texture.format );
    		array.push( texture.type );
    		array.push( texture.generateMipmaps );
    		array.push( texture.premultiplyAlpha );
    		array.push( texture.flipY );
    		array.push( texture.unpackAlignment );
    		array.push( texture.encoding );

    		return array.join();

    	}

    	//

    	function setTexture2D( texture, slot ) {

    		const textureProperties = properties.get( texture );

    		if ( texture.isVideoTexture ) updateVideoTexture( texture );

    		if ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {

    			const image = texture.image;

    			if ( image === null ) {

    				console.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );

    			} else if ( image.complete === false ) {

    				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

    			} else {

    				uploadTexture( textureProperties, texture, slot );
    				return;

    			}

    		}

    		state.activeTexture( 33984 + slot );
    		state.bindTexture( 3553, textureProperties.__webglTexture );

    	}

    	function setTexture2DArray( texture, slot ) {

    		const textureProperties = properties.get( texture );

    		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

    			uploadTexture( textureProperties, texture, slot );
    			return;

    		}

    		state.activeTexture( 33984 + slot );
    		state.bindTexture( 35866, textureProperties.__webglTexture );

    	}

    	function setTexture3D( texture, slot ) {

    		const textureProperties = properties.get( texture );

    		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

    			uploadTexture( textureProperties, texture, slot );
    			return;

    		}

    		state.activeTexture( 33984 + slot );
    		state.bindTexture( 32879, textureProperties.__webglTexture );

    	}

    	function setTextureCube( texture, slot ) {

    		const textureProperties = properties.get( texture );

    		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

    			uploadCubeTexture( textureProperties, texture, slot );
    			return;

    		}

    		state.activeTexture( 33984 + slot );
    		state.bindTexture( 34067, textureProperties.__webglTexture );

    	}

    	const wrappingToGL = {
    		[ RepeatWrapping ]: 10497,
    		[ ClampToEdgeWrapping ]: 33071,
    		[ MirroredRepeatWrapping ]: 33648
    	};

    	const filterToGL = {
    		[ NearestFilter ]: 9728,
    		[ NearestMipmapNearestFilter ]: 9984,
    		[ NearestMipmapLinearFilter ]: 9986,

    		[ LinearFilter ]: 9729,
    		[ LinearMipmapNearestFilter ]: 9985,
    		[ LinearMipmapLinearFilter ]: 9987
    	};

    	function setTextureParameters( textureType, texture, supportsMips ) {

    		if ( supportsMips ) {

    			_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );
    			_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );

    			if ( textureType === 32879 || textureType === 35866 ) {

    				_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );

    			}

    			_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );
    			_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );

    		} else {

    			_gl.texParameteri( textureType, 10242, 33071 );
    			_gl.texParameteri( textureType, 10243, 33071 );

    			if ( textureType === 32879 || textureType === 35866 ) {

    				_gl.texParameteri( textureType, 32882, 33071 );

    			}

    			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

    				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );

    			}

    			_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
    			_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );

    			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

    				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );

    			}

    		}

    		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

    			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

    			if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2
    			if ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only

    			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

    				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
    				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

    			}

    		}

    	}

    	function initTexture( textureProperties, texture ) {

    		let forceUpload = false;

    		if ( textureProperties.__webglInit === undefined ) {

    			textureProperties.__webglInit = true;

    			texture.addEventListener( 'dispose', onTextureDispose );

    		}

    		// create Source <-> WebGLTextures mapping if necessary

    		const source = texture.source;
    		let webglTextures = _sources.get( source );

    		if ( webglTextures === undefined ) {

    			webglTextures = {};
    			_sources.set( source, webglTextures );

    		}

    		// check if there is already a WebGLTexture object for the given texture parameters

    		const textureCacheKey = getTextureCacheKey( texture );

    		if ( textureCacheKey !== textureProperties.__cacheKey ) {

    			// if not, create a new instance of WebGLTexture

    			if ( webglTextures[ textureCacheKey ] === undefined ) {

    				// create new entry

    				webglTextures[ textureCacheKey ] = {
    					texture: _gl.createTexture(),
    					usedTimes: 0
    				};

    				info.memory.textures ++;

    				// when a new instance of WebGLTexture was created, a texture upload is required
    				// even if the image contents are identical

    				forceUpload = true;

    			}

    			webglTextures[ textureCacheKey ].usedTimes ++;

    			// every time the texture cache key changes, it's necessary to check if an instance of
    			// WebGLTexture can be deleted in order to avoid a memory leak.

    			const webglTexture = webglTextures[ textureProperties.__cacheKey ];

    			if ( webglTexture !== undefined ) {

    				webglTextures[ textureProperties.__cacheKey ].usedTimes --;

    				if ( webglTexture.usedTimes === 0 ) {

    					deleteTexture( texture );

    				}

    			}

    			// store references to cache key and WebGLTexture object

    			textureProperties.__cacheKey = textureCacheKey;
    			textureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;

    		}

    		return forceUpload;

    	}

    	function uploadTexture( textureProperties, texture, slot ) {

    		let textureType = 3553;

    		if ( texture.isDataArrayTexture ) textureType = 35866;
    		if ( texture.isData3DTexture ) textureType = 32879;

    		const forceUpload = initTexture( textureProperties, texture );
    		const source = texture.source;

    		state.activeTexture( 33984 + slot );
    		state.bindTexture( textureType, textureProperties.__webglTexture );

    		if ( source.version !== source.__currentVersion || forceUpload === true ) {

    			_gl.pixelStorei( 37440, texture.flipY );
    			_gl.pixelStorei( 37441, texture.premultiplyAlpha );
    			_gl.pixelStorei( 3317, texture.unpackAlignment );
    			_gl.pixelStorei( 37443, 0 );

    			const needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;
    			let image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );
    			image = verifyColorSpace( texture, image );

    			const supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
    				glFormat = utils.convert( texture.format, texture.encoding );

    			let glType = utils.convert( texture.type ),
    				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture );

    			setTextureParameters( textureType, texture, supportsMips );

    			let mipmap;
    			const mipmaps = texture.mipmaps;

    			const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );
    			const allocateMemory = ( source.__currentVersion === undefined ) || ( forceUpload === true );
    			const levels = getMipLevels( texture, image, supportsMips );

    			if ( texture.isDepthTexture ) {

    				// populate depth texture with dummy data

    				glInternalFormat = 6402;

    				if ( isWebGL2 ) {

    					if ( texture.type === FloatType ) {

    						glInternalFormat = 36012;

    					} else if ( texture.type === UnsignedIntType ) {

    						glInternalFormat = 33190;

    					} else if ( texture.type === UnsignedInt248Type ) {

    						glInternalFormat = 35056;

    					} else {

    						glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D

    					}

    				} else {

    					if ( texture.type === FloatType ) {

    						console.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );

    					}

    				}

    				// validation checks for WebGL 1

    				if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {

    					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
    					// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
    					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
    					if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

    						console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

    						texture.type = UnsignedIntType;
    						glType = utils.convert( texture.type );

    					}

    				}

    				if ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {

    					// Depth stencil textures need the DEPTH_STENCIL internal format
    					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
    					glInternalFormat = 34041;

    					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
    					// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
    					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
    					if ( texture.type !== UnsignedInt248Type ) {

    						console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

    						texture.type = UnsignedInt248Type;
    						glType = utils.convert( texture.type );

    					}

    				}

    				//

    				if ( allocateMemory ) {

    					if ( useTexStorage ) {

    						state.texStorage2D( 3553, 1, glInternalFormat, image.width, image.height );

    					} else {

    						state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

    					}

    				}

    			} else if ( texture.isDataTexture ) {

    				// use manually created mipmaps if available
    				// if there are no manual mipmaps
    				// set 0 level mipmap and then use GL to generate other mipmap levels

    				if ( mipmaps.length > 0 && supportsMips ) {

    					if ( useTexStorage && allocateMemory ) {

    						state.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

    					}

    					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

    						mipmap = mipmaps[ i ];

    						if ( useTexStorage ) {

    							state.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

    						} else {

    							state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

    						}

    					}

    					texture.generateMipmaps = false;

    				} else {

    					if ( useTexStorage ) {

    						if ( allocateMemory ) {

    							state.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );

    						}

    						state.texSubImage2D( 3553, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );

    					} else {

    						state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );

    					}

    				}

    			} else if ( texture.isCompressedTexture ) {

    				if ( useTexStorage && allocateMemory ) {

    					state.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

    				}

    				for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

    					mipmap = mipmaps[ i ];

    					if ( texture.format !== RGBAFormat ) {

    						if ( glFormat !== null ) {

    							if ( useTexStorage ) {

    								state.compressedTexSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

    							} else {

    								state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

    							}

    						} else {

    							console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

    						}

    					} else {

    						if ( useTexStorage ) {

    							state.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

    						} else {

    							state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

    						}

    					}

    				}

    			} else if ( texture.isDataArrayTexture ) {

    				if ( useTexStorage ) {

    					if ( allocateMemory ) {

    						state.texStorage3D( 35866, levels, glInternalFormat, image.width, image.height, image.depth );

    					}

    					state.texSubImage3D( 35866, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

    				} else {

    					state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

    				}

    			} else if ( texture.isData3DTexture ) {

    				if ( useTexStorage ) {

    					if ( allocateMemory ) {

    						state.texStorage3D( 32879, levels, glInternalFormat, image.width, image.height, image.depth );

    					}

    					state.texSubImage3D( 32879, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

    				} else {

    					state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

    				}

    			} else if ( texture.isFramebufferTexture ) {

    				if ( allocateMemory ) {

    					if ( useTexStorage ) {

    						state.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );

    					} else {

    						let width = image.width, height = image.height;

    						for ( let i = 0; i < levels; i ++ ) {

    							state.texImage2D( 3553, i, glInternalFormat, width, height, 0, glFormat, glType, null );

    							width >>= 1;
    							height >>= 1;

    						}

    					}

    				}

    			} else {

    				// regular Texture (image, video, canvas)

    				// use manually created mipmaps if available
    				// if there are no manual mipmaps
    				// set 0 level mipmap and then use GL to generate other mipmap levels

    				if ( mipmaps.length > 0 && supportsMips ) {

    					if ( useTexStorage && allocateMemory ) {

    						state.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

    					}

    					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

    						mipmap = mipmaps[ i ];

    						if ( useTexStorage ) {

    							state.texSubImage2D( 3553, i, 0, 0, glFormat, glType, mipmap );

    						} else {

    							state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );

    						}

    					}

    					texture.generateMipmaps = false;

    				} else {

    					if ( useTexStorage ) {

    						if ( allocateMemory ) {

    							state.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );

    						}

    						state.texSubImage2D( 3553, 0, 0, 0, glFormat, glType, image );

    					} else {

    						state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );

    					}

    				}

    			}

    			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

    				generateMipmap( textureType );

    			}

    			source.__currentVersion = source.version;

    			if ( texture.onUpdate ) texture.onUpdate( texture );

    		}

    		textureProperties.__version = texture.version;

    	}

    	function uploadCubeTexture( textureProperties, texture, slot ) {

    		if ( texture.image.length !== 6 ) return;

    		const forceUpload = initTexture( textureProperties, texture );
    		const source = texture.source;

    		state.activeTexture( 33984 + slot );
    		state.bindTexture( 34067, textureProperties.__webglTexture );

    		if ( source.version !== source.__currentVersion || forceUpload === true ) {

    			_gl.pixelStorei( 37440, texture.flipY );
    			_gl.pixelStorei( 37441, texture.premultiplyAlpha );
    			_gl.pixelStorei( 3317, texture.unpackAlignment );
    			_gl.pixelStorei( 37443, 0 );

    			const isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );
    			const isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

    			const cubeImage = [];

    			for ( let i = 0; i < 6; i ++ ) {

    				if ( ! isCompressed && ! isDataTexture ) {

    					cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );

    				} else {

    					cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

    				}

    				cubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );

    			}

    			const image = cubeImage[ 0 ],
    				supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
    				glFormat = utils.convert( texture.format, texture.encoding ),
    				glType = utils.convert( texture.type ),
    				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );

    			const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );
    			const allocateMemory = ( source.__currentVersion === undefined ) || ( forceUpload === true );
    			let levels = getMipLevels( texture, image, supportsMips );

    			setTextureParameters( 34067, texture, supportsMips );

    			let mipmaps;

    			if ( isCompressed ) {

    				if ( useTexStorage && allocateMemory ) {

    					state.texStorage2D( 34067, levels, glInternalFormat, image.width, image.height );

    				}

    				for ( let i = 0; i < 6; i ++ ) {

    					mipmaps = cubeImage[ i ].mipmaps;

    					for ( let j = 0; j < mipmaps.length; j ++ ) {

    						const mipmap = mipmaps[ j ];

    						if ( texture.format !== RGBAFormat ) {

    							if ( glFormat !== null ) {

    								if ( useTexStorage ) {

    									state.compressedTexSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

    								} else {

    									state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

    								}

    							} else {

    								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

    							}

    						} else {

    							if ( useTexStorage ) {

    								state.texSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

    							} else {

    								state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

    							}

    						}

    					}

    				}

    			} else {

    				mipmaps = texture.mipmaps;

    				if ( useTexStorage && allocateMemory ) {

    					// TODO: Uniformly handle mipmap definitions
    					// Normal textures and compressed cube textures define base level + mips with their mipmap array
    					// Uncompressed cube textures use their mipmap array only for mips (no base level)

    					if ( mipmaps.length > 0 ) levels ++;

    					state.texStorage2D( 34067, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );

    				}

    				for ( let i = 0; i < 6; i ++ ) {

    					if ( isDataTexture ) {

    						if ( useTexStorage ) {

    							state.texSubImage2D( 34069 + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );

    						} else {

    							state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

    						}

    						for ( let j = 0; j < mipmaps.length; j ++ ) {

    							const mipmap = mipmaps[ j ];
    							const mipmapImage = mipmap.image[ i ].image;

    							if ( useTexStorage ) {

    								state.texSubImage2D( 34069 + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );

    							} else {

    								state.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

    							}

    						}

    					} else {

    						if ( useTexStorage ) {

    							state.texSubImage2D( 34069 + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );

    						} else {

    							state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

    						}

    						for ( let j = 0; j < mipmaps.length; j ++ ) {

    							const mipmap = mipmaps[ j ];

    							if ( useTexStorage ) {

    								state.texSubImage2D( 34069 + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );

    							} else {

    								state.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );

    							}

    						}

    					}

    				}

    			}

    			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

    				// We assume images for cube map have the same size.
    				generateMipmap( 34067 );

    			}

    			source.__currentVersion = source.version;

    			if ( texture.onUpdate ) texture.onUpdate( texture );

    		}

    		textureProperties.__version = texture.version;

    	}

    	// Render targets

    	// Setup storage for target texture and bind it to correct framebuffer
    	function setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {

    		const glFormat = utils.convert( texture.format, texture.encoding );
    		const glType = utils.convert( texture.type );
    		const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );
    		const renderTargetProperties = properties.get( renderTarget );

    		if ( ! renderTargetProperties.__hasExternalTextures ) {

    			if ( textureTarget === 32879 || textureTarget === 35866 ) {

    				state.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );

    			} else {

    				state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );

    			}

    		}

    		state.bindFramebuffer( 36160, framebuffer );

    		if ( useMultisampledRTT( renderTarget ) ) {

    			multisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );

    		} else {

    			_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );

    		}

    		state.bindFramebuffer( 36160, null );

    	}


    	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
    	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

    		_gl.bindRenderbuffer( 36161, renderbuffer );

    		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

    			let glInternalFormat = 33189;

    			if ( isMultisample || useMultisampledRTT( renderTarget ) ) {

    				const depthTexture = renderTarget.depthTexture;

    				if ( depthTexture && depthTexture.isDepthTexture ) {

    					if ( depthTexture.type === FloatType ) {

    						glInternalFormat = 36012;

    					} else if ( depthTexture.type === UnsignedIntType ) {

    						glInternalFormat = 33190;

    					}

    				}

    				const samples = getRenderTargetSamples( renderTarget );

    				if ( useMultisampledRTT( renderTarget ) ) {

    					multisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    				} else {

    					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    				}

    			} else {

    				_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );

    			}

    			_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );

    		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

    			const samples = getRenderTargetSamples( renderTarget );

    			if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {

    				_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );

    			} else if ( useMultisampledRTT( renderTarget ) ) {

    				multisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, 35056, renderTarget.width, renderTarget.height );

    			} else {

    				_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );

    			}


    			_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );

    		} else {

    			const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];

    			for ( let i = 0; i < textures.length; i ++ ) {

    				const texture = textures[ i ];

    				const glFormat = utils.convert( texture.format, texture.encoding );
    				const glType = utils.convert( texture.type );
    				const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );
    				const samples = getRenderTargetSamples( renderTarget );

    				if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {

    					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    				} else if ( useMultisampledRTT( renderTarget ) ) {

    					multisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    				} else {

    					_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );

    				}

    			}

    		}

    		_gl.bindRenderbuffer( 36161, null );

    	}

    	// Setup resources for a Depth Texture for a FBO (needs an extension)
    	function setupDepthTexture( framebuffer, renderTarget ) {

    		const isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
    		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

    		state.bindFramebuffer( 36160, framebuffer );

    		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

    			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

    		}

    		// upload an empty depth texture with framebuffer size
    		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
    				renderTarget.depthTexture.image.width !== renderTarget.width ||
    				renderTarget.depthTexture.image.height !== renderTarget.height ) {

    			renderTarget.depthTexture.image.width = renderTarget.width;
    			renderTarget.depthTexture.image.height = renderTarget.height;
    			renderTarget.depthTexture.needsUpdate = true;

    		}

    		setTexture2D( renderTarget.depthTexture, 0 );

    		const webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
    		const samples = getRenderTargetSamples( renderTarget );

    		if ( renderTarget.depthTexture.format === DepthFormat ) {

    			if ( useMultisampledRTT( renderTarget ) ) {

    				multisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 36096, 3553, webglDepthTexture, 0, samples );

    			} else {

    				_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );

    			}

    		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

    			if ( useMultisampledRTT( renderTarget ) ) {

    				multisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 33306, 3553, webglDepthTexture, 0, samples );

    			} else {

    				_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );

    			}

    		} else {

    			throw new Error( 'Unknown depthTexture format' );

    		}

    	}

    	// Setup GL resources for a non-texture depth buffer
    	function setupDepthRenderbuffer( renderTarget ) {

    		const renderTargetProperties = properties.get( renderTarget );
    		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );

    		if ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {

    			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

    			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

    		} else {

    			if ( isCube ) {

    				renderTargetProperties.__webglDepthbuffer = [];

    				for ( let i = 0; i < 6; i ++ ) {

    					state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
    					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
    					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );

    				}

    			} else {

    				state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
    				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
    				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );

    			}

    		}

    		state.bindFramebuffer( 36160, null );

    	}

    	// rebind framebuffer with external textures
    	function rebindTextures( renderTarget, colorTexture, depthTexture ) {

    		const renderTargetProperties = properties.get( renderTarget );

    		if ( colorTexture !== undefined ) {

    			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553 );

    		}

    		if ( depthTexture !== undefined ) {

    			setupDepthRenderbuffer( renderTarget );

    		}

    	}

    	// Set up GL resources for the render target
    	function setupRenderTarget( renderTarget ) {

    		const texture = renderTarget.texture;

    		const renderTargetProperties = properties.get( renderTarget );
    		const textureProperties = properties.get( texture );

    		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

    		if ( renderTarget.isWebGLMultipleRenderTargets !== true ) {

    			if ( textureProperties.__webglTexture === undefined ) {

    				textureProperties.__webglTexture = _gl.createTexture();

    			}

    			textureProperties.__version = texture.version;
    			info.memory.textures ++;

    		}

    		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
    		const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );
    		const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;

    		// Setup framebuffer

    		if ( isCube ) {

    			renderTargetProperties.__webglFramebuffer = [];

    			for ( let i = 0; i < 6; i ++ ) {

    				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

    			}

    		} else {

    			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

    			if ( isMultipleRenderTargets ) {

    				if ( capabilities.drawBuffers ) {

    					const textures = renderTarget.texture;

    					for ( let i = 0, il = textures.length; i < il; i ++ ) {

    						const attachmentProperties = properties.get( textures[ i ] );

    						if ( attachmentProperties.__webglTexture === undefined ) {

    							attachmentProperties.__webglTexture = _gl.createTexture();

    							info.memory.textures ++;

    						}

    					}

    				} else {

    					console.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );

    				}

    			}

    			if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {

    				const textures = isMultipleRenderTargets ? texture : [ texture ];

    				renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
    				renderTargetProperties.__webglColorRenderbuffer = [];

    				state.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );

    				for ( let i = 0; i < textures.length; i ++ ) {

    					const texture = textures[ i ];
    					renderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();

    					_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );

    					const glFormat = utils.convert( texture.format, texture.encoding );
    					const glType = utils.convert( texture.type );
    					const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );
    					const samples = getRenderTargetSamples( renderTarget );
    					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    					_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );

    				}

    				_gl.bindRenderbuffer( 36161, null );

    				if ( renderTarget.depthBuffer ) {

    					renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
    					setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

    				}

    				state.bindFramebuffer( 36160, null );

    			}

    		}

    		// Setup color buffer

    		if ( isCube ) {

    			state.bindTexture( 34067, textureProperties.__webglTexture );
    			setTextureParameters( 34067, texture, supportsMips );

    			for ( let i = 0; i < 6; i ++ ) {

    				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, 36064, 34069 + i );

    			}

    			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

    				generateMipmap( 34067 );

    			}

    			state.unbindTexture();

    		} else if ( isMultipleRenderTargets ) {

    			const textures = renderTarget.texture;

    			for ( let i = 0, il = textures.length; i < il; i ++ ) {

    				const attachment = textures[ i ];
    				const attachmentProperties = properties.get( attachment );

    				state.bindTexture( 3553, attachmentProperties.__webglTexture );
    				setTextureParameters( 3553, attachment, supportsMips );
    				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553 );

    				if ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {

    					generateMipmap( 3553 );

    				}

    			}

    			state.unbindTexture();

    		} else {

    			let glTextureType = 3553;

    			if ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {

    				if ( isWebGL2 ) {

    					glTextureType = renderTarget.isWebGL3DRenderTarget ? 32879 : 35866;

    				} else {

    					console.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );

    				}

    			}

    			state.bindTexture( glTextureType, textureProperties.__webglTexture );
    			setTextureParameters( glTextureType, texture, supportsMips );
    			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType );

    			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

    				generateMipmap( glTextureType );

    			}

    			state.unbindTexture();

    		}

    		// Setup depth and stencil buffers

    		if ( renderTarget.depthBuffer ) {

    			setupDepthRenderbuffer( renderTarget );

    		}

    	}

    	function updateRenderTargetMipmap( renderTarget ) {

    		const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;

    		const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];

    		for ( let i = 0, il = textures.length; i < il; i ++ ) {

    			const texture = textures[ i ];

    			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

    				const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
    				const webglTexture = properties.get( texture ).__webglTexture;

    				state.bindTexture( target, webglTexture );
    				generateMipmap( target );
    				state.unbindTexture();

    			}

    		}

    	}

    	function updateMultisampleRenderTarget( renderTarget ) {

    		if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {

    			const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [ renderTarget.texture ];
    			const width = renderTarget.width;
    			const height = renderTarget.height;
    			let mask = 16384;
    			const invalidationArray = [];
    			const depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;
    			const renderTargetProperties = properties.get( renderTarget );
    			const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );

    			// If MRT we need to remove FBO attachments
    			if ( isMultipleRenderTargets ) {

    				for ( let i = 0; i < textures.length; i ++ ) {

    					state.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
    					_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, null );

    					state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
    					_gl.framebufferTexture2D( 36009, 36064 + i, 3553, null, 0 );

    				}

    			}

    			state.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
    			state.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );

    			for ( let i = 0; i < textures.length; i ++ ) {

    				invalidationArray.push( 36064 + i );

    				if ( renderTarget.depthBuffer ) {

    					invalidationArray.push( depthStyle );

    				}

    				const ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;

    				if ( ignoreDepthValues === false ) {

    					if ( renderTarget.depthBuffer ) mask |= 256;
    					if ( renderTarget.stencilBuffer ) mask |= 1024;

    				}

    				if ( isMultipleRenderTargets ) {

    					_gl.framebufferRenderbuffer( 36008, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );

    				}

    				if ( ignoreDepthValues === true ) {

    					_gl.invalidateFramebuffer( 36008, [ depthStyle ] );
    					_gl.invalidateFramebuffer( 36009, [ depthStyle ] );

    				}

    				if ( isMultipleRenderTargets ) {

    					const webglTexture = properties.get( textures[ i ] ).__webglTexture;
    					_gl.framebufferTexture2D( 36009, 36064, 3553, webglTexture, 0 );

    				}

    				_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );

    				if ( supportsInvalidateFramebuffer ) {

    					_gl.invalidateFramebuffer( 36008, invalidationArray );

    				}


    			}

    			state.bindFramebuffer( 36008, null );
    			state.bindFramebuffer( 36009, null );

    			// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
    			if ( isMultipleRenderTargets ) {

    				for ( let i = 0; i < textures.length; i ++ ) {

    					state.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
    					_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );

    					const webglTexture = properties.get( textures[ i ] ).__webglTexture;

    					state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
    					_gl.framebufferTexture2D( 36009, 36064 + i, 3553, webglTexture, 0 );

    				}

    			}

    			state.bindFramebuffer( 36009, renderTargetProperties.__webglMultisampledFramebuffer );

    		}

    	}

    	function getRenderTargetSamples( renderTarget ) {

    		return Math.min( maxSamples, renderTarget.samples );

    	}

    	function useMultisampledRTT( renderTarget ) {

    		const renderTargetProperties = properties.get( renderTarget );

    		return isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;

    	}

    	function updateVideoTexture( texture ) {

    		const frame = info.render.frame;

    		// Check the last frame we updated the VideoTexture

    		if ( _videoTextures.get( texture ) !== frame ) {

    			_videoTextures.set( texture, frame );
    			texture.update();

    		}

    	}

    	function verifyColorSpace( texture, image ) {

    		const encoding = texture.encoding;
    		const format = texture.format;
    		const type = texture.type;

    		if ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;

    		if ( encoding !== LinearEncoding ) {

    			// sRGB

    			if ( encoding === sRGBEncoding ) {

    				if ( isWebGL2 === false ) {

    					// in WebGL 1, try to use EXT_sRGB extension and unsized formats

    					if ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {

    						texture.format = _SRGBAFormat;

    						// it's not possible to generate mips in WebGL 1 with this extension

    						texture.minFilter = LinearFilter;
    						texture.generateMipmaps = false;

    					} else {

    						// slow fallback (CPU decode)

    						image = ImageUtils.sRGBToLinear( image );

    					}

    				} else {

    					// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format

    					if ( format !== RGBAFormat || type !== UnsignedByteType ) {

    						console.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );

    					}

    				}

    			} else {

    				console.error( 'THREE.WebGLTextures: Unsupported texture encoding:', encoding );

    			}

    		}

    		return image;

    	}

    	//

    	this.allocateTextureUnit = allocateTextureUnit;
    	this.resetTextureUnits = resetTextureUnits;

    	this.setTexture2D = setTexture2D;
    	this.setTexture2DArray = setTexture2DArray;
    	this.setTexture3D = setTexture3D;
    	this.setTextureCube = setTextureCube;
    	this.rebindTextures = rebindTextures;
    	this.setupRenderTarget = setupRenderTarget;
    	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    	this.setupDepthRenderbuffer = setupDepthRenderbuffer;
    	this.setupFrameBufferTexture = setupFrameBufferTexture;
    	this.useMultisampledRTT = useMultisampledRTT;

    }

    function WebGLUtils( gl, extensions, capabilities ) {

    	const isWebGL2 = capabilities.isWebGL2;

    	function convert( p, encoding = null ) {

    		let extension;

    		if ( p === UnsignedByteType ) return 5121;
    		if ( p === UnsignedShort4444Type ) return 32819;
    		if ( p === UnsignedShort5551Type ) return 32820;

    		if ( p === ByteType ) return 5120;
    		if ( p === ShortType ) return 5122;
    		if ( p === UnsignedShortType ) return 5123;
    		if ( p === IntType ) return 5124;
    		if ( p === UnsignedIntType ) return 5125;
    		if ( p === FloatType ) return 5126;

    		if ( p === HalfFloatType ) {

    			if ( isWebGL2 ) return 5131;

    			extension = extensions.get( 'OES_texture_half_float' );

    			if ( extension !== null ) {

    				return extension.HALF_FLOAT_OES;

    			} else {

    				return null;

    			}

    		}

    		if ( p === AlphaFormat ) return 6406;
    		if ( p === RGBAFormat ) return 6408;
    		if ( p === LuminanceFormat ) return 6409;
    		if ( p === LuminanceAlphaFormat ) return 6410;
    		if ( p === DepthFormat ) return 6402;
    		if ( p === DepthStencilFormat ) return 34041;
    		if ( p === RedFormat ) return 6403;

    		if ( p === RGBFormat ) {

    			console.warn( 'THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228' );
    			return 6408;

    		}

    		// WebGL 1 sRGB fallback

    		if ( p === _SRGBAFormat ) {

    			extension = extensions.get( 'EXT_sRGB' );

    			if ( extension !== null ) {

    				return extension.SRGB_ALPHA_EXT;

    			} else {

    				return null;

    			}

    		}

    		// WebGL2 formats.

    		if ( p === RedIntegerFormat ) return 36244;
    		if ( p === RGFormat ) return 33319;
    		if ( p === RGIntegerFormat ) return 33320;
    		if ( p === RGBAIntegerFormat ) return 36249;

    		// S3TC

    		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

    			if ( encoding === sRGBEncoding ) {

    				extension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );

    				if ( extension !== null ) {

    					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
    					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
    					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
    					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

    				} else {

    					return null;

    				}

    			} else {

    				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

    				if ( extension !== null ) {

    					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
    					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
    					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
    					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

    				} else {

    					return null;

    				}

    			}

    		}

    		// PVRTC

    		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

    			if ( extension !== null ) {

    				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
    				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
    				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
    				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

    			} else {

    				return null;

    			}

    		}

    		// ETC1

    		if ( p === RGB_ETC1_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

    			if ( extension !== null ) {

    				return extension.COMPRESSED_RGB_ETC1_WEBGL;

    			} else {

    				return null;

    			}

    		}

    		// ETC2

    		if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_etc' );

    			if ( extension !== null ) {

    				if ( p === RGB_ETC2_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
    				if ( p === RGBA_ETC2_EAC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;

    			} else {

    				return null;

    			}

    		}

    		// ASTC

    		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
    			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
    			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
    			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
    			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_astc' );

    			if ( extension !== null ) {

    				if ( p === RGBA_ASTC_4x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
    				if ( p === RGBA_ASTC_5x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
    				if ( p === RGBA_ASTC_5x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
    				if ( p === RGBA_ASTC_6x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
    				if ( p === RGBA_ASTC_6x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
    				if ( p === RGBA_ASTC_8x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
    				if ( p === RGBA_ASTC_8x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
    				if ( p === RGBA_ASTC_8x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
    				if ( p === RGBA_ASTC_10x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
    				if ( p === RGBA_ASTC_10x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
    				if ( p === RGBA_ASTC_10x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
    				if ( p === RGBA_ASTC_10x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
    				if ( p === RGBA_ASTC_12x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
    				if ( p === RGBA_ASTC_12x12_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;

    			} else {

    				return null;

    			}

    		}

    		// BPTC

    		if ( p === RGBA_BPTC_Format ) {

    			extension = extensions.get( 'EXT_texture_compression_bptc' );

    			if ( extension !== null ) {

    				if ( p === RGBA_BPTC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;

    			} else {

    				return null;

    			}

    		}

    		//

    		if ( p === UnsignedInt248Type ) {

    			if ( isWebGL2 ) return 34042;

    			extension = extensions.get( 'WEBGL_depth_texture' );

    			if ( extension !== null ) {

    				return extension.UNSIGNED_INT_24_8_WEBGL;

    			} else {

    				return null;

    			}

    		}

    		// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)

    		return ( gl[ p ] !== undefined ) ? gl[ p ] : null;

    	}

    	return { convert: convert };

    }

    class ArrayCamera extends PerspectiveCamera {

    	constructor( array = [] ) {

    		super();

    		this.isArrayCamera = true;

    		this.cameras = array;

    	}

    }

    class Group extends Object3D {

    	constructor() {

    		super();

    		this.isGroup = true;

    		this.type = 'Group';

    	}

    }

    const _moveEvent = { type: 'move' };

    class WebXRController {

    	constructor() {

    		this._targetRay = null;
    		this._grip = null;
    		this._hand = null;

    	}

    	getHandSpace() {

    		if ( this._hand === null ) {

    			this._hand = new Group();
    			this._hand.matrixAutoUpdate = false;
    			this._hand.visible = false;

    			this._hand.joints = {};
    			this._hand.inputState = { pinching: false };

    		}

    		return this._hand;

    	}

    	getTargetRaySpace() {

    		if ( this._targetRay === null ) {

    			this._targetRay = new Group();
    			this._targetRay.matrixAutoUpdate = false;
    			this._targetRay.visible = false;
    			this._targetRay.hasLinearVelocity = false;
    			this._targetRay.linearVelocity = new Vector3();
    			this._targetRay.hasAngularVelocity = false;
    			this._targetRay.angularVelocity = new Vector3();

    		}

    		return this._targetRay;

    	}

    	getGripSpace() {

    		if ( this._grip === null ) {

    			this._grip = new Group();
    			this._grip.matrixAutoUpdate = false;
    			this._grip.visible = false;
    			this._grip.hasLinearVelocity = false;
    			this._grip.linearVelocity = new Vector3();
    			this._grip.hasAngularVelocity = false;
    			this._grip.angularVelocity = new Vector3();

    		}

    		return this._grip;

    	}

    	dispatchEvent( event ) {

    		if ( this._targetRay !== null ) {

    			this._targetRay.dispatchEvent( event );

    		}

    		if ( this._grip !== null ) {

    			this._grip.dispatchEvent( event );

    		}

    		if ( this._hand !== null ) {

    			this._hand.dispatchEvent( event );

    		}

    		return this;

    	}

    	disconnect( inputSource ) {

    		this.dispatchEvent( { type: 'disconnected', data: inputSource } );

    		if ( this._targetRay !== null ) {

    			this._targetRay.visible = false;

    		}

    		if ( this._grip !== null ) {

    			this._grip.visible = false;

    		}

    		if ( this._hand !== null ) {

    			this._hand.visible = false;

    		}

    		return this;

    	}

    	update( inputSource, frame, referenceSpace ) {

    		let inputPose = null;
    		let gripPose = null;
    		let handPose = null;

    		const targetRay = this._targetRay;
    		const grip = this._grip;
    		const hand = this._hand;

    		if ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {

    			if ( targetRay !== null ) {

    				inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

    				if ( inputPose !== null ) {

    					targetRay.matrix.fromArray( inputPose.transform.matrix );
    					targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );

    					if ( inputPose.linearVelocity ) {

    						targetRay.hasLinearVelocity = true;
    						targetRay.linearVelocity.copy( inputPose.linearVelocity );

    					} else {

    						targetRay.hasLinearVelocity = false;

    					}

    					if ( inputPose.angularVelocity ) {

    						targetRay.hasAngularVelocity = true;
    						targetRay.angularVelocity.copy( inputPose.angularVelocity );

    					} else {

    						targetRay.hasAngularVelocity = false;

    					}

    					this.dispatchEvent( _moveEvent );

    				}

    			}

    			if ( hand && inputSource.hand ) {

    				handPose = true;

    				for ( const inputjoint of inputSource.hand.values() ) {

    					// Update the joints groups with the XRJoint poses
    					const jointPose = frame.getJointPose( inputjoint, referenceSpace );

    					if ( hand.joints[ inputjoint.jointName ] === undefined ) {

    						// The transform of this joint will be updated with the joint pose on each frame
    						const joint = new Group();
    						joint.matrixAutoUpdate = false;
    						joint.visible = false;
    						hand.joints[ inputjoint.jointName ] = joint;
    						// ??
    						hand.add( joint );

    					}

    					const joint = hand.joints[ inputjoint.jointName ];

    					if ( jointPose !== null ) {

    						joint.matrix.fromArray( jointPose.transform.matrix );
    						joint.matrix.decompose( joint.position, joint.rotation, joint.scale );
    						joint.jointRadius = jointPose.radius;

    					}

    					joint.visible = jointPose !== null;

    				}

    				// Custom events

    				// Check pinchz
    				const indexTip = hand.joints[ 'index-finger-tip' ];
    				const thumbTip = hand.joints[ 'thumb-tip' ];
    				const distance = indexTip.position.distanceTo( thumbTip.position );

    				const distanceToPinch = 0.02;
    				const threshold = 0.005;

    				if ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {

    					hand.inputState.pinching = false;
    					this.dispatchEvent( {
    						type: 'pinchend',
    						handedness: inputSource.handedness,
    						target: this
    					} );

    				} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {

    					hand.inputState.pinching = true;
    					this.dispatchEvent( {
    						type: 'pinchstart',
    						handedness: inputSource.handedness,
    						target: this
    					} );

    				}

    			} else {

    				if ( grip !== null && inputSource.gripSpace ) {

    					gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );

    					if ( gripPose !== null ) {

    						grip.matrix.fromArray( gripPose.transform.matrix );
    						grip.matrix.decompose( grip.position, grip.rotation, grip.scale );

    						if ( gripPose.linearVelocity ) {

    							grip.hasLinearVelocity = true;
    							grip.linearVelocity.copy( gripPose.linearVelocity );

    						} else {

    							grip.hasLinearVelocity = false;

    						}

    						if ( gripPose.angularVelocity ) {

    							grip.hasAngularVelocity = true;
    							grip.angularVelocity.copy( gripPose.angularVelocity );

    						} else {

    							grip.hasAngularVelocity = false;

    						}

    					}

    				}

    			}

    		}

    		if ( targetRay !== null ) {

    			targetRay.visible = ( inputPose !== null );

    		}

    		if ( grip !== null ) {

    			grip.visible = ( gripPose !== null );

    		}

    		if ( hand !== null ) {

    			hand.visible = ( handPose !== null );

    		}

    		return this;

    	}

    }

    class DepthTexture extends Texture {

    	constructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

    		format = format !== undefined ? format : DepthFormat;

    		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

    			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

    		}

    		if ( type === undefined && format === DepthFormat ) type = UnsignedIntType;
    		if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

    		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

    		this.isDepthTexture = true;

    		this.image = { width: width, height: height };

    		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
    		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

    		this.flipY = false;
    		this.generateMipmaps = false;

    	}


    }

    class WebXRManager extends EventDispatcher {

    	constructor( renderer, gl ) {

    		super();

    		const scope = this;

    		let session = null;
    		let framebufferScaleFactor = 1.0;

    		let referenceSpace = null;
    		let referenceSpaceType = 'local-floor';
    		let customReferenceSpace = null;

    		let pose = null;
    		let glBinding = null;
    		let glProjLayer = null;
    		let glBaseLayer = null;
    		let xrFrame = null;
    		const attributes = gl.getContextAttributes();
    		let initialRenderTarget = null;
    		let newRenderTarget = null;

    		const controllers = [];
    		const inputSourcesMap = new Map();

    		//

    		const cameraL = new PerspectiveCamera();
    		cameraL.layers.enable( 1 );
    		cameraL.viewport = new Vector4();

    		const cameraR = new PerspectiveCamera();
    		cameraR.layers.enable( 2 );
    		cameraR.viewport = new Vector4();

    		const cameras = [ cameraL, cameraR ];

    		const cameraVR = new ArrayCamera();
    		cameraVR.layers.enable( 1 );
    		cameraVR.layers.enable( 2 );

    		let _currentDepthNear = null;
    		let _currentDepthFar = null;

    		//

    		this.cameraAutoUpdate = true;
    		this.enabled = false;

    		this.isPresenting = false;

    		this.getController = function ( index ) {

    			let controller = controllers[ index ];

    			if ( controller === undefined ) {

    				controller = new WebXRController();
    				controllers[ index ] = controller;

    			}

    			return controller.getTargetRaySpace();

    		};

    		this.getControllerGrip = function ( index ) {

    			let controller = controllers[ index ];

    			if ( controller === undefined ) {

    				controller = new WebXRController();
    				controllers[ index ] = controller;

    			}

    			return controller.getGripSpace();

    		};

    		this.getHand = function ( index ) {

    			let controller = controllers[ index ];

    			if ( controller === undefined ) {

    				controller = new WebXRController();
    				controllers[ index ] = controller;

    			}

    			return controller.getHandSpace();

    		};

    		//

    		function onSessionEvent( event ) {

    			const controller = inputSourcesMap.get( event.inputSource );

    			if ( controller !== undefined ) {

    				controller.dispatchEvent( { type: event.type, data: event.inputSource } );

    			}

    		}

    		function onSessionEnd() {

    			session.removeEventListener( 'select', onSessionEvent );
    			session.removeEventListener( 'selectstart', onSessionEvent );
    			session.removeEventListener( 'selectend', onSessionEvent );
    			session.removeEventListener( 'squeeze', onSessionEvent );
    			session.removeEventListener( 'squeezestart', onSessionEvent );
    			session.removeEventListener( 'squeezeend', onSessionEvent );
    			session.removeEventListener( 'end', onSessionEnd );
    			session.removeEventListener( 'inputsourceschange', onInputSourcesChange );

    			inputSourcesMap.forEach( function ( controller, inputSource ) {

    				if ( controller !== undefined ) {

    					controller.disconnect( inputSource );

    				}

    			} );

    			inputSourcesMap.clear();

    			_currentDepthNear = null;
    			_currentDepthFar = null;

    			// restore framebuffer/rendering state

    			renderer.setRenderTarget( initialRenderTarget );

    			glBaseLayer = null;
    			glProjLayer = null;
    			glBinding = null;
    			session = null;
    			newRenderTarget = null;

    			//

    			animation.stop();

    			scope.isPresenting = false;

    			scope.dispatchEvent( { type: 'sessionend' } );

    		}

    		this.setFramebufferScaleFactor = function ( value ) {

    			framebufferScaleFactor = value;

    			if ( scope.isPresenting === true ) {

    				console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );

    			}

    		};

    		this.setReferenceSpaceType = function ( value ) {

    			referenceSpaceType = value;

    			if ( scope.isPresenting === true ) {

    				console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );

    			}

    		};

    		this.getReferenceSpace = function () {

    			return customReferenceSpace || referenceSpace;

    		};

    		this.setReferenceSpace = function ( space ) {

    			customReferenceSpace = space;

    		};

    		this.getBaseLayer = function () {

    			return glProjLayer !== null ? glProjLayer : glBaseLayer;

    		};

    		this.getBinding = function () {

    			return glBinding;

    		};

    		this.getFrame = function () {

    			return xrFrame;

    		};

    		this.getSession = function () {

    			return session;

    		};

    		this.setSession = async function ( value ) {

    			session = value;

    			if ( session !== null ) {

    				initialRenderTarget = renderer.getRenderTarget();

    				session.addEventListener( 'select', onSessionEvent );
    				session.addEventListener( 'selectstart', onSessionEvent );
    				session.addEventListener( 'selectend', onSessionEvent );
    				session.addEventListener( 'squeeze', onSessionEvent );
    				session.addEventListener( 'squeezestart', onSessionEvent );
    				session.addEventListener( 'squeezeend', onSessionEvent );
    				session.addEventListener( 'end', onSessionEnd );
    				session.addEventListener( 'inputsourceschange', onInputSourcesChange );

    				if ( attributes.xrCompatible !== true ) {

    					await gl.makeXRCompatible();

    				}

    				if ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {

    					const layerInit = {
    						antialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,
    						alpha: attributes.alpha,
    						depth: attributes.depth,
    						stencil: attributes.stencil,
    						framebufferScaleFactor: framebufferScaleFactor
    					};

    					glBaseLayer = new XRWebGLLayer( session, gl, layerInit );

    					session.updateRenderState( { baseLayer: glBaseLayer } );

    					newRenderTarget = new WebGLRenderTarget(
    						glBaseLayer.framebufferWidth,
    						glBaseLayer.framebufferHeight,
    						{
    							format: RGBAFormat,
    							type: UnsignedByteType,
    							encoding: renderer.outputEncoding
    						}
    					);

    				} else {

    					let depthFormat = null;
    					let depthType = null;
    					let glDepthFormat = null;

    					if ( attributes.depth ) {

    						glDepthFormat = attributes.stencil ? 35056 : 33190;
    						depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
    						depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;

    					}

    					const projectionlayerInit = {
    						colorFormat: ( renderer.outputEncoding === sRGBEncoding ) ? 35907 : 32856,
    						depthFormat: glDepthFormat,
    						scaleFactor: framebufferScaleFactor
    					};

    					glBinding = new XRWebGLBinding( session, gl );

    					glProjLayer = glBinding.createProjectionLayer( projectionlayerInit );

    					session.updateRenderState( { layers: [ glProjLayer ] } );

    					newRenderTarget = new WebGLRenderTarget(
    						glProjLayer.textureWidth,
    						glProjLayer.textureHeight,
    						{
    							format: RGBAFormat,
    							type: UnsignedByteType,
    							depthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),
    							stencilBuffer: attributes.stencil,
    							encoding: renderer.outputEncoding,
    							samples: attributes.antialias ? 4 : 0
    						} );

    					const renderTargetProperties = renderer.properties.get( newRenderTarget );
    					renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;

    				}

    				newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278

    				// Set foveation to maximum.
    				this.setFoveation( 1.0 );

    				customReferenceSpace = null;
    				referenceSpace = await session.requestReferenceSpace( referenceSpaceType );

    				animation.setContext( session );
    				animation.start();

    				scope.isPresenting = true;

    				scope.dispatchEvent( { type: 'sessionstart' } );

    			}

    		};

    		function onInputSourcesChange( event ) {

    			const inputSources = session.inputSources;

    			// Assign controllers to available inputSources

    			for ( let i = 0; i < inputSources.length; i ++ ) {

    				const index = inputSources[ i ].handedness === 'right' ? 1 : 0;
    				inputSourcesMap.set( inputSources[ i ], controllers[ index ] );

    			}

    			// Notify disconnected

    			for ( let i = 0; i < event.removed.length; i ++ ) {

    				const inputSource = event.removed[ i ];
    				const controller = inputSourcesMap.get( inputSource );

    				if ( controller ) {

    					controller.dispatchEvent( { type: 'disconnected', data: inputSource } );
    					inputSourcesMap.delete( inputSource );

    				}

    			}

    			// Notify connected

    			for ( let i = 0; i < event.added.length; i ++ ) {

    				const inputSource = event.added[ i ];
    				const controller = inputSourcesMap.get( inputSource );

    				if ( controller ) {

    					controller.dispatchEvent( { type: 'connected', data: inputSource } );

    				}

    			}

    		}

    		//

    		const cameraLPos = new Vector3();
    		const cameraRPos = new Vector3();

    		/**
    		 * Assumes 2 cameras that are parallel and share an X-axis, and that
    		 * the cameras' projection and world matrices have already been set.
    		 * And that near and far planes are identical for both cameras.
    		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
    		 */
    		function setProjectionFromUnion( camera, cameraL, cameraR ) {

    			cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
    			cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

    			const ipd = cameraLPos.distanceTo( cameraRPos );

    			const projL = cameraL.projectionMatrix.elements;
    			const projR = cameraR.projectionMatrix.elements;

    			// VR systems will have identical far and near planes, and
    			// most likely identical top and bottom frustum extents.
    			// Use the left camera for these values.
    			const near = projL[ 14 ] / ( projL[ 10 ] - 1 );
    			const far = projL[ 14 ] / ( projL[ 10 ] + 1 );
    			const topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
    			const bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

    			const leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
    			const rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
    			const left = near * leftFov;
    			const right = near * rightFov;

    			// Calculate the new camera's position offset from the
    			// left camera. xOffset should be roughly half `ipd`.
    			const zOffset = ipd / ( - leftFov + rightFov );
    			const xOffset = zOffset * - leftFov;

    			// TODO: Better way to apply this offset?
    			cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
    			camera.translateX( xOffset );
    			camera.translateZ( zOffset );
    			camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
    			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

    			// Find the union of the frustum values of the cameras and scale
    			// the values so that the near plane's position does not change in world space,
    			// although must now be relative to the new union camera.
    			const near2 = near + zOffset;
    			const far2 = far + zOffset;
    			const left2 = left - xOffset;
    			const right2 = right + ( ipd - xOffset );
    			const top2 = topFov * far / far2 * near2;
    			const bottom2 = bottomFov * far / far2 * near2;

    			camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );

    		}

    		function updateCamera( camera, parent ) {

    			if ( parent === null ) {

    				camera.matrixWorld.copy( camera.matrix );

    			} else {

    				camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

    			}

    			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

    		}

    		this.updateCamera = function ( camera ) {

    			if ( session === null ) return;

    			cameraVR.near = cameraR.near = cameraL.near = camera.near;
    			cameraVR.far = cameraR.far = cameraL.far = camera.far;

    			if ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {

    				// Note that the new renderState won't apply until the next frame. See #18320

    				session.updateRenderState( {
    					depthNear: cameraVR.near,
    					depthFar: cameraVR.far
    				} );

    				_currentDepthNear = cameraVR.near;
    				_currentDepthFar = cameraVR.far;

    			}

    			const parent = camera.parent;
    			const cameras = cameraVR.cameras;

    			updateCamera( cameraVR, parent );

    			for ( let i = 0; i < cameras.length; i ++ ) {

    				updateCamera( cameras[ i ], parent );

    			}

    			cameraVR.matrixWorld.decompose( cameraVR.position, cameraVR.quaternion, cameraVR.scale );

    			// update user camera and its children

    			camera.position.copy( cameraVR.position );
    			camera.quaternion.copy( cameraVR.quaternion );
    			camera.scale.copy( cameraVR.scale );
    			camera.matrix.copy( cameraVR.matrix );
    			camera.matrixWorld.copy( cameraVR.matrixWorld );

    			const children = camera.children;

    			for ( let i = 0, l = children.length; i < l; i ++ ) {

    				children[ i ].updateMatrixWorld( true );

    			}

    			// update projection matrix for proper view frustum culling

    			if ( cameras.length === 2 ) {

    				setProjectionFromUnion( cameraVR, cameraL, cameraR );

    			} else {

    				// assume single camera setup (AR)

    				cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );

    			}

    		};

    		this.getCamera = function () {

    			return cameraVR;

    		};

    		this.getFoveation = function () {

    			if ( glProjLayer !== null ) {

    				return glProjLayer.fixedFoveation;

    			}

    			if ( glBaseLayer !== null ) {

    				return glBaseLayer.fixedFoveation;

    			}

    			return undefined;

    		};

    		this.setFoveation = function ( foveation ) {

    			// 0 = no foveation = full resolution
    			// 1 = maximum foveation = the edges render at lower resolution

    			if ( glProjLayer !== null ) {

    				glProjLayer.fixedFoveation = foveation;

    			}

    			if ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {

    				glBaseLayer.fixedFoveation = foveation;

    			}

    		};

    		// Animation Loop

    		let onAnimationFrameCallback = null;

    		function onAnimationFrame( time, frame ) {

    			pose = frame.getViewerPose( customReferenceSpace || referenceSpace );
    			xrFrame = frame;

    			if ( pose !== null ) {

    				const views = pose.views;

    				if ( glBaseLayer !== null ) {

    					renderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );
    					renderer.setRenderTarget( newRenderTarget );

    				}

    				let cameraVRNeedsUpdate = false;

    				// check if it's necessary to rebuild cameraVR's camera list

    				if ( views.length !== cameraVR.cameras.length ) {

    					cameraVR.cameras.length = 0;
    					cameraVRNeedsUpdate = true;

    				}

    				for ( let i = 0; i < views.length; i ++ ) {

    					const view = views[ i ];

    					let viewport = null;

    					if ( glBaseLayer !== null ) {

    						viewport = glBaseLayer.getViewport( view );

    					} else {

    						const glSubImage = glBinding.getViewSubImage( glProjLayer, view );
    						viewport = glSubImage.viewport;

    						// For side-by-side projection, we only produce a single texture for both eyes.
    						if ( i === 0 ) {

    							renderer.setRenderTargetTextures(
    								newRenderTarget,
    								glSubImage.colorTexture,
    								glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );

    							renderer.setRenderTarget( newRenderTarget );

    						}

    					}

    					let camera = cameras[ i ];

    					if ( camera === undefined ) {

    						camera = new PerspectiveCamera();
    						camera.layers.enable( i );
    						camera.viewport = new Vector4();
    						cameras[ i ] = camera;

    					}

    					camera.matrix.fromArray( view.transform.matrix );
    					camera.projectionMatrix.fromArray( view.projectionMatrix );
    					camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

    					if ( i === 0 ) {

    						cameraVR.matrix.copy( camera.matrix );

    					}

    					if ( cameraVRNeedsUpdate === true ) {

    						cameraVR.cameras.push( camera );

    					}

    				}

    			}

    			//

    			const inputSources = session.inputSources;

    			for ( let i = 0; i < controllers.length; i ++ ) {

    				const inputSource = inputSources[ i ];
    				const controller = inputSourcesMap.get( inputSource );

    				if ( controller !== undefined ) {

    					controller.update( inputSource, frame, customReferenceSpace || referenceSpace );

    				}

    			}

    			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );

    			xrFrame = null;

    		}

    		const animation = new WebGLAnimation();

    		animation.setAnimationLoop( onAnimationFrame );

    		this.setAnimationLoop = function ( callback ) {

    			onAnimationFrameCallback = callback;

    		};

    		this.dispose = function () {};

    	}

    }

    function WebGLMaterials( renderer, properties ) {

    	function refreshFogUniforms( uniforms, fog ) {

    		uniforms.fogColor.value.copy( fog.color );

    		if ( fog.isFog ) {

    			uniforms.fogNear.value = fog.near;
    			uniforms.fogFar.value = fog.far;

    		} else if ( fog.isFogExp2 ) {

    			uniforms.fogDensity.value = fog.density;

    		}

    	}

    	function refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {

    		if ( material.isMeshBasicMaterial ) {

    			refreshUniformsCommon( uniforms, material );

    		} else if ( material.isMeshLambertMaterial ) {

    			refreshUniformsCommon( uniforms, material );

    		} else if ( material.isMeshToonMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsToon( uniforms, material );

    		} else if ( material.isMeshPhongMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsPhong( uniforms, material );

    		} else if ( material.isMeshStandardMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsStandard( uniforms, material );

    			if ( material.isMeshPhysicalMaterial ) {

    				refreshUniformsPhysical( uniforms, material, transmissionRenderTarget );

    			}

    		} else if ( material.isMeshMatcapMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsMatcap( uniforms, material );

    		} else if ( material.isMeshDepthMaterial ) {

    			refreshUniformsCommon( uniforms, material );

    		} else if ( material.isMeshDistanceMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsDistance( uniforms, material );

    		} else if ( material.isMeshNormalMaterial ) {

    			refreshUniformsCommon( uniforms, material );

    		} else if ( material.isLineBasicMaterial ) {

    			refreshUniformsLine( uniforms, material );

    			if ( material.isLineDashedMaterial ) {

    				refreshUniformsDash( uniforms, material );

    			}

    		} else if ( material.isPointsMaterial ) {

    			refreshUniformsPoints( uniforms, material, pixelRatio, height );

    		} else if ( material.isSpriteMaterial ) {

    			refreshUniformsSprites( uniforms, material );

    		} else if ( material.isShadowMaterial ) {

    			uniforms.color.value.copy( material.color );
    			uniforms.opacity.value = material.opacity;

    		} else if ( material.isShaderMaterial ) {

    			material.uniformsNeedUpdate = false; // #15581

    		}

    	}

    	function refreshUniformsCommon( uniforms, material ) {

    		uniforms.opacity.value = material.opacity;

    		if ( material.color ) {

    			uniforms.diffuse.value.copy( material.color );

    		}

    		if ( material.emissive ) {

    			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

    		}

    		if ( material.map ) {

    			uniforms.map.value = material.map;

    		}

    		if ( material.alphaMap ) {

    			uniforms.alphaMap.value = material.alphaMap;

    		}

    		if ( material.bumpMap ) {

    			uniforms.bumpMap.value = material.bumpMap;
    			uniforms.bumpScale.value = material.bumpScale;
    			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

    		}

    		if ( material.displacementMap ) {

    			uniforms.displacementMap.value = material.displacementMap;
    			uniforms.displacementScale.value = material.displacementScale;
    			uniforms.displacementBias.value = material.displacementBias;

    		}

    		if ( material.emissiveMap ) {

    			uniforms.emissiveMap.value = material.emissiveMap;

    		}

    		if ( material.normalMap ) {

    			uniforms.normalMap.value = material.normalMap;
    			uniforms.normalScale.value.copy( material.normalScale );
    			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

    		}

    		if ( material.specularMap ) {

    			uniforms.specularMap.value = material.specularMap;

    		}

    		if ( material.alphaTest > 0 ) {

    			uniforms.alphaTest.value = material.alphaTest;

    		}

    		const envMap = properties.get( material ).envMap;

    		if ( envMap ) {

    			uniforms.envMap.value = envMap;

    			uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;

    			uniforms.reflectivity.value = material.reflectivity;
    			uniforms.ior.value = material.ior;
    			uniforms.refractionRatio.value = material.refractionRatio;

    		}

    		if ( material.lightMap ) {

    			uniforms.lightMap.value = material.lightMap;

    			// artist-friendly light intensity scaling factor
    			const scaleFactor = ( renderer.physicallyCorrectLights !== true ) ? Math.PI : 1;

    			uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;

    		}

    		if ( material.aoMap ) {

    			uniforms.aoMap.value = material.aoMap;
    			uniforms.aoMapIntensity.value = material.aoMapIntensity;

    		}

    		// uv repeat and offset setting priorities
    		// 1. color map
    		// 2. specular map
    		// 3. displacementMap map
    		// 4. normal map
    		// 5. bump map
    		// 6. roughnessMap map
    		// 7. metalnessMap map
    		// 8. alphaMap map
    		// 9. emissiveMap map
    		// 10. clearcoat map
    		// 11. clearcoat normal map
    		// 12. clearcoat roughnessMap map
    		// 13. iridescence map
    		// 14. iridescence thickness map
    		// 15. specular intensity map
    		// 16. specular tint map
    		// 17. transmission map
    		// 18. thickness map

    		let uvScaleMap;

    		if ( material.map ) {

    			uvScaleMap = material.map;

    		} else if ( material.specularMap ) {

    			uvScaleMap = material.specularMap;

    		} else if ( material.displacementMap ) {

    			uvScaleMap = material.displacementMap;

    		} else if ( material.normalMap ) {

    			uvScaleMap = material.normalMap;

    		} else if ( material.bumpMap ) {

    			uvScaleMap = material.bumpMap;

    		} else if ( material.roughnessMap ) {

    			uvScaleMap = material.roughnessMap;

    		} else if ( material.metalnessMap ) {

    			uvScaleMap = material.metalnessMap;

    		} else if ( material.alphaMap ) {

    			uvScaleMap = material.alphaMap;

    		} else if ( material.emissiveMap ) {

    			uvScaleMap = material.emissiveMap;

    		} else if ( material.clearcoatMap ) {

    			uvScaleMap = material.clearcoatMap;

    		} else if ( material.clearcoatNormalMap ) {

    			uvScaleMap = material.clearcoatNormalMap;

    		} else if ( material.clearcoatRoughnessMap ) {

    			uvScaleMap = material.clearcoatRoughnessMap;

    		} else if ( material.iridescenceMap ) {

    			uvScaleMap = material.iridescenceMap;

    		} else if ( material.iridescenceThicknessMap ) {

    			uvScaleMap = material.iridescenceThicknessMap;

    		} else if ( material.specularIntensityMap ) {

    			uvScaleMap = material.specularIntensityMap;

    		} else if ( material.specularColorMap ) {

    			uvScaleMap = material.specularColorMap;

    		} else if ( material.transmissionMap ) {

    			uvScaleMap = material.transmissionMap;

    		} else if ( material.thicknessMap ) {

    			uvScaleMap = material.thicknessMap;

    		} else if ( material.sheenColorMap ) {

    			uvScaleMap = material.sheenColorMap;

    		} else if ( material.sheenRoughnessMap ) {

    			uvScaleMap = material.sheenRoughnessMap;

    		}

    		if ( uvScaleMap !== undefined ) {

    			// backwards compatibility
    			if ( uvScaleMap.isWebGLRenderTarget ) {

    				uvScaleMap = uvScaleMap.texture;

    			}

    			if ( uvScaleMap.matrixAutoUpdate === true ) {

    				uvScaleMap.updateMatrix();

    			}

    			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

    		}

    		// uv repeat and offset setting priorities for uv2
    		// 1. ao map
    		// 2. light map

    		let uv2ScaleMap;

    		if ( material.aoMap ) {

    			uv2ScaleMap = material.aoMap;

    		} else if ( material.lightMap ) {

    			uv2ScaleMap = material.lightMap;

    		}

    		if ( uv2ScaleMap !== undefined ) {

    			// backwards compatibility
    			if ( uv2ScaleMap.isWebGLRenderTarget ) {

    				uv2ScaleMap = uv2ScaleMap.texture;

    			}

    			if ( uv2ScaleMap.matrixAutoUpdate === true ) {

    				uv2ScaleMap.updateMatrix();

    			}

    			uniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );

    		}

    	}

    	function refreshUniformsLine( uniforms, material ) {

    		uniforms.diffuse.value.copy( material.color );
    		uniforms.opacity.value = material.opacity;

    	}

    	function refreshUniformsDash( uniforms, material ) {

    		uniforms.dashSize.value = material.dashSize;
    		uniforms.totalSize.value = material.dashSize + material.gapSize;
    		uniforms.scale.value = material.scale;

    	}

    	function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {

    		uniforms.diffuse.value.copy( material.color );
    		uniforms.opacity.value = material.opacity;
    		uniforms.size.value = material.size * pixelRatio;
    		uniforms.scale.value = height * 0.5;

    		if ( material.map ) {

    			uniforms.map.value = material.map;

    		}

    		if ( material.alphaMap ) {

    			uniforms.alphaMap.value = material.alphaMap;

    		}

    		if ( material.alphaTest > 0 ) {

    			uniforms.alphaTest.value = material.alphaTest;

    		}

    		// uv repeat and offset setting priorities
    		// 1. color map
    		// 2. alpha map

    		let uvScaleMap;

    		if ( material.map ) {

    			uvScaleMap = material.map;

    		} else if ( material.alphaMap ) {

    			uvScaleMap = material.alphaMap;

    		}

    		if ( uvScaleMap !== undefined ) {

    			if ( uvScaleMap.matrixAutoUpdate === true ) {

    				uvScaleMap.updateMatrix();

    			}

    			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

    		}

    	}

    	function refreshUniformsSprites( uniforms, material ) {

    		uniforms.diffuse.value.copy( material.color );
    		uniforms.opacity.value = material.opacity;
    		uniforms.rotation.value = material.rotation;

    		if ( material.map ) {

    			uniforms.map.value = material.map;

    		}

    		if ( material.alphaMap ) {

    			uniforms.alphaMap.value = material.alphaMap;

    		}

    		if ( material.alphaTest > 0 ) {

    			uniforms.alphaTest.value = material.alphaTest;

    		}

    		// uv repeat and offset setting priorities
    		// 1. color map
    		// 2. alpha map

    		let uvScaleMap;

    		if ( material.map ) {

    			uvScaleMap = material.map;

    		} else if ( material.alphaMap ) {

    			uvScaleMap = material.alphaMap;

    		}

    		if ( uvScaleMap !== undefined ) {

    			if ( uvScaleMap.matrixAutoUpdate === true ) {

    				uvScaleMap.updateMatrix();

    			}

    			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

    		}

    	}

    	function refreshUniformsPhong( uniforms, material ) {

    		uniforms.specular.value.copy( material.specular );
    		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

    	}

    	function refreshUniformsToon( uniforms, material ) {

    		if ( material.gradientMap ) {

    			uniforms.gradientMap.value = material.gradientMap;

    		}

    	}

    	function refreshUniformsStandard( uniforms, material ) {

    		uniforms.roughness.value = material.roughness;
    		uniforms.metalness.value = material.metalness;

    		if ( material.roughnessMap ) {

    			uniforms.roughnessMap.value = material.roughnessMap;

    		}

    		if ( material.metalnessMap ) {

    			uniforms.metalnessMap.value = material.metalnessMap;

    		}

    		const envMap = properties.get( material ).envMap;

    		if ( envMap ) {

    			//uniforms.envMap.value = material.envMap; // part of uniforms common
    			uniforms.envMapIntensity.value = material.envMapIntensity;

    		}

    	}

    	function refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {

    		uniforms.ior.value = material.ior; // also part of uniforms common

    		if ( material.sheen > 0 ) {

    			uniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );

    			uniforms.sheenRoughness.value = material.sheenRoughness;

    			if ( material.sheenColorMap ) {

    				uniforms.sheenColorMap.value = material.sheenColorMap;

    			}

    			if ( material.sheenRoughnessMap ) {

    				uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;

    			}

    		}

    		if ( material.clearcoat > 0 ) {

    			uniforms.clearcoat.value = material.clearcoat;
    			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;

    			if ( material.clearcoatMap ) {

    				uniforms.clearcoatMap.value = material.clearcoatMap;

    			}

    			if ( material.clearcoatRoughnessMap ) {

    				uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;

    			}

    			if ( material.clearcoatNormalMap ) {

    				uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );
    				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

    				if ( material.side === BackSide ) {

    					uniforms.clearcoatNormalScale.value.negate();

    				}

    			}

    		}

    		if ( material.iridescence > 0 ) {

    			uniforms.iridescence.value = material.iridescence;
    			uniforms.iridescenceIOR.value = material.iridescenceIOR;
    			uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];
    			uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];

    			if ( material.iridescenceMap ) {

    				uniforms.iridescenceMap.value = material.iridescenceMap;

    			}

    			if ( material.iridescenceThicknessMap ) {

    				uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;

    			}

    		}

    		if ( material.transmission > 0 ) {

    			uniforms.transmission.value = material.transmission;
    			uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
    			uniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );

    			if ( material.transmissionMap ) {

    				uniforms.transmissionMap.value = material.transmissionMap;

    			}

    			uniforms.thickness.value = material.thickness;

    			if ( material.thicknessMap ) {

    				uniforms.thicknessMap.value = material.thicknessMap;

    			}

    			uniforms.attenuationDistance.value = material.attenuationDistance;
    			uniforms.attenuationColor.value.copy( material.attenuationColor );

    		}

    		uniforms.specularIntensity.value = material.specularIntensity;
    		uniforms.specularColor.value.copy( material.specularColor );

    		if ( material.specularIntensityMap ) {

    			uniforms.specularIntensityMap.value = material.specularIntensityMap;

    		}

    		if ( material.specularColorMap ) {

    			uniforms.specularColorMap.value = material.specularColorMap;

    		}

    	}

    	function refreshUniformsMatcap( uniforms, material ) {

    		if ( material.matcap ) {

    			uniforms.matcap.value = material.matcap;

    		}

    	}

    	function refreshUniformsDistance( uniforms, material ) {

    		uniforms.referencePosition.value.copy( material.referencePosition );
    		uniforms.nearDistance.value = material.nearDistance;
    		uniforms.farDistance.value = material.farDistance;

    	}

    	return {
    		refreshFogUniforms: refreshFogUniforms,
    		refreshMaterialUniforms: refreshMaterialUniforms
    	};

    }

    function createCanvasElement() {

    	const canvas = createElementNS( 'canvas' );
    	canvas.style.display = 'block';
    	return canvas;

    }

    function WebGLRenderer( parameters = {} ) {

    	this.isWebGLRenderer = true;

    	const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),
    		_context = parameters.context !== undefined ? parameters.context : null,

    		_depth = parameters.depth !== undefined ? parameters.depth : true,
    		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
    		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
    		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
    		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
    		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
    		_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;

    	let _alpha;

    	if ( _context !== null ) {

    		_alpha = _context.getContextAttributes().alpha;

    	} else {

    		_alpha = parameters.alpha !== undefined ? parameters.alpha : false;

    	}

    	let currentRenderList = null;
    	let currentRenderState = null;

    	// render() can be called from within a callback triggered by another render.
    	// We track this so that the nested render call gets its list and state isolated from the parent render call.

    	const renderListStack = [];
    	const renderStateStack = [];

    	// public properties

    	this.domElement = _canvas;

    	// Debug configuration container
    	this.debug = {

    		/**
    		 * Enables error checking and reporting when shader programs are being compiled
    		 * @type {boolean}
    		 */
    		checkShaderErrors: true
    	};

    	// clearing

    	this.autoClear = true;
    	this.autoClearColor = true;
    	this.autoClearDepth = true;
    	this.autoClearStencil = true;

    	// scene graph

    	this.sortObjects = true;

    	// user-defined clipping

    	this.clippingPlanes = [];
    	this.localClippingEnabled = false;

    	// physically based shading

    	this.outputEncoding = LinearEncoding;

    	// physical lights

    	this.physicallyCorrectLights = false;

    	// tone mapping

    	this.toneMapping = NoToneMapping;
    	this.toneMappingExposure = 1.0;

    	//

    	Object.defineProperties( this, {

    		// @deprecated since r136, 0e21088102b4de7e0a0a33140620b7a3424b9e6d

    		gammaFactor: {
    			get: function () {

    				console.warn( 'THREE.WebGLRenderer: .gammaFactor has been removed.' );
    				return 2;

    			},
    			set: function () {

    				console.warn( 'THREE.WebGLRenderer: .gammaFactor has been removed.' );

    			}
    		}

    	} );

    	// internal properties

    	const _this = this;

    	let _isContextLost = false;

    	// internal state cache

    	let _currentActiveCubeFace = 0;
    	let _currentActiveMipmapLevel = 0;
    	let _currentRenderTarget = null;
    	let _currentMaterialId = - 1;

    	let _currentCamera = null;

    	const _currentViewport = new Vector4();
    	const _currentScissor = new Vector4();
    	let _currentScissorTest = null;

    	//

    	let _width = _canvas.width;
    	let _height = _canvas.height;

    	let _pixelRatio = 1;
    	let _opaqueSort = null;
    	let _transparentSort = null;

    	const _viewport = new Vector4( 0, 0, _width, _height );
    	const _scissor = new Vector4( 0, 0, _width, _height );
    	let _scissorTest = false;

    	// frustum

    	const _frustum = new Frustum();

    	// clipping

    	let _clippingEnabled = false;
    	let _localClippingEnabled = false;

    	// transmission

    	let _transmissionRenderTarget = null;

    	// camera matrices cache

    	const _projScreenMatrix = new Matrix4();

    	const _vector2 = new Vector2();
    	const _vector3 = new Vector3();

    	const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };

    	function getTargetPixelRatio() {

    		return _currentRenderTarget === null ? _pixelRatio : 1;

    	}

    	// initialize

    	let _gl = _context;

    	function getContext( contextNames, contextAttributes ) {

    		for ( let i = 0; i < contextNames.length; i ++ ) {

    			const contextName = contextNames[ i ];
    			const context = _canvas.getContext( contextName, contextAttributes );
    			if ( context !== null ) return context;

    		}

    		return null;

    	}

    	try {

    		const contextAttributes = {
    			alpha: true,
    			depth: _depth,
    			stencil: _stencil,
    			antialias: _antialias,
    			premultipliedAlpha: _premultipliedAlpha,
    			preserveDrawingBuffer: _preserveDrawingBuffer,
    			powerPreference: _powerPreference,
    			failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
    		};

    		// OffscreenCanvas does not have setAttribute, see #22811
    		if ( 'setAttribute' in _canvas ) _canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );

    		// event listeners must be registered before WebGL context is created, see #12753
    		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
    		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
    		_canvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );

    		if ( _gl === null ) {

    			const contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];

    			if ( _this.isWebGL1Renderer === true ) {

    				contextNames.shift();

    			}

    			_gl = getContext( contextNames, contextAttributes );

    			if ( _gl === null ) {

    				if ( getContext( contextNames ) ) {

    					throw new Error( 'Error creating WebGL context with your selected attributes.' );

    				} else {

    					throw new Error( 'Error creating WebGL context.' );

    				}

    			}

    		}

    		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

    		if ( _gl.getShaderPrecisionFormat === undefined ) {

    			_gl.getShaderPrecisionFormat = function () {

    				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

    			};

    		}

    	} catch ( error ) {

    		console.error( 'THREE.WebGLRenderer: ' + error.message );
    		throw error;

    	}

    	let extensions, capabilities, state, info;
    	let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
    	let programCache, materials, renderLists, renderStates, clipping, shadowMap;

    	let background, morphtargets, bufferRenderer, indexedBufferRenderer;

    	let utils, bindingStates;

    	function initGLContext() {

    		extensions = new WebGLExtensions( _gl );

    		capabilities = new WebGLCapabilities( _gl, extensions, parameters );

    		extensions.init( capabilities );

    		utils = new WebGLUtils( _gl, extensions, capabilities );

    		state = new WebGLState( _gl, extensions, capabilities );

    		info = new WebGLInfo( _gl );
    		properties = new WebGLProperties();
    		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
    		cubemaps = new WebGLCubeMaps( _this );
    		cubeuvmaps = new WebGLCubeUVMaps( _this );
    		attributes = new WebGLAttributes( _gl, capabilities );
    		bindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );
    		geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );
    		objects = new WebGLObjects( _gl, geometries, attributes, info );
    		morphtargets = new WebGLMorphtargets( _gl, capabilities, textures );
    		clipping = new WebGLClipping( properties );
    		programCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );
    		materials = new WebGLMaterials( _this, properties );
    		renderLists = new WebGLRenderLists();
    		renderStates = new WebGLRenderStates( extensions, capabilities );
    		background = new WebGLBackground( _this, cubemaps, state, objects, _alpha, _premultipliedAlpha );
    		shadowMap = new WebGLShadowMap( _this, objects, capabilities );

    		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
    		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

    		info.programs = programCache.programs;

    		_this.capabilities = capabilities;
    		_this.extensions = extensions;
    		_this.properties = properties;
    		_this.renderLists = renderLists;
    		_this.shadowMap = shadowMap;
    		_this.state = state;
    		_this.info = info;

    	}

    	initGLContext();

    	// xr

    	const xr = new WebXRManager( _this, _gl );

    	this.xr = xr;

    	// API

    	this.getContext = function () {

    		return _gl;

    	};

    	this.getContextAttributes = function () {

    		return _gl.getContextAttributes();

    	};

    	this.forceContextLoss = function () {

    		const extension = extensions.get( 'WEBGL_lose_context' );
    		if ( extension ) extension.loseContext();

    	};

    	this.forceContextRestore = function () {

    		const extension = extensions.get( 'WEBGL_lose_context' );
    		if ( extension ) extension.restoreContext();

    	};

    	this.getPixelRatio = function () {

    		return _pixelRatio;

    	};

    	this.setPixelRatio = function ( value ) {

    		if ( value === undefined ) return;

    		_pixelRatio = value;

    		this.setSize( _width, _height, false );

    	};

    	this.getSize = function ( target ) {

    		return target.set( _width, _height );

    	};

    	this.setSize = function ( width, height, updateStyle ) {

    		if ( xr.isPresenting ) {

    			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
    			return;

    		}

    		_width = width;
    		_height = height;

    		_canvas.width = Math.floor( width * _pixelRatio );
    		_canvas.height = Math.floor( height * _pixelRatio );

    		if ( updateStyle !== false ) {

    			_canvas.style.width = width + 'px';
    			_canvas.style.height = height + 'px';

    		}

    		this.setViewport( 0, 0, width, height );

    	};

    	this.getDrawingBufferSize = function ( target ) {

    		return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

    	};

    	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

    		_width = width;
    		_height = height;

    		_pixelRatio = pixelRatio;

    		_canvas.width = Math.floor( width * pixelRatio );
    		_canvas.height = Math.floor( height * pixelRatio );

    		this.setViewport( 0, 0, width, height );

    	};

    	this.getCurrentViewport = function ( target ) {

    		return target.copy( _currentViewport );

    	};

    	this.getViewport = function ( target ) {

    		return target.copy( _viewport );

    	};

    	this.setViewport = function ( x, y, width, height ) {

    		if ( x.isVector4 ) {

    			_viewport.set( x.x, x.y, x.z, x.w );

    		} else {

    			_viewport.set( x, y, width, height );

    		}

    		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

    	};

    	this.getScissor = function ( target ) {

    		return target.copy( _scissor );

    	};

    	this.setScissor = function ( x, y, width, height ) {

    		if ( x.isVector4 ) {

    			_scissor.set( x.x, x.y, x.z, x.w );

    		} else {

    			_scissor.set( x, y, width, height );

    		}

    		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );

    	};

    	this.getScissorTest = function () {

    		return _scissorTest;

    	};

    	this.setScissorTest = function ( boolean ) {

    		state.setScissorTest( _scissorTest = boolean );

    	};

    	this.setOpaqueSort = function ( method ) {

    		_opaqueSort = method;

    	};

    	this.setTransparentSort = function ( method ) {

    		_transparentSort = method;

    	};

    	// Clearing

    	this.getClearColor = function ( target ) {

    		return target.copy( background.getClearColor() );

    	};

    	this.setClearColor = function () {

    		background.setClearColor.apply( background, arguments );

    	};

    	this.getClearAlpha = function () {

    		return background.getClearAlpha();

    	};

    	this.setClearAlpha = function () {

    		background.setClearAlpha.apply( background, arguments );

    	};

    	this.clear = function ( color = true, depth = true, stencil = true ) {

    		let bits = 0;

    		if ( color ) bits |= 16384;
    		if ( depth ) bits |= 256;
    		if ( stencil ) bits |= 1024;

    		_gl.clear( bits );

    	};

    	this.clearColor = function () {

    		this.clear( true, false, false );

    	};

    	this.clearDepth = function () {

    		this.clear( false, true, false );

    	};

    	this.clearStencil = function () {

    		this.clear( false, false, true );

    	};

    	//

    	this.dispose = function () {

    		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
    		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
    		_canvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );

    		renderLists.dispose();
    		renderStates.dispose();
    		properties.dispose();
    		cubemaps.dispose();
    		cubeuvmaps.dispose();
    		objects.dispose();
    		bindingStates.dispose();
    		programCache.dispose();

    		xr.dispose();

    		xr.removeEventListener( 'sessionstart', onXRSessionStart );
    		xr.removeEventListener( 'sessionend', onXRSessionEnd );

    		if ( _transmissionRenderTarget ) {

    			_transmissionRenderTarget.dispose();
    			_transmissionRenderTarget = null;

    		}

    		animation.stop();

    	};

    	// Events

    	function onContextLost( event ) {

    		event.preventDefault();

    		console.log( 'THREE.WebGLRenderer: Context Lost.' );

    		_isContextLost = true;

    	}

    	function onContextRestore( /* event */ ) {

    		console.log( 'THREE.WebGLRenderer: Context Restored.' );

    		_isContextLost = false;

    		const infoAutoReset = info.autoReset;
    		const shadowMapEnabled = shadowMap.enabled;
    		const shadowMapAutoUpdate = shadowMap.autoUpdate;
    		const shadowMapNeedsUpdate = shadowMap.needsUpdate;
    		const shadowMapType = shadowMap.type;

    		initGLContext();

    		info.autoReset = infoAutoReset;
    		shadowMap.enabled = shadowMapEnabled;
    		shadowMap.autoUpdate = shadowMapAutoUpdate;
    		shadowMap.needsUpdate = shadowMapNeedsUpdate;
    		shadowMap.type = shadowMapType;

    	}

    	function onContextCreationError( event ) {

    		console.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );

    	}

    	function onMaterialDispose( event ) {

    		const material = event.target;

    		material.removeEventListener( 'dispose', onMaterialDispose );

    		deallocateMaterial( material );

    	}

    	// Buffer deallocation

    	function deallocateMaterial( material ) {

    		releaseMaterialProgramReferences( material );

    		properties.remove( material );

    	}


    	function releaseMaterialProgramReferences( material ) {

    		const programs = properties.get( material ).programs;

    		if ( programs !== undefined ) {

    			programs.forEach( function ( program ) {

    				programCache.releaseProgram( program );

    			} );

    			if ( material.isShaderMaterial ) {

    				programCache.releaseShaderCache( material );

    			}

    		}

    	}

    	// Buffer rendering

    	this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {

    		if ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

    		const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

    		const program = setProgram( camera, scene, geometry, material, object );

    		state.setMaterial( material, frontFaceCW );

    		//

    		let index = geometry.index;
    		const position = geometry.attributes.position;

    		//

    		if ( index === null ) {

    			if ( position === undefined || position.count === 0 ) return;

    		} else if ( index.count === 0 ) {

    			return;

    		}

    		//

    		let rangeFactor = 1;

    		if ( material.wireframe === true ) {

    			index = geometries.getWireframeAttribute( geometry );
    			rangeFactor = 2;

    		}

    		bindingStates.setup( object, material, program, geometry, index );

    		let attribute;
    		let renderer = bufferRenderer;

    		if ( index !== null ) {

    			attribute = attributes.get( index );

    			renderer = indexedBufferRenderer;
    			renderer.setIndex( attribute );

    		}

    		//

    		const dataCount = ( index !== null ) ? index.count : position.count;

    		const rangeStart = geometry.drawRange.start * rangeFactor;
    		const rangeCount = geometry.drawRange.count * rangeFactor;

    		const groupStart = group !== null ? group.start * rangeFactor : 0;
    		const groupCount = group !== null ? group.count * rangeFactor : Infinity;

    		const drawStart = Math.max( rangeStart, groupStart );
    		const drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

    		const drawCount = Math.max( 0, drawEnd - drawStart + 1 );

    		if ( drawCount === 0 ) return;

    		//

    		if ( object.isMesh ) {

    			if ( material.wireframe === true ) {

    				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
    				renderer.setMode( 1 );

    			} else {

    				renderer.setMode( 4 );

    			}

    		} else if ( object.isLine ) {

    			let lineWidth = material.linewidth;

    			if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

    			state.setLineWidth( lineWidth * getTargetPixelRatio() );

    			if ( object.isLineSegments ) {

    				renderer.setMode( 1 );

    			} else if ( object.isLineLoop ) {

    				renderer.setMode( 2 );

    			} else {

    				renderer.setMode( 3 );

    			}

    		} else if ( object.isPoints ) {

    			renderer.setMode( 0 );

    		} else if ( object.isSprite ) {

    			renderer.setMode( 4 );

    		}

    		if ( object.isInstancedMesh ) {

    			renderer.renderInstances( drawStart, drawCount, object.count );

    		} else if ( geometry.isInstancedBufferGeometry ) {

    			const instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );

    			renderer.renderInstances( drawStart, drawCount, instanceCount );

    		} else {

    			renderer.render( drawStart, drawCount );

    		}

    	};

    	// Compile

    	this.compile = function ( scene, camera ) {

    		currentRenderState = renderStates.get( scene );
    		currentRenderState.init();

    		renderStateStack.push( currentRenderState );

    		scene.traverseVisible( function ( object ) {

    			if ( object.isLight && object.layers.test( camera.layers ) ) {

    				currentRenderState.pushLight( object );

    				if ( object.castShadow ) {

    					currentRenderState.pushShadow( object );

    				}

    			}

    		} );

    		currentRenderState.setupLights( _this.physicallyCorrectLights );

    		scene.traverse( function ( object ) {

    			const material = object.material;

    			if ( material ) {

    				if ( Array.isArray( material ) ) {

    					for ( let i = 0; i < material.length; i ++ ) {

    						const material2 = material[ i ];

    						getProgram( material2, scene, object );

    					}

    				} else {

    					getProgram( material, scene, object );

    				}

    			}

    		} );

    		renderStateStack.pop();
    		currentRenderState = null;

    	};

    	// Animation Loop

    	let onAnimationFrameCallback = null;

    	function onAnimationFrame( time ) {

    		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

    	}

    	function onXRSessionStart() {

    		animation.stop();

    	}

    	function onXRSessionEnd() {

    		animation.start();

    	}

    	const animation = new WebGLAnimation();
    	animation.setAnimationLoop( onAnimationFrame );

    	if ( typeof self !== 'undefined' ) animation.setContext( self );

    	this.setAnimationLoop = function ( callback ) {

    		onAnimationFrameCallback = callback;
    		xr.setAnimationLoop( callback );

    		( callback === null ) ? animation.stop() : animation.start();

    	};

    	xr.addEventListener( 'sessionstart', onXRSessionStart );
    	xr.addEventListener( 'sessionend', onXRSessionEnd );

    	// Rendering

    	this.render = function ( scene, camera ) {

    		if ( camera !== undefined && camera.isCamera !== true ) {

    			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
    			return;

    		}

    		if ( _isContextLost === true ) return;

    		// update scene graph

    		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

    		// update camera matrices and frustum

    		if ( camera.parent === null ) camera.updateMatrixWorld();

    		if ( xr.enabled === true && xr.isPresenting === true ) {

    			if ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );

    			camera = xr.getCamera(); // use XR camera for rendering

    		}

    		//
    		if ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );

    		currentRenderState = renderStates.get( scene, renderStateStack.length );
    		currentRenderState.init();

    		renderStateStack.push( currentRenderState );

    		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
    		_frustum.setFromProjectionMatrix( _projScreenMatrix );

    		_localClippingEnabled = this.localClippingEnabled;
    		_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

    		currentRenderList = renderLists.get( scene, renderListStack.length );
    		currentRenderList.init();

    		renderListStack.push( currentRenderList );

    		projectObject( scene, camera, 0, _this.sortObjects );

    		currentRenderList.finish();

    		if ( _this.sortObjects === true ) {

    			currentRenderList.sort( _opaqueSort, _transparentSort );

    		}

    		//

    		if ( _clippingEnabled === true ) clipping.beginShadows();

    		const shadowsArray = currentRenderState.state.shadowsArray;

    		shadowMap.render( shadowsArray, scene, camera );

    		if ( _clippingEnabled === true ) clipping.endShadows();

    		//

    		if ( this.info.autoReset === true ) this.info.reset();

    		//

    		background.render( currentRenderList, scene );

    		// render scene

    		currentRenderState.setupLights( _this.physicallyCorrectLights );

    		if ( camera.isArrayCamera ) {

    			const cameras = camera.cameras;

    			for ( let i = 0, l = cameras.length; i < l; i ++ ) {

    				const camera2 = cameras[ i ];

    				renderScene( currentRenderList, scene, camera2, camera2.viewport );

    			}

    		} else {

    			renderScene( currentRenderList, scene, camera );

    		}

    		//

    		if ( _currentRenderTarget !== null ) {

    			// resolve multisample renderbuffers to a single-sample texture if necessary

    			textures.updateMultisampleRenderTarget( _currentRenderTarget );

    			// Generate mipmap if we're using any kind of mipmap filtering

    			textures.updateRenderTargetMipmap( _currentRenderTarget );

    		}

    		//

    		if ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );

    		// _gl.finish();

    		bindingStates.resetDefaultState();
    		_currentMaterialId = - 1;
    		_currentCamera = null;

    		renderStateStack.pop();

    		if ( renderStateStack.length > 0 ) {

    			currentRenderState = renderStateStack[ renderStateStack.length - 1 ];

    		} else {

    			currentRenderState = null;

    		}

    		renderListStack.pop();

    		if ( renderListStack.length > 0 ) {

    			currentRenderList = renderListStack[ renderListStack.length - 1 ];

    		} else {

    			currentRenderList = null;

    		}

    	};

    	function projectObject( object, camera, groupOrder, sortObjects ) {

    		if ( object.visible === false ) return;

    		const visible = object.layers.test( camera.layers );

    		if ( visible ) {

    			if ( object.isGroup ) {

    				groupOrder = object.renderOrder;

    			} else if ( object.isLOD ) {

    				if ( object.autoUpdate === true ) object.update( camera );

    			} else if ( object.isLight ) {

    				currentRenderState.pushLight( object );

    				if ( object.castShadow ) {

    					currentRenderState.pushShadow( object );

    				}

    			} else if ( object.isSprite ) {

    				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

    					if ( sortObjects ) {

    						_vector3.setFromMatrixPosition( object.matrixWorld )
    							.applyMatrix4( _projScreenMatrix );

    					}

    					const geometry = objects.update( object );
    					const material = object.material;

    					if ( material.visible ) {

    						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

    					}

    				}

    			} else if ( object.isMesh || object.isLine || object.isPoints ) {

    				if ( object.isSkinnedMesh ) {

    					// update skeleton only once in a frame

    					if ( object.skeleton.frame !== info.render.frame ) {

    						object.skeleton.update();
    						object.skeleton.frame = info.render.frame;

    					}

    				}

    				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

    					if ( sortObjects ) {

    						_vector3.setFromMatrixPosition( object.matrixWorld )
    							.applyMatrix4( _projScreenMatrix );

    					}

    					const geometry = objects.update( object );
    					const material = object.material;

    					if ( Array.isArray( material ) ) {

    						const groups = geometry.groups;

    						for ( let i = 0, l = groups.length; i < l; i ++ ) {

    							const group = groups[ i ];
    							const groupMaterial = material[ group.materialIndex ];

    							if ( groupMaterial && groupMaterial.visible ) {

    								currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );

    							}

    						}

    					} else if ( material.visible ) {

    						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

    					}

    				}

    			}

    		}

    		const children = object.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			projectObject( children[ i ], camera, groupOrder, sortObjects );

    		}

    	}

    	function renderScene( currentRenderList, scene, camera, viewport ) {

    		const opaqueObjects = currentRenderList.opaque;
    		const transmissiveObjects = currentRenderList.transmissive;
    		const transparentObjects = currentRenderList.transparent;

    		currentRenderState.setupLightsView( camera );

    		if ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, scene, camera );

    		if ( viewport ) state.viewport( _currentViewport.copy( viewport ) );

    		if ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );
    		if ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );
    		if ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );

    		// Ensure depth buffer writing is enabled so it can be cleared on next render

    		state.buffers.depth.setTest( true );
    		state.buffers.depth.setMask( true );
    		state.buffers.color.setMask( true );

    		state.setPolygonOffset( false );

    	}

    	function renderTransmissionPass( opaqueObjects, scene, camera ) {

    		const isWebGL2 = capabilities.isWebGL2;

    		if ( _transmissionRenderTarget === null ) {

    			_transmissionRenderTarget = new WebGLRenderTarget( 1, 1, {
    				generateMipmaps: true,
    				type: extensions.has( 'EXT_color_buffer_half_float' ) ? HalfFloatType : UnsignedByteType,
    				minFilter: LinearMipmapLinearFilter,
    				samples: ( isWebGL2 && _antialias === true ) ? 4 : 0
    			} );

    		}

    		_this.getDrawingBufferSize( _vector2 );

    		if ( isWebGL2 ) {

    			_transmissionRenderTarget.setSize( _vector2.x, _vector2.y );

    		} else {

    			_transmissionRenderTarget.setSize( floorPowerOfTwo( _vector2.x ), floorPowerOfTwo( _vector2.y ) );

    		}

    		//

    		const currentRenderTarget = _this.getRenderTarget();
    		_this.setRenderTarget( _transmissionRenderTarget );
    		_this.clear();

    		// Turn off the features which can affect the frag color for opaque objects pass.
    		// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
    		const currentToneMapping = _this.toneMapping;
    		_this.toneMapping = NoToneMapping;

    		renderObjects( opaqueObjects, scene, camera );

    		_this.toneMapping = currentToneMapping;

    		textures.updateMultisampleRenderTarget( _transmissionRenderTarget );
    		textures.updateRenderTargetMipmap( _transmissionRenderTarget );

    		_this.setRenderTarget( currentRenderTarget );

    	}

    	function renderObjects( renderList, scene, camera ) {

    		const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

    		for ( let i = 0, l = renderList.length; i < l; i ++ ) {

    			const renderItem = renderList[ i ];

    			const object = renderItem.object;
    			const geometry = renderItem.geometry;
    			const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
    			const group = renderItem.group;

    			if ( object.layers.test( camera.layers ) ) {

    				renderObject( object, scene, camera, geometry, material, group );

    			}

    		}

    	}

    	function renderObject( object, scene, camera, geometry, material, group ) {

    		object.onBeforeRender( _this, scene, camera, geometry, material, group );

    		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
    		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

    		material.onBeforeRender( _this, scene, camera, geometry, object, group );

    		if ( material.transparent === true && material.side === DoubleSide ) {

    			material.side = BackSide;
    			material.needsUpdate = true;
    			_this.renderBufferDirect( camera, scene, geometry, material, object, group );

    			material.side = FrontSide;
    			material.needsUpdate = true;
    			_this.renderBufferDirect( camera, scene, geometry, material, object, group );

    			material.side = DoubleSide;

    		} else {

    			_this.renderBufferDirect( camera, scene, geometry, material, object, group );

    		}

    		object.onAfterRender( _this, scene, camera, geometry, material, group );

    	}

    	function getProgram( material, scene, object ) {

    		if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

    		const materialProperties = properties.get( material );

    		const lights = currentRenderState.state.lights;
    		const shadowsArray = currentRenderState.state.shadowsArray;

    		const lightsStateVersion = lights.state.version;

    		const parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );
    		const programCacheKey = programCache.getProgramCacheKey( parameters );

    		let programs = materialProperties.programs;

    		// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change

    		materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
    		materialProperties.fog = scene.fog;
    		materialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );

    		if ( programs === undefined ) {

    			// new material

    			material.addEventListener( 'dispose', onMaterialDispose );

    			programs = new Map();
    			materialProperties.programs = programs;

    		}

    		let program = programs.get( programCacheKey );

    		if ( program !== undefined ) {

    			// early out if program and light state is identical

    			if ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {

    				updateCommonMaterialProperties( material, parameters );

    				return program;

    			}

    		} else {

    			parameters.uniforms = programCache.getUniforms( material );

    			material.onBuild( object, parameters, _this );

    			material.onBeforeCompile( parameters, _this );

    			program = programCache.acquireProgram( parameters, programCacheKey );
    			programs.set( programCacheKey, program );

    			materialProperties.uniforms = parameters.uniforms;

    		}

    		const uniforms = materialProperties.uniforms;

    		if ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {

    			uniforms.clippingPlanes = clipping.uniform;

    		}

    		updateCommonMaterialProperties( material, parameters );

    		// store the light setup it was created for

    		materialProperties.needsLights = materialNeedsLights( material );
    		materialProperties.lightsStateVersion = lightsStateVersion;

    		if ( materialProperties.needsLights ) {

    			// wire up the material to this renderer's lighting state

    			uniforms.ambientLightColor.value = lights.state.ambient;
    			uniforms.lightProbe.value = lights.state.probe;
    			uniforms.directionalLights.value = lights.state.directional;
    			uniforms.directionalLightShadows.value = lights.state.directionalShadow;
    			uniforms.spotLights.value = lights.state.spot;
    			uniforms.spotLightShadows.value = lights.state.spotShadow;
    			uniforms.rectAreaLights.value = lights.state.rectArea;
    			uniforms.ltc_1.value = lights.state.rectAreaLTC1;
    			uniforms.ltc_2.value = lights.state.rectAreaLTC2;
    			uniforms.pointLights.value = lights.state.point;
    			uniforms.pointLightShadows.value = lights.state.pointShadow;
    			uniforms.hemisphereLights.value = lights.state.hemi;

    			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
    			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
    			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
    			uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
    			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
    			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
    			// TODO (abelnation): add area lights shadow info to uniforms

    		}

    		const progUniforms = program.getUniforms();
    		const uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

    		materialProperties.currentProgram = program;
    		materialProperties.uniformsList = uniformsList;

    		return program;

    	}

    	function updateCommonMaterialProperties( material, parameters ) {

    		const materialProperties = properties.get( material );

    		materialProperties.outputEncoding = parameters.outputEncoding;
    		materialProperties.instancing = parameters.instancing;
    		materialProperties.skinning = parameters.skinning;
    		materialProperties.morphTargets = parameters.morphTargets;
    		materialProperties.morphNormals = parameters.morphNormals;
    		materialProperties.morphColors = parameters.morphColors;
    		materialProperties.morphTargetsCount = parameters.morphTargetsCount;
    		materialProperties.numClippingPlanes = parameters.numClippingPlanes;
    		materialProperties.numIntersection = parameters.numClipIntersection;
    		materialProperties.vertexAlphas = parameters.vertexAlphas;
    		materialProperties.vertexTangents = parameters.vertexTangents;
    		materialProperties.toneMapping = parameters.toneMapping;

    	}

    	function setProgram( camera, scene, geometry, material, object ) {

    		if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

    		textures.resetTextureUnits();

    		const fog = scene.fog;
    		const environment = material.isMeshStandardMaterial ? scene.environment : null;
    		const encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.encoding : LinearEncoding );
    		const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
    		const vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;
    		const vertexTangents = !! material.normalMap && !! geometry.attributes.tangent;
    		const morphTargets = !! geometry.morphAttributes.position;
    		const morphNormals = !! geometry.morphAttributes.normal;
    		const morphColors = !! geometry.morphAttributes.color;
    		const toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;

    		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

    		const materialProperties = properties.get( material );
    		const lights = currentRenderState.state.lights;

    		if ( _clippingEnabled === true ) {

    			if ( _localClippingEnabled === true || camera !== _currentCamera ) {

    				const useCache =
    					camera === _currentCamera &&
    					material.id === _currentMaterialId;

    				// we might want to call this function with some ClippingGroup
    				// object instead of the material, once it becomes feasible
    				// (#8465, #8379)
    				clipping.setState( material, camera, useCache );

    			}

    		}

    		//

    		let needsProgramChange = false;

    		if ( material.version === materialProperties.__version ) {

    			if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

    				needsProgramChange = true;

    			} else if ( materialProperties.outputEncoding !== encoding ) {

    				needsProgramChange = true;

    			} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {

    				needsProgramChange = true;

    			} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {

    				needsProgramChange = true;

    			} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {

    				needsProgramChange = true;

    			} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {

    				needsProgramChange = true;

    			} else if ( materialProperties.envMap !== envMap ) {

    				needsProgramChange = true;

    			} else if ( material.fog === true && materialProperties.fog !== fog ) {

    				needsProgramChange = true;

    			} else if ( materialProperties.numClippingPlanes !== undefined &&
    				( materialProperties.numClippingPlanes !== clipping.numPlanes ||
    				materialProperties.numIntersection !== clipping.numIntersection ) ) {

    				needsProgramChange = true;

    			} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {

    				needsProgramChange = true;

    			} else if ( materialProperties.vertexTangents !== vertexTangents ) {

    				needsProgramChange = true;

    			} else if ( materialProperties.morphTargets !== morphTargets ) {

    				needsProgramChange = true;

    			} else if ( materialProperties.morphNormals !== morphNormals ) {

    				needsProgramChange = true;

    			} else if ( materialProperties.morphColors !== morphColors ) {

    				needsProgramChange = true;

    			} else if ( materialProperties.toneMapping !== toneMapping ) {

    				needsProgramChange = true;

    			} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {

    				needsProgramChange = true;

    			}

    		} else {

    			needsProgramChange = true;
    			materialProperties.__version = material.version;

    		}

    		//

    		let program = materialProperties.currentProgram;

    		if ( needsProgramChange === true ) {

    			program = getProgram( material, scene, object );

    		}

    		let refreshProgram = false;
    		let refreshMaterial = false;
    		let refreshLights = false;

    		const p_uniforms = program.getUniforms(),
    			m_uniforms = materialProperties.uniforms;

    		if ( state.useProgram( program.program ) ) {

    			refreshProgram = true;
    			refreshMaterial = true;
    			refreshLights = true;

    		}

    		if ( material.id !== _currentMaterialId ) {

    			_currentMaterialId = material.id;

    			refreshMaterial = true;

    		}

    		if ( refreshProgram || _currentCamera !== camera ) {

    			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

    			if ( capabilities.logarithmicDepthBuffer ) {

    				p_uniforms.setValue( _gl, 'logDepthBufFC',
    					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

    			}

    			if ( _currentCamera !== camera ) {

    				_currentCamera = camera;

    				// lighting uniforms depend on the camera so enforce an update
    				// now, in case this material supports lights - or later, when
    				// the next material that does gets activated:

    				refreshMaterial = true;		// set to true on material change
    				refreshLights = true;		// remains set until update done

    			}

    			// load material specific uniforms
    			// (shader material also gets them for the sake of genericity)

    			if ( material.isShaderMaterial ||
    				material.isMeshPhongMaterial ||
    				material.isMeshToonMaterial ||
    				material.isMeshStandardMaterial ||
    				material.envMap ) {

    				const uCamPos = p_uniforms.map.cameraPosition;

    				if ( uCamPos !== undefined ) {

    					uCamPos.setValue( _gl,
    						_vector3.setFromMatrixPosition( camera.matrixWorld ) );

    				}

    			}

    			if ( material.isMeshPhongMaterial ||
    				material.isMeshToonMaterial ||
    				material.isMeshLambertMaterial ||
    				material.isMeshBasicMaterial ||
    				material.isMeshStandardMaterial ||
    				material.isShaderMaterial ) {

    				p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

    			}

    			if ( material.isMeshPhongMaterial ||
    				material.isMeshToonMaterial ||
    				material.isMeshLambertMaterial ||
    				material.isMeshBasicMaterial ||
    				material.isMeshStandardMaterial ||
    				material.isShaderMaterial ||
    				material.isShadowMaterial ||
    				object.isSkinnedMesh ) {

    				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

    			}

    		}

    		// skinning and morph target uniforms must be set even if material didn't change
    		// auto-setting of texture unit for bone and morph texture must go before other textures
    		// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures

    		if ( object.isSkinnedMesh ) {

    			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
    			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

    			const skeleton = object.skeleton;

    			if ( skeleton ) {

    				if ( capabilities.floatVertexTextures ) {

    					if ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();

    					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
    					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

    				} else {

    					console.warn( 'THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.' );

    				}

    			}

    		}

    		const morphAttributes = geometry.morphAttributes;

    		if ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined && capabilities.isWebGL2 === true ) ) {

    			morphtargets.update( object, geometry, material, program );

    		}


    		if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

    			materialProperties.receiveShadow = object.receiveShadow;
    			p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

    		}

    		if ( refreshMaterial ) {

    			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );

    			if ( materialProperties.needsLights ) {

    				// the current material requires lighting info

    				// note: all lighting uniforms are always set correctly
    				// they simply reference the renderer's state for their
    				// values
    				//
    				// use the current material's .needsUpdate flags to set
    				// the GL state when required

    				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

    			}

    			// refresh uniforms common to several materials

    			if ( fog && material.fog === true ) {

    				materials.refreshFogUniforms( m_uniforms, fog );

    			}

    			materials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );

    			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );

    		}

    		if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

    			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
    			material.uniformsNeedUpdate = false;

    		}

    		if ( material.isSpriteMaterial ) {

    			p_uniforms.setValue( _gl, 'center', object.center );

    		}

    		// common matrices

    		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
    		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
    		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

    		return program;

    	}

    	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

    	function markUniformsLightsNeedsUpdate( uniforms, value ) {

    		uniforms.ambientLightColor.needsUpdate = value;
    		uniforms.lightProbe.needsUpdate = value;

    		uniforms.directionalLights.needsUpdate = value;
    		uniforms.directionalLightShadows.needsUpdate = value;
    		uniforms.pointLights.needsUpdate = value;
    		uniforms.pointLightShadows.needsUpdate = value;
    		uniforms.spotLights.needsUpdate = value;
    		uniforms.spotLightShadows.needsUpdate = value;
    		uniforms.rectAreaLights.needsUpdate = value;
    		uniforms.hemisphereLights.needsUpdate = value;

    	}

    	function materialNeedsLights( material ) {

    		return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
    			material.isMeshStandardMaterial || material.isShadowMaterial ||
    			( material.isShaderMaterial && material.lights === true );

    	}

    	this.getActiveCubeFace = function () {

    		return _currentActiveCubeFace;

    	};

    	this.getActiveMipmapLevel = function () {

    		return _currentActiveMipmapLevel;

    	};

    	this.getRenderTarget = function () {

    		return _currentRenderTarget;

    	};

    	this.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {

    		properties.get( renderTarget.texture ).__webglTexture = colorTexture;
    		properties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;

    		const renderTargetProperties = properties.get( renderTarget );
    		renderTargetProperties.__hasExternalTextures = true;

    		if ( renderTargetProperties.__hasExternalTextures ) {

    			renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;

    			if ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {

    				// The multisample_render_to_texture extension doesn't work properly if there
    				// are midframe flushes and an external depth buffer. Disable use of the extension.
    				if ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {

    					console.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );
    					renderTargetProperties.__useRenderToTexture = false;

    				}

    			}

    		}

    	};

    	this.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {

    		const renderTargetProperties = properties.get( renderTarget );
    		renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
    		renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;

    	};

    	this.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {

    		_currentRenderTarget = renderTarget;
    		_currentActiveCubeFace = activeCubeFace;
    		_currentActiveMipmapLevel = activeMipmapLevel;

    		let useDefaultFramebuffer = true;

    		if ( renderTarget ) {

    			const renderTargetProperties = properties.get( renderTarget );

    			if ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {

    				// We need to make sure to rebind the framebuffer.
    				state.bindFramebuffer( 36160, null );
    				useDefaultFramebuffer = false;

    			} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {

    				textures.setupRenderTarget( renderTarget );

    			} else if ( renderTargetProperties.__hasExternalTextures ) {

    				// Color and depth texture must be rebound in order for the swapchain to update.
    				textures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );

    			}

    		}

    		let framebuffer = null;
    		let isCube = false;
    		let isRenderTarget3D = false;

    		if ( renderTarget ) {

    			const texture = renderTarget.texture;

    			if ( texture.isData3DTexture || texture.isDataArrayTexture ) {

    				isRenderTarget3D = true;

    			}

    			const __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

    			if ( renderTarget.isWebGLCubeRenderTarget ) {

    				framebuffer = __webglFramebuffer[ activeCubeFace ];
    				isCube = true;

    			} else if ( ( capabilities.isWebGL2 && renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {

    				framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

    			} else {

    				framebuffer = __webglFramebuffer;

    			}

    			_currentViewport.copy( renderTarget.viewport );
    			_currentScissor.copy( renderTarget.scissor );
    			_currentScissorTest = renderTarget.scissorTest;

    		} else {

    			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
    			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
    			_currentScissorTest = _scissorTest;

    		}

    		const framebufferBound = state.bindFramebuffer( 36160, framebuffer );

    		if ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {

    			state.drawBuffers( renderTarget, framebuffer );

    		}

    		state.viewport( _currentViewport );
    		state.scissor( _currentScissor );
    		state.setScissorTest( _currentScissorTest );

    		if ( isCube ) {

    			const textureProperties = properties.get( renderTarget.texture );
    			_gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );

    		} else if ( isRenderTarget3D ) {

    			const textureProperties = properties.get( renderTarget.texture );
    			const layer = activeCubeFace || 0;
    			_gl.framebufferTextureLayer( 36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );

    		}

    		_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings

    	};

    	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

    		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

    			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
    			return;

    		}

    		let framebuffer = properties.get( renderTarget ).__webglFramebuffer;

    		if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

    			framebuffer = framebuffer[ activeCubeFaceIndex ];

    		}

    		if ( framebuffer ) {

    			state.bindFramebuffer( 36160, framebuffer );

    			try {

    				const texture = renderTarget.texture;
    				const textureFormat = texture.format;
    				const textureType = texture.type;

    				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {

    					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
    					return;

    				}

    				const halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );

    				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // Edge and Chrome Mac < 52 (#9513)
    					! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
    					! halfFloatSupportedByExt ) {

    					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
    					return;

    				}

    				// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

    				if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

    					_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

    				}

    			} finally {

    				// restore framebuffer of current render target if necessary

    				const framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;
    				state.bindFramebuffer( 36160, framebuffer );

    			}

    		}

    	};

    	this.copyFramebufferToTexture = function ( position, texture, level = 0 ) {

    		const levelScale = Math.pow( 2, - level );
    		const width = Math.floor( texture.image.width * levelScale );
    		const height = Math.floor( texture.image.height * levelScale );

    		textures.setTexture2D( texture, 0 );

    		_gl.copyTexSubImage2D( 3553, level, 0, 0, position.x, position.y, width, height );

    		state.unbindTexture();

    	};

    	this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {

    		const width = srcTexture.image.width;
    		const height = srcTexture.image.height;
    		const glFormat = utils.convert( dstTexture.format );
    		const glType = utils.convert( dstTexture.type );

    		textures.setTexture2D( dstTexture, 0 );

    		// As another texture upload may have changed pixelStorei
    		// parameters, make sure they are correct for the dstTexture
    		_gl.pixelStorei( 37440, dstTexture.flipY );
    		_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );
    		_gl.pixelStorei( 3317, dstTexture.unpackAlignment );

    		if ( srcTexture.isDataTexture ) {

    			_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

    		} else {

    			if ( srcTexture.isCompressedTexture ) {

    				_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );

    			} else {

    				_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );

    			}

    		}

    		// Generate mipmaps only when copying level 0
    		if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( 3553 );

    		state.unbindTexture();

    	};

    	this.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {

    		if ( _this.isWebGL1Renderer ) {

    			console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );
    			return;

    		}

    		const width = sourceBox.max.x - sourceBox.min.x + 1;
    		const height = sourceBox.max.y - sourceBox.min.y + 1;
    		const depth = sourceBox.max.z - sourceBox.min.z + 1;
    		const glFormat = utils.convert( dstTexture.format );
    		const glType = utils.convert( dstTexture.type );
    		let glTarget;

    		if ( dstTexture.isData3DTexture ) {

    			textures.setTexture3D( dstTexture, 0 );
    			glTarget = 32879;

    		} else if ( dstTexture.isDataArrayTexture ) {

    			textures.setTexture2DArray( dstTexture, 0 );
    			glTarget = 35866;

    		} else {

    			console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );
    			return;

    		}

    		_gl.pixelStorei( 37440, dstTexture.flipY );
    		_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );
    		_gl.pixelStorei( 3317, dstTexture.unpackAlignment );

    		const unpackRowLen = _gl.getParameter( 3314 );
    		const unpackImageHeight = _gl.getParameter( 32878 );
    		const unpackSkipPixels = _gl.getParameter( 3316 );
    		const unpackSkipRows = _gl.getParameter( 3315 );
    		const unpackSkipImages = _gl.getParameter( 32877 );

    		const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;

    		_gl.pixelStorei( 3314, image.width );
    		_gl.pixelStorei( 32878, image.height );
    		_gl.pixelStorei( 3316, sourceBox.min.x );
    		_gl.pixelStorei( 3315, sourceBox.min.y );
    		_gl.pixelStorei( 32877, sourceBox.min.z );

    		if ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {

    			_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );

    		} else {

    			if ( srcTexture.isCompressedTexture ) {

    				console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );
    				_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );

    			} else {

    				_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );

    			}

    		}

    		_gl.pixelStorei( 3314, unpackRowLen );
    		_gl.pixelStorei( 32878, unpackImageHeight );
    		_gl.pixelStorei( 3316, unpackSkipPixels );
    		_gl.pixelStorei( 3315, unpackSkipRows );
    		_gl.pixelStorei( 32877, unpackSkipImages );

    		// Generate mipmaps only when copying level 0
    		if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );

    		state.unbindTexture();

    	};

    	this.initTexture = function ( texture ) {

    		textures.setTexture2D( texture, 0 );

    		state.unbindTexture();

    	};

    	this.resetState = function () {

    		_currentActiveCubeFace = 0;
    		_currentActiveMipmapLevel = 0;
    		_currentRenderTarget = null;

    		state.reset();
    		bindingStates.reset();

    	};

    	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

    		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

    	}

    }

    class WebGL1Renderer extends WebGLRenderer {}

    WebGL1Renderer.prototype.isWebGL1Renderer = true;

    class Scene extends Object3D {

    	constructor() {

    		super();

    		this.isScene = true;

    		this.type = 'Scene';

    		this.background = null;
    		this.environment = null;
    		this.fog = null;

    		this.overrideMaterial = null;

    		this.autoUpdate = true; // checked by the renderer

    		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

    			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

    		}

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		if ( source.background !== null ) this.background = source.background.clone();
    		if ( source.environment !== null ) this.environment = source.environment.clone();
    		if ( source.fog !== null ) this.fog = source.fog.clone();

    		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

    		this.autoUpdate = source.autoUpdate;
    		this.matrixAutoUpdate = source.matrixAutoUpdate;

    		return this;

    	}

    	toJSON( meta ) {

    		const data = super.toJSON( meta );

    		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

    		return data;

    	}

    }

    class SpriteMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isSpriteMaterial = true;

    		this.type = 'SpriteMaterial';

    		this.color = new Color( 0xffffff );

    		this.map = null;

    		this.alphaMap = null;

    		this.rotation = 0;

    		this.sizeAttenuation = true;

    		this.transparent = true;

    		this.fog = true;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.color.copy( source.color );

    		this.map = source.map;

    		this.alphaMap = source.alphaMap;

    		this.rotation = source.rotation;

    		this.sizeAttenuation = source.sizeAttenuation;

    		this.fog = source.fog;

    		return this;

    	}

    }

    class LineBasicMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isLineBasicMaterial = true;

    		this.type = 'LineBasicMaterial';

    		this.color = new Color( 0xffffff );

    		this.linewidth = 1;
    		this.linecap = 'round';
    		this.linejoin = 'round';

    		this.fog = true;

    		this.setValues( parameters );

    	}


    	copy( source ) {

    		super.copy( source );

    		this.color.copy( source.color );

    		this.linewidth = source.linewidth;
    		this.linecap = source.linecap;
    		this.linejoin = source.linejoin;

    		this.fog = source.fog;

    		return this;

    	}

    }

    const _start$1 = /*@__PURE__*/ new Vector3();
    const _end$1 = /*@__PURE__*/ new Vector3();
    const _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();
    const _ray$1 = /*@__PURE__*/ new Ray();
    const _sphere$1 = /*@__PURE__*/ new Sphere();

    class Line extends Object3D {

    	constructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {

    		super();

    		this.isLine = true;

    		this.type = 'Line';

    		this.geometry = geometry;
    		this.material = material;

    		this.updateMorphTargets();

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		this.material = source.material;
    		this.geometry = source.geometry;

    		return this;

    	}

    	computeLineDistances() {

    		const geometry = this.geometry;

    		// we assume non-indexed geometry

    		if ( geometry.index === null ) {

    			const positionAttribute = geometry.attributes.position;
    			const lineDistances = [ 0 ];

    			for ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {

    				_start$1.fromBufferAttribute( positionAttribute, i - 1 );
    				_end$1.fromBufferAttribute( positionAttribute, i );

    				lineDistances[ i ] = lineDistances[ i - 1 ];
    				lineDistances[ i ] += _start$1.distanceTo( _end$1 );

    			}

    			geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

    		} else {

    			console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

    		}

    		return this;

    	}

    	raycast( raycaster, intersects ) {

    		const geometry = this.geometry;
    		const matrixWorld = this.matrixWorld;
    		const threshold = raycaster.params.Line.threshold;
    		const drawRange = geometry.drawRange;

    		// Checking boundingSphere distance to ray

    		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

    		_sphere$1.copy( geometry.boundingSphere );
    		_sphere$1.applyMatrix4( matrixWorld );
    		_sphere$1.radius += threshold;

    		if ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;

    		//

    		_inverseMatrix$1.copy( matrixWorld ).invert();
    		_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );

    		const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
    		const localThresholdSq = localThreshold * localThreshold;

    		const vStart = new Vector3();
    		const vEnd = new Vector3();
    		const interSegment = new Vector3();
    		const interRay = new Vector3();
    		const step = this.isLineSegments ? 2 : 1;

    		const index = geometry.index;
    		const attributes = geometry.attributes;
    		const positionAttribute = attributes.position;

    		if ( index !== null ) {

    			const start = Math.max( 0, drawRange.start );
    			const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

    			for ( let i = start, l = end - 1; i < l; i += step ) {

    				const a = index.getX( i );
    				const b = index.getX( i + 1 );

    				vStart.fromBufferAttribute( positionAttribute, a );
    				vEnd.fromBufferAttribute( positionAttribute, b );

    				const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

    				if ( distSq > localThresholdSq ) continue;

    				interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

    				const distance = raycaster.ray.origin.distanceTo( interRay );

    				if ( distance < raycaster.near || distance > raycaster.far ) continue;

    				intersects.push( {

    					distance: distance,
    					// What do we want? intersection point on the ray or on the segment??
    					// point: raycaster.ray.at( distance ),
    					point: interSegment.clone().applyMatrix4( this.matrixWorld ),
    					index: i,
    					face: null,
    					faceIndex: null,
    					object: this

    				} );

    			}

    		} else {

    			const start = Math.max( 0, drawRange.start );
    			const end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );

    			for ( let i = start, l = end - 1; i < l; i += step ) {

    				vStart.fromBufferAttribute( positionAttribute, i );
    				vEnd.fromBufferAttribute( positionAttribute, i + 1 );

    				const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

    				if ( distSq > localThresholdSq ) continue;

    				interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

    				const distance = raycaster.ray.origin.distanceTo( interRay );

    				if ( distance < raycaster.near || distance > raycaster.far ) continue;

    				intersects.push( {

    					distance: distance,
    					// What do we want? intersection point on the ray or on the segment??
    					// point: raycaster.ray.at( distance ),
    					point: interSegment.clone().applyMatrix4( this.matrixWorld ),
    					index: i,
    					face: null,
    					faceIndex: null,
    					object: this

    				} );

    			}

    		}

    	}

    	updateMorphTargets() {

    		const geometry = this.geometry;

    		const morphAttributes = geometry.morphAttributes;
    		const keys = Object.keys( morphAttributes );

    		if ( keys.length > 0 ) {

    			const morphAttribute = morphAttributes[ keys[ 0 ] ];

    			if ( morphAttribute !== undefined ) {

    				this.morphTargetInfluences = [];
    				this.morphTargetDictionary = {};

    				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

    					const name = morphAttribute[ m ].name || String( m );

    					this.morphTargetInfluences.push( 0 );
    					this.morphTargetDictionary[ name ] = m;

    				}

    			}

    		}

    	}

    }

    const _start = /*@__PURE__*/ new Vector3();
    const _end = /*@__PURE__*/ new Vector3();

    class LineSegments extends Line {

    	constructor( geometry, material ) {

    		super( geometry, material );

    		this.isLineSegments = true;

    		this.type = 'LineSegments';

    	}

    	computeLineDistances() {

    		const geometry = this.geometry;

    		// we assume non-indexed geometry

    		if ( geometry.index === null ) {

    			const positionAttribute = geometry.attributes.position;
    			const lineDistances = [];

    			for ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {

    				_start.fromBufferAttribute( positionAttribute, i );
    				_end.fromBufferAttribute( positionAttribute, i + 1 );

    				lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
    				lineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );

    			}

    			geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

    		} else {

    			console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

    		}

    		return this;

    	}

    }

    class PointsMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isPointsMaterial = true;

    		this.type = 'PointsMaterial';

    		this.color = new Color( 0xffffff );

    		this.map = null;

    		this.alphaMap = null;

    		this.size = 1;
    		this.sizeAttenuation = true;

    		this.fog = true;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.color.copy( source.color );

    		this.map = source.map;

    		this.alphaMap = source.alphaMap;

    		this.size = source.size;
    		this.sizeAttenuation = source.sizeAttenuation;

    		this.fog = source.fog;

    		return this;

    	}

    }

    //

    new Vector3();

    new Vector3();
    new Vector3();
    new Vector3();
    new Triangle();

    class SphereGeometry extends BufferGeometry {

    	constructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {

    		super();
    		this.type = 'SphereGeometry';

    		this.parameters = {
    			radius: radius,
    			widthSegments: widthSegments,
    			heightSegments: heightSegments,
    			phiStart: phiStart,
    			phiLength: phiLength,
    			thetaStart: thetaStart,
    			thetaLength: thetaLength
    		};

    		widthSegments = Math.max( 3, Math.floor( widthSegments ) );
    		heightSegments = Math.max( 2, Math.floor( heightSegments ) );

    		const thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );

    		let index = 0;
    		const grid = [];

    		const vertex = new Vector3();
    		const normal = new Vector3();

    		// buffers

    		const indices = [];
    		const vertices = [];
    		const normals = [];
    		const uvs = [];

    		// generate vertices, normals and uvs

    		for ( let iy = 0; iy <= heightSegments; iy ++ ) {

    			const verticesRow = [];

    			const v = iy / heightSegments;

    			// special case for the poles

    			let uOffset = 0;

    			if ( iy == 0 && thetaStart == 0 ) {

    				uOffset = 0.5 / widthSegments;

    			} else if ( iy == heightSegments && thetaEnd == Math.PI ) {

    				uOffset = - 0.5 / widthSegments;

    			}

    			for ( let ix = 0; ix <= widthSegments; ix ++ ) {

    				const u = ix / widthSegments;

    				// vertex

    				vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
    				vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
    				vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

    				vertices.push( vertex.x, vertex.y, vertex.z );

    				// normal

    				normal.copy( vertex ).normalize();
    				normals.push( normal.x, normal.y, normal.z );

    				// uv

    				uvs.push( u + uOffset, 1 - v );

    				verticesRow.push( index ++ );

    			}

    			grid.push( verticesRow );

    		}

    		// indices

    		for ( let iy = 0; iy < heightSegments; iy ++ ) {

    			for ( let ix = 0; ix < widthSegments; ix ++ ) {

    				const a = grid[ iy ][ ix + 1 ];
    				const b = grid[ iy ][ ix ];
    				const c = grid[ iy + 1 ][ ix ];
    				const d = grid[ iy + 1 ][ ix + 1 ];

    				if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
    				if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

    			}

    		}

    		// build geometry

    		this.setIndex( indices );
    		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    	}

    	static fromJSON( data ) {

    		return new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );

    	}

    }

    class ShadowMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isShadowMaterial = true;

    		this.type = 'ShadowMaterial';

    		this.color = new Color( 0x000000 );
    		this.transparent = true;

    		this.fog = true;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.color.copy( source.color );

    		this.fog = source.fog;

    		return this;

    	}

    }

    class RawShaderMaterial extends ShaderMaterial {

    	constructor( parameters ) {

    		super( parameters );

    		this.isRawShaderMaterial = true;

    		this.type = 'RawShaderMaterial';

    	}

    }

    class MeshStandardMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isMeshStandardMaterial = true;

    		this.defines = { 'STANDARD': '' };

    		this.type = 'MeshStandardMaterial';

    		this.color = new Color( 0xffffff ); // diffuse
    		this.roughness = 1.0;
    		this.metalness = 0.0;

    		this.map = null;

    		this.lightMap = null;
    		this.lightMapIntensity = 1.0;

    		this.aoMap = null;
    		this.aoMapIntensity = 1.0;

    		this.emissive = new Color( 0x000000 );
    		this.emissiveIntensity = 1.0;
    		this.emissiveMap = null;

    		this.bumpMap = null;
    		this.bumpScale = 1;

    		this.normalMap = null;
    		this.normalMapType = TangentSpaceNormalMap;
    		this.normalScale = new Vector2( 1, 1 );

    		this.displacementMap = null;
    		this.displacementScale = 1;
    		this.displacementBias = 0;

    		this.roughnessMap = null;

    		this.metalnessMap = null;

    		this.alphaMap = null;

    		this.envMap = null;
    		this.envMapIntensity = 1.0;

    		this.wireframe = false;
    		this.wireframeLinewidth = 1;
    		this.wireframeLinecap = 'round';
    		this.wireframeLinejoin = 'round';

    		this.flatShading = false;

    		this.fog = true;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.defines = { 'STANDARD': '' };

    		this.color.copy( source.color );
    		this.roughness = source.roughness;
    		this.metalness = source.metalness;

    		this.map = source.map;

    		this.lightMap = source.lightMap;
    		this.lightMapIntensity = source.lightMapIntensity;

    		this.aoMap = source.aoMap;
    		this.aoMapIntensity = source.aoMapIntensity;

    		this.emissive.copy( source.emissive );
    		this.emissiveMap = source.emissiveMap;
    		this.emissiveIntensity = source.emissiveIntensity;

    		this.bumpMap = source.bumpMap;
    		this.bumpScale = source.bumpScale;

    		this.normalMap = source.normalMap;
    		this.normalMapType = source.normalMapType;
    		this.normalScale.copy( source.normalScale );

    		this.displacementMap = source.displacementMap;
    		this.displacementScale = source.displacementScale;
    		this.displacementBias = source.displacementBias;

    		this.roughnessMap = source.roughnessMap;

    		this.metalnessMap = source.metalnessMap;

    		this.alphaMap = source.alphaMap;

    		this.envMap = source.envMap;
    		this.envMapIntensity = source.envMapIntensity;

    		this.wireframe = source.wireframe;
    		this.wireframeLinewidth = source.wireframeLinewidth;
    		this.wireframeLinecap = source.wireframeLinecap;
    		this.wireframeLinejoin = source.wireframeLinejoin;

    		this.flatShading = source.flatShading;

    		this.fog = source.fog;

    		return this;

    	}

    }

    class MeshPhysicalMaterial extends MeshStandardMaterial {

    	constructor( parameters ) {

    		super();

    		this.isMeshPhysicalMaterial = true;

    		this.defines = {

    			'STANDARD': '',
    			'PHYSICAL': ''

    		};

    		this.type = 'MeshPhysicalMaterial';

    		this.clearcoatMap = null;
    		this.clearcoatRoughness = 0.0;
    		this.clearcoatRoughnessMap = null;
    		this.clearcoatNormalScale = new Vector2( 1, 1 );
    		this.clearcoatNormalMap = null;

    		this.ior = 1.5;

    		Object.defineProperty( this, 'reflectivity', {
    			get: function () {

    				return ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );

    			},
    			set: function ( reflectivity ) {

    				this.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );

    			}
    		} );

    		this.iridescenceMap = null;
    		this.iridescenceIOR = 1.3;
    		this.iridescenceThicknessRange = [ 100, 400 ];
    		this.iridescenceThicknessMap = null;

    		this.sheenColor = new Color( 0x000000 );
    		this.sheenColorMap = null;
    		this.sheenRoughness = 1.0;
    		this.sheenRoughnessMap = null;

    		this.transmissionMap = null;

    		this.thickness = 0;
    		this.thicknessMap = null;
    		this.attenuationDistance = 0.0;
    		this.attenuationColor = new Color( 1, 1, 1 );

    		this.specularIntensity = 1.0;
    		this.specularIntensityMap = null;
    		this.specularColor = new Color( 1, 1, 1 );
    		this.specularColorMap = null;

    		this._sheen = 0.0;
    		this._clearcoat = 0;
    		this._iridescence = 0;
    		this._transmission = 0;

    		this.setValues( parameters );

    	}

    	get sheen() {

    		return this._sheen;

    	}

    	set sheen( value ) {

    		if ( this._sheen > 0 !== value > 0 ) {

    			this.version ++;

    		}

    		this._sheen = value;

    	}

    	get clearcoat() {

    		return this._clearcoat;

    	}

    	set clearcoat( value ) {

    		if ( this._clearcoat > 0 !== value > 0 ) {

    			this.version ++;

    		}

    		this._clearcoat = value;

    	}

    	get iridescence() {

    		return this._iridescence;

    	}

    	set iridescence( value ) {

    		if ( this._iridescence > 0 !== value > 0 ) {

    			this.version ++;

    		}

    		this._iridescence = value;

    	}

    	get transmission() {

    		return this._transmission;

    	}

    	set transmission( value ) {

    		if ( this._transmission > 0 !== value > 0 ) {

    			this.version ++;

    		}

    		this._transmission = value;

    	}

    	copy( source ) {

    		super.copy( source );

    		this.defines = {

    			'STANDARD': '',
    			'PHYSICAL': ''

    		};

    		this.clearcoat = source.clearcoat;
    		this.clearcoatMap = source.clearcoatMap;
    		this.clearcoatRoughness = source.clearcoatRoughness;
    		this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
    		this.clearcoatNormalMap = source.clearcoatNormalMap;
    		this.clearcoatNormalScale.copy( source.clearcoatNormalScale );

    		this.ior = source.ior;

    		this.iridescence = source.iridescence;
    		this.iridescenceMap = source.iridescenceMap;
    		this.iridescenceIOR = source.iridescenceIOR;
    		this.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];
    		this.iridescenceThicknessMap = source.iridescenceThicknessMap;

    		this.sheen = source.sheen;
    		this.sheenColor.copy( source.sheenColor );
    		this.sheenColorMap = source.sheenColorMap;
    		this.sheenRoughness = source.sheenRoughness;
    		this.sheenRoughnessMap = source.sheenRoughnessMap;

    		this.transmission = source.transmission;
    		this.transmissionMap = source.transmissionMap;

    		this.thickness = source.thickness;
    		this.thicknessMap = source.thicknessMap;
    		this.attenuationDistance = source.attenuationDistance;
    		this.attenuationColor.copy( source.attenuationColor );

    		this.specularIntensity = source.specularIntensity;
    		this.specularIntensityMap = source.specularIntensityMap;
    		this.specularColor.copy( source.specularColor );
    		this.specularColorMap = source.specularColorMap;

    		return this;

    	}

    }

    class MeshPhongMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isMeshPhongMaterial = true;

    		this.type = 'MeshPhongMaterial';

    		this.color = new Color( 0xffffff ); // diffuse
    		this.specular = new Color( 0x111111 );
    		this.shininess = 30;

    		this.map = null;

    		this.lightMap = null;
    		this.lightMapIntensity = 1.0;

    		this.aoMap = null;
    		this.aoMapIntensity = 1.0;

    		this.emissive = new Color( 0x000000 );
    		this.emissiveIntensity = 1.0;
    		this.emissiveMap = null;

    		this.bumpMap = null;
    		this.bumpScale = 1;

    		this.normalMap = null;
    		this.normalMapType = TangentSpaceNormalMap;
    		this.normalScale = new Vector2( 1, 1 );

    		this.displacementMap = null;
    		this.displacementScale = 1;
    		this.displacementBias = 0;

    		this.specularMap = null;

    		this.alphaMap = null;

    		this.envMap = null;
    		this.combine = MultiplyOperation;
    		this.reflectivity = 1;
    		this.refractionRatio = 0.98;

    		this.wireframe = false;
    		this.wireframeLinewidth = 1;
    		this.wireframeLinecap = 'round';
    		this.wireframeLinejoin = 'round';

    		this.flatShading = false;

    		this.fog = true;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.color.copy( source.color );
    		this.specular.copy( source.specular );
    		this.shininess = source.shininess;

    		this.map = source.map;

    		this.lightMap = source.lightMap;
    		this.lightMapIntensity = source.lightMapIntensity;

    		this.aoMap = source.aoMap;
    		this.aoMapIntensity = source.aoMapIntensity;

    		this.emissive.copy( source.emissive );
    		this.emissiveMap = source.emissiveMap;
    		this.emissiveIntensity = source.emissiveIntensity;

    		this.bumpMap = source.bumpMap;
    		this.bumpScale = source.bumpScale;

    		this.normalMap = source.normalMap;
    		this.normalMapType = source.normalMapType;
    		this.normalScale.copy( source.normalScale );

    		this.displacementMap = source.displacementMap;
    		this.displacementScale = source.displacementScale;
    		this.displacementBias = source.displacementBias;

    		this.specularMap = source.specularMap;

    		this.alphaMap = source.alphaMap;

    		this.envMap = source.envMap;
    		this.combine = source.combine;
    		this.reflectivity = source.reflectivity;
    		this.refractionRatio = source.refractionRatio;

    		this.wireframe = source.wireframe;
    		this.wireframeLinewidth = source.wireframeLinewidth;
    		this.wireframeLinecap = source.wireframeLinecap;
    		this.wireframeLinejoin = source.wireframeLinejoin;

    		this.flatShading = source.flatShading;

    		this.fog = source.fog;

    		return this;

    	}

    }

    class MeshToonMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isMeshToonMaterial = true;

    		this.defines = { 'TOON': '' };

    		this.type = 'MeshToonMaterial';

    		this.color = new Color( 0xffffff );

    		this.map = null;
    		this.gradientMap = null;

    		this.lightMap = null;
    		this.lightMapIntensity = 1.0;

    		this.aoMap = null;
    		this.aoMapIntensity = 1.0;

    		this.emissive = new Color( 0x000000 );
    		this.emissiveIntensity = 1.0;
    		this.emissiveMap = null;

    		this.bumpMap = null;
    		this.bumpScale = 1;

    		this.normalMap = null;
    		this.normalMapType = TangentSpaceNormalMap;
    		this.normalScale = new Vector2( 1, 1 );

    		this.displacementMap = null;
    		this.displacementScale = 1;
    		this.displacementBias = 0;

    		this.alphaMap = null;

    		this.wireframe = false;
    		this.wireframeLinewidth = 1;
    		this.wireframeLinecap = 'round';
    		this.wireframeLinejoin = 'round';

    		this.fog = true;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.color.copy( source.color );

    		this.map = source.map;
    		this.gradientMap = source.gradientMap;

    		this.lightMap = source.lightMap;
    		this.lightMapIntensity = source.lightMapIntensity;

    		this.aoMap = source.aoMap;
    		this.aoMapIntensity = source.aoMapIntensity;

    		this.emissive.copy( source.emissive );
    		this.emissiveMap = source.emissiveMap;
    		this.emissiveIntensity = source.emissiveIntensity;

    		this.bumpMap = source.bumpMap;
    		this.bumpScale = source.bumpScale;

    		this.normalMap = source.normalMap;
    		this.normalMapType = source.normalMapType;
    		this.normalScale.copy( source.normalScale );

    		this.displacementMap = source.displacementMap;
    		this.displacementScale = source.displacementScale;
    		this.displacementBias = source.displacementBias;

    		this.alphaMap = source.alphaMap;

    		this.wireframe = source.wireframe;
    		this.wireframeLinewidth = source.wireframeLinewidth;
    		this.wireframeLinecap = source.wireframeLinecap;
    		this.wireframeLinejoin = source.wireframeLinejoin;

    		this.fog = source.fog;

    		return this;

    	}

    }

    class MeshNormalMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isMeshNormalMaterial = true;

    		this.type = 'MeshNormalMaterial';

    		this.bumpMap = null;
    		this.bumpScale = 1;

    		this.normalMap = null;
    		this.normalMapType = TangentSpaceNormalMap;
    		this.normalScale = new Vector2( 1, 1 );

    		this.displacementMap = null;
    		this.displacementScale = 1;
    		this.displacementBias = 0;

    		this.wireframe = false;
    		this.wireframeLinewidth = 1;

    		this.flatShading = false;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.bumpMap = source.bumpMap;
    		this.bumpScale = source.bumpScale;

    		this.normalMap = source.normalMap;
    		this.normalMapType = source.normalMapType;
    		this.normalScale.copy( source.normalScale );

    		this.displacementMap = source.displacementMap;
    		this.displacementScale = source.displacementScale;
    		this.displacementBias = source.displacementBias;

    		this.wireframe = source.wireframe;
    		this.wireframeLinewidth = source.wireframeLinewidth;

    		this.flatShading = source.flatShading;

    		return this;

    	}

    }

    class MeshLambertMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isMeshLambertMaterial = true;

    		this.type = 'MeshLambertMaterial';

    		this.color = new Color( 0xffffff ); // diffuse

    		this.map = null;

    		this.lightMap = null;
    		this.lightMapIntensity = 1.0;

    		this.aoMap = null;
    		this.aoMapIntensity = 1.0;

    		this.emissive = new Color( 0x000000 );
    		this.emissiveIntensity = 1.0;
    		this.emissiveMap = null;

    		this.specularMap = null;

    		this.alphaMap = null;

    		this.envMap = null;
    		this.combine = MultiplyOperation;
    		this.reflectivity = 1;
    		this.refractionRatio = 0.98;

    		this.wireframe = false;
    		this.wireframeLinewidth = 1;
    		this.wireframeLinecap = 'round';
    		this.wireframeLinejoin = 'round';

    		this.fog = true;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.color.copy( source.color );

    		this.map = source.map;

    		this.lightMap = source.lightMap;
    		this.lightMapIntensity = source.lightMapIntensity;

    		this.aoMap = source.aoMap;
    		this.aoMapIntensity = source.aoMapIntensity;

    		this.emissive.copy( source.emissive );
    		this.emissiveMap = source.emissiveMap;
    		this.emissiveIntensity = source.emissiveIntensity;

    		this.specularMap = source.specularMap;

    		this.alphaMap = source.alphaMap;

    		this.envMap = source.envMap;
    		this.combine = source.combine;
    		this.reflectivity = source.reflectivity;
    		this.refractionRatio = source.refractionRatio;

    		this.wireframe = source.wireframe;
    		this.wireframeLinewidth = source.wireframeLinewidth;
    		this.wireframeLinecap = source.wireframeLinecap;
    		this.wireframeLinejoin = source.wireframeLinejoin;

    		this.fog = source.fog;

    		return this;

    	}

    }

    class MeshMatcapMaterial extends Material {

    	constructor( parameters ) {

    		super();

    		this.isMeshMatcapMaterial = true;

    		this.defines = { 'MATCAP': '' };

    		this.type = 'MeshMatcapMaterial';

    		this.color = new Color( 0xffffff ); // diffuse

    		this.matcap = null;

    		this.map = null;

    		this.bumpMap = null;
    		this.bumpScale = 1;

    		this.normalMap = null;
    		this.normalMapType = TangentSpaceNormalMap;
    		this.normalScale = new Vector2( 1, 1 );

    		this.displacementMap = null;
    		this.displacementScale = 1;
    		this.displacementBias = 0;

    		this.alphaMap = null;

    		this.flatShading = false;

    		this.fog = true;

    		this.setValues( parameters );

    	}


    	copy( source ) {

    		super.copy( source );

    		this.defines = { 'MATCAP': '' };

    		this.color.copy( source.color );

    		this.matcap = source.matcap;

    		this.map = source.map;

    		this.bumpMap = source.bumpMap;
    		this.bumpScale = source.bumpScale;

    		this.normalMap = source.normalMap;
    		this.normalMapType = source.normalMapType;
    		this.normalScale.copy( source.normalScale );

    		this.displacementMap = source.displacementMap;
    		this.displacementScale = source.displacementScale;
    		this.displacementBias = source.displacementBias;

    		this.alphaMap = source.alphaMap;

    		this.flatShading = source.flatShading;

    		this.fog = source.fog;

    		return this;

    	}

    }

    class LineDashedMaterial extends LineBasicMaterial {

    	constructor( parameters ) {

    		super();

    		this.isLineDashedMaterial = true;

    		this.type = 'LineDashedMaterial';

    		this.scale = 1;
    		this.dashSize = 3;
    		this.gapSize = 1;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.scale = source.scale;
    		this.dashSize = source.dashSize;
    		this.gapSize = source.gapSize;

    		return this;

    	}

    }

    const materialLib = {
    	ShadowMaterial,
    	SpriteMaterial,
    	RawShaderMaterial,
    	ShaderMaterial,
    	PointsMaterial,
    	MeshPhysicalMaterial,
    	MeshStandardMaterial,
    	MeshPhongMaterial,
    	MeshToonMaterial,
    	MeshNormalMaterial,
    	MeshLambertMaterial,
    	MeshDepthMaterial,
    	MeshDistanceMaterial,
    	MeshBasicMaterial,
    	MeshMatcapMaterial,
    	LineDashedMaterial,
    	LineBasicMaterial,
    	Material
    };

    Material.fromType = function ( type ) {

    	return new materialLib[ type ]();

    };

    // Characters [].:/ are reserved for track binding syntax.
    const _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';

    // Attempts to allow node names from any language. ES5's `\w` regexp matches
    // only latin characters, and the unicode \p{L} is not yet supported. So
    // instead, we exclude reserved characters and match everything else.
    const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
    const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';

    // Parent directories, delimited by '/' or ':'. Currently unused, but must
    // be matched to parse the rest of the track name.
    /((?:WC+[\/:])*)/.source.replace( 'WC', _wordChar );

    // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
    /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );

    // Object on target node, and accessor. May not contain reserved
    // characters. Accessor may contain any character except closing bracket.
    /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', _wordChar );

    // Property and accessor. May not contain reserved characters. Accessor may
    // contain any non-bracket characters.
    /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', _wordChar );

    class Raycaster {

    	constructor( origin, direction, near = 0, far = Infinity ) {

    		this.ray = new Ray( origin, direction );
    		// direction is assumed to be normalized (for accurate distance calculations)

    		this.near = near;
    		this.far = far;
    		this.camera = null;
    		this.layers = new Layers();

    		this.params = {
    			Mesh: {},
    			Line: { threshold: 1 },
    			LOD: {},
    			Points: { threshold: 1 },
    			Sprite: {}
    		};

    	}

    	set( origin, direction ) {

    		// direction is assumed to be normalized (for accurate distance calculations)

    		this.ray.set( origin, direction );

    	}

    	setFromCamera( coords, camera ) {

    		if ( camera.isPerspectiveCamera ) {

    			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
    			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
    			this.camera = camera;

    		} else if ( camera.isOrthographicCamera ) {

    			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
    			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
    			this.camera = camera;

    		} else {

    			console.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );

    		}

    	}

    	intersectObject( object, recursive = true, intersects = [] ) {

    		intersectObject( object, this, intersects, recursive );

    		intersects.sort( ascSort );

    		return intersects;

    	}

    	intersectObjects( objects, recursive = true, intersects = [] ) {

    		for ( let i = 0, l = objects.length; i < l; i ++ ) {

    			intersectObject( objects[ i ], this, intersects, recursive );

    		}

    		intersects.sort( ascSort );

    		return intersects;

    	}

    }

    function ascSort( a, b ) {

    	return a.distance - b.distance;

    }

    function intersectObject( object, raycaster, intersects, recursive ) {

    	if ( object.layers.test( raycaster.layers ) ) {

    		object.raycast( raycaster, intersects );

    	}

    	if ( recursive === true ) {

    		const children = object.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			intersectObject( children[ i ], raycaster, intersects, true );

    		}

    	}

    }

    /**
     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
     *
     * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
     * The azimuthal angle (theta) is measured from the positive z-axis.
     */

    class Spherical {

    	constructor( radius = 1, phi = 0, theta = 0 ) {

    		this.radius = radius;
    		this.phi = phi; // polar angle
    		this.theta = theta; // azimuthal angle

    		return this;

    	}

    	set( radius, phi, theta ) {

    		this.radius = radius;
    		this.phi = phi;
    		this.theta = theta;

    		return this;

    	}

    	copy( other ) {

    		this.radius = other.radius;
    		this.phi = other.phi;
    		this.theta = other.theta;

    		return this;

    	}

    	// restrict phi to be between EPS and PI-EPS
    	makeSafe() {

    		const EPS = 0.000001;
    		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

    		return this;

    	}

    	setFromVector3( v ) {

    		return this.setFromCartesianCoords( v.x, v.y, v.z );

    	}

    	setFromCartesianCoords( x, y, z ) {

    		this.radius = Math.sqrt( x * x + y * y + z * z );

    		if ( this.radius === 0 ) {

    			this.theta = 0;
    			this.phi = 0;

    		} else {

    			this.theta = Math.atan2( x, z );
    			this.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );

    		}

    		return this;

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    }

    class AxesHelper extends LineSegments {

    	constructor( size = 1 ) {

    		const vertices = [
    			0, 0, 0,	size, 0, 0,
    			0, 0, 0,	0, size, 0,
    			0, 0, 0,	0, 0, size
    		];

    		const colors = [
    			1, 0, 0,	1, 0.6, 0,
    			0, 1, 0,	0.6, 1, 0,
    			0, 0, 1,	0, 0.6, 1
    		];

    		const geometry = new BufferGeometry();
    		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

    		const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

    		super( geometry, material );

    		this.type = 'AxesHelper';

    	}

    	setColors( xAxisColor, yAxisColor, zAxisColor ) {

    		const color = new Color();
    		const array = this.geometry.attributes.color.array;

    		color.set( xAxisColor );
    		color.toArray( array, 0 );
    		color.toArray( array, 3 );

    		color.set( yAxisColor );
    		color.toArray( array, 6 );
    		color.toArray( array, 9 );

    		color.set( zAxisColor );
    		color.toArray( array, 12 );
    		color.toArray( array, 15 );

    		this.geometry.attributes.color.needsUpdate = true;

    		return this;

    	}

    	dispose() {

    		this.geometry.dispose();
    		this.material.dispose();

    	}

    }

    const _baseTable = new Uint32Array( 512 );
    const _shiftTable = new Uint32Array( 512 );

    for ( let i = 0; i < 256; ++ i ) {

    	const e = i - 127;

    	// very small number (0, -0)

    	if ( e < - 27 ) {

    		_baseTable[ i ] = 0x0000;
    		_baseTable[ i | 0x100 ] = 0x8000;
    		_shiftTable[ i ] = 24;
    		_shiftTable[ i | 0x100 ] = 24;

    		// small number (denorm)

    	} else if ( e < - 14 ) {

    		_baseTable[ i ] = 0x0400 >> ( - e - 14 );
    		_baseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;
    		_shiftTable[ i ] = - e - 1;
    		_shiftTable[ i | 0x100 ] = - e - 1;

    		// normal number

    	} else if ( e <= 15 ) {

    		_baseTable[ i ] = ( e + 15 ) << 10;
    		_baseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;
    		_shiftTable[ i ] = 13;
    		_shiftTable[ i | 0x100 ] = 13;

    		// large number (Infinity, -Infinity)

    	} else if ( e < 128 ) {

    		_baseTable[ i ] = 0x7c00;
    		_baseTable[ i | 0x100 ] = 0xfc00;
    		_shiftTable[ i ] = 24;
    		_shiftTable[ i | 0x100 ] = 24;

    		// stay (NaN, Infinity, -Infinity)

    	} else {

    		_baseTable[ i ] = 0x7c00;
    		_baseTable[ i | 0x100 ] = 0xfc00;
    		_shiftTable[ i ] = 13;
    		_shiftTable[ i | 0x100 ] = 13;

    	}

    }

    // float16 to float32 helpers

    const _mantissaTable = new Uint32Array( 2048 );
    const _exponentTable = new Uint32Array( 64 );
    const _offsetTable = new Uint32Array( 64 );

    for ( let i = 1; i < 1024; ++ i ) {

    	let m = i << 13; // zero pad mantissa bits
    	let e = 0; // zero exponent

    	// normalized
    	while ( ( m & 0x00800000 ) === 0 ) {

    		m <<= 1;
    		e -= 0x00800000; // decrement exponent

    	}

    	m &= ~ 0x00800000; // clear leading 1 bit
    	e += 0x38800000; // adjust bias

    	_mantissaTable[ i ] = m | e;

    }

    for ( let i = 1024; i < 2048; ++ i ) {

    	_mantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );

    }

    for ( let i = 1; i < 31; ++ i ) {

    	_exponentTable[ i ] = i << 23;

    }

    _exponentTable[ 31 ] = 0x47800000;
    _exponentTable[ 32 ] = 0x80000000;
    for ( let i = 33; i < 63; ++ i ) {

    	_exponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );

    }

    _exponentTable[ 63 ] = 0xc7800000;

    for ( let i = 1; i < 64; ++ i ) {

    	if ( i !== 32 ) {

    		_offsetTable[ i ] = 1024;

    	}

    }

    if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

    	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
    		revision: REVISION,
    	} } ) );

    }

    if ( typeof window !== 'undefined' ) {

    	if ( window.__THREE__ ) {

    		console.warn( 'WARNING: Multiple instances of Three.js being imported.' );

    	} else {

    		window.__THREE__ = REVISION;

    	}

    }

    var dist = createCommonjsModule(function (module) {
    var B=Object.defineProperty;var et=Object.getOwnPropertyDescriptor;var rt=Object.getOwnPropertyNames;var nt=Object.prototype.hasOwnProperty;var ot=t=>B(t,"__esModule",{value:!0}),e=(t,n)=>B(t,"name",{value:n,configurable:!0});var ut=(t,n)=>{for(var u in n)B(t,u,{get:n[u],enumerable:!0});},lt=(t,n,u,r)=>{if(n&&typeof n=="object"||typeof n=="function")for(let o of rt(n))!nt.call(t,o)&&(u||o!=="default")&&B(t,o,{get:()=>n[o],enumerable:!(r=et(n,o))||r.enumerable});return t};var mt=(t=>(n,u)=>t&&t.get(n)||(u=lt(ot({}),n,1),t&&t.set(n,u),u))(typeof WeakMap!="undefined"?new WeakMap:0);var ct={};ut(ct,{ColorResult:()=>g,ansi16:()=>j,ansi256:()=>J,apple:()=>Q,breakHex:()=>P,cmyk:()=>E,complement:()=>it,darken:()=>bt,desaturate:()=>ft,formatHex:()=>U,gray:()=>K,grayscale:()=>pt,hex:()=>q,hsl:()=>S,hsv:()=>L,hue:()=>y,hwb:()=>D,invert:()=>at,lab:()=>N,lch:()=>_,lighten:()=>v,mixColor:()=>xt,padHex:()=>w,random:()=>W,randomHex:()=>Y,rawHex:()=>T,rgb:()=>I,saturate:()=>z,xyz:()=>X});var k=e(t=>typeof t=="string"?A(t):t,"RGB"),G=e(t=>Math.floor(Math.random()*t),"RANDOM"),g=class{constructor(n){this.rgb=n;}get hex(){return F(this.rgb)}valueOf(){return this.hex}};e(g,"ColorResult");function T(t){if(t[0]=="#"&&(t=t.slice(1)),t.length>=6)return t.slice(0,6);if(t.length==3){let n="";for(let u=0;u<t.length;u++)n+=`${t[u]}${t[u]}`;return n}else return "000000"}e(T,"rawHex");function U(t){return `#${T(t)}`}e(U,"formatHex");function P(t){let n=parseInt(t,16);return [n>>16,n>>8&255,n&255]}e(P,"breakHex");function w(t){let n=Math.round(t).toString(16);return `${n.length==1?"0":""}${n}`}e(w,"padHex");function A(t){return P(T(t))}e(A,"hexToRgb");function F([t,n,u,r]){return `#${w(t)}${w(n)}${w(u)}${r?w(r*255):""}`}e(F,"rgbToHex");function W(){return [G(255),G(255),G(255)]}e(W,"random");function Y(){return `#${G(16777215).toString(16)}`}e(Y,"randomHex");function s(t){return parseFloat(t.toFixed(1))}e(s,"fixedFloat");var q;(o=>{o.HEX_MAX=16777215,o.toRgb=A;function u(m){let l=Math.min(m,o.HEX_MAX).toString(16);return `#${"0".repeat(6-l.length)}${l}`}o.fromInt=u,e(u,"fromInt");function r(m){return Math.min(parseInt(T(m),16),o.HEX_MAX)}o.toInt=r,e(r,"toInt");})(q||(q={}));var I;(d=>{d.toHex=F;function n([i,f,p]){i/=255,f/=255,p/=255;let b=Math.min(i,f,p),c=Math.max(i,f,p);if(b==c)return [0,0,s(b*100)];let R=c-b;return [M([i,f,p],c,b),s(100*R/c),s(100*c)]}d.toHsv=n,e(n,"toHsv");function u([i,f,p]){i/=255,f/=255,p/=255;let b=Math.min(i,f,p),c=Math.max(i,f,p),R=c-b,C=(c+b)/2,H=0,V=0;return c!=b&&(V=c==b?0:R/(C>.5?2-R:c+b),H=M([i,f,p],c,b)),[H,s(V*100),s(C*100)]}d.toHsl=u,e(u,"toHsl");function r([i,f,p]){let b=Math.min(i,f,p),c=Math.max(i,f,p);return [M([i,f,p],c,b),s(100/255*b),s(100*(1-1/255*c))]}d.toHwb=r,e(r,"toHwb");function o([i,f,p]){let b=1-i/255,c=1-f/255,R=1-p/255,C=Math.min(b,c,R),H=1-C,V=e(tt=>s((tt-C)/H*255)||0,"f");return [V(b),V(c),V(R),s(C*255)]}d.toCmyk=o,e(o,"toCmyk");function m([i,f,p],b=null){if(b=Math.round((typeof b=="number"?b:n([i,f,p])[2])/50),!b)return 30;let c=30+(Math.round(p/255)<<2|Math.round(f/255)<<1|Math.round(i/255));return b==2&&(c+=60),c}d.toAnsi16=m,e(m,"toAnsi16");function l([i,f,p]){return i>>4===f>>4&&f>>4===p>>4?i<8?16:i>248?231:Math.round((i-8)/247*24)+232:16+36*Math.round(i/255*5)+6*Math.round(f/255*5)+Math.round(p/255*5)}d.toAnsi256=l,e(l,"toAnsi256");function a([i,f,p]){let b=e(H=>(H/=255,H>.04045?((H+.055)/1.055)**2.4:H/12.92),"f");i=b(i),f=b(f),p=b(p);let c=i*.4124564+f*.3575761+p*.1804375,R=i*.2126729+f*.7151522+p*.072175,C=i*.0193339+f*.119192+p*.9503041;return [c*100,R*100,C*100]}d.toXyz=a,e(a,"toXyz");function x(i){return X.toLab(a(i))}d.toLab=x,e(x,"toLab");function M([i,f,p],b,c){(!c||!b)&&(b=Math.max(i,f,p),c=Math.min(i,f,p));let R=i==c,C=p==c,H=R?3:C?1:5,V=R?f-p:C?i-f:p-i;return s((H-V/(b-c))*60)||0}d.toHue=M,e(M,"toHue");function h([i,f,p]){return s((i+f+p)/765*100)}d.toGray=h,e(h,"toGray");function $(i){return i.map(f=>s(f/255*65535))}d.toApple=$,e($,"toApple");})(I||(I={}));var L;(r=>{function t([o,m,l]){m/=100,l/=100;let a=[0,0,0],x=Math.floor(o/60%6),M=o/60-x,h=l*(1-m),$=l*(1-M*m),d=l*(1-(1-M)*m);switch(x%6){case 0:a=[l,d,h];break;case 1:a=[$,l,h];break;case 2:a=[h,l,d];break;case 3:a=[h,$,l];break;case 4:a=[d,h,l];break;case 5:a=[l,h,$];break}return a.map(i=>s(i*255))}r.toRgb=t,e(t,"toRgb");function n(o){return F(t(o))}r.toHex=n,e(n,"toHex");function u([o,m,l]){m/=100,l/=100;let a=Math.max(.01,l),x=(2-m)*l,M=(2-m)*a,h=m*a/(M>1?2-M:M);return [o,s(h*100),s(x*50)]}r.toHsl=u,e(u,"toHsl");})(L||(L={}));var S;(r=>{function t([o,m,l]){m/=100,l/=100;let a=e(h=>(h+o/30)%12,"k"),x=m*Math.min(l,1-l),M=e(h=>s((l-x*Math.max(-1,Math.min(a(h)-3,Math.min(9-a(h),1))))*255),"f");return [M(0),M(8),M(4)]}r.toRgb=t,e(t,"toRgb");function n([o,m,l]){m/=100,l/=100;let a=Math.max(.01,l),x=m;l*=2,m*=l>1?2-l:l,x*=a>1?2-a:a;let M=l==0?x*2/(a+x):2*m/(l+m),h=(l+m)/2;return [o,s(M*100),s(h*100)]}r.toHsv=n,e(n,"toHsv");function u(o){return F(t(o))}r.toHex=u,e(u,"toHex");})(S||(S={}));var D;(n=>{function t([u,r,o]){return S.toRgb([u,100,50]).map(m=>m*(100-r-o)/100+r)}n.toRgb=t,e(t,"toRgb");})(D||(D={}));var E;(u=>{function t([r,o,m,l]){r/=100,o/=100,m/=100,l/=100;let a=1-l,x=e(M=>s((1-(M*a+l))*255),"f");return [x(r),x(o),x(m)]}u.toRgb=t,e(t,"toRgb");function n(r){return I.toCmyk(S.toRgb(r))}u.toHex=n,e(n,"toHex");})(E||(E={}));var X;(u=>{function t([r,o,m]){r/=100,o/=100,m/=100;let l=e(a=>(a=a>.0031308?1.055*a**(1/2.4)-.055:a*12.92,s(Math.min(Math.max(0,a),1)*255)),"f");return [l(r*3.2404542+o*-1.5371385+m*-.4985314),l(r*-.969266+o*1.8760108+m*.041556),l(r*.0556434+o*-.2040259+m*1.0572252)]}u.toRgb=t,e(t,"toRgb");function n([r,o,m]){let l=e(a=>a>.008856?a**(1/3):7.787*a+16/116,"f");return r=l(r/95.047),o=l(o/100),m=l(m/108.883),[116*o-16,500*(r-o),200*(o-m)]}u.toLab=n,e(n,"toLab");})(X||(X={}));var N;(r=>{function t(o){return X.toRgb(n(o))}r.toRgb=t,e(t,"toRgb");function n([o,m,l]){let a=(o+16)/116,x=m/500+a,M=a-l/200,h=e($=>{let d=$**3;return d>.008856?d:($-16/116)/7.787},"f");return [h(x)*95.047,h(a)*100,h(M)*108.883]}r.toXyz=n,e(n,"toXyz");function u([o,m,l]){let a=Math.atan2(l,m)*360/2/Math.PI;return a<0&&(a+=360),[o,Math.sqrt(m*m+l*l),a]}r.toLch=u,e(u,"toLch");})(N||(N={}));var _;(n=>{function t([u,r,o]){let m=o/360*2*Math.PI;return [u,r*Math.cos(m),r*Math.sin(m)]}n.toLab=t,e(t,"toLab");})(_||(_={}));var j;(n=>{function t(u){let r=u%10;if(r===0||r===7)return u>50&&(r+=3.5),r/=10.5*255,[r,r,r];let o=(~~(u>50)+1)*.5;return [s((r&1)*o*255),s((r>>1&1)*o*255),s((r>>2&1)*o*255)]}n.toRgb=t,e(t,"toRgb");})(j||(j={}));var J;(n=>{function t(u){if(u>=232){let o=(u-232)*10+8;return [o,o,o]}u-=16;let r=u%36;return [s(Math.floor(u/36)/5*255),s(Math.floor(r/6)/5*255),s(r%6/5*255)]}n.toRgb=t,e(t,"toRgb");})(J||(J={}));var K;(a=>{a.toHsl=e(x=>[0,0,x],"toHsl"),a.toHsv=e(x=>[0,0,x],"toHsv"),a.toHwb=e(x=>[0,100,x],"toHwb"),a.toCmyk=e(x=>[0,0,0,100-x],"toCmyk"),a.toLab=e(x=>[x,0,0],"toLab");function m(x){let M=s(x/100*255);return [M,M,M]}a.toRgb=m,e(m,"toRgb");function l(x){let M=Math.round(x/100*255)&255;return q.fromInt((M<<16)+(M<<8)+M)}a.toHex=l,e(l,"toHex");})(K||(K={}));var Q;(n=>{function t(u){return u.map(r=>s(r/65535*255))}n.toRgb=t,e(t,"toRgb");})(Q||(Q={}));function Z(t,n){let u=I.toHsv(typeof t=="string"?A(t):t);return n(u),new g(L.toRgb(u))}e(Z,"useHSV");function at(t){let[n,u,r]=k(t);return new g([255-n,255-u,255-r])}e(at,"invert");function y(t,n=30){return n>360&&(n%=360),Z(t,u=>u[0]+=n)}e(y,"hue");function it(t){return y(t,180)}e(it,"complement");function z(t,n=20){return Z(t,u=>{let r=u[1]+n;r>100?r=100:r<0&&(r=0),u[1]=r;})}e(z,"saturate");function ft(t,n=20){return z(t,-n)}e(ft,"desaturate");function pt(t){let[n,u,r]=k(t),o=Math.floor((n+u+r)/765*100);return new g([o,o,o])}e(pt,"grayscale");function xt(t,n,u=.5){let r=[0,0,0],o=k(t),m=k(n);for(let l=0;l<3;l++)r[l]=o[l]*u+m[l]*(1-u);return new g(r)}e(xt,"mixColor");function v(t,n=10){let u=k(t);n*=2.55;for(let r=0;r<3;r++)u[r]+=n,u[r]>255?u[r]=255:u[r]<0&&(u[r]=0);return new g(u)}e(v,"lighten");function bt(t,n=20){return v(t,-n)}e(bt,"darken");module.exports=mt(ct);});

    // This set of controls performs orbiting, dollying (zooming), and panning.
    // Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
    //
    //    Orbit - left mouse / touch: one-finger move
    //    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
    //    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move

    const _changeEvent = { type: 'change' };
    const _startEvent = { type: 'start' };
    const _endEvent = { type: 'end' };

    class OrbitControls extends EventDispatcher {

    	constructor( object, domElement ) {

    		super();

    		if ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter "domElement" is now mandatory.' );
    		if ( domElement === document ) console.error( 'THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.' );

    		this.object = object;
    		this.domElement = domElement;
    		this.domElement.style.touchAction = 'none'; // disable touch scroll

    		// Set to false to disable this control
    		this.enabled = true;

    		// "target" sets the location of focus, where the object orbits around
    		this.target = new Vector3();

    		// How far you can dolly in and out ( PerspectiveCamera only )
    		this.minDistance = 0;
    		this.maxDistance = Infinity;

    		// How far you can zoom in and out ( OrthographicCamera only )
    		this.minZoom = 0;
    		this.maxZoom = Infinity;

    		// How far you can orbit vertically, upper and lower limits.
    		// Range is 0 to Math.PI radians.
    		this.minPolarAngle = 0; // radians
    		this.maxPolarAngle = Math.PI; // radians

    		// How far you can orbit horizontally, upper and lower limits.
    		// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
    		this.minAzimuthAngle = - Infinity; // radians
    		this.maxAzimuthAngle = Infinity; // radians

    		// Set to true to enable damping (inertia)
    		// If damping is enabled, you must call controls.update() in your animation loop
    		this.enableDamping = false;
    		this.dampingFactor = 0.05;

    		// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
    		// Set to false to disable zooming
    		this.enableZoom = true;
    		this.zoomSpeed = 1.0;

    		// Set to false to disable rotating
    		this.enableRotate = true;
    		this.rotateSpeed = 1.0;

    		// Set to false to disable panning
    		this.enablePan = true;
    		this.panSpeed = 1.0;
    		this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up
    		this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

    		// Set to true to automatically rotate around the target
    		// If auto-rotate is enabled, you must call controls.update() in your animation loop
    		this.autoRotate = false;
    		this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60

    		// The four arrow keys
    		this.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };

    		// Mouse buttons
    		this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };

    		// Touch fingers
    		this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };

    		// for reset
    		this.target0 = this.target.clone();
    		this.position0 = this.object.position.clone();
    		this.zoom0 = this.object.zoom;

    		// the target DOM element for key events
    		this._domElementKeyEvents = null;

    		//
    		// public methods
    		//

    		this.getPolarAngle = function () {

    			return spherical.phi;

    		};

    		this.getAzimuthalAngle = function () {

    			return spherical.theta;

    		};

    		this.getDistance = function () {

    			return this.object.position.distanceTo( this.target );

    		};

    		this.listenToKeyEvents = function ( domElement ) {

    			domElement.addEventListener( 'keydown', onKeyDown );
    			this._domElementKeyEvents = domElement;

    		};

    		this.saveState = function () {

    			scope.target0.copy( scope.target );
    			scope.position0.copy( scope.object.position );
    			scope.zoom0 = scope.object.zoom;

    		};

    		this.reset = function () {

    			scope.target.copy( scope.target0 );
    			scope.object.position.copy( scope.position0 );
    			scope.object.zoom = scope.zoom0;

    			scope.object.updateProjectionMatrix();
    			scope.dispatchEvent( _changeEvent );

    			scope.update();

    			state = STATE.NONE;

    		};

    		// this method is exposed, but perhaps it would be better if we can make it private...
    		this.update = function () {

    			const offset = new Vector3();

    			// so camera.up is the orbit axis
    			const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );
    			const quatInverse = quat.clone().invert();

    			const lastPosition = new Vector3();
    			const lastQuaternion = new Quaternion();

    			const twoPI = 2 * Math.PI;

    			return function update() {

    				const position = scope.object.position;

    				offset.copy( position ).sub( scope.target );

    				// rotate offset to "y-axis-is-up" space
    				offset.applyQuaternion( quat );

    				// angle from z-axis around y-axis
    				spherical.setFromVector3( offset );

    				if ( scope.autoRotate && state === STATE.NONE ) {

    					rotateLeft( getAutoRotationAngle() );

    				}

    				if ( scope.enableDamping ) {

    					spherical.theta += sphericalDelta.theta * scope.dampingFactor;
    					spherical.phi += sphericalDelta.phi * scope.dampingFactor;

    				} else {

    					spherical.theta += sphericalDelta.theta;
    					spherical.phi += sphericalDelta.phi;

    				}

    				// restrict theta to be between desired limits

    				let min = scope.minAzimuthAngle;
    				let max = scope.maxAzimuthAngle;

    				if ( isFinite( min ) && isFinite( max ) ) {

    					if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;

    					if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;

    					if ( min <= max ) {

    						spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );

    					} else {

    						spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?
    							Math.max( min, spherical.theta ) :
    							Math.min( max, spherical.theta );

    					}

    				}

    				// restrict phi to be between desired limits
    				spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

    				spherical.makeSafe();


    				spherical.radius *= scale;

    				// restrict radius to be between desired limits
    				spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

    				// move target to panned location

    				if ( scope.enableDamping === true ) {

    					scope.target.addScaledVector( panOffset, scope.dampingFactor );

    				} else {

    					scope.target.add( panOffset );

    				}

    				offset.setFromSpherical( spherical );

    				// rotate offset back to "camera-up-vector-is-up" space
    				offset.applyQuaternion( quatInverse );

    				position.copy( scope.target ).add( offset );

    				scope.object.lookAt( scope.target );

    				if ( scope.enableDamping === true ) {

    					sphericalDelta.theta *= ( 1 - scope.dampingFactor );
    					sphericalDelta.phi *= ( 1 - scope.dampingFactor );

    					panOffset.multiplyScalar( 1 - scope.dampingFactor );

    				} else {

    					sphericalDelta.set( 0, 0, 0 );

    					panOffset.set( 0, 0, 0 );

    				}

    				scale = 1;

    				// update condition is:
    				// min(camera displacement, camera rotation in radians)^2 > EPS
    				// using small-angle approximation cos(x/2) = 1 - x^2 / 8

    				if ( zoomChanged ||
    					lastPosition.distanceToSquared( scope.object.position ) > EPS ||
    					8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

    					scope.dispatchEvent( _changeEvent );

    					lastPosition.copy( scope.object.position );
    					lastQuaternion.copy( scope.object.quaternion );
    					zoomChanged = false;

    					return true;

    				}

    				return false;

    			};

    		}();

    		this.dispose = function () {

    			scope.domElement.removeEventListener( 'contextmenu', onContextMenu );

    			scope.domElement.removeEventListener( 'pointerdown', onPointerDown );
    			scope.domElement.removeEventListener( 'pointercancel', onPointerCancel );
    			scope.domElement.removeEventListener( 'wheel', onMouseWheel );

    			scope.domElement.removeEventListener( 'pointermove', onPointerMove );
    			scope.domElement.removeEventListener( 'pointerup', onPointerUp );


    			if ( scope._domElementKeyEvents !== null ) {

    				scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );

    			}

    			//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

    		};

    		//
    		// internals
    		//

    		const scope = this;

    		const STATE = {
    			NONE: - 1,
    			ROTATE: 0,
    			DOLLY: 1,
    			PAN: 2,
    			TOUCH_ROTATE: 3,
    			TOUCH_PAN: 4,
    			TOUCH_DOLLY_PAN: 5,
    			TOUCH_DOLLY_ROTATE: 6
    		};

    		let state = STATE.NONE;

    		const EPS = 0.000001;

    		// current position in spherical coordinates
    		const spherical = new Spherical();
    		const sphericalDelta = new Spherical();

    		let scale = 1;
    		const panOffset = new Vector3();
    		let zoomChanged = false;

    		const rotateStart = new Vector2();
    		const rotateEnd = new Vector2();
    		const rotateDelta = new Vector2();

    		const panStart = new Vector2();
    		const panEnd = new Vector2();
    		const panDelta = new Vector2();

    		const dollyStart = new Vector2();
    		const dollyEnd = new Vector2();
    		const dollyDelta = new Vector2();

    		const pointers = [];
    		const pointerPositions = {};

    		function getAutoRotationAngle() {

    			return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

    		}

    		function getZoomScale() {

    			return Math.pow( 0.95, scope.zoomSpeed );

    		}

    		function rotateLeft( angle ) {

    			sphericalDelta.theta -= angle;

    		}

    		function rotateUp( angle ) {

    			sphericalDelta.phi -= angle;

    		}

    		const panLeft = function () {

    			const v = new Vector3();

    			return function panLeft( distance, objectMatrix ) {

    				v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
    				v.multiplyScalar( - distance );

    				panOffset.add( v );

    			};

    		}();

    		const panUp = function () {

    			const v = new Vector3();

    			return function panUp( distance, objectMatrix ) {

    				if ( scope.screenSpacePanning === true ) {

    					v.setFromMatrixColumn( objectMatrix, 1 );

    				} else {

    					v.setFromMatrixColumn( objectMatrix, 0 );
    					v.crossVectors( scope.object.up, v );

    				}

    				v.multiplyScalar( distance );

    				panOffset.add( v );

    			};

    		}();

    		// deltaX and deltaY are in pixels; right and down are positive
    		const pan = function () {

    			const offset = new Vector3();

    			return function pan( deltaX, deltaY ) {

    				const element = scope.domElement;

    				if ( scope.object.isPerspectiveCamera ) {

    					// perspective
    					const position = scope.object.position;
    					offset.copy( position ).sub( scope.target );
    					let targetDistance = offset.length();

    					// half of the fov is center to top of screen
    					targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

    					// we use only clientHeight here so aspect ratio does not distort speed
    					panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
    					panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

    				} else if ( scope.object.isOrthographicCamera ) {

    					// orthographic
    					panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
    					panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

    				} else {

    					// camera neither orthographic nor perspective
    					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
    					scope.enablePan = false;

    				}

    			};

    		}();

    		function dollyOut( dollyScale ) {

    			if ( scope.object.isPerspectiveCamera ) {

    				scale /= dollyScale;

    			} else if ( scope.object.isOrthographicCamera ) {

    				scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
    				scope.object.updateProjectionMatrix();
    				zoomChanged = true;

    			} else {

    				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
    				scope.enableZoom = false;

    			}

    		}

    		function dollyIn( dollyScale ) {

    			if ( scope.object.isPerspectiveCamera ) {

    				scale *= dollyScale;

    			} else if ( scope.object.isOrthographicCamera ) {

    				scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
    				scope.object.updateProjectionMatrix();
    				zoomChanged = true;

    			} else {

    				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
    				scope.enableZoom = false;

    			}

    		}

    		//
    		// event callbacks - update the object state
    		//

    		function handleMouseDownRotate( event ) {

    			rotateStart.set( event.clientX, event.clientY );

    		}

    		function handleMouseDownDolly( event ) {

    			dollyStart.set( event.clientX, event.clientY );

    		}

    		function handleMouseDownPan( event ) {

    			panStart.set( event.clientX, event.clientY );

    		}

    		function handleMouseMoveRotate( event ) {

    			rotateEnd.set( event.clientX, event.clientY );

    			rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );

    			const element = scope.domElement;

    			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

    			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );

    			rotateStart.copy( rotateEnd );

    			scope.update();

    		}

    		function handleMouseMoveDolly( event ) {

    			dollyEnd.set( event.clientX, event.clientY );

    			dollyDelta.subVectors( dollyEnd, dollyStart );

    			if ( dollyDelta.y > 0 ) {

    				dollyOut( getZoomScale() );

    			} else if ( dollyDelta.y < 0 ) {

    				dollyIn( getZoomScale() );

    			}

    			dollyStart.copy( dollyEnd );

    			scope.update();

    		}

    		function handleMouseMovePan( event ) {

    			panEnd.set( event.clientX, event.clientY );

    			panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );

    			pan( panDelta.x, panDelta.y );

    			panStart.copy( panEnd );

    			scope.update();

    		}

    		function handleMouseWheel( event ) {

    			if ( event.deltaY < 0 ) {

    				dollyIn( getZoomScale() );

    			} else if ( event.deltaY > 0 ) {

    				dollyOut( getZoomScale() );

    			}

    			scope.update();

    		}

    		function handleKeyDown( event ) {

    			let needsUpdate = false;

    			switch ( event.code ) {

    				case scope.keys.UP:
    					pan( 0, scope.keyPanSpeed );
    					needsUpdate = true;
    					break;

    				case scope.keys.BOTTOM:
    					pan( 0, - scope.keyPanSpeed );
    					needsUpdate = true;
    					break;

    				case scope.keys.LEFT:
    					pan( scope.keyPanSpeed, 0 );
    					needsUpdate = true;
    					break;

    				case scope.keys.RIGHT:
    					pan( - scope.keyPanSpeed, 0 );
    					needsUpdate = true;
    					break;

    			}

    			if ( needsUpdate ) {

    				// prevent the browser from scrolling on cursor keys
    				event.preventDefault();

    				scope.update();

    			}


    		}

    		function handleTouchStartRotate() {

    			if ( pointers.length === 1 ) {

    				rotateStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );

    			} else {

    				const x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );
    				const y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );

    				rotateStart.set( x, y );

    			}

    		}

    		function handleTouchStartPan() {

    			if ( pointers.length === 1 ) {

    				panStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );

    			} else {

    				const x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );
    				const y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );

    				panStart.set( x, y );

    			}

    		}

    		function handleTouchStartDolly() {

    			const dx = pointers[ 0 ].pageX - pointers[ 1 ].pageX;
    			const dy = pointers[ 0 ].pageY - pointers[ 1 ].pageY;

    			const distance = Math.sqrt( dx * dx + dy * dy );

    			dollyStart.set( 0, distance );

    		}

    		function handleTouchStartDollyPan() {

    			if ( scope.enableZoom ) handleTouchStartDolly();

    			if ( scope.enablePan ) handleTouchStartPan();

    		}

    		function handleTouchStartDollyRotate() {

    			if ( scope.enableZoom ) handleTouchStartDolly();

    			if ( scope.enableRotate ) handleTouchStartRotate();

    		}

    		function handleTouchMoveRotate( event ) {

    			if ( pointers.length == 1 ) {

    				rotateEnd.set( event.pageX, event.pageY );

    			} else {

    				const position = getSecondPointerPosition( event );

    				const x = 0.5 * ( event.pageX + position.x );
    				const y = 0.5 * ( event.pageY + position.y );

    				rotateEnd.set( x, y );

    			}

    			rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );

    			const element = scope.domElement;

    			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

    			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );

    			rotateStart.copy( rotateEnd );

    		}

    		function handleTouchMovePan( event ) {

    			if ( pointers.length === 1 ) {

    				panEnd.set( event.pageX, event.pageY );

    			} else {

    				const position = getSecondPointerPosition( event );

    				const x = 0.5 * ( event.pageX + position.x );
    				const y = 0.5 * ( event.pageY + position.y );

    				panEnd.set( x, y );

    			}

    			panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );

    			pan( panDelta.x, panDelta.y );

    			panStart.copy( panEnd );

    		}

    		function handleTouchMoveDolly( event ) {

    			const position = getSecondPointerPosition( event );

    			const dx = event.pageX - position.x;
    			const dy = event.pageY - position.y;

    			const distance = Math.sqrt( dx * dx + dy * dy );

    			dollyEnd.set( 0, distance );

    			dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );

    			dollyOut( dollyDelta.y );

    			dollyStart.copy( dollyEnd );

    		}

    		function handleTouchMoveDollyPan( event ) {

    			if ( scope.enableZoom ) handleTouchMoveDolly( event );

    			if ( scope.enablePan ) handleTouchMovePan( event );

    		}

    		function handleTouchMoveDollyRotate( event ) {

    			if ( scope.enableZoom ) handleTouchMoveDolly( event );

    			if ( scope.enableRotate ) handleTouchMoveRotate( event );

    		}

    		//
    		// event handlers - FSM: listen for events and reset state
    		//

    		function onPointerDown( event ) {

    			if ( scope.enabled === false ) return;

    			if ( pointers.length === 0 ) {

    				scope.domElement.setPointerCapture( event.pointerId );

    				scope.domElement.addEventListener( 'pointermove', onPointerMove );
    				scope.domElement.addEventListener( 'pointerup', onPointerUp );

    			}

    			//

    			addPointer( event );

    			if ( event.pointerType === 'touch' ) {

    				onTouchStart( event );

    			} else {

    				onMouseDown( event );

    			}

    		}

    		function onPointerMove( event ) {

    			if ( scope.enabled === false ) return;

    			if ( event.pointerType === 'touch' ) {

    				onTouchMove( event );

    			} else {

    				onMouseMove( event );

    			}

    		}

    		function onPointerUp( event ) {

    		    removePointer( event );

    		    if ( pointers.length === 0 ) {

    		        scope.domElement.releasePointerCapture( event.pointerId );

    		        scope.domElement.removeEventListener( 'pointermove', onPointerMove );
    		        scope.domElement.removeEventListener( 'pointerup', onPointerUp );

    		    }

    		    scope.dispatchEvent( _endEvent );

    		    state = STATE.NONE;

    		}

    		function onPointerCancel( event ) {

    			removePointer( event );

    		}

    		function onMouseDown( event ) {

    			let mouseAction;

    			switch ( event.button ) {

    				case 0:

    					mouseAction = scope.mouseButtons.LEFT;
    					break;

    				case 1:

    					mouseAction = scope.mouseButtons.MIDDLE;
    					break;

    				case 2:

    					mouseAction = scope.mouseButtons.RIGHT;
    					break;

    				default:

    					mouseAction = - 1;

    			}

    			switch ( mouseAction ) {

    				case MOUSE.DOLLY:

    					if ( scope.enableZoom === false ) return;

    					handleMouseDownDolly( event );

    					state = STATE.DOLLY;

    					break;

    				case MOUSE.ROTATE:

    					if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

    						if ( scope.enablePan === false ) return;

    						handleMouseDownPan( event );

    						state = STATE.PAN;

    					} else {

    						if ( scope.enableRotate === false ) return;

    						handleMouseDownRotate( event );

    						state = STATE.ROTATE;

    					}

    					break;

    				case MOUSE.PAN:

    					if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

    						if ( scope.enableRotate === false ) return;

    						handleMouseDownRotate( event );

    						state = STATE.ROTATE;

    					} else {

    						if ( scope.enablePan === false ) return;

    						handleMouseDownPan( event );

    						state = STATE.PAN;

    					}

    					break;

    				default:

    					state = STATE.NONE;

    			}

    			if ( state !== STATE.NONE ) {

    				scope.dispatchEvent( _startEvent );

    			}

    		}

    		function onMouseMove( event ) {

    			if ( scope.enabled === false ) return;

    			switch ( state ) {

    				case STATE.ROTATE:

    					if ( scope.enableRotate === false ) return;

    					handleMouseMoveRotate( event );

    					break;

    				case STATE.DOLLY:

    					if ( scope.enableZoom === false ) return;

    					handleMouseMoveDolly( event );

    					break;

    				case STATE.PAN:

    					if ( scope.enablePan === false ) return;

    					handleMouseMovePan( event );

    					break;

    			}

    		}

    		function onMouseWheel( event ) {

    			if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;

    			event.preventDefault();

    			scope.dispatchEvent( _startEvent );

    			handleMouseWheel( event );

    			scope.dispatchEvent( _endEvent );

    		}

    		function onKeyDown( event ) {

    			if ( scope.enabled === false || scope.enablePan === false ) return;

    			handleKeyDown( event );

    		}

    		function onTouchStart( event ) {

    			trackPointer( event );

    			switch ( pointers.length ) {

    				case 1:

    					switch ( scope.touches.ONE ) {

    						case TOUCH.ROTATE:

    							if ( scope.enableRotate === false ) return;

    							handleTouchStartRotate();

    							state = STATE.TOUCH_ROTATE;

    							break;

    						case TOUCH.PAN:

    							if ( scope.enablePan === false ) return;

    							handleTouchStartPan();

    							state = STATE.TOUCH_PAN;

    							break;

    						default:

    							state = STATE.NONE;

    					}

    					break;

    				case 2:

    					switch ( scope.touches.TWO ) {

    						case TOUCH.DOLLY_PAN:

    							if ( scope.enableZoom === false && scope.enablePan === false ) return;

    							handleTouchStartDollyPan();

    							state = STATE.TOUCH_DOLLY_PAN;

    							break;

    						case TOUCH.DOLLY_ROTATE:

    							if ( scope.enableZoom === false && scope.enableRotate === false ) return;

    							handleTouchStartDollyRotate();

    							state = STATE.TOUCH_DOLLY_ROTATE;

    							break;

    						default:

    							state = STATE.NONE;

    					}

    					break;

    				default:

    					state = STATE.NONE;

    			}

    			if ( state !== STATE.NONE ) {

    				scope.dispatchEvent( _startEvent );

    			}

    		}

    		function onTouchMove( event ) {

    			trackPointer( event );

    			switch ( state ) {

    				case STATE.TOUCH_ROTATE:

    					if ( scope.enableRotate === false ) return;

    					handleTouchMoveRotate( event );

    					scope.update();

    					break;

    				case STATE.TOUCH_PAN:

    					if ( scope.enablePan === false ) return;

    					handleTouchMovePan( event );

    					scope.update();

    					break;

    				case STATE.TOUCH_DOLLY_PAN:

    					if ( scope.enableZoom === false && scope.enablePan === false ) return;

    					handleTouchMoveDollyPan( event );

    					scope.update();

    					break;

    				case STATE.TOUCH_DOLLY_ROTATE:

    					if ( scope.enableZoom === false && scope.enableRotate === false ) return;

    					handleTouchMoveDollyRotate( event );

    					scope.update();

    					break;

    				default:

    					state = STATE.NONE;

    			}

    		}

    		function onContextMenu( event ) {

    			if ( scope.enabled === false ) return;

    			event.preventDefault();

    		}

    		function addPointer( event ) {

    			pointers.push( event );

    		}

    		function removePointer( event ) {

    			delete pointerPositions[ event.pointerId ];

    			for ( let i = 0; i < pointers.length; i ++ ) {

    				if ( pointers[ i ].pointerId == event.pointerId ) {

    					pointers.splice( i, 1 );
    					return;

    				}

    			}

    		}

    		function trackPointer( event ) {

    			let position = pointerPositions[ event.pointerId ];

    			if ( position === undefined ) {

    				position = new Vector2();
    				pointerPositions[ event.pointerId ] = position;

    			}

    			position.set( event.pageX, event.pageY );

    		}

    		function getSecondPointerPosition( event ) {

    			const pointer = ( event.pointerId === pointers[ 0 ].pointerId ) ? pointers[ 1 ] : pointers[ 0 ];

    			return pointerPositions[ pointer.pointerId ];

    		}

    		//

    		scope.domElement.addEventListener( 'contextmenu', onContextMenu );

    		scope.domElement.addEventListener( 'pointerdown', onPointerDown );
    		scope.domElement.addEventListener( 'pointercancel', onPointerCancel );
    		scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );

    		// force an update at start

    		this.update();

    	}

    }

    class CSS2DObject extends Object3D {

    	constructor( element = document.createElement( 'div' ) ) {

    		super();

    		this.isCSS2DObject = true;

    		this.element = element;

    		this.element.style.position = 'absolute';
    		this.element.style.userSelect = 'none';

    		this.element.setAttribute( 'draggable', false );

    		this.addEventListener( 'removed', function () {

    			this.traverse( function ( object ) {

    				if ( object.element instanceof Element && object.element.parentNode !== null ) {

    					object.element.parentNode.removeChild( object.element );

    				}

    			} );

    		} );

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		this.element = source.element.cloneNode( true );

    		return this;

    	}

    }

    //

    const _vector = new Vector3();
    const _viewMatrix = new Matrix4();
    const _viewProjectionMatrix = new Matrix4();
    const _a = new Vector3();
    const _b = new Vector3();

    class CSS2DRenderer {

    	constructor( parameters = {} ) {

    		const _this = this;

    		let _width, _height;
    		let _widthHalf, _heightHalf;

    		const cache = {
    			objects: new WeakMap()
    		};

    		const domElement = parameters.element !== undefined ? parameters.element : document.createElement( 'div' );

    		domElement.style.overflow = 'hidden';

    		this.domElement = domElement;

    		this.getSize = function () {

    			return {
    				width: _width,
    				height: _height
    			};

    		};

    		this.render = function ( scene, camera ) {

    			if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
    			if ( camera.parent === null ) camera.updateMatrixWorld();

    			_viewMatrix.copy( camera.matrixWorldInverse );
    			_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );

    			renderObject( scene, scene, camera );
    			zOrder( scene );

    		};

    		this.setSize = function ( width, height ) {

    			_width = width;
    			_height = height;

    			_widthHalf = _width / 2;
    			_heightHalf = _height / 2;

    			domElement.style.width = width + 'px';
    			domElement.style.height = height + 'px';

    		};

    		function renderObject( object, scene, camera ) {

    			if ( object.isCSS2DObject ) {

    				_vector.setFromMatrixPosition( object.matrixWorld );
    				_vector.applyMatrix4( _viewProjectionMatrix );

    				const visible = ( object.visible === true ) && ( _vector.z >= - 1 && _vector.z <= 1 ) && ( object.layers.test( camera.layers ) === true );
    				object.element.style.display = ( visible === true ) ? '' : 'none';

    				if ( visible === true ) {

    					object.onBeforeRender( _this, scene, camera );

    					const element = object.element;

    					element.style.transform = 'translate(-50%,-50%) translate(' + ( _vector.x * _widthHalf + _widthHalf ) + 'px,' + ( - _vector.y * _heightHalf + _heightHalf ) + 'px)';

    					if ( element.parentNode !== domElement ) {

    						domElement.appendChild( element );

    					}

    					object.onAfterRender( _this, scene, camera );

    				}

    				const objectData = {
    					distanceToCameraSquared: getDistanceToSquared( camera, object )
    				};

    				cache.objects.set( object, objectData );

    			}

    			for ( let i = 0, l = object.children.length; i < l; i ++ ) {

    				renderObject( object.children[ i ], scene, camera );

    			}

    		}

    		function getDistanceToSquared( object1, object2 ) {

    			_a.setFromMatrixPosition( object1.matrixWorld );
    			_b.setFromMatrixPosition( object2.matrixWorld );

    			return _a.distanceToSquared( _b );

    		}

    		function filterAndFlatten( scene ) {

    			const result = [];

    			scene.traverse( function ( object ) {

    				if ( object.isCSS2DObject ) result.push( object );

    			} );

    			return result;

    		}

    		function zOrder( scene ) {

    			const sorted = filterAndFlatten( scene ).sort( function ( a, b ) {

    				if ( a.renderOrder !== b.renderOrder ) {

    					return b.renderOrder - a.renderOrder;

    				}

    				const distanceA = cache.objects.get( a ).distanceToCameraSquared;
    				const distanceB = cache.objects.get( b ).distanceToCameraSquared;

    				return distanceA - distanceB;

    			} );

    			const zMax = sorted.length;

    			for ( let i = 0, l = sorted.length; i < l; i ++ ) {

    				sorted[ i ].element.style.zIndex = zMax - i;

    			}

    		}

    	}

    }

    const RADIANS90 = Math.PI * 0.5;
    const POINTER_GEOM = new SphereGeometry(.2);
    const POINTER_MAT = new MeshBasicMaterial({ color: 0x0 });
    const LINE_MAT = new LineBasicMaterial({ vertexColors: true });

    class Graph {

        compiled = { evaluate: () => {} };
        plotQueue = [];
        hoverPointObject = null;
        hoverPointFixed = false;
        heatMapIndices = [0, 0];
        curves = [];
        labels = [];
        axesHelper = null;
        settings = {};

        minX = -10;
        maxX = 10;
        minY = -10;
        maxY  = 10;
        minZ = -10;
        maxZ = 10;
        intervalY = 1;

        onHoverPoint = () => {};
        onGraphEnd = () => {};

        constructor (element) {
            this.scene = new Scene();
            this.scene.background = new Color(0xfafafa);

            this.camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            this.camera.position.set(-this.maxDiffXYZ / 2, this.maxDiffXYZ / 2, -(this.maxDiffXYZ + 20));
            this.scene.add(this.camera);

            this.raycaster = new Raycaster();
            this.mouse = new Vector2();

            this.renderer = new WebGLRenderer({ antialias: true, canvas: element });
            this.renderer.localClippingEnabled = true;
            this.renderer.setSize(window.innerWidth, window.innerHeight);

            this.labelRenderer = new CSS2DRenderer();
    		this.labelRenderer.setSize(window.innerWidth, window.innerHeight);
    		this.labelRenderer.domElement.style.position = 'absolute';
    		this.labelRenderer.domElement.style.top = '0px';
            this.labelRenderer.domElement.style.width = '100vw';
            this.labelRenderer.domElement.style.height = '100vh';
            this.labelRenderer.domElement.style.pointerEvents = 'none';
    		document.body.appendChild(this.labelRenderer.domElement);
            
            this.controls = new OrbitControls(this.camera, element);
            this.controls.target.set(this.maxX, this.minY, this.maxZ);
            this.controls.enableDamping = true;
            this.controls.dampingFactor = 0.25;
            this.controls.enableZoom = true;
            this.drawAxes = true;
            this.drawLabels = true;

            this.onResize();
            this.animate();

            element.addEventListener('mousemove', e => this.onHover(e), false);
            element.addEventListener('click', e => this.onHover(e, true));
        }

        get diffX () { return this.maxX - this.minX; }
        get diffY () { return this.maxY - this.minY; }
        get diffZ () { return this.maxZ - this.minZ; }
        get maxDiffXYZ () { return Math.max(this.diffX, this.diffY, this.diffZ); }
        get maxXYZ () { return Math.max(this.maxX, this.maxY, this.maxZ); }
        get drawAxes () { return this.settings.drawAxes; }
        get drawLabels () { return this.settings.drawLabels; }

        set drawAxes (x) {
            if (x && !this.settings.drawAxes) {
                let maxDiff = this.maxDiffXYZ;
        
                this.axesHelper = new AxesHelper(maxDiff);
                this.axesHelper.position.set(this.maxX, this.minY, this.maxZ);
                this.axesHelper.rotateY(-RADIANS90 * 2);
                this.axesHelper.setColors(0x0, 0x0, 0x0);
                this.axesHelper.geometry.attributes.position.setZ(5, this.diffZ);
                
                this.scene.add(this.axesHelper);
            } else if (!x && this.settings.drawAxes) {
                this.scene.remove(this.axesHelper);
                this.axesHelper.geometry.dispose();
            }

            this.settings.drawAxes = x;
        }

        set drawLabels (x) {
            if (x && !this.settings.drawLabels) {
                let round = a => parseFloat(a.toFixed(2));

                this.camera.layers.enable(1);
                this.drawLabel('Y', this.maxX, this.minY + this.diffY + 2, this.maxZ, 'strong');
                for (let i = 0; i <= this.diffY; i += 10) 
                    this.drawLabel(round(this.minY + i), this.maxX + 2, this.minY + i, this.maxZ + 2);

                this.drawLabel('U', this.maxX - (this.diffX + 2), this.minY, this.maxZ, 'strong');
                for (let i = 0; i <= this.diffX; i += 10) 
                    this.drawLabel(round(this.minX + i), this.minX + i, this.minY, this.maxZ + 2);

                this.drawLabel('X', this.maxX, this.minY, this.maxZ - (this.diffZ + 2), 'strong');
                for (let i = 0; i <= this.diffZ; i += 10) 
                    this.drawLabel(round(this.minZ + i), this.maxX + 2, this.minY, this.minZ + i);
            } else if (!x && this.settings.drawLabels) this.camera.layers.disable(1);

            this.settings.drawLabels = x;
        }

        onResize () {
            this.renderer.setSize(window.innerWidth, window.innerHeight);
            this.labelRenderer.setSize(window.innerWidth, window.innerHeight);
            this.camera.aspect = window.innerWidth / window.innerHeight;
            this.camera.updateProjectionMatrix();
        }

        onHover (event, isClick) {
            event.preventDefault();

            if (this.hoverPointFixed && !isClick) return;
            
            this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
            this.raycaster.setFromCamera(this.mouse, this.camera);
            this.scene.remove(this.hoverPointObject);
            
            let intersects = this.raycaster.intersectObject(this.scene, true);
            let intersected = intersects[0];

            if (intersects.length && intersected.object.name == 'curve') {
                let sphere = new Mesh(POINTER_GEOM, POINTER_MAT);
                sphere.position.set(intersected.point.x, intersected.point.y, intersected.point.z);
                this.hoverPointObject = sphere;
                this.scene.add(sphere);
                this.onHoverPoint(intersected.point);
                this.hoverPointFixed = isClick;
            } else if (isClick) this.hoverPointFixed = false;
        }

        drawLabel (txt, x, y, z, className) {
            let text = document.createElement('div');
    		text.className = 'label ' + className;
    		text.textContent = txt;

    		let object = new CSS2DObject(text);
            object.position.set(x, y, z);
            object.layers.set(1);
            object.name = 'label';
            
    	    this.scene.add(object);
            this.labels.push(object);
        }

        drawClippingPlanes () { 
            this.renderer.clippingPlanes = [
                new Plane(new Vector3(-1, 0, 0), this.maxX + .5), 
                new Plane(new Vector3(1, 0, 0), -this.minX + .5),
                new Plane(new Vector3(0, -1, 0), this.maxY + .5)
            ];
        }

        animate () {
            this.controls.update();
            requestAnimationFrame(this.animate.bind(this));
            this.renderer.render(this.scene, this.camera);
            this.labelRenderer.render(this.scene, this.camera);
        }

        plot (compiled) {
            this.compiled = compiled;

            let imaginaryValues = {},
                interval = this.intervalY,
                f = x => (typeof x == 'object') ? x : { re: x, im: 0 };

            for (let i = this.minY; i <= this.maxY; i += interval) {
                let points = [];
                imaginaryValues[i] = {};

                for (let r = this.minZ; r <= this.maxZ; r++) {
                    let x = new Complex({ re: r, im: i });
                    let { re: y1, im = 0 } = f(compiled.evaluate({ z: x, y: i, x: r }));
                    imaginaryValues[i][r] = im;

                    points.push(new Vector3(isNaN(y1) ? Infinity : y1, r, 0));
                }
            
                this.plotCurve(points, i, imaginaryValues);
            }

            let [min, max] = this.getImColorRange(imaginaryValues);
            let absMin = Math.abs(min);
            let diff = absMin + Math.abs(max);
            let getHeatMapColor = (diff == 0) 
                ? () => [0, 255, 0]
                : x => dist.hsl.toRgb([(1 - x) * 240, 100, 50]);

            for (let j = 0; j < this.plotQueue.length; j++) {
                let { curve, i } = this.plotQueue[j];
                let colors = [];

                for (let r = this.minZ; r <= this.maxZ; r++) {
                    let value = imaginaryValues[i][r];
                    colors.push(...getHeatMapColor((value + absMin) / diff));
                }

                curve.geometry.setAttribute('color', new BufferAttribute(new Uint8Array(colors), 3, true));
                this.curves.push(curve);
            }

            this.scene.add(...this.curves);
            this.heatMapIndices = [min, max];
            this.plotQueue = [];
            this.onGraphEnd();
        }

        plotCurve (points, i) {
            // points = new THREE.SplineCurve(points)
            //     .getPoints(30);
                
            let geometry = new BufferGeometry().setFromPoints(points);
            let curve = new Line(geometry, LINE_MAT).rotateX(3 * -RADIANS90);

            curve.position.y = i;
            curve.name = 'curve';

            this.plotQueue.push({ curve, i });
        }

        getHeatMapColor (value) {
            return dist.hsl.toRgb([(1 - value) * 240, 100, 50]);
        }

        getImColorRange (imv) {
            let min = 0,
                max = 0;

            for (const values of Object.values(imv)) {
                for (const x of Object.values(values)) {
                    if (x < min) min = x;
                    else if (x > max) max = x;
                }
            }

            return [min, max];
        }

        zoom (out) {
            let fov = Math.floor((2 * Math.atan(this.camera.getFilmHeight() / 2 / this.camera.getFocalLength()) * 180) / Math.PI);

            if (fov >= 20 && !out) this.camera.fov = fov - 5;
            else if (fov <= 175 && out) this.camera.fov = fov + 5;
            this.camera.updateProjectionMatrix();
        }

        clear () {
            this.drawAxes = this.drawLabels = false;
            this.curves.forEach(x => x.geometry.dispose());
            this.scene.remove(...this.curves, ...this.labels);
            this.curves = [];
            this.drawAxes = this.drawLabels = true;
        }

        resizeGraphSpace () {
            this.clear();
            this.plot(this.compiled);
            this.camera.position.set(-this.maxDiffXYZ / 2, this.maxDiffXYZ / 2, -(this.maxDiffXYZ + 20));
            this.controls.target.set(this.maxX, this.minY, this.maxZ);
            this.drawClippingPlanes();
        }

    }

    /* src\components\Main.svelte generated by Svelte v3.44.3 */

    const { window: window_1 } = globals;
    const file$1 = "src\\components\\Main.svelte";

    // (32:0) {#if sidebarOpen}
    function create_if_block(ctx) {
    	let sidebar;
    	let current;

    	sidebar = new Sidebar({
    			props: {
    				graph: /*graph*/ ctx[2],
    				hoverMarkerPosition: /*hoverMarkerPosition*/ ctx[3],
    				heatMapIndices: /*heatMapIndices*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(sidebar.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(sidebar, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const sidebar_changes = {};
    			if (dirty & /*graph*/ 4) sidebar_changes.graph = /*graph*/ ctx[2];
    			if (dirty & /*hoverMarkerPosition*/ 8) sidebar_changes.hoverMarkerPosition = /*hoverMarkerPosition*/ ctx[3];
    			if (dirty & /*heatMapIndices*/ 16) sidebar_changes.heatMapIndices = /*heatMapIndices*/ ctx[4];
    			sidebar.$set(sidebar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sidebar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sidebar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(sidebar, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(32:0) {#if sidebarOpen}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let t0;
    	let canvas;
    	let t1;
    	let a;
    	let svg;
    	let path;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*sidebarOpen*/ ctx[0] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t0 = space();
    			canvas = element("canvas");
    			t1 = space();
    			a = element("a");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(canvas, "class", "svelte-d4ogaa");
    			add_location(canvas, file$1, 35, 0, 948);
    			attr_dev(path, "d", "M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z");
    			add_location(path, file$1, 38, 203, 1272);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 448 512");
    			attr_dev(svg, "class", "svelte-d4ogaa");
    			add_location(svg, file$1, 38, 4, 1073);
    			attr_dev(a, "href", "#graph");
    			attr_dev(a, "class", "text-shadow svelte-d4ogaa");
    			add_location(a, file$1, 37, 0, 986);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, canvas, anchor);
    			/*canvas_binding*/ ctx[6](canvas);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, a, anchor);
    			append_dev(a, svg);
    			append_dev(svg, path);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window_1, "resize", /*resize_handler*/ ctx[5], false, false, false),
    					listen_dev(a, "click", /*click_handler*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*sidebarOpen*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*sidebarOpen*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t0.parentNode, t0);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(canvas);
    			/*canvas_binding*/ ctx[6](null);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);

    	let sidebarOpen = true,
    		graphElement = null,
    		graph = { range: 9 },
    		hoverMarkerPosition = { x: 0, y: graph.range, z: 0 },
    		heatMapIndices = [0, 0];

    	onMount(() => {
    		let eq = parse('z^2').compile();
    		$$invalidate(2, graph = new Graph(graphElement));
    		$$invalidate(2, graph.onHoverPoint = x => $$invalidate(3, hoverMarkerPosition = x), graph);

    		$$invalidate(
    			2,
    			graph.onGraphEnd = () => {
    				$$invalidate(4, heatMapIndices = graph.heatMapIndices);
    				graph.drawClippingPlanes();
    			},
    			graph
    		);

    		window.graph = graph;
    		graph.plot(eq);
    		$$invalidate(4, heatMapIndices = graph.heatMapIndices);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const resize_handler = () => graph?.onResize();

    	function canvas_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			graphElement = $$value;
    			$$invalidate(1, graphElement);
    		});
    	}

    	const click_handler = () => $$invalidate(0, sidebarOpen = !sidebarOpen);

    	$$self.$capture_state = () => ({
    		parse,
    		onMount,
    		Sidebar,
    		Graph,
    		sidebarOpen,
    		graphElement,
    		graph,
    		hoverMarkerPosition,
    		heatMapIndices
    	});

    	$$self.$inject_state = $$props => {
    		if ('sidebarOpen' in $$props) $$invalidate(0, sidebarOpen = $$props.sidebarOpen);
    		if ('graphElement' in $$props) $$invalidate(1, graphElement = $$props.graphElement);
    		if ('graph' in $$props) $$invalidate(2, graph = $$props.graph);
    		if ('hoverMarkerPosition' in $$props) $$invalidate(3, hoverMarkerPosition = $$props.hoverMarkerPosition);
    		if ('heatMapIndices' in $$props) $$invalidate(4, heatMapIndices = $$props.heatMapIndices);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		sidebarOpen,
    		graphElement,
    		graph,
    		hoverMarkerPosition,
    		heatMapIndices,
    		resize_handler,
    		canvas_binding,
    		click_handler
    	];
    }

    class Main extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src\App.svelte generated by Svelte v3.44.3 */
    const file = "src\\App.svelte";

    function create_fragment(ctx) {
    	let div;
    	let main;
    	let current;
    	main = new Main({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(main.$$.fragment);
    			attr_dev(div, "class", "main svelte-1sesw7b");
    			add_location(div, file, 5, 0, 108);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(main, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(main.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(main.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(main);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Main });
    	return [];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    var main = new App({ target: document.body });

    return main;

})();
